
HEARRATE_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117d4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08011918  08011918  00012918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013428  08013428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013430  08013430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013434  08013434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  20000008  08013438  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200001ec  0801361c  000151ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000224  08013651  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000171c  20000238  08013662  00015238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001954  08013662  00015954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08013662  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003d07a  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007dd7  00000000  00000000  00053b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003510  00000000  00000000  0005b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000287e  00000000  00000000  0005edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031dc8  00000000  00000000  00061676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003e829  00000000  00000000  0009343e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00110e49  00000000  00000000  000d1c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e2ab0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f080  00000000  00000000  001e2af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000059  00000000  00000000  001f1b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000238 	.word	0x20000238
 800015c:	00000000 	.word	0x00000000
 8000160:	080118fc 	.word	0x080118fc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000023c 	.word	0x2000023c
 800017c:	080118fc 	.word	0x080118fc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <IMU_get_ctx>:
                             uint16_t len);
void tx_com( uint8_t *tx_buffer, uint16_t len );
static void platform_delay(uint32_t ms);

stmdev_ctx_t IMU_get_ctx(void)
{
 8000e48:	b490      	push	{r4, r7}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <IMU_get_ctx+0x30>)
 8000e52:	60bb      	str	r3, [r7, #8]
	dev_ctx.read_reg = platform_read;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <IMU_get_ctx+0x34>)
 8000e56:	60fb      	str	r3, [r7, #12]
	dev_ctx.mdelay = platform_delay;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <IMU_get_ctx+0x38>)
 8000e5a:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = &SENSOR_BUS;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <IMU_get_ctx+0x3c>)
 8000e5e:	617b      	str	r3, [r7, #20]
	return dev_ctx;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	461c      	mov	r4, r3
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc90      	pop	{r4, r7}
 8000e76:	4770      	bx	lr
 8000e78:	08000ef9 	.word	0x08000ef9
 8000e7c:	08000f51 	.word	0x08000f51
 8000e80:	08000fdd 	.word	0x08000fdd
 8000e84:	200003bc 	.word	0x200003bc

08000e88 <IMU_init>:

void IMU_init(void)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	@ 0x2c
 8000e8c:	af00      	add	r7, sp, #0
	stmdev_ctx_t dev_ctx;
	lsm6dsv16b_reset_t rst;
	uint8_t whoamI;
	dev_ctx=IMU_get_ctx();
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffd9 	bl	8000e48 <IMU_get_ctx>
 8000e96:	f107 0418 	add.w	r4, r7, #24
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f000 f89a 	bl	8000fdc <platform_delay>

	  /* Check device ID */
	lsm6dsv16b_device_id_get(&dev_ctx, &whoamI);
 8000ea8:	f107 0216 	add.w	r2, r7, #22
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa1a 	bl	80012ec <lsm6dsv16b_device_id_get>

	if (whoamI != LSM6DSV16B_ID)
 8000eb8:	7dbb      	ldrb	r3, [r7, #22]
 8000eba:	2b71      	cmp	r3, #113	@ 0x71
 8000ebc:	d003      	beq.n	8000ec6 <IMU_init+0x3e>
	while (1)
	  {
	    printf("who am i is error!");
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <IMU_init+0x6c>)
 8000ec0:	f00e fb08 	bl	800f4d4 <iprintf>
 8000ec4:	e7fb      	b.n	8000ebe <IMU_init+0x36>
	  }

	  /* Restore default configuration */
	lsm6dsv16b_reset_set(&dev_ctx, LSM6DSV16B_RESTORE_CTRL_REGS);
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 f947 	bl	8001160 <lsm6dsv16b_reset_set>
	do {
	    lsm6dsv16b_reset_get(&dev_ctx, &rst);
 8000ed2:	f107 0217 	add.w	r2, r7, #23
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f98d 	bl	80011fc <lsm6dsv16b_reset_get>
	    } while (rst != LSM6DSV16B_READY);
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <IMU_init+0x4a>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	@ 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08011918 	.word	0x08011918

08000ef8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	461a      	mov	r2, r3
 8000f04:	460b      	mov	r3, r1
 8000f06:	72fb      	strb	r3, [r7, #11]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <platform_write+0x54>)
 8000f14:	f004 fe26 	bl	8005b64 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000f18:	f107 010b 	add.w	r1, r7, #11
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	2201      	movs	r2, #1
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f006 ffe9 	bl	8007efa <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8000f28:	893a      	ldrh	r2, [r7, #8]
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f006 ffe2 	bl	8007efa <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <platform_write+0x54>)
 8000f3e:	f004 fe11 	bl	8005b64 <HAL_GPIO_WritePin>

  return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000400 	.word	0x48000400

08000f50 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	72fb      	strb	r3, [r7, #11]
 8000f60:	4613      	mov	r3, r2
 8000f62:	813b      	strh	r3, [r7, #8]

  reg |= 0x80;
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f74:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <platform_read+0x60>)
 8000f76:	f004 fdf5 	bl	8005b64 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000f7a:	f107 010b 	add.w	r1, r7, #11
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	2201      	movs	r2, #1
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f006 ffb8 	bl	8007efa <HAL_SPI_Transmit>

  HAL_SPI_Receive(handle, bufp, len, 1000);
 8000f8a:	893a      	ldrh	r2, [r7, #8]
 8000f8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f007 f927 	bl	80081e6 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <platform_read+0x60>)
 8000fa0:	f004 fde0 	bl	8005b64 <HAL_GPIO_WritePin>

  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]

  HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <tx_com+0x24>)
 8000fca:	f007 ffa3 	bl	8008f14 <HAL_UART_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004e4 	.word	0x200004e4

08000fdc <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f001 fab7 	bl	8002558 <HAL_Delay>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <lsm6dsv16b_pedometer>:
#include"stdio.h"
#include"app_entry.h"


void lsm6dsv16b_pedometer(void)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b0a5      	sub	sp, #148	@ 0x94
 8000ff8:	af00      	add	r7, sp, #0
		uint32_t  step_count=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		stmdev_ctx_t dev_ctx;
		uint16_t period_val=155;//单位：lsb
 8001000:	239b      	movs	r3, #155	@ 0x9b
 8001002:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		uint8_t pedo_step_conf=20;
 8001006:	2314      	movs	r3, #20
 8001008:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
		IMU_init();
 800100c:	f7ff ff3c 	bl	8000e88 <IMU_init>
		dev_ctx=IMU_get_ctx();
 8001010:	463b      	mov	r3, r7
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff18 	bl	8000e48 <IMU_get_ctx>
 8001018:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 800101c:	463b      	mov	r3, r7
 800101e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    lsm6dsv16b_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001024:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f999 	bl	8001362 <lsm6dsv16b_block_data_update_set>
	    lsm6dsv16b_xl_full_scale_set(&dev_ctx, LSM6DSV16B_2g);
 8001030:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9b9 	bl	80013ae <lsm6dsv16b_xl_full_scale_set>
	    lsm6dsv16b_xl_data_rate_set(&dev_ctx, LSM6DSV16B_XL_ODR_AT_30Hz);
 800103c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001040:	2104      	movs	r1, #4
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f967 	bl	8001316 <lsm6dsv16b_xl_data_rate_set>

	    lsm6dsv16b_stpcnt_mode_t pedometer_mode = {
 8001048:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <lsm6dsv16b_pedometer+0xe8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
	        .false_step_rej = 1,
	        .step_counter_enable = 1
	    };
	    lsm6dsv16b_stpcnt_mode_set(&dev_ctx, pedometer_mode);
 8001050:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001054:	f897 1074 	ldrb.w	r1, [r7, #116]	@ 0x74
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fbc2 	bl	80017e2 <lsm6dsv16b_stpcnt_mode_set>
	    lsm6dsv16b_stpcnt_rst_step_set(&dev_ctx, 1);
 800105e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001062:	2101      	movs	r1, #1
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fc4b 	bl	8001900 <lsm6dsv16b_stpcnt_rst_step_set>
	    lsm6dsv16b_stpcnt_period_set(&dev_ctx,period_val );
 800106a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800106e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fc9b 	bl	80019b0 <lsm6dsv16b_stpcnt_period_set>
	    lsm6dsv16b_stpcnt_debounce_set(&dev_ctx, pedo_step_conf);
 800107a:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800107e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fc71 	bl	800196c <lsm6dsv16b_stpcnt_debounce_set>


	    while (1) {

	       if(lsm6dsv16b_stpcnt_steps_get(&dev_ctx, &step_count)!=0)
 800108a:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 800108e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fc04 	bl	80018a2 <lsm6dsv16b_stpcnt_steps_get>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <lsm6dsv16b_pedometer+0xb2>
	       {
	    	   printf("get steps error");
 80010a0:	480f      	ldr	r0, [pc, #60]	@ (80010e0 <lsm6dsv16b_pedometer+0xec>)
 80010a2:	f00e fa17 	bl	800f4d4 <iprintf>
	       }
	        uint8_t tx_buffer[100];
	        snprintf((char *)tx_buffer, sizeof(tx_buffer), "Steps: %lu\r\n", step_count);
 80010a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80010aa:	f107 0010 	add.w	r0, r7, #16
 80010ae:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <lsm6dsv16b_pedometer+0xf0>)
 80010b0:	2164      	movs	r1, #100	@ 0x64
 80010b2:	f00e fa87 	bl	800f5c4 <sniprintf>
	        tx_com(tx_buffer, strlen((char const *)tx_buffer));
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f8b0 	bl	8000220 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff72 	bl	8000fb4 <tx_com>

	        dev_ctx.mdelay(1000);
 80010d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d8:	4798      	blx	r3
	    while (1) {
 80010da:	e7d6      	b.n	800108a <lsm6dsv16b_pedometer+0x96>
 80010dc:	080119ac 	.word	0x080119ac
 80010e0:	0801198c 	.word	0x0801198c
 80010e4:	0801199c 	.word	0x0801199c

080010e8 <lsm6dsv16b_read_reg>:
  *
  */
int32_t __weak lsm6dsv16b_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	461a      	mov	r2, r3
 80010f4:	460b      	mov	r3, r1
 80010f6:	72fb      	strb	r3, [r7, #11]
 80010f8:	4613      	mov	r3, r2
 80010fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <lsm6dsv16b_read_reg+0x20>
  {
    return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e009      	b.n	800111c <lsm6dsv16b_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685c      	ldr	r4, [r3, #4]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	68d8      	ldr	r0, [r3, #12]
 8001110:	893b      	ldrh	r3, [r7, #8]
 8001112:	7af9      	ldrb	r1, [r7, #11]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	47a0      	blx	r4
 8001118:	6178      	str	r0, [r7, #20]

  return ret;
 800111a:	697b      	ldr	r3, [r7, #20]
}
 800111c:	4618      	mov	r0, r3
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <lsm6dsv16b_write_reg>:
  *
  */
int32_t __weak lsm6dsv16b_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b087      	sub	sp, #28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	461a      	mov	r2, r3
 8001130:	460b      	mov	r3, r1
 8001132:	72fb      	strb	r3, [r7, #11]
 8001134:	4613      	mov	r3, r2
 8001136:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <lsm6dsv16b_write_reg+0x20>
  {
    return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e009      	b.n	8001158 <lsm6dsv16b_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681c      	ldr	r4, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68d8      	ldr	r0, [r3, #12]
 800114c:	893b      	ldrh	r3, [r7, #8]
 800114e:	7af9      	ldrb	r1, [r7, #11]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	47a0      	blx	r4
 8001154:	6178      	str	r0, [r7, #20]

  return ret;
 8001156:	697b      	ldr	r3, [r7, #20]
}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <lsm6dsv16b_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_reset_set(const stmdev_ctx_t *ctx, lsm6dsv16b_reset_t val)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_func_cfg_access_t func_cfg_access;
  lsm6dsv16b_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 800116c:	f107 020c 	add.w	r2, r7, #12
 8001170:	2301      	movs	r3, #1
 8001172:	2112      	movs	r1, #18
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffb7 	bl	80010e8 <lsm6dsv16b_read_reg>
 800117a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d107      	bne.n	8001192 <lsm6dsv16b_reset_set+0x32>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001182:	f107 0210 	add.w	r2, r7, #16
 8001186:	2301      	movs	r3, #1
 8001188:	2101      	movs	r1, #1
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ffac 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001190:	6178      	str	r0, [r7, #20]
  }

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	b2da      	uxtb	r2, r3
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	f362 13c7 	bfi	r3, r2, #7, #1
 80011a2:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	085b      	lsrs	r3, r3, #1
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	7b3b      	ldrb	r3, [r7, #12]
 80011b0:	f362 0300 	bfi	r3, r2, #0, #1
 80011b4:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	7c3b      	ldrb	r3, [r7, #16]
 80011c0:	f362 0382 	bfi	r3, r2, #2, #1
 80011c4:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d107      	bne.n	80011dc <lsm6dsv16b_reset_set+0x7c>
  {
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 80011cc:	f107 020c 	add.w	r2, r7, #12
 80011d0:	2301      	movs	r3, #1
 80011d2:	2112      	movs	r1, #18
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffa5 	bl	8001124 <lsm6dsv16b_write_reg>
 80011da:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <lsm6dsv16b_reset_set+0x92>
  {
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80011e2:	f107 0210 	add.w	r2, r7, #16
 80011e6:	2301      	movs	r3, #1
 80011e8:	2101      	movs	r1, #1
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff9a 	bl	8001124 <lsm6dsv16b_write_reg>
 80011f0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80011f2:	697b      	ldr	r3, [r7, #20]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <lsm6dsv16b_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_reset_get(const stmdev_ctx_t *ctx, lsm6dsv16b_reset_t *val)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  lsm6dsv16b_func_cfg_access_t func_cfg_access;
  lsm6dsv16b_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 8001206:	f107 020c 	add.w	r2, r7, #12
 800120a:	2301      	movs	r3, #1
 800120c:	2112      	movs	r1, #18
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff6a 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001214:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <lsm6dsv16b_reset_get+0x30>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	2301      	movs	r3, #1
 8001222:	2101      	movs	r1, #1
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff5f 	bl	80010e8 <lsm6dsv16b_read_reg>
 800122a:	6178      	str	r0, [r7, #20]
  }

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 800122c:	7b3b      	ldrb	r3, [r7, #12]
 800122e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	009a      	lsls	r2, r3, #2
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	7c3a      	ldrb	r2, [r7, #16]
 8001244:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	4413      	add	r3, r2
 800124c:	2b04      	cmp	r3, #4
 800124e:	d81d      	bhi.n	800128c <lsm6dsv16b_reset_get+0x90>
 8001250:	a201      	add	r2, pc, #4	@ (adr r2, 8001258 <lsm6dsv16b_reset_get+0x5c>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	0800126d 	.word	0x0800126d
 800125c:	08001275 	.word	0x08001275
 8001260:	0800127d 	.word	0x0800127d
 8001264:	0800128d 	.word	0x0800128d
 8001268:	08001285 	.word	0x08001285
  {
    case LSM6DSV16B_READY:
      *val = LSM6DSV16B_READY;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
      break;
 8001272:	e00f      	b.n	8001294 <lsm6dsv16b_reset_get+0x98>

    case LSM6DSV16B_GLOBAL_RST:
      *val = LSM6DSV16B_GLOBAL_RST;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2201      	movs	r2, #1
 8001278:	701a      	strb	r2, [r3, #0]
      break;
 800127a:	e00b      	b.n	8001294 <lsm6dsv16b_reset_get+0x98>

    case LSM6DSV16B_RESTORE_CAL_PARAM:
      *val = LSM6DSV16B_RESTORE_CAL_PARAM;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
      break;
 8001282:	e007      	b.n	8001294 <lsm6dsv16b_reset_get+0x98>

    case LSM6DSV16B_RESTORE_CTRL_REGS:
      *val = LSM6DSV16B_RESTORE_CTRL_REGS;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2204      	movs	r2, #4
 8001288:	701a      	strb	r2, [r3, #0]
      break;
 800128a:	e003      	b.n	8001294 <lsm6dsv16b_reset_get+0x98>

    default:
      *val = LSM6DSV16B_GLOBAL_RST;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
      break;
 8001292:	bf00      	nop
  }
  return ret;
 8001294:	697b      	ldr	r3, [r7, #20]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop

080012a0 <lsm6dsv16b_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16b_mem_bank_t val)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	2301      	movs	r3, #1
 80012b2:	2101      	movs	r1, #1
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff17 	bl	80010e8 <lsm6dsv16b_read_reg>
 80012ba:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <lsm6dsv16b_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	7a3b      	ldrb	r3, [r7, #8]
 80012cc:	f362 13c7 	bfi	r3, r2, #7, #1
 80012d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	2301      	movs	r3, #1
 80012d8:	2101      	movs	r1, #1
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ff22 	bl	8001124 <lsm6dsv16b_write_reg>
 80012e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <lsm6dsv16b_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  lsm6dsv16b_who_am_i_t who_am_i;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_WHO_AM_I, (uint8_t *)&who_am_i, 1);
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	2301      	movs	r3, #1
 80012fc:	210f      	movs	r1, #15
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fef2 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001304:	60f8      	str	r0, [r7, #12]
  *val = who_am_i.id;
 8001306:	7a3a      	ldrb	r2, [r7, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	701a      	strb	r2, [r3, #0]

  return ret;
 800130c:	68fb      	ldr	r3, [r7, #12]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <lsm6dsv16b_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16b_xl_data_rate_t val)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL1, (uint8_t *)&ctrl1, 1);
 8001322:	f107 0208 	add.w	r2, r7, #8
 8001326:	2301      	movs	r3, #1
 8001328:	2110      	movs	r1, #16
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fedc 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001330:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10f      	bne.n	8001358 <lsm6dsv16b_xl_data_rate_set+0x42>
  {
    ctrl1.odr_xl = (uint8_t)val & 0xFU;
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	b2da      	uxtb	r2, r3
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	f362 0303 	bfi	r3, r2, #0, #4
 8001346:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL1, (uint8_t *)&ctrl1, 1);
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	2301      	movs	r3, #1
 800134e:	2110      	movs	r1, #16
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fee7 	bl	8001124 <lsm6dsv16b_write_reg>
 8001356:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001358:	68fb      	ldr	r3, [r7, #12]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <lsm6dsv16b_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 800136e:	f107 0208 	add.w	r2, r7, #8
 8001372:	2301      	movs	r3, #1
 8001374:	2112      	movs	r1, #18
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff feb6 	bl	80010e8 <lsm6dsv16b_read_reg>
 800137c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <lsm6dsv16b_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	7a3b      	ldrb	r3, [r7, #8]
 800138e:	f362 1386 	bfi	r3, r2, #6, #1
 8001392:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	2301      	movs	r3, #1
 800139a:	2112      	movs	r1, #18
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fec1 	bl	8001124 <lsm6dsv16b_write_reg>
 80013a2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013a4:	68fb      	ldr	r3, [r7, #12]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <lsm6dsv16b_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16b_xl_full_scale_t val)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b084      	sub	sp, #16
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL8, (uint8_t *)&ctrl8, 1);
 80013ba:	f107 0208 	add.w	r2, r7, #8
 80013be:	2301      	movs	r3, #1
 80013c0:	2117      	movs	r1, #23
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fe90 	bl	80010e8 <lsm6dsv16b_read_reg>
 80013c8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10f      	bne.n	80013f0 <lsm6dsv16b_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7a3b      	ldrb	r3, [r7, #8]
 80013da:	f362 0301 	bfi	r3, r2, #0, #2
 80013de:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL8, (uint8_t *)&ctrl8, 1);
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	2301      	movs	r3, #1
 80013e6:	2117      	movs	r1, #23
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fe9b 	bl	8001124 <lsm6dsv16b_write_reg>
 80013ee:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013f0:	68fb      	ldr	r3, [r7, #12]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <lsm6dsv16b_ln_pg_write>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_ln_pg_write(const stmdev_ctx_t *ctx, uint16_t address,
                               uint8_t *buf, uint8_t len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b08a      	sub	sp, #40	@ 0x28
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	461a      	mov	r2, r3
 8001406:	460b      	mov	r3, r1
 8001408:	817b      	strh	r3, [r7, #10]
 800140a:	4613      	mov	r3, r2
 800140c:	727b      	strb	r3, [r7, #9]
  uint8_t msb;
  uint8_t lsb;
  int32_t ret;
  uint8_t i ;

  msb = ((uint8_t)(address >> 8) & 0x0FU);
 800140e:	897b      	ldrh	r3, [r7, #10]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  lsb = (uint8_t)address & 0xFFU;
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 8001424:	2101      	movs	r1, #1
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f7ff ff3a 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 800142c:	6238      	str	r0, [r7, #32]

  /* set page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 800142e:	f107 0214 	add.w	r2, r7, #20
 8001432:	2301      	movs	r3, #1
 8001434:	2117      	movs	r1, #23
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff fe56 	bl	80010e8 <lsm6dsv16b_read_reg>
 800143c:	4602      	mov	r2, r0
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	4413      	add	r3, r2
 8001442:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_DISABLE;
 8001444:	7d3b      	ldrb	r3, [r7, #20]
 8001446:	f36f 1345 	bfc	r3, #5, #1
 800144a:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_ENABLE;
 800144c:	7d3b      	ldrb	r3, [r7, #20]
 800144e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001452:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001454:	f107 0214 	add.w	r2, r7, #20
 8001458:	2301      	movs	r3, #1
 800145a:	2117      	movs	r1, #23
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fe61 	bl	8001124 <lsm6dsv16b_write_reg>
 8001462:	4602      	mov	r2, r0
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	4413      	add	r3, r2
 8001468:	623b      	str	r3, [r7, #32]

  /* select page */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 800146a:	f107 0218 	add.w	r2, r7, #24
 800146e:	2301      	movs	r3, #1
 8001470:	2102      	movs	r1, #2
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fe38 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001478:	4602      	mov	r2, r0
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	4413      	add	r3, r2
 800147e:	623b      	str	r3, [r7, #32]
  page_sel.page_sel = msb;
 8001480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	b2da      	uxtb	r2, r3
 800148a:	7e3b      	ldrb	r3, [r7, #24]
 800148c:	f362 1307 	bfi	r3, r2, #4, #4
 8001490:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1; // Default value
 8001492:	7e3b      	ldrb	r3, [r7, #24]
 8001494:	2201      	movs	r2, #1
 8001496:	f362 0303 	bfi	r3, r2, #0, #4
 800149a:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 800149c:	f107 0218 	add.w	r2, r7, #24
 80014a0:	2301      	movs	r3, #1
 80014a2:	2102      	movs	r1, #2
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff fe3d 	bl	8001124 <lsm6dsv16b_write_reg>
 80014aa:	4602      	mov	r2, r0
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	4413      	add	r3, r2
 80014b0:	623b      	str	r3, [r7, #32]
                              1);

  /* set page addr */
  page_address.page_addr = lsb;
 80014b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014b6:	773b      	strb	r3, [r7, #28]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_ADDRESS,
 80014b8:	f107 021c 	add.w	r2, r7, #28
 80014bc:	2301      	movs	r3, #1
 80014be:	2108      	movs	r1, #8
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fe2f 	bl	8001124 <lsm6dsv16b_write_reg>
 80014c6:	4602      	mov	r2, r0
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	4413      	add	r3, r2
 80014cc:	623b      	str	r3, [r7, #32]
                              (uint8_t *)&page_address, 1);

  for (i = 0; ((i < len) && (ret == 0)); i++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	77fb      	strb	r3, [r7, #31]
 80014d2:	e046      	b.n	8001562 <lsm6dsv16b_ln_pg_write+0x168>
  {
    ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_VALUE, &buf[i], 1);
 80014d4:	7ffb      	ldrb	r3, [r7, #31]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	441a      	add	r2, r3
 80014da:	2301      	movs	r3, #1
 80014dc:	2109      	movs	r1, #9
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f7ff fe20 	bl	8001124 <lsm6dsv16b_write_reg>
 80014e4:	4602      	mov	r2, r0
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	4413      	add	r3, r2
 80014ea:	623b      	str	r3, [r7, #32]
    lsb++;
 80014ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014f0:	3301      	adds	r3, #1
 80014f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Check if page wrap */
    if (((lsb & 0xFFU) == 0x00U) && (ret == 0))
 80014f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d12e      	bne.n	800155c <lsm6dsv16b_ln_pg_write+0x162>
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12b      	bne.n	800155c <lsm6dsv16b_ln_pg_write+0x162>
    {
      msb++;
 8001504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001508:	3301      	adds	r3, #1
 800150a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 800150e:	f107 0218 	add.w	r2, r7, #24
 8001512:	2301      	movs	r3, #1
 8001514:	2102      	movs	r1, #2
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7ff fde6 	bl	80010e8 <lsm6dsv16b_read_reg>
 800151c:	4602      	mov	r2, r0
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	4413      	add	r3, r2
 8001522:	623b      	str	r3, [r7, #32]

      if (ret == 0)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <lsm6dsv16b_ln_pg_write+0x162>
      {
        page_sel.page_sel = msb;
 800152a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	b2da      	uxtb	r2, r3
 8001534:	7e3b      	ldrb	r3, [r7, #24]
 8001536:	f362 1307 	bfi	r3, r2, #4, #4
 800153a:	763b      	strb	r3, [r7, #24]
        page_sel.not_used0 = 1; // Default value
 800153c:	7e3b      	ldrb	r3, [r7, #24]
 800153e:	2201      	movs	r2, #1
 8001540:	f362 0303 	bfi	r3, r2, #0, #4
 8001544:	763b      	strb	r3, [r7, #24]
        ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001546:	f107 0218 	add.w	r2, r7, #24
 800154a:	2301      	movs	r3, #1
 800154c:	2102      	movs	r1, #2
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff fde8 	bl	8001124 <lsm6dsv16b_write_reg>
 8001554:	4602      	mov	r2, r0
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	4413      	add	r3, r2
 800155a:	623b      	str	r3, [r7, #32]
  for (i = 0; ((i < len) && (ret == 0)); i++)
 800155c:	7ffb      	ldrb	r3, [r7, #31]
 800155e:	3301      	adds	r3, #1
 8001560:	77fb      	strb	r3, [r7, #31]
 8001562:	7ffa      	ldrb	r2, [r7, #31]
 8001564:	7a7b      	ldrb	r3, [r7, #9]
 8001566:	429a      	cmp	r2, r3
 8001568:	d202      	bcs.n	8001570 <lsm6dsv16b_ln_pg_write+0x176>
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0b1      	beq.n	80014d4 <lsm6dsv16b_ln_pg_write+0xda>
                                    1);
      }
    }
  }

  page_sel.page_sel = 0;
 8001570:	7e3b      	ldrb	r3, [r7, #24]
 8001572:	f36f 1307 	bfc	r3, #4, #4
 8001576:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1;// Default value
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	2201      	movs	r2, #1
 800157c:	f362 0303 	bfi	r3, r2, #0, #4
 8001580:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001582:	f107 0218 	add.w	r2, r7, #24
 8001586:	2301      	movs	r3, #1
 8001588:	2102      	movs	r1, #2
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff fdca 	bl	8001124 <lsm6dsv16b_write_reg>
 8001590:	4602      	mov	r2, r0
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	4413      	add	r3, r2
 8001596:	623b      	str	r3, [r7, #32]
                              1);

  /* unset page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001598:	f107 0214 	add.w	r2, r7, #20
 800159c:	2301      	movs	r3, #1
 800159e:	2117      	movs	r1, #23
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff fda1 	bl	80010e8 <lsm6dsv16b_read_reg>
 80015a6:	4602      	mov	r2, r0
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	4413      	add	r3, r2
 80015ac:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_DISABLE;
 80015ae:	7d3b      	ldrb	r3, [r7, #20]
 80015b0:	f36f 1345 	bfc	r3, #5, #1
 80015b4:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_DISABLE;
 80015b6:	7d3b      	ldrb	r3, [r7, #20]
 80015b8:	f36f 1386 	bfc	r3, #6, #1
 80015bc:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 80015be:	f107 0214 	add.w	r2, r7, #20
 80015c2:	2301      	movs	r3, #1
 80015c4:	2117      	movs	r1, #23
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff fdac 	bl	8001124 <lsm6dsv16b_write_reg>
 80015cc:	4602      	mov	r2, r0
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	4413      	add	r3, r2
 80015d2:	623b      	str	r3, [r7, #32]

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 80015d4:	2100      	movs	r1, #0
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fe62 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 80015dc:	4602      	mov	r2, r0
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	4413      	add	r3, r2
 80015e2:	623b      	str	r3, [r7, #32]

  return ret;
 80015e4:	6a3b      	ldr	r3, [r7, #32]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <lsm6dsv16b_ln_pg_read>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_ln_pg_read(const stmdev_ctx_t *ctx, uint16_t address,
                              uint8_t *buf, uint8_t len)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b08a      	sub	sp, #40	@ 0x28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	461a      	mov	r2, r3
 80015fa:	460b      	mov	r3, r1
 80015fc:	817b      	strh	r3, [r7, #10]
 80015fe:	4613      	mov	r3, r2
 8001600:	727b      	strb	r3, [r7, #9]
  uint8_t msb;
  uint8_t lsb;
  int32_t ret;
  uint8_t i ;

  msb = ((uint8_t)(address >> 8) & 0x0FU);
 8001602:	897b      	ldrh	r3, [r7, #10]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	b29b      	uxth	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  lsb = (uint8_t)address & 0xFFU;
 8001612:	897b      	ldrh	r3, [r7, #10]
 8001614:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 8001618:	2101      	movs	r1, #1
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fe40 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 8001620:	6238      	str	r0, [r7, #32]

  /* set page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001622:	f107 0214 	add.w	r2, r7, #20
 8001626:	2301      	movs	r3, #1
 8001628:	2117      	movs	r1, #23
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fd5c 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001630:	4602      	mov	r2, r0
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	4413      	add	r3, r2
 8001636:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_ENABLE;
 8001638:	7d3b      	ldrb	r3, [r7, #20]
 800163a:	f043 0320 	orr.w	r3, r3, #32
 800163e:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_DISABLE;
 8001640:	7d3b      	ldrb	r3, [r7, #20]
 8001642:	f36f 1386 	bfc	r3, #6, #1
 8001646:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001648:	f107 0214 	add.w	r2, r7, #20
 800164c:	2301      	movs	r3, #1
 800164e:	2117      	movs	r1, #23
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fd67 	bl	8001124 <lsm6dsv16b_write_reg>
 8001656:	4602      	mov	r2, r0
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	4413      	add	r3, r2
 800165c:	623b      	str	r3, [r7, #32]

  /* select page */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 800165e:	f107 0218 	add.w	r2, r7, #24
 8001662:	2301      	movs	r3, #1
 8001664:	2102      	movs	r1, #2
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff fd3e 	bl	80010e8 <lsm6dsv16b_read_reg>
 800166c:	4602      	mov	r2, r0
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	4413      	add	r3, r2
 8001672:	623b      	str	r3, [r7, #32]
  page_sel.page_sel = msb;
 8001674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	b2da      	uxtb	r2, r3
 800167e:	7e3b      	ldrb	r3, [r7, #24]
 8001680:	f362 1307 	bfi	r3, r2, #4, #4
 8001684:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1; // Default value
 8001686:	7e3b      	ldrb	r3, [r7, #24]
 8001688:	2201      	movs	r2, #1
 800168a:	f362 0303 	bfi	r3, r2, #0, #4
 800168e:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001690:	f107 0218 	add.w	r2, r7, #24
 8001694:	2301      	movs	r3, #1
 8001696:	2102      	movs	r1, #2
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fd43 	bl	8001124 <lsm6dsv16b_write_reg>
 800169e:	4602      	mov	r2, r0
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	4413      	add	r3, r2
 80016a4:	623b      	str	r3, [r7, #32]
                              1);

  /* set page addr */
  page_address.page_addr = lsb;
 80016a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016aa:	773b      	strb	r3, [r7, #28]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_ADDRESS,
 80016ac:	f107 021c 	add.w	r2, r7, #28
 80016b0:	2301      	movs	r3, #1
 80016b2:	2108      	movs	r1, #8
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fd35 	bl	8001124 <lsm6dsv16b_write_reg>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	4413      	add	r3, r2
 80016c0:	623b      	str	r3, [r7, #32]
                              (uint8_t *)&page_address, 1);

  for (i = 0; ((i < len) && (ret == 0)); i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	77fb      	strb	r3, [r7, #31]
 80016c6:	e046      	b.n	8001756 <lsm6dsv16b_ln_pg_read+0x168>
  {
    ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_VALUE, &buf[i], 1);
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	441a      	add	r2, r3
 80016ce:	2301      	movs	r3, #1
 80016d0:	2109      	movs	r1, #9
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f7ff fd08 	bl	80010e8 <lsm6dsv16b_read_reg>
 80016d8:	4602      	mov	r2, r0
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	4413      	add	r3, r2
 80016de:	623b      	str	r3, [r7, #32]
    lsb++;
 80016e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Check if page wrap */
    if (((lsb & 0xFFU) == 0x00U) && (ret == 0))
 80016ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d12e      	bne.n	8001750 <lsm6dsv16b_ln_pg_read+0x162>
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d12b      	bne.n	8001750 <lsm6dsv16b_ln_pg_read+0x162>
    {
      msb++;
 80016f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 8001702:	f107 0218 	add.w	r2, r7, #24
 8001706:	2301      	movs	r3, #1
 8001708:	2102      	movs	r1, #2
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff fcec 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001710:	4602      	mov	r2, r0
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	4413      	add	r3, r2
 8001716:	623b      	str	r3, [r7, #32]

      if (ret == 0)
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <lsm6dsv16b_ln_pg_read+0x162>
      {
        page_sel.page_sel = msb;
 800171e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	b2da      	uxtb	r2, r3
 8001728:	7e3b      	ldrb	r3, [r7, #24]
 800172a:	f362 1307 	bfi	r3, r2, #4, #4
 800172e:	763b      	strb	r3, [r7, #24]
        page_sel.not_used0 = 1; // Default value
 8001730:	7e3b      	ldrb	r3, [r7, #24]
 8001732:	2201      	movs	r2, #1
 8001734:	f362 0303 	bfi	r3, r2, #0, #4
 8001738:	763b      	strb	r3, [r7, #24]
        ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 800173a:	f107 0218 	add.w	r2, r7, #24
 800173e:	2301      	movs	r3, #1
 8001740:	2102      	movs	r1, #2
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7ff fcee 	bl	8001124 <lsm6dsv16b_write_reg>
 8001748:	4602      	mov	r2, r0
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	4413      	add	r3, r2
 800174e:	623b      	str	r3, [r7, #32]
  for (i = 0; ((i < len) && (ret == 0)); i++)
 8001750:	7ffb      	ldrb	r3, [r7, #31]
 8001752:	3301      	adds	r3, #1
 8001754:	77fb      	strb	r3, [r7, #31]
 8001756:	7ffa      	ldrb	r2, [r7, #31]
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	429a      	cmp	r2, r3
 800175c:	d202      	bcs.n	8001764 <lsm6dsv16b_ln_pg_read+0x176>
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0b1      	beq.n	80016c8 <lsm6dsv16b_ln_pg_read+0xda>
                                    1);
      }
    }
  }

  page_sel.page_sel = 0;
 8001764:	7e3b      	ldrb	r3, [r7, #24]
 8001766:	f36f 1307 	bfc	r3, #4, #4
 800176a:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1;// Default value
 800176c:	7e3b      	ldrb	r3, [r7, #24]
 800176e:	2201      	movs	r2, #1
 8001770:	f362 0303 	bfi	r3, r2, #0, #4
 8001774:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001776:	f107 0218 	add.w	r2, r7, #24
 800177a:	2301      	movs	r3, #1
 800177c:	2102      	movs	r1, #2
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fcd0 	bl	8001124 <lsm6dsv16b_write_reg>
 8001784:	4602      	mov	r2, r0
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	4413      	add	r3, r2
 800178a:	623b      	str	r3, [r7, #32]
                              1);

  /* unset page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 800178c:	f107 0214 	add.w	r2, r7, #20
 8001790:	2301      	movs	r3, #1
 8001792:	2117      	movs	r1, #23
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7ff fca7 	bl	80010e8 <lsm6dsv16b_read_reg>
 800179a:	4602      	mov	r2, r0
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	4413      	add	r3, r2
 80017a0:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_DISABLE;
 80017a2:	7d3b      	ldrb	r3, [r7, #20]
 80017a4:	f36f 1345 	bfc	r3, #5, #1
 80017a8:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_DISABLE;
 80017aa:	7d3b      	ldrb	r3, [r7, #20]
 80017ac:	f36f 1386 	bfc	r3, #6, #1
 80017b0:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 80017b2:	f107 0214 	add.w	r2, r7, #20
 80017b6:	2301      	movs	r3, #1
 80017b8:	2117      	movs	r1, #23
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fcb2 	bl	8001124 <lsm6dsv16b_write_reg>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	4413      	add	r3, r2
 80017c6:	623b      	str	r3, [r7, #32]

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 80017c8:	2100      	movs	r1, #0
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fd68 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	4413      	add	r3, r2
 80017d6:	623b      	str	r3, [r7, #32]

  return ret;
 80017d8:	6a3b      	ldr	r3, [r7, #32]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3728      	adds	r7, #40	@ 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <lsm6dsv16b_stpcnt_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_mode_set(const stmdev_ctx_t *ctx,
                                   lsm6dsv16b_stpcnt_mode_t val)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	7039      	strb	r1, [r7, #0]
  lsm6dsv16b_emb_func_en_a_t emb_func_en_a;
  lsm6dsv16b_emb_func_en_b_t emb_func_en_b;
  lsm6dsv16b_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 80017ec:	2101      	movs	r1, #1
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fd56 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 80017f4:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d107      	bne.n	800180c <lsm6dsv16b_stpcnt_mode_set+0x2a>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_EMB_FUNC_EN_A, (uint8_t *)&emb_func_en_a, 1);
 80017fc:	f107 0210 	add.w	r2, r7, #16
 8001800:	2301      	movs	r3, #1
 8001802:	2104      	movs	r1, #4
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fc6f 	bl	80010e8 <lsm6dsv16b_read_reg>
 800180a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d107      	bne.n	8001822 <lsm6dsv16b_stpcnt_mode_set+0x40>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_EMB_FUNC_EN_B, (uint8_t *)&emb_func_en_b, 1);
 8001812:	f107 020c 	add.w	r2, r7, #12
 8001816:	2301      	movs	r3, #1
 8001818:	2105      	movs	r1, #5
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fc64 	bl	80010e8 <lsm6dsv16b_read_reg>
 8001820:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <lsm6dsv16b_stpcnt_mode_set+0x66>
  {
    emb_func_en_a.pedo_en = val.step_counter_enable;
 8001828:	783b      	ldrb	r3, [r7, #0]
 800182a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	7c3b      	ldrb	r3, [r7, #16]
 8001832:	f362 03c3 	bfi	r3, r2, #3, #1
 8001836:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_EMB_FUNC_EN_A, (uint8_t *)&emb_func_en_a, 1);
 8001838:	f107 0210 	add.w	r2, r7, #16
 800183c:	2301      	movs	r3, #1
 800183e:	2104      	movs	r1, #4
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fc6f 	bl	8001124 <lsm6dsv16b_write_reg>
 8001846:	6178      	str	r0, [r7, #20]
  }

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 8001848:	2100      	movs	r1, #0
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff fd28 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 8001850:	4602      	mov	r2, r0
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <lsm6dsv16b_stpcnt_mode_set+0x8e>
  {
    ret = lsm6dsv16b_ln_pg_read(ctx, LSM6DSV16B_PEDO_CMD_REG, (uint8_t *)&pedo_cmd_reg, 1);
 800185e:	f107 0208 	add.w	r2, r7, #8
 8001862:	2301      	movs	r3, #1
 8001864:	f240 1183 	movw	r1, #387	@ 0x183
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fec0 	bl	80015ee <lsm6dsv16b_ln_pg_read>
 800186e:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d110      	bne.n	8001898 <lsm6dsv16b_stpcnt_mode_set+0xb6>
  {
    pedo_cmd_reg.fp_rejection_en = val.false_step_rej;
 8001876:	783b      	ldrb	r3, [r7, #0]
 8001878:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	7a3b      	ldrb	r3, [r7, #8]
 8001880:	f362 0382 	bfi	r3, r2, #2, #1
 8001884:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_ln_pg_write(ctx, LSM6DSV16B_PEDO_CMD_REG, (uint8_t *)&pedo_cmd_reg, 1);
 8001886:	f107 0208 	add.w	r2, r7, #8
 800188a:	2301      	movs	r3, #1
 800188c:	f240 1183 	movw	r1, #387	@ 0x183
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff fdb2 	bl	80013fa <lsm6dsv16b_ln_pg_write>
 8001896:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001898:	697b      	ldr	r3, [r7, #20]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <lsm6dsv16b_stpcnt_steps_get>:
  * @param  val      Step counter output, number of detected steps.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_steps_get(const stmdev_ctx_t *ctx, uint16_t *val)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 80018ac:	2101      	movs	r1, #1
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fcf6 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 80018b4:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <lsm6dsv16b_stpcnt_steps_get+0x2a>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_STEP_COUNTER_L, &buff[0], 2);
 80018bc:	f107 0208 	add.w	r2, r7, #8
 80018c0:	2302      	movs	r3, #2
 80018c2:	2162      	movs	r1, #98	@ 0x62
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff fc0f 	bl	80010e8 <lsm6dsv16b_read_reg>
 80018ca:	60f8      	str	r0, [r7, #12]
  }

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 80018cc:	2100      	movs	r1, #0
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fce6 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  *val = buff[1];
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	461a      	mov	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256U) + buff[0];
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	7a3a      	ldrb	r2, [r7, #8]
 80018ee:	4413      	add	r3, r2
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	801a      	strh	r2, [r3, #0]

  return ret;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <lsm6dsv16b_stpcnt_rst_step_set>:
  * @param  val      Reset step counter.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_rst_step_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_emb_func_src_t emb_func_src;
  int32_t ret;

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 800190c:	2101      	movs	r1, #1
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fcc6 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 8001914:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <lsm6dsv16b_stpcnt_rst_step_set+0x2c>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 800191c:	f107 0208 	add.w	r2, r7, #8
 8001920:	2301      	movs	r3, #1
 8001922:	2164      	movs	r1, #100	@ 0x64
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff fbdf 	bl	80010e8 <lsm6dsv16b_read_reg>
 800192a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10f      	bne.n	8001952 <lsm6dsv16b_stpcnt_rst_step_set+0x52>
  {
    emb_func_src.pedo_rst_step = val;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	b2da      	uxtb	r2, r3
 800193a:	7a3b      	ldrb	r3, [r7, #8]
 800193c:	f362 13c7 	bfi	r3, r2, #7, #1
 8001940:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 8001942:	f107 0208 	add.w	r2, r7, #8
 8001946:	2301      	movs	r3, #1
 8001948:	2164      	movs	r1, #100	@ 0x64
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fbea 	bl	8001124 <lsm6dsv16b_write_reg>
 8001950:	60f8      	str	r0, [r7, #12]
  }

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 8001952:	2100      	movs	r1, #0
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff fca3 	bl	80012a0 <lsm6dsv16b_mem_bank_set>
 800195a:	4602      	mov	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4413      	add	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]

  return ret;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <lsm6dsv16b_stpcnt_debounce_set>:
  * @param  val      Pedometer debounce configuration.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_debounce_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_pedo_deb_steps_conf_t pedo_deb_steps_conf;
  int32_t ret;

  ret = lsm6dsv16b_ln_pg_read(ctx, LSM6DSV16B_PEDO_DEB_STEPS_CONF, (uint8_t *)&pedo_deb_steps_conf,
 8001978:	f107 0208 	add.w	r2, r7, #8
 800197c:	2301      	movs	r3, #1
 800197e:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff fe33 	bl	80015ee <lsm6dsv16b_ln_pg_read>
 8001988:	60f8      	str	r0, [r7, #12]
                              1);
  if (ret == 0)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10a      	bne.n	80019a6 <lsm6dsv16b_stpcnt_debounce_set+0x3a>
  {
    pedo_deb_steps_conf.deb_step = val;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_ln_pg_write(ctx, LSM6DSV16B_PEDO_DEB_STEPS_CONF, (uint8_t *)&pedo_deb_steps_conf,
 8001994:	f107 0208 	add.w	r2, r7, #8
 8001998:	2301      	movs	r3, #1
 800199a:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fd2b 	bl	80013fa <lsm6dsv16b_ln_pg_write>
 80019a4:	60f8      	str	r0, [r7, #12]
                                 1);
  }

  return ret;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <lsm6dsv16b_stpcnt_period_set>:
  * @param  val      Time period register for step detection on delta time.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_period_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
  uint8_t buff[2];
  int32_t ret;

  buff[1] = (uint8_t)(val / 256U);
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	727b      	strb	r3, [r7, #9]
  buff[0] = (uint8_t)(val - (buff[1] * 256U));
 80019c6:	887b      	ldrh	r3, [r7, #2]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	723b      	strb	r3, [r7, #8]

  ret = lsm6dsv16b_ln_pg_write(ctx, LSM6DSV16B_PEDO_SC_DELTAT_L, (uint8_t *)&buff[0], 2);
 80019cc:	f107 0208 	add.w	r2, r7, #8
 80019d0:	2302      	movs	r3, #2
 80019d2:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fd0f 	bl	80013fa <lsm6dsv16b_ln_pg_write>
 80019dc:	60f8      	str	r0, [r7, #12]

  return ret;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a22:	463b      	mov	r3, r7
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
 8001a30:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a34:	4a29      	ldr	r2, [pc, #164]	@ (8001adc <MX_ADC1_Init+0xc0>)
 8001a36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a38:	4b27      	ldr	r3, [pc, #156]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a52:	2204      	movs	r2, #4
 8001a54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a56:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a92:	4811      	ldr	r0, [pc, #68]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001a94:	f002 fd18 	bl	80044c8 <HAL_ADC_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001a9e:	f001 fde9 	bl	8003674 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae0 <MX_ADC1_Init+0xc4>)
 8001aa4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aae:	237f      	movs	r3, #127	@ 0x7f
 8001ab0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <MX_ADC1_Init+0xbc>)
 8001ac0:	f002 fe4e 	bl	8004760 <HAL_ADC_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001aca:	f001 fdd3 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000254 	.word	0x20000254
 8001adc:	50040000 	.word	0x50040000
 8001ae0:	3ac04000 	.word	0x3ac04000

08001ae4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09c      	sub	sp, #112	@ 0x70
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	2250      	movs	r2, #80	@ 0x50
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00d fe69 	bl	800f7dc <memset>
  if(adcHandle->Instance==ADC1)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001b80 <HAL_ADC_MspInit+0x9c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d130      	bne.n	8001b76 <HAL_ADC_MspInit+0x92>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b18:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001b1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b22:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001b24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b28:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001b2a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001b2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001b30:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 fcf4 	bl	800752e <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001b4c:	f001 fd92 	bl	8003674 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b50:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b54:	f7ff ff48 	bl	80019e8 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f7ff ff45 	bl	80019e8 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <HAL_ADC_MspInit+0xa0>)
 8001b72:	f003 fe87 	bl	8005884 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b76:	bf00      	nop
 8001b78:	3770      	adds	r7, #112	@ 0x70
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	50040000 	.word	0x50040000
 8001b84:	48000800 	.word	0x48000800

08001b88 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <LL_EXTI_EnableIT_32_63+0x24>)
 8001b92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001b96:	4905      	ldr	r1, [pc, #20]	@ (8001bac <LL_EXTI_EnableIT_32_63+0x24>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	58000800 	.word	0x58000800

08001bb0 <LL_AHB2_GRP1_EnableClock>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bee:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8001bf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c02:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
}
 8001c0e:	bf00      	nop
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c1e:	f002 fabb 	bl	8004198 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c22:	f002 fabf 	bl	80041a4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001c26:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001c2a:	f7ff ffad 	bl	8001b88 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001c2e:	f00a fca1 	bl	800c574 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001c32:	f000 f821 	bl	8001c78 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001c36:	f000 f8c1 	bl	8001dbc <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001c3a:	bf00      	nop
}
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001c46:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <APPD_EnableCPU2+0x34>)
 8001c48:	1d3c      	adds	r4, r7, #4
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c54:	c403      	stmia	r4!, {r0, r1}
 8001c56:	8022      	strh	r2, [r4, #0]
 8001c58:	3402      	adds	r4, #2
 8001c5a:	0c13      	lsrs	r3, r2, #16
 8001c5c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001c5e:	f00a fbc1 	bl	800c3e4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 fec4 	bl	800b9f2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001c6a:	bf00      	nop
}
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdb0      	pop	{r4, r5, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	080119b0 	.word	0x080119b0

08001c78 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	77fb      	strb	r3, [r7, #31]
 8001c9c:	e036      	b.n	8001d0c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	4a43      	ldr	r2, [pc, #268]	@ (8001db0 <APPD_SetCPU2GpioConfig+0x138>)
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	799b      	ldrb	r3, [r3, #6]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02c      	beq.n	8001d06 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	4a40      	ldr	r2, [pc, #256]	@ (8001db0 <APPD_SetCPU2GpioConfig+0x138>)
 8001cb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001cb4:	4a3f      	ldr	r2, [pc, #252]	@ (8001db4 <APPD_SetCPU2GpioConfig+0x13c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d01b      	beq.n	8001cf2 <APPD_SetCPU2GpioConfig+0x7a>
 8001cba:	4a3e      	ldr	r2, [pc, #248]	@ (8001db4 <APPD_SetCPU2GpioConfig+0x13c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d821      	bhi.n	8001d04 <APPD_SetCPU2GpioConfig+0x8c>
 8001cc0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cc4:	d003      	beq.n	8001cce <APPD_SetCPU2GpioConfig+0x56>
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <APPD_SetCPU2GpioConfig+0x140>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8001ccc:	e01a      	b.n	8001d04 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	4a37      	ldr	r2, [pc, #220]	@ (8001db0 <APPD_SetCPU2GpioConfig+0x138>)
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	889a      	ldrh	r2, [r3, #4]
 8001cd8:	8bbb      	ldrh	r3, [r7, #28]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	83bb      	strh	r3, [r7, #28]
          break;
 8001cde:	e012      	b.n	8001d06 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001ce0:	7ffb      	ldrb	r3, [r7, #31]
 8001ce2:	4a33      	ldr	r2, [pc, #204]	@ (8001db0 <APPD_SetCPU2GpioConfig+0x138>)
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	889a      	ldrh	r2, [r3, #4]
 8001cea:	8b7b      	ldrh	r3, [r7, #26]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	837b      	strh	r3, [r7, #26]
          break;
 8001cf0:	e009      	b.n	8001d06 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8001db0 <APPD_SetCPU2GpioConfig+0x138>)
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	889a      	ldrh	r2, [r3, #4]
 8001cfc:	8b3b      	ldrh	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	833b      	strh	r3, [r7, #24]
          break;
 8001d02:	e000      	b.n	8001d06 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001d04:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001d06:	7ffb      	ldrb	r3, [r7, #31]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	77fb      	strb	r3, [r7, #31]
 8001d0c:	7ffb      	ldrb	r3, [r7, #31]
 8001d0e:	2b25      	cmp	r3, #37	@ 0x25
 8001d10:	d9c5      	bls.n	8001c9e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001d1e:	8bbb      	ldrh	r3, [r7, #28]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d014      	beq.n	8001d4e <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001d24:	8bbb      	ldrh	r3, [r7, #28]
 8001d26:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f7ff ff41 	bl	8001bb0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff ff57 	bl	8001be2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f003 fda2 	bl	8005884 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001d40:	8bbb      	ldrh	r3, [r7, #28]
 8001d42:	2200      	movs	r2, #0
 8001d44:	4619      	mov	r1, r3
 8001d46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4a:	f003 ff0b 	bl	8005b64 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001d4e:	8b7b      	ldrh	r3, [r7, #26]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001d54:	8b7b      	ldrh	r3, [r7, #26]
 8001d56:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d58:	2002      	movs	r0, #2
 8001d5a:	f7ff ff29 	bl	8001bb0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f7ff ff3f 	bl	8001be2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	4619      	mov	r1, r3
 8001d68:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <APPD_SetCPU2GpioConfig+0x140>)
 8001d6a:	f003 fd8b 	bl	8005884 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001d6e:	8b7b      	ldrh	r3, [r7, #26]
 8001d70:	2200      	movs	r2, #0
 8001d72:	4619      	mov	r1, r3
 8001d74:	4810      	ldr	r0, [pc, #64]	@ (8001db8 <APPD_SetCPU2GpioConfig+0x140>)
 8001d76:	f003 fef5 	bl	8005b64 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001d7a:	8b3b      	ldrh	r3, [r7, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001d80:	8b3b      	ldrh	r3, [r7, #24]
 8001d82:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	2004      	movs	r0, #4
 8001d86:	f7ff ff13 	bl	8001bb0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001d8a:	2004      	movs	r0, #4
 8001d8c:	f7ff ff29 	bl	8001be2 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	4807      	ldr	r0, [pc, #28]	@ (8001db4 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d96:	f003 fd75 	bl	8005884 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001d9a:	8b3b      	ldrh	r3, [r7, #24]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4804      	ldr	r0, [pc, #16]	@ (8001db4 <APPD_SetCPU2GpioConfig+0x13c>)
 8001da2:	f003 fedf 	bl	8005b64 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
}
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	08012de8 	.word	0x08012de8
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000400 	.word	0x48000400

08001dbc <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001dc0:	bf00      	nop
}
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8001dce:	f001 ffeb 	bl	8003da8 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001dd2:	bf00      	nop
}
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	460b      	mov	r3, r1
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001de4:	897a      	ldrh	r2, [r7, #10]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	2000      	movs	r0, #0
 8001dec:	f001 fac8 	bl	8003380 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001df0:	bf00      	nop
}
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <LL_PWR_SMPS_Enable+0x1c>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <LL_PWR_SMPS_Enable+0x1c>)
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e06:	61d3      	str	r3, [r2, #28]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	58000400 	.word	0x58000400

08001e18 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e28:	4904      	ldr	r1, [pc, #16]	@ (8001e3c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	58000400 	.word	0x58000400

08001e40 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001e48:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d108      	bne.n	8001e6c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f023 020f 	bic.w	r2, r3, #15
 8001e62:	4913      	ldr	r1, [pc, #76]	@ (8001eb0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8001e6a:	e019      	b.n	8001ea0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3b06      	subs	r3, #6
 8001e70:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da02      	bge.n	8001e86 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e004      	b.n	8001e90 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	dd01      	ble.n	8001e90 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f023 020f 	bic.w	r2, r3, #15
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	4905      	ldr	r1, [pc, #20]	@ (8001eb0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61cb      	str	r3, [r1, #28]
}
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	1fff7558 	.word	0x1fff7558
 8001eb0:	58000400 	.word	0x58000400

08001eb4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <LL_C2_PWR_SetPowerMode+0x28>)
 8001ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4905      	ldr	r1, [pc, #20]	@ (8001edc <LL_C2_PWR_SetPowerMode+0x28>)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	58000400 	.word	0x58000400

08001ee0 <LL_EXTI_EnableIT_32_63>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <LL_EXTI_EnableIT_32_63+0x24>)
 8001eea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001eee:	4905      	ldr	r1, [pc, #20]	@ (8001f04 <LL_EXTI_EnableIT_32_63+0x24>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	58000800 	.word	0x58000800

08001f08 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f14:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001f16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f22:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	cafecafe 	.word	0xcafecafe

08001f44 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001f56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001f70:	4b04      	ldr	r3, [pc, #16]	@ (8001f84 <LL_DBGMCU_GetDeviceID+0x18>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e0042000 	.word	0xe0042000

08001f88 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001f8c:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <LL_DBGMCU_GetRevisionID+0x18>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	b29b      	uxth	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e0042000 	.word	0xe0042000

08001fa4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <LL_LPM_EnableSleep+0x1c>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <LL_LPM_EnableSleep+0x1c>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	6113      	str	r3, [r2, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	22ff      	movs	r2, #255	@ 0xff
 8001fd0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	22ca      	movs	r2, #202	@ 0xca
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2253      	movs	r2, #83	@ 0x53
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 0207 	bic.w	r2, r3, #7
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <MX_APPE_Config+0x18>)
 800202a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800202e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8002030:	f000 f829 	bl	8002086 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8002034:	f000 f82e 	bl	8002094 <Config_HSE>

  return;
 8002038:	bf00      	nop
}
 800203a:	bd80      	pop	{r7, pc}
 800203c:	58004000 	.word	0x58004000

08002040 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8002044:	f000 f83a 	bl	80020bc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002048:	f000 f852 	bl	80020f0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800204c:	4903      	ldr	r1, [pc, #12]	@ (800205c <MX_APPE_Init+0x1c>)
 800204e:	2000      	movs	r0, #0
 8002050:	f000 ffa4 	bl	8002f9c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8002054:	f000 f85a 	bl	800210c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002058:	bf00      	nop
}
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000398 	.word	0x20000398

08002060 <Init_Smps>:

void Init_Smps(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fed7 	bl	8001e18 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800206a:	2004      	movs	r0, #4
 800206c:	f7ff fee8 	bl	8001e40 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8002070:	f7ff fec2 	bl	8001df8 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8002074:	bf00      	nop
}
 8002076:	bd80      	pop	{r7, pc}

08002078 <Init_Exti>:

void Init_Exti(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800207c:	2050      	movs	r0, #80	@ 0x50
 800207e:	f7ff ff2f 	bl	8001ee0 <LL_EXTI_EnableIT_32_63>

  return;
 8002082:	bf00      	nop
}
 8002084:	bd80      	pop	{r7, pc}

08002086 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800208a:	bf00      	nop
}
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800209a:	2000      	movs	r0, #0
 800209c:	f00a fae8 	bl	800c670 <OTP_Read>
 80020a0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	799b      	ldrb	r3, [r3, #6]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff2b 	bl	8001f08 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
}
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <System_Init>:

static void System_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  Init_Smps();
 80020c0:	f7ff ffce 	bl	8002060 <Init_Smps>

  Init_Exti();
 80020c4:	f7ff ffd8 	bl	8002078 <Init_Exti>

  Init_Rtc();
 80020c8:	f000 f802 	bl	80020d0 <Init_Rtc>

  return;
 80020cc:	bf00      	nop
}
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80020d4:	4805      	ldr	r0, [pc, #20]	@ (80020ec <Init_Rtc+0x1c>)
 80020d6:	f7ff ff82 	bl	8001fde <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80020da:	2100      	movs	r1, #0
 80020dc:	4803      	ldr	r0, [pc, #12]	@ (80020ec <Init_Rtc+0x1c>)
 80020de:	f7ff ff8e 	bl	8001ffe <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80020e2:	4802      	ldr	r0, [pc, #8]	@ (80020ec <Init_Rtc+0x1c>)
 80020e4:	f7ff ff6e 	bl	8001fc4 <LL_RTC_EnableWriteProtection>

  return;
 80020e8:	bf00      	nop
}
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40002800 	.word	0x40002800

080020f0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80020f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80020f8:	f7ff ff24 	bl	8001f44 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80020fc:	f00c fa74 	bl	800e5e8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002100:	2004      	movs	r0, #4
 8002102:	f7ff fed7 	bl	8001eb4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002106:	bf00      	nop
}
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002112:	f00a f823 	bl	800c15c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002116:	4a11      	ldr	r2, [pc, #68]	@ (800215c <appe_Tl_Init+0x50>)
 8002118:	2100      	movs	r1, #0
 800211a:	2008      	movs	r0, #8
 800211c:	f00c fba2 	bl	800e864 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002120:	4b0f      	ldr	r3, [pc, #60]	@ (8002160 <appe_Tl_Init+0x54>)
 8002122:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <appe_Tl_Init+0x58>)
 8002126:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002128:	463b      	mov	r3, r7
 800212a:	4619      	mov	r1, r3
 800212c:	480e      	ldr	r0, [pc, #56]	@ (8002168 <appe_Tl_Init+0x5c>)
 800212e:	f009 fed7 	bl	800bee0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <appe_Tl_Init+0x60>)
 8002134:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002136:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <appe_Tl_Init+0x64>)
 8002138:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <appe_Tl_Init+0x68>)
 800213c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800213e:	f240 533c 	movw	r3, #1340	@ 0x53c
 8002142:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	4618      	mov	r0, r3
 800214a:	f00a f8d7 	bl	800c2fc <TL_MM_Init>

  TL_Enable();
 800214e:	f009 ffff 	bl	800c150 <TL_Enable>

  return;
 8002152:	bf00      	nop
}
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	0800bf19 	.word	0x0800bf19
 8002160:	20030734 	.word	0x20030734
 8002164:	08002179 	.word	0x08002179
 8002168:	08002191 	.word	0x08002191
 800216c:	2003094c 	.word	0x2003094c
 8002170:	20030840 	.word	0x20030840
 8002174:	200301f8 	.word	0x200301f8

08002178 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8002182:	bf00      	nop
}
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	330b      	adds	r3, #11
 800219e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80021aa:	2b07      	cmp	r3, #7
 80021ac:	f200 80d0 	bhi.w	8002350 <APPE_SysUserEvtRx+0x1c0>
 80021b0:	a201      	add	r2, pc, #4	@ (adr r2, 80021b8 <APPE_SysUserEvtRx+0x28>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021d9 	.word	0x080021d9
 80021bc:	0800226b 	.word	0x0800226b
 80021c0:	0800228d 	.word	0x0800228d
 80021c4:	08002351 	.word	0x08002351
 80021c8:	080022d1 	.word	0x080022d1
 80021cc:	080022f5 	.word	0x080022f5
 80021d0:	08002311 	.word	0x08002311
 80021d4:	08002335 	.word	0x08002335
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4618      	mov	r0, r3
 80021de:	f009 fc35 	bl	800ba4c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80021e2:	485e      	ldr	r0, [pc, #376]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 80021e4:	f00a f966 	bl	800c4b4 <DbgTraceGetFileName>
 80021e8:	4601      	mov	r1, r0
 80021ea:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80021ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 80021f0:	485c      	ldr	r0, [pc, #368]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 80021f2:	f00d f96f 	bl	800f4d4 <iprintf>
 80021f6:	7b3b      	ldrb	r3, [r7, #12]
 80021f8:	4619      	mov	r1, r3
 80021fa:	7b7b      	ldrb	r3, [r7, #13]
 80021fc:	461a      	mov	r2, r3
 80021fe:	7bbb      	ldrb	r3, [r7, #14]
 8002200:	4859      	ldr	r0, [pc, #356]	@ (8002368 <APPE_SysUserEvtRx+0x1d8>)
 8002202:	f00d f967 	bl	800f4d4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8002206:	4855      	ldr	r0, [pc, #340]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 8002208:	f00a f954 	bl	800c4b4 <DbgTraceGetFileName>
 800220c:	4601      	mov	r1, r0
 800220e:	f240 136b 	movw	r3, #363	@ 0x16b
 8002212:	4a53      	ldr	r2, [pc, #332]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 8002214:	4853      	ldr	r0, [pc, #332]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 8002216:	f00d f95d 	bl	800f4d4 <iprintf>
 800221a:	7c3b      	ldrb	r3, [r7, #16]
 800221c:	4619      	mov	r1, r3
 800221e:	4853      	ldr	r0, [pc, #332]	@ (800236c <APPE_SysUserEvtRx+0x1dc>)
 8002220:	f00d f958 	bl	800f4d4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8002224:	484d      	ldr	r0, [pc, #308]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 8002226:	f00a f945 	bl	800c4b4 <DbgTraceGetFileName>
 800222a:	4601      	mov	r1, r0
 800222c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002230:	4a4b      	ldr	r2, [pc, #300]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 8002232:	484c      	ldr	r0, [pc, #304]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 8002234:	f00d f94e 	bl	800f4d4 <iprintf>
 8002238:	7dbb      	ldrb	r3, [r7, #22]
 800223a:	4619      	mov	r1, r3
 800223c:	7dfb      	ldrb	r3, [r7, #23]
 800223e:	461a      	mov	r2, r3
 8002240:	7e3b      	ldrb	r3, [r7, #24]
 8002242:	484b      	ldr	r0, [pc, #300]	@ (8002370 <APPE_SysUserEvtRx+0x1e0>)
 8002244:	f00d f946 	bl	800f4d4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002248:	4844      	ldr	r0, [pc, #272]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 800224a:	f00a f933 	bl	800c4b4 <DbgTraceGetFileName>
 800224e:	4601      	mov	r1, r0
 8002250:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002254:	4a42      	ldr	r2, [pc, #264]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 8002256:	4843      	ldr	r0, [pc, #268]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 8002258:	f00d f93c 	bl	800f4d4 <iprintf>
 800225c:	4845      	ldr	r0, [pc, #276]	@ (8002374 <APPE_SysUserEvtRx+0x1e4>)
 800225e:	f00d f939 	bl	800f4d4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8e0 	bl	8002428 <APPE_SysEvtReadyProcessing>
    break;
 8002268:	e073      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800226a:	483c      	ldr	r0, [pc, #240]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 800226c:	f00a f922 	bl	800c4b4 <DbgTraceGetFileName>
 8002270:	4601      	mov	r1, r0
 8002272:	f240 1373 	movw	r3, #371	@ 0x173
 8002276:	4a3a      	ldr	r2, [pc, #232]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 8002278:	483a      	ldr	r0, [pc, #232]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 800227a:	f00d f92b 	bl	800f4d4 <iprintf>
 800227e:	483e      	ldr	r0, [pc, #248]	@ (8002378 <APPE_SysUserEvtRx+0x1e8>)
 8002280:	f00d f928 	bl	800f4d4 <iprintf>
    APPE_SysEvtError(pPayload);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f885 	bl	8002394 <APPE_SysEvtError>
    break;
 800228a:	e062      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800228c:	4833      	ldr	r0, [pc, #204]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 800228e:	f00a f911 	bl	800c4b4 <DbgTraceGetFileName>
 8002292:	4601      	mov	r1, r0
 8002294:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8002298:	4a31      	ldr	r2, [pc, #196]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 800229a:	4832      	ldr	r0, [pc, #200]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 800229c:	f00d f91a 	bl	800f4d4 <iprintf>
 80022a0:	4836      	ldr	r0, [pc, #216]	@ (800237c <APPE_SysUserEvtRx+0x1ec>)
 80022a2:	f00d f987 	bl	800f5b4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80022a6:	482d      	ldr	r0, [pc, #180]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 80022a8:	f00a f904 	bl	800c4b4 <DbgTraceGetFileName>
 80022ac:	4601      	mov	r1, r0
 80022ae:	f240 1379 	movw	r3, #377	@ 0x179
 80022b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 80022b4:	482b      	ldr	r0, [pc, #172]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 80022b6:	f00d f90d 	bl	800f4d4 <iprintf>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3302      	adds	r3, #2
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3302      	adds	r3, #2
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	461a      	mov	r2, r3
 80022c8:	482d      	ldr	r0, [pc, #180]	@ (8002380 <APPE_SysUserEvtRx+0x1f0>)
 80022ca:	f00d f903 	bl	800f4d4 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80022ce:	e040      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80022d0:	4822      	ldr	r0, [pc, #136]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 80022d2:	f00a f8ef 	bl	800c4b4 <DbgTraceGetFileName>
 80022d6:	4601      	mov	r1, r0
 80022d8:	f240 137f 	movw	r3, #383	@ 0x17f
 80022dc:	4a20      	ldr	r2, [pc, #128]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 80022de:	4821      	ldr	r0, [pc, #132]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 80022e0:	f00d f8f8 	bl	800f4d4 <iprintf>
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3302      	adds	r3, #2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4825      	ldr	r0, [pc, #148]	@ (8002384 <APPE_SysUserEvtRx+0x1f4>)
 80022ee:	f00d f8f1 	bl	800f4d4 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80022f2:	e02e      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80022f4:	4819      	ldr	r0, [pc, #100]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 80022f6:	f00a f8dd 	bl	800c4b4 <DbgTraceGetFileName>
 80022fa:	4601      	mov	r1, r0
 80022fc:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8002300:	4a17      	ldr	r2, [pc, #92]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 8002302:	4818      	ldr	r0, [pc, #96]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 8002304:	f00d f8e6 	bl	800f4d4 <iprintf>
 8002308:	481f      	ldr	r0, [pc, #124]	@ (8002388 <APPE_SysUserEvtRx+0x1f8>)
 800230a:	f00d f8e3 	bl	800f4d4 <iprintf>
    break;
 800230e:	e020      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002310:	4812      	ldr	r0, [pc, #72]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 8002312:	f00a f8cf 	bl	800c4b4 <DbgTraceGetFileName>
 8002316:	4601      	mov	r1, r0
 8002318:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 800231c:	4a10      	ldr	r2, [pc, #64]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 800231e:	4811      	ldr	r0, [pc, #68]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 8002320:	f00d f8d8 	bl	800f4d4 <iprintf>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3302      	adds	r3, #2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	4817      	ldr	r0, [pc, #92]	@ (800238c <APPE_SysUserEvtRx+0x1fc>)
 800232e:	f00d f8d1 	bl	800f4d4 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8002332:	e00e      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8002334:	4809      	ldr	r0, [pc, #36]	@ (800235c <APPE_SysUserEvtRx+0x1cc>)
 8002336:	f00a f8bd 	bl	800c4b4 <DbgTraceGetFileName>
 800233a:	4601      	mov	r1, r0
 800233c:	f240 138d 	movw	r3, #397	@ 0x18d
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <APPE_SysUserEvtRx+0x1d0>)
 8002342:	4808      	ldr	r0, [pc, #32]	@ (8002364 <APPE_SysUserEvtRx+0x1d4>)
 8002344:	f00d f8c6 	bl	800f4d4 <iprintf>
 8002348:	4811      	ldr	r0, [pc, #68]	@ (8002390 <APPE_SysUserEvtRx+0x200>)
 800234a:	f00d f8c3 	bl	800f4d4 <iprintf>
    break;
 800234e:	e000      	b.n	8002352 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002350:	bf00      	nop
  }

  return;
 8002352:	bf00      	nop
}
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	080119cc 	.word	0x080119cc
 8002360:	08012f18 	.word	0x08012f18
 8002364:	080119e4 	.word	0x080119e4
 8002368:	080119f8 	.word	0x080119f8
 800236c:	08011a1c 	.word	0x08011a1c
 8002370:	08011a38 	.word	0x08011a38
 8002374:	08011a50 	.word	0x08011a50
 8002378:	08011a70 	.word	0x08011a70
 800237c:	08011a94 	.word	0x08011a94
 8002380:	08011ae4 	.word	0x08011ae4
 8002384:	08011b0c 	.word	0x08011b0c
 8002388:	08011b48 	.word	0x08011b48
 800238c:	08011b6c 	.word	0x08011b6c
 8002390:	08011ba8 	.word	0x08011ba8

08002394 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	330b      	adds	r3, #11
 80023a2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3302      	adds	r3, #2
 80023a8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80023aa:	4819      	ldr	r0, [pc, #100]	@ (8002410 <APPE_SysEvtError+0x7c>)
 80023ac:	f00a f882 	bl	800c4b4 <DbgTraceGetFileName>
 80023b0:	4601      	mov	r1, r0
 80023b2:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80023b6:	4a17      	ldr	r2, [pc, #92]	@ (8002414 <APPE_SysEvtError+0x80>)
 80023b8:	4817      	ldr	r0, [pc, #92]	@ (8002418 <APPE_SysEvtError+0x84>)
 80023ba:	f00d f88b 	bl	800f4d4 <iprintf>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4815      	ldr	r0, [pc, #84]	@ (800241c <APPE_SysEvtError+0x88>)
 80023c6:	f00d f885 	bl	800f4d4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10d      	bne.n	80023ee <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80023d2:	480f      	ldr	r0, [pc, #60]	@ (8002410 <APPE_SysEvtError+0x7c>)
 80023d4:	f00a f86e 	bl	800c4b4 <DbgTraceGetFileName>
 80023d8:	4601      	mov	r1, r0
 80023da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80023de:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <APPE_SysEvtError+0x80>)
 80023e0:	480d      	ldr	r0, [pc, #52]	@ (8002418 <APPE_SysEvtError+0x84>)
 80023e2:	f00d f877 	bl	800f4d4 <iprintf>
 80023e6:	480e      	ldr	r0, [pc, #56]	@ (8002420 <APPE_SysEvtError+0x8c>)
 80023e8:	f00d f8e4 	bl	800f5b4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80023ec:	e00d      	b.n	800240a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80023ee:	4808      	ldr	r0, [pc, #32]	@ (8002410 <APPE_SysEvtError+0x7c>)
 80023f0:	f00a f860 	bl	800c4b4 <DbgTraceGetFileName>
 80023f4:	4601      	mov	r1, r0
 80023f6:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80023fa:	4a06      	ldr	r2, [pc, #24]	@ (8002414 <APPE_SysEvtError+0x80>)
 80023fc:	4806      	ldr	r0, [pc, #24]	@ (8002418 <APPE_SysEvtError+0x84>)
 80023fe:	f00d f869 	bl	800f4d4 <iprintf>
 8002402:	4808      	ldr	r0, [pc, #32]	@ (8002424 <APPE_SysEvtError+0x90>)
 8002404:	f00d f8d6 	bl	800f5b4 <puts>
  return;
 8002408:	bf00      	nop
}
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	080119cc 	.word	0x080119cc
 8002414:	08012f2c 	.word	0x08012f2c
 8002418:	080119e4 	.word	0x080119e4
 800241c:	08011bcc 	.word	0x08011bcc
 8002420:	08011bfc 	.word	0x08011bfc
 8002424:	08011c38 	.word	0x08011c38

08002428 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002430:	f107 0308 	add.w	r3, r7, #8
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	330b      	adds	r3, #11
 800244c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3302      	adds	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d146      	bne.n	80024ea <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800245c:	4836      	ldr	r0, [pc, #216]	@ (8002538 <APPE_SysEvtReadyProcessing+0x110>)
 800245e:	f00a f829 	bl	800c4b4 <DbgTraceGetFileName>
 8002462:	4601      	mov	r1, r0
 8002464:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002468:	4a34      	ldr	r2, [pc, #208]	@ (800253c <APPE_SysEvtReadyProcessing+0x114>)
 800246a:	4835      	ldr	r0, [pc, #212]	@ (8002540 <APPE_SysEvtReadyProcessing+0x118>)
 800246c:	f00d f832 	bl	800f4d4 <iprintf>
 8002470:	4834      	ldr	r0, [pc, #208]	@ (8002544 <APPE_SysEvtReadyProcessing+0x11c>)
 8002472:	f00d f89f 	bl	800f5b4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002476:	f7ff fbe3 	bl	8001c40 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800247a:	230f      	movs	r3, #15
 800247c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800247e:	237f      	movs	r3, #127	@ 0x7f
 8002480:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002482:	f7ff fd81 	bl	8001f88 <LL_DBGMCU_GetRevisionID>
 8002486:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002488:	482b      	ldr	r0, [pc, #172]	@ (8002538 <APPE_SysEvtReadyProcessing+0x110>)
 800248a:	f00a f813 	bl	800c4b4 <DbgTraceGetFileName>
 800248e:	4601      	mov	r1, r0
 8002490:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8002494:	4a29      	ldr	r2, [pc, #164]	@ (800253c <APPE_SysEvtReadyProcessing+0x114>)
 8002496:	482a      	ldr	r0, [pc, #168]	@ (8002540 <APPE_SysEvtReadyProcessing+0x118>)
 8002498:	f00d f81c 	bl	800f4d4 <iprintf>
 800249c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800249e:	482a      	ldr	r0, [pc, #168]	@ (8002548 <APPE_SysEvtReadyProcessing+0x120>)
 80024a0:	f00d f818 	bl	800f4d4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80024aa:	f7ff fd5f 	bl	8001f6c <LL_DBGMCU_GetDeviceID>
 80024ae:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80024b0:	4821      	ldr	r0, [pc, #132]	@ (8002538 <APPE_SysEvtReadyProcessing+0x110>)
 80024b2:	f009 ffff 	bl	800c4b4 <DbgTraceGetFileName>
 80024b6:	4601      	mov	r1, r0
 80024b8:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80024bc:	4a1f      	ldr	r2, [pc, #124]	@ (800253c <APPE_SysEvtReadyProcessing+0x114>)
 80024be:	4820      	ldr	r0, [pc, #128]	@ (8002540 <APPE_SysEvtReadyProcessing+0x118>)
 80024c0:	f00d f808 	bl	800f4d4 <iprintf>
 80024c4:	6a39      	ldr	r1, [r7, #32]
 80024c6:	4821      	ldr	r0, [pc, #132]	@ (800254c <APPE_SysEvtReadyProcessing+0x124>)
 80024c8:	f00d f804 	bl	800f4d4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	4618      	mov	r0, r3
 80024d8:	f009 faa2 	bl	800ba20 <SHCI_C2_Config>

    APP_BLE_Init();
 80024dc:	f00a fdce 	bl	800d07c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80024e0:	2100      	movs	r1, #0
 80024e2:	2001      	movs	r0, #1
 80024e4:	f00c f892 	bl	800e60c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80024e8:	e022      	b.n	8002530 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d110      	bne.n	8002514 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80024f2:	4811      	ldr	r0, [pc, #68]	@ (8002538 <APPE_SysEvtReadyProcessing+0x110>)
 80024f4:	f009 ffde 	bl	800c4b4 <DbgTraceGetFileName>
 80024f8:	4601      	mov	r1, r0
 80024fa:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80024fe:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <APPE_SysEvtReadyProcessing+0x114>)
 8002500:	480f      	ldr	r0, [pc, #60]	@ (8002540 <APPE_SysEvtReadyProcessing+0x118>)
 8002502:	f00c ffe7 	bl	800f4d4 <iprintf>
 8002506:	4812      	ldr	r0, [pc, #72]	@ (8002550 <APPE_SysEvtReadyProcessing+0x128>)
 8002508:	f00c ffe4 	bl	800f4d4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
  return;
 8002512:	e00d      	b.n	8002530 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8002514:	4808      	ldr	r0, [pc, #32]	@ (8002538 <APPE_SysEvtReadyProcessing+0x110>)
 8002516:	f009 ffcd 	bl	800c4b4 <DbgTraceGetFileName>
 800251a:	4601      	mov	r1, r0
 800251c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002520:	4a06      	ldr	r2, [pc, #24]	@ (800253c <APPE_SysEvtReadyProcessing+0x114>)
 8002522:	4807      	ldr	r0, [pc, #28]	@ (8002540 <APPE_SysEvtReadyProcessing+0x118>)
 8002524:	f00c ffd6 	bl	800f4d4 <iprintf>
 8002528:	480a      	ldr	r0, [pc, #40]	@ (8002554 <APPE_SysEvtReadyProcessing+0x12c>)
 800252a:	f00c ffd3 	bl	800f4d4 <iprintf>
  return;
 800252e:	bf00      	nop
}
 8002530:	3728      	adds	r7, #40	@ 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	080119cc 	.word	0x080119cc
 800253c:	08012f40 	.word	0x08012f40
 8002540:	080119e4 	.word	0x080119e4
 8002544:	08011c70 	.word	0x08011c70
 8002548:	08011c8c 	.word	0x08011c8c
 800254c:	08011cb0 	.word	0x08011cb0
 8002550:	08011cd0 	.word	0x08011cd0
 8002554:	08011d04 	.word	0x08011d04

08002558 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002560:	f001 fdf6 	bl	8004150 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d00a      	beq.n	8002588 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002572:	f001 fe05 	bl	8004180 <HAL_GetTickFreq>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002580:	e002      	b.n	8002588 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002582:	f7ff fd0f 	bl	8001fa4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002586:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002588:	f001 fde2 	bl	8004150 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	429a      	cmp	r2, r3
 8002596:	d8f4      	bhi.n	8002582 <HAL_Delay+0x2a>
  }
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295
 80025aa:	f00c f85f 	bl	800e66c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80025b6:	bf00      	nop
}
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80025ca:	f04f 30ff 	mov.w	r0, #4294967295
 80025ce:	f00c f84d 	bl	800e66c <UTIL_SEQ_Run>
  return;
 80025d2:	bf00      	nop
}
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80025e2:	2100      	movs	r1, #0
 80025e4:	2008      	movs	r0, #8
 80025e6:	f00c f95f 	bl	800e8a8 <UTIL_SEQ_SetTask>
  return;
 80025ea:	bf00      	nop
}
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80025fa:	2002      	movs	r0, #2
 80025fc:	f00c f9c0 	bl	800e980 <UTIL_SEQ_SetEvt>
  return;
 8002600:	bf00      	nop
}
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002610:	2002      	movs	r0, #2
 8002612:	f00c f9d5 	bl	800e9c0 <UTIL_SEQ_WaitEvt>
  return;
 8002616:	bf00      	nop
}
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <LL_AHB1_GRP1_EnableClock>:
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800262a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800262c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4313      	orrs	r3, r2
 8002634:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800263a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4013      	ands	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002654:	2004      	movs	r0, #4
 8002656:	f7ff ffe2 	bl	800261e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800265a:	2001      	movs	r0, #1
 800265c:	f7ff ffdf 	bl	800261e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	200b      	movs	r0, #11
 8002666:	f002 fd7c 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800266a:	200b      	movs	r0, #11
 800266c:	f002 fd93 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	200c      	movs	r0, #12
 8002676:	f002 fd74 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800267a:	200c      	movs	r0, #12
 800267c:	f002 fd8b 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	200d      	movs	r0, #13
 8002686:	f002 fd6c 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800268a:	200d      	movs	r0, #13
 800268c:	f002 fd83 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	200e      	movs	r0, #14
 8002696:	f002 fd64 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800269a:	200e      	movs	r0, #14
 800269c:	f002 fd7b 	bl	8005196 <HAL_NVIC_EnableIRQ>

}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <LL_AHB2_GRP1_EnableClock>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7ff ffd9 	bl	80026a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	2002      	movs	r0, #2
 80026f4:	f7ff ffd6 	bl	80026a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f8:	2008      	movs	r0, #8
 80026fa:	f7ff ffd3 	bl	80026a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2004      	movs	r0, #4
 8002700:	f7ff ffd0 	bl	80026a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|LED_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	f241 0102 	movw	r1, #4098	@ 0x1002
 800270a:	4817      	ldr	r0, [pc, #92]	@ (8002768 <MX_GPIO_Init+0x90>)
 800270c:	f003 fa2a 	bl	8005b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002714:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002716:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800271a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002720:	1d3b      	adds	r3, r7, #4
 8002722:	4619      	mov	r1, r3
 8002724:	4811      	ldr	r0, [pc, #68]	@ (800276c <MX_GPIO_Init+0x94>)
 8002726:	f003 f8ad 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800272a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800272e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002730:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002734:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	4619      	mov	r1, r3
 800273e:	480c      	ldr	r0, [pc, #48]	@ (8002770 <MX_GPIO_Init+0x98>)
 8002740:	f003 f8a0 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LED_Pin;
 8002744:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274a:	2301      	movs	r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4803      	ldr	r0, [pc, #12]	@ (8002768 <MX_GPIO_Init+0x90>)
 800275c:	f003 f892 	bl	8005884 <HAL_GPIO_Init>

}
 8002760:	bf00      	nop
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	48000400 	.word	0x48000400
 800276c:	48000800 	.word	0x48000800
 8002770:	48000c00 	.word	0x48000c00

08002774 <LL_EXTI_EnableIT_0_31>:
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <LL_EXTI_EnableIT_0_31+0x24>)
 800277e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002782:	4905      	ldr	r1, [pc, #20]	@ (8002798 <LL_EXTI_EnableIT_0_31+0x24>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	58000800 	.word	0x58000800

0800279c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4904      	ldr	r1, [pc, #16]	@ (80027bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	58000800 	.word	0x58000800

080027c0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80027c6:	4b0d      	ldr	r3, [pc, #52]	@ (80027fc <ReadRtcSsrValue+0x3c>)
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80027ce:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <ReadRtcSsrValue+0x3c>)
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80027d6:	e005      	b.n	80027e4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80027dc:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <ReadRtcSsrValue+0x3c>)
 80027de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1f5      	bne.n	80027d8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80027ec:	683b      	ldr	r3, [r7, #0]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40002800 	.word	0x40002800

08002800 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	460a      	mov	r2, r1
 800280a:	71fb      	strb	r3, [r7, #7]
 800280c:	4613      	mov	r3, r2
 800280e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002810:	79ba      	ldrb	r2, [r7, #6]
 8002812:	491d      	ldr	r1, [pc, #116]	@ (8002888 <LinkTimerAfter+0x88>)
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3315      	adds	r3, #21
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d009      	beq.n	800283e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	4916      	ldr	r1, [pc, #88]	@ (8002888 <LinkTimerAfter+0x88>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3314      	adds	r3, #20
 800283a:	79fa      	ldrb	r2, [r7, #7]
 800283c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	4911      	ldr	r1, [pc, #68]	@ (8002888 <LinkTimerAfter+0x88>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	3315      	adds	r3, #21
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	490c      	ldr	r1, [pc, #48]	@ (8002888 <LinkTimerAfter+0x88>)
 8002856:	4613      	mov	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3314      	adds	r3, #20
 8002862:	79ba      	ldrb	r2, [r7, #6]
 8002864:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002866:	79ba      	ldrb	r2, [r7, #6]
 8002868:	4907      	ldr	r1, [pc, #28]	@ (8002888 <LinkTimerAfter+0x88>)
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3315      	adds	r3, #21
 8002876:	79fa      	ldrb	r2, [r7, #7]
 8002878:	701a      	strb	r2, [r3, #0]

  return;
 800287a:	bf00      	nop
}
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	200002b8 	.word	0x200002b8

0800288c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	4613      	mov	r3, r2
 800289a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800289c:	4b29      	ldr	r3, [pc, #164]	@ (8002944 <LinkTimerBefore+0xb8>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	79ba      	ldrb	r2, [r7, #6]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d032      	beq.n	800290e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80028a8:	79ba      	ldrb	r2, [r7, #6]
 80028aa:	4927      	ldr	r1, [pc, #156]	@ (8002948 <LinkTimerBefore+0xbc>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	440b      	add	r3, r1
 80028b6:	3314      	adds	r3, #20
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	4922      	ldr	r1, [pc, #136]	@ (8002948 <LinkTimerBefore+0xbc>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	3315      	adds	r3, #21
 80028cc:	79fa      	ldrb	r2, [r7, #7]
 80028ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	491d      	ldr	r1, [pc, #116]	@ (8002948 <LinkTimerBefore+0xbc>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3315      	adds	r3, #21
 80028e0:	79ba      	ldrb	r2, [r7, #6]
 80028e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80028e4:	79fa      	ldrb	r2, [r7, #7]
 80028e6:	4918      	ldr	r1, [pc, #96]	@ (8002948 <LinkTimerBefore+0xbc>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	3314      	adds	r3, #20
 80028f4:	7bfa      	ldrb	r2, [r7, #15]
 80028f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80028f8:	79ba      	ldrb	r2, [r7, #6]
 80028fa:	4913      	ldr	r1, [pc, #76]	@ (8002948 <LinkTimerBefore+0xbc>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3314      	adds	r3, #20
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800290c:	e014      	b.n	8002938 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	490d      	ldr	r1, [pc, #52]	@ (8002948 <LinkTimerBefore+0xbc>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	3315      	adds	r3, #21
 800291e:	79ba      	ldrb	r2, [r7, #6]
 8002920:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002922:	79ba      	ldrb	r2, [r7, #6]
 8002924:	4908      	ldr	r1, [pc, #32]	@ (8002948 <LinkTimerBefore+0xbc>)
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	440b      	add	r3, r1
 8002930:	3314      	adds	r3, #20
 8002932:	79fa      	ldrb	r2, [r7, #7]
 8002934:	701a      	strb	r2, [r3, #0]
  return;
 8002936:	bf00      	nop
}
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000348 	.word	0x20000348
 8002948:	200002b8 	.word	0x200002b8

0800294c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002956:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <linkTimer+0x144>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b06      	cmp	r3, #6
 800295e:	d118      	bne.n	8002992 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002960:	4b4b      	ldr	r3, [pc, #300]	@ (8002a90 <linkTimer+0x144>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b4b      	ldr	r3, [pc, #300]	@ (8002a94 <linkTimer+0x148>)
 8002968:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800296a:	4a49      	ldr	r2, [pc, #292]	@ (8002a90 <linkTimer+0x144>)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002970:	79fa      	ldrb	r2, [r7, #7]
 8002972:	4949      	ldr	r1, [pc, #292]	@ (8002a98 <linkTimer+0x14c>)
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	3315      	adds	r3, #21
 8002980:	2206      	movs	r2, #6
 8002982:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002984:	4b45      	ldr	r3, [pc, #276]	@ (8002a9c <linkTimer+0x150>)
 8002986:	f04f 32ff 	mov.w	r2, #4294967295
 800298a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	81fb      	strh	r3, [r7, #14]
 8002990:	e078      	b.n	8002a84 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002992:	f000 f909 	bl	8002ba8 <ReturnTimeElapsed>
 8002996:	4603      	mov	r3, r0
 8002998:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800299a:	79fa      	ldrb	r2, [r7, #7]
 800299c:	493e      	ldr	r1, [pc, #248]	@ (8002a98 <linkTimer+0x14c>)
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	3308      	adds	r3, #8
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	79fa      	ldrb	r2, [r7, #7]
 80029b0:	4419      	add	r1, r3
 80029b2:	4839      	ldr	r0, [pc, #228]	@ (8002a98 <linkTimer+0x14c>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4403      	add	r3, r0
 80029be:	3308      	adds	r3, #8
 80029c0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80029c2:	79fa      	ldrb	r2, [r7, #7]
 80029c4:	4934      	ldr	r1, [pc, #208]	@ (8002a98 <linkTimer+0x14c>)
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	3308      	adds	r3, #8
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80029d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a90 <linkTimer+0x144>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	4a2e      	ldr	r2, [pc, #184]	@ (8002a98 <linkTimer+0x14c>)
 80029e0:	460b      	mov	r3, r1
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	440b      	add	r3, r1
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	3308      	adds	r3, #8
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d337      	bcc.n	8002a64 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80029f4:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <linkTimer+0x144>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80029fa:	7b7a      	ldrb	r2, [r7, #13]
 80029fc:	4926      	ldr	r1, [pc, #152]	@ (8002a98 <linkTimer+0x14c>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	3315      	adds	r3, #21
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002a0e:	e013      	b.n	8002a38 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002a10:	7b7a      	ldrb	r2, [r7, #13]
 8002a12:	4921      	ldr	r1, [pc, #132]	@ (8002a98 <linkTimer+0x14c>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3315      	adds	r3, #21
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002a24:	7b7a      	ldrb	r2, [r7, #13]
 8002a26:	491c      	ldr	r1, [pc, #112]	@ (8002a98 <linkTimer+0x14c>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3315      	adds	r3, #21
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002a38:	7b3b      	ldrb	r3, [r7, #12]
 8002a3a:	2b06      	cmp	r3, #6
 8002a3c:	d00b      	beq.n	8002a56 <linkTimer+0x10a>
 8002a3e:	7b3a      	ldrb	r2, [r7, #12]
 8002a40:	4915      	ldr	r1, [pc, #84]	@ (8002a98 <linkTimer+0x14c>)
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3308      	adds	r3, #8
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d2dc      	bcs.n	8002a10 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002a56:	7b7a      	ldrb	r2, [r7, #13]
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fecf 	bl	8002800 <LinkTimerAfter>
 8002a62:	e00f      	b.n	8002a84 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <linkTimer+0x144>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff0c 	bl	800288c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002a74:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <linkTimer+0x144>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <linkTimer+0x148>)
 8002a7c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002a7e:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <linkTimer+0x144>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002a84:	89fb      	ldrh	r3, [r7, #14]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000348 	.word	0x20000348
 8002a94:	20000349 	.word	0x20000349
 8002a98:	200002b8 	.word	0x200002b8
 8002a9c:	2000034c 	.word	0x2000034c

08002aa0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	71fb      	strb	r3, [r7, #7]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002ab0:	4b39      	ldr	r3, [pc, #228]	@ (8002b98 <UnlinkTimer+0xf8>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d111      	bne.n	8002ae0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002abc:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <UnlinkTimer+0xf8>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <UnlinkTimer+0xfc>)
 8002ac4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002ac6:	79fa      	ldrb	r2, [r7, #7]
 8002ac8:	4935      	ldr	r1, [pc, #212]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3315      	adds	r3, #21
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b2f      	ldr	r3, [pc, #188]	@ (8002b98 <UnlinkTimer+0xf8>)
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e03e      	b.n	8002b5e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002ae0:	79fa      	ldrb	r2, [r7, #7]
 8002ae2:	492f      	ldr	r1, [pc, #188]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3314      	adds	r3, #20
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002af4:	79fa      	ldrb	r2, [r7, #7]
 8002af6:	492a      	ldr	r1, [pc, #168]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	3315      	adds	r3, #21
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002b08:	79f9      	ldrb	r1, [r7, #7]
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	4824      	ldr	r0, [pc, #144]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4403      	add	r3, r0
 8002b18:	3315      	adds	r3, #21
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2d8      	uxtb	r0, r3
 8002b1e:	4920      	ldr	r1, [pc, #128]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	440b      	add	r3, r1
 8002b2a:	3315      	adds	r3, #21
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b30:	7bbb      	ldrb	r3, [r7, #14]
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d013      	beq.n	8002b5e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002b36:	79f9      	ldrb	r1, [r7, #7]
 8002b38:	7bba      	ldrb	r2, [r7, #14]
 8002b3a:	4819      	ldr	r0, [pc, #100]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	440b      	add	r3, r1
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4403      	add	r3, r0
 8002b46:	3314      	adds	r3, #20
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	4914      	ldr	r1, [pc, #80]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	3314      	adds	r3, #20
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002b5e:	79fa      	ldrb	r2, [r7, #7]
 8002b60:	490f      	ldr	r1, [pc, #60]	@ (8002ba0 <UnlinkTimer+0x100>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002b72:	4b09      	ldr	r3, [pc, #36]	@ (8002b98 <UnlinkTimer+0xf8>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d107      	bne.n	8002b8c <UnlinkTimer+0xec>
 8002b7c:	79bb      	ldrb	r3, [r7, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d104      	bne.n	8002b8c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002b82:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <UnlinkTimer+0x104>)
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	601a      	str	r2, [r3, #0]
  }

  return;
 8002b8a:	bf00      	nop
 8002b8c:	bf00      	nop
}
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20000348 	.word	0x20000348
 8002b9c:	20000349 	.word	0x20000349
 8002ba0:	200002b8 	.word	0x200002b8
 8002ba4:	2000034c 	.word	0x2000034c

08002ba8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <ReturnTimeElapsed+0x70>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d026      	beq.n	8002c06 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002bb8:	f7ff fe02 	bl	80027c0 <ReadRtcSsrValue>
 8002bbc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002bbe:	4b16      	ldr	r3, [pc, #88]	@ (8002c18 <ReturnTimeElapsed+0x70>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d805      	bhi.n	8002bd4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <ReturnTimeElapsed+0x70>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	e00a      	b.n	8002bea <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002bd4:	4b11      	ldr	r3, [pc, #68]	@ (8002c1c <ReturnTimeElapsed+0x74>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002be0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c18 <ReturnTimeElapsed+0x70>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002bea:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <ReturnTimeElapsed+0x78>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <ReturnTimeElapsed+0x7c>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	40d3      	lsrs	r3, r2
 8002c02:	607b      	str	r3, [r7, #4]
 8002c04:	e001      	b.n	8002c0a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	b29b      	uxth	r3, r3
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000034c 	.word	0x2000034c
 8002c1c:	20000354 	.word	0x20000354
 8002c20:	20000352 	.word	0x20000352
 8002c24:	20000351 	.word	0x20000351

08002c28 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d108      	bne.n	8002c4a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002c38:	f7ff fdc2 	bl	80027c0 <ReadRtcSsrValue>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a21      	ldr	r2, [pc, #132]	@ (8002cc4 <RestartWakeupCounter+0x9c>)
 8002c40:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002c42:	2003      	movs	r0, #3
 8002c44:	f002 facf 	bl	80051e6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002c48:	e039      	b.n	8002cbe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d803      	bhi.n	8002c58 <RestartWakeupCounter+0x30>
 8002c50:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <RestartWakeupCounter+0xa0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d002      	beq.n	8002c5e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002c5e:	bf00      	nop
 8002c60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <RestartWakeupCounter+0xa4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f8      	beq.n	8002c60 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002c6e:	4b17      	ldr	r3, [pc, #92]	@ (8002ccc <RestartWakeupCounter+0xa4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <RestartWakeupCounter+0xa4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002c7e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002c80:	4b13      	ldr	r3, [pc, #76]	@ (8002cd0 <RestartWakeupCounter+0xa8>)
 8002c82:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002c86:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002c88:	2003      	movs	r0, #3
 8002c8a:	f002 faba 	bl	8005202 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002c8e:	4b11      	ldr	r3, [pc, #68]	@ (8002cd4 <RestartWakeupCounter+0xac>)
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	490e      	ldr	r1, [pc, #56]	@ (8002cd4 <RestartWakeupCounter+0xac>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002c9e:	f7ff fd8f 	bl	80027c0 <ReadRtcSsrValue>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <RestartWakeupCounter+0x9c>)
 8002ca6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <RestartWakeupCounter+0xa4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <RestartWakeupCounter+0xa4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cb6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002cb8:	f3af 8000 	nop.w
  return ;
 8002cbc:	bf00      	nop
}
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	2000034c 	.word	0x2000034c
 8002cc8:	20000351 	.word	0x20000351
 8002ccc:	20000398 	.word	0x20000398
 8002cd0:	58000800 	.word	0x58000800
 8002cd4:	40002800 	.word	0x40002800

08002cd8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002cde:	4b45      	ldr	r3, [pc, #276]	@ (8002df4 <RescheduleTimerList+0x11c>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cea:	d107      	bne.n	8002cfc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002cec:	bf00      	nop
 8002cee:	4b42      	ldr	r3, [pc, #264]	@ (8002df8 <RescheduleTimerList+0x120>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f8      	bne.n	8002cee <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8002df8 <RescheduleTimerList+0x120>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <RescheduleTimerList+0x120>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002dfc <RescheduleTimerList+0x124>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	493a      	ldr	r1, [pc, #232]	@ (8002e00 <RescheduleTimerList+0x128>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3308      	adds	r3, #8
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002d26:	f7ff ff3f 	bl	8002ba8 <ReturnTimeElapsed>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d205      	bcs.n	8002d42 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002d3a:	4b32      	ldr	r3, [pc, #200]	@ (8002e04 <RescheduleTimerList+0x12c>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e04d      	b.n	8002dde <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	4a30      	ldr	r2, [pc, #192]	@ (8002e08 <RescheduleTimerList+0x130>)
 8002d46:	8812      	ldrh	r2, [r2, #0]
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d906      	bls.n	8002d62 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002d54:	4b2c      	ldr	r3, [pc, #176]	@ (8002e08 <RescheduleTimerList+0x130>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <RescheduleTimerList+0x12c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e03d      	b.n	8002dde <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <RescheduleTimerList+0x12c>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d72:	e034      	b.n	8002dde <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	4922      	ldr	r1, [pc, #136]	@ (8002e00 <RescheduleTimerList+0x128>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	440b      	add	r3, r1
 8002d82:	3308      	adds	r3, #8
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d20a      	bcs.n	8002da2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	491c      	ldr	r1, [pc, #112]	@ (8002e00 <RescheduleTimerList+0x128>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	440b      	add	r3, r1
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	e013      	b.n	8002dca <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	4916      	ldr	r1, [pc, #88]	@ (8002e00 <RescheduleTimerList+0x128>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	3308      	adds	r3, #8
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	1ac9      	subs	r1, r1, r3
 8002dba:	4811      	ldr	r0, [pc, #68]	@ (8002e00 <RescheduleTimerList+0x128>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4403      	add	r3, r0
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	490c      	ldr	r1, [pc, #48]	@ (8002e00 <RescheduleTimerList+0x128>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3315      	adds	r3, #21
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d1c7      	bne.n	8002d74 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002de4:	89bb      	ldrh	r3, [r7, #12]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff1e 	bl	8002c28 <RestartWakeupCounter>

  return ;
 8002dec:	bf00      	nop
}
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40002800 	.word	0x40002800
 8002df8:	20000398 	.word	0x20000398
 8002dfc:	20000348 	.word	0x20000348
 8002e00:	200002b8 	.word	0x200002b8
 8002e04:	20000350 	.word	0x20000350
 8002e08:	20000356 	.word	0x20000356

08002e0c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	@ 0x28
 8002e10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e12:	f3ef 8310 	mrs	r3, PRIMASK
 8002e16:	617b      	str	r3, [r7, #20]
  return(result);
 8002e18:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1c:	b672      	cpsid	i
}
 8002e1e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e20:	4b59      	ldr	r3, [pc, #356]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	22ca      	movs	r2, #202	@ 0xca
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e28:	4b57      	ldr	r3, [pc, #348]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2253      	movs	r2, #83	@ 0x53
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002e30:	4b55      	ldr	r3, [pc, #340]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	4b54      	ldr	r3, [pc, #336]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002e40:	4b52      	ldr	r3, [pc, #328]	@ (8002f8c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002e48:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002e4c:	4950      	ldr	r1, [pc, #320]	@ (8002f90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	330c      	adds	r3, #12
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d16e      	bne.n	8002f40 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002e62:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002e66:	494a      	ldr	r1, [pc, #296]	@ (8002f90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002e76:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002e7a:	4945      	ldr	r1, [pc, #276]	@ (8002f90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	440b      	add	r3, r1
 8002e86:	3310      	adds	r3, #16
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002e8c:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d04c      	beq.n	8002f30 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002e96:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002e9a:	493d      	ldr	r1, [pc, #244]	@ (8002f90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	440b      	add	r3, r1
 8002ea6:	330d      	adds	r3, #13
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d124      	bne.n	8002efa <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fdf2 	bl	8002aa0 <UnlinkTimer>
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f383 8810 	msr	PRIMASK, r3
}
 8002ec6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002ec8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ecc:	4930      	ldr	r1, [pc, #192]	@ (8002f90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3304      	adds	r3, #4
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f9b8 	bl	8003258 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002ee8:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	22ca      	movs	r2, #202	@ 0xca
 8002eee:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2253      	movs	r2, #83	@ 0x53
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ef8:	e012      	b.n	8002f20 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002f06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f920 	bl	8003150 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	22ca      	movs	r2, #202	@ 0xca
 8002f16:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f18:	4b1b      	ldr	r3, [pc, #108]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2253      	movs	r2, #83	@ 0x53
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002f20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	4619      	mov	r1, r3
 8002f28:	69b8      	ldr	r0, [r7, #24]
 8002f2a:	f000 fa1b 	bl	8003364 <HW_TS_RTC_Int_AppNot>
 8002f2e:	e022      	b.n	8002f76 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002f30:	f7ff fed2 	bl	8002cd8 <RescheduleTimerList>
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	e01a      	b.n	8002f76 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002f40:	bf00      	nop
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f8      	beq.n	8002f42 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002f50:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002f60:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002f64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f383 8810 	msr	PRIMASK, r3
}
 8002f74:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f76:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22ff      	movs	r2, #255	@ 0xff
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002f7e:	bf00      	nop
}
 8002f80:	3728      	adds	r7, #40	@ 0x28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000398 	.word	0x20000398
 8002f8c:	20000348 	.word	0x20000348
 8002f90:	200002b8 	.word	0x200002b8
 8002f94:	20000350 	.word	0x20000350
 8002f98:	58000800 	.word	0x58000800

08002f9c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8003124 <HW_TS_Init+0x188>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	22ca      	movs	r2, #202	@ 0xca
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8003124 <HW_TS_Init+0x188>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2253      	movs	r2, #83	@ 0x53
 8002fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8003128 <HW_TS_Init+0x18c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a5a      	ldr	r2, [pc, #360]	@ (8003128 <HW_TS_Init+0x18c>)
 8002fbe:	f043 0320 	orr.w	r3, r3, #32
 8002fc2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002fc4:	4b58      	ldr	r3, [pc, #352]	@ (8003128 <HW_TS_Init+0x18c>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f1c3 0304 	rsb	r3, r3, #4
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b55      	ldr	r3, [pc, #340]	@ (800312c <HW_TS_Init+0x190>)
 8002fd8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002fda:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HW_TS_Init+0x18c>)
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002fe2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002fe6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	fa92 f2a2 	rbit	r2, r2
 8002fee:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	2a00      	cmp	r2, #0
 8002ff8:	d101      	bne.n	8002ffe <HW_TS_Init+0x62>
  {
    return 32U;
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	e003      	b.n	8003006 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	fab2 f282 	clz	r2, r2
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	40d3      	lsrs	r3, r2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b48      	ldr	r3, [pc, #288]	@ (8003130 <HW_TS_Init+0x194>)
 8003010:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8003012:	4b45      	ldr	r3, [pc, #276]	@ (8003128 <HW_TS_Init+0x18c>)
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	b29b      	uxth	r3, r3
 8003018:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800301c:	b29b      	uxth	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	4b44      	ldr	r3, [pc, #272]	@ (8003134 <HW_TS_Init+0x198>)
 8003024:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003026:	4b43      	ldr	r3, [pc, #268]	@ (8003134 <HW_TS_Init+0x198>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	3b01      	subs	r3, #1
 800302c:	4a40      	ldr	r2, [pc, #256]	@ (8003130 <HW_TS_Init+0x194>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003038:	4a3c      	ldr	r2, [pc, #240]	@ (800312c <HW_TS_Init+0x190>)
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	40d3      	lsrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003046:	4293      	cmp	r3, r2
 8003048:	d904      	bls.n	8003054 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800304a:	4b3b      	ldr	r3, [pc, #236]	@ (8003138 <HW_TS_Init+0x19c>)
 800304c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003050:	801a      	strh	r2, [r3, #0]
 8003052:	e003      	b.n	800305c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b37      	ldr	r3, [pc, #220]	@ (8003138 <HW_TS_Init+0x19c>)
 800305a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800305c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003060:	f7ff fb9c 	bl	800279c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003064:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003068:	f7ff fb84 	bl	8002774 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13d      	bne.n	80030ee <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003072:	4b32      	ldr	r3, [pc, #200]	@ (800313c <HW_TS_Init+0x1a0>)
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003078:	4b31      	ldr	r3, [pc, #196]	@ (8003140 <HW_TS_Init+0x1a4>)
 800307a:	f04f 32ff 	mov.w	r2, #4294967295
 800307e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003080:	2300      	movs	r3, #0
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e00c      	b.n	80030a0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003086:	7ffa      	ldrb	r2, [r7, #31]
 8003088:	492e      	ldr	r1, [pc, #184]	@ (8003144 <HW_TS_Init+0x1a8>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	330c      	adds	r3, #12
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800309a:	7ffb      	ldrb	r3, [r7, #31]
 800309c:	3301      	adds	r3, #1
 800309e:	77fb      	strb	r3, [r7, #31]
 80030a0:	7ffb      	ldrb	r3, [r7, #31]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d9ef      	bls.n	8003086 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80030a6:	4b28      	ldr	r3, [pc, #160]	@ (8003148 <HW_TS_Init+0x1ac>)
 80030a8:	2206      	movs	r2, #6
 80030aa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80030ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HW_TS_Init+0x188>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <HW_TS_Init+0x188>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HW_TS_Init+0x188>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <HW_TS_Init+0x188>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80030cc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80030ce:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <HW_TS_Init+0x1b0>)
 80030d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80030d4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80030d6:	2003      	movs	r0, #3
 80030d8:	f002 f893 	bl	8005202 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80030dc:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <HW_TS_Init+0x188>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HW_TS_Init+0x188>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	e009      	b.n	8003102 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <HW_TS_Init+0x188>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80030fc:	2003      	movs	r0, #3
 80030fe:	f002 f872 	bl	80051e6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003102:	4b08      	ldr	r3, [pc, #32]	@ (8003124 <HW_TS_Init+0x188>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	22ff      	movs	r2, #255	@ 0xff
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800310a:	2200      	movs	r2, #0
 800310c:	2103      	movs	r1, #3
 800310e:	2003      	movs	r0, #3
 8003110:	f002 f827 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003114:	2003      	movs	r0, #3
 8003116:	f002 f83e 	bl	8005196 <HAL_NVIC_EnableIRQ>

  return;
 800311a:	bf00      	nop
}
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000398 	.word	0x20000398
 8003128:	40002800 	.word	0x40002800
 800312c:	20000351 	.word	0x20000351
 8003130:	20000352 	.word	0x20000352
 8003134:	20000354 	.word	0x20000354
 8003138:	20000356 	.word	0x20000356
 800313c:	20000350 	.word	0x20000350
 8003140:	2000034c 	.word	0x2000034c
 8003144:	200002b8 	.word	0x200002b8
 8003148:	20000348 	.word	0x20000348
 800314c:	58000800 	.word	0x58000800

08003150 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800315a:	f3ef 8310 	mrs	r3, PRIMASK
 800315e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003160:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003162:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003164:	b672      	cpsid	i
}
 8003166:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003168:	2003      	movs	r0, #3
 800316a:	f002 f822 	bl	80051b2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HW_TS_Stop+0xf0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	22ca      	movs	r2, #202	@ 0xca
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24
 8003176:	4b32      	ldr	r3, [pc, #200]	@ (8003240 <HW_TS_Stop+0xf0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2253      	movs	r2, #83	@ 0x53
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800317e:	79fa      	ldrb	r2, [r7, #7]
 8003180:	4930      	ldr	r1, [pc, #192]	@ (8003244 <HW_TS_Stop+0xf4>)
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	440b      	add	r3, r1
 800318c:	330c      	adds	r3, #12
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d142      	bne.n	800321c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fc80 	bl	8002aa0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80031a0:	4b29      	ldr	r3, [pc, #164]	@ (8003248 <HW_TS_Stop+0xf8>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d12f      	bne.n	800320c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80031ac:	4b27      	ldr	r3, [pc, #156]	@ (800324c <HW_TS_Stop+0xfc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b8:	d107      	bne.n	80031ca <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80031ba:	bf00      	nop
 80031bc:	4b20      	ldr	r3, [pc, #128]	@ (8003240 <HW_TS_Stop+0xf0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f8      	bne.n	80031bc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80031ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003240 <HW_TS_Stop+0xf0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003240 <HW_TS_Stop+0xf0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031d8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80031da:	bf00      	nop
 80031dc:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <HW_TS_Stop+0xf0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f8      	beq.n	80031dc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HW_TS_Stop+0xf0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4b13      	ldr	r3, [pc, #76]	@ (8003240 <HW_TS_Stop+0xf0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80031fa:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <HW_TS_Stop+0x100>)
 80031fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003202:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003204:	2003      	movs	r0, #3
 8003206:	f001 fffc 	bl	8005202 <HAL_NVIC_ClearPendingIRQ>
 800320a:	e007      	b.n	800321c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800320c:	4b11      	ldr	r3, [pc, #68]	@ (8003254 <HW_TS_Stop+0x104>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	7cfa      	ldrb	r2, [r7, #19]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003218:	f7ff fd5e 	bl	8002cd8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800321c:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <HW_TS_Stop+0xf0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	22ff      	movs	r2, #255	@ 0xff
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003224:	2003      	movs	r0, #3
 8003226:	f001 ffb6 	bl	8005196 <HAL_NVIC_EnableIRQ>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003236:	bf00      	nop
}
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000398 	.word	0x20000398
 8003244:	200002b8 	.word	0x200002b8
 8003248:	20000348 	.word	0x20000348
 800324c:	40002800 	.word	0x40002800
 8003250:	58000800 	.word	0x58000800
 8003254:	20000349 	.word	0x20000349

08003258 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003264:	79fa      	ldrb	r2, [r7, #7]
 8003266:	493b      	ldr	r1, [pc, #236]	@ (8003354 <HW_TS_Start+0xfc>)
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	330c      	adds	r3, #12
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d103      	bne.n	8003284 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff ff66 	bl	8003150 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003284:	f3ef 8310 	mrs	r3, PRIMASK
 8003288:	60fb      	str	r3, [r7, #12]
  return(result);
 800328a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800328c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800328e:	b672      	cpsid	i
}
 8003290:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003292:	2003      	movs	r0, #3
 8003294:	f001 ff8d 	bl	80051b2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003298:	4b2f      	ldr	r3, [pc, #188]	@ (8003358 <HW_TS_Start+0x100>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	22ca      	movs	r2, #202	@ 0xca
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24
 80032a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003358 <HW_TS_Start+0x100>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2253      	movs	r2, #83	@ 0x53
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80032a8:	79fa      	ldrb	r2, [r7, #7]
 80032aa:	492a      	ldr	r1, [pc, #168]	@ (8003354 <HW_TS_Start+0xfc>)
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	330c      	adds	r3, #12
 80032b8:	2202      	movs	r2, #2
 80032ba:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80032bc:	79fa      	ldrb	r2, [r7, #7]
 80032be:	4925      	ldr	r1, [pc, #148]	@ (8003354 <HW_TS_Start+0xfc>)
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	3308      	adds	r3, #8
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80032d0:	79fa      	ldrb	r2, [r7, #7]
 80032d2:	4920      	ldr	r1, [pc, #128]	@ (8003354 <HW_TS_Start+0xfc>)
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3304      	adds	r3, #4
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fb30 	bl	800294c <linkTimer>
 80032ec:	4603      	mov	r3, r0
 80032ee:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80032f0:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HW_TS_Start+0x104>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80032f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HW_TS_Start+0x108>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	7c7a      	ldrb	r2, [r7, #17]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d002      	beq.n	8003308 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8003302:	f7ff fce9 	bl	8002cd8 <RescheduleTimerList>
 8003306:	e013      	b.n	8003330 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003308:	79fa      	ldrb	r2, [r7, #7]
 800330a:	4912      	ldr	r1, [pc, #72]	@ (8003354 <HW_TS_Start+0xfc>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3308      	adds	r3, #8
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	8a7b      	ldrh	r3, [r7, #18]
 800331c:	79fa      	ldrb	r2, [r7, #7]
 800331e:	1ac9      	subs	r1, r1, r3
 8003320:	480c      	ldr	r0, [pc, #48]	@ (8003354 <HW_TS_Start+0xfc>)
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4403      	add	r3, r0
 800332c:	3308      	adds	r3, #8
 800332e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003330:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HW_TS_Start+0x100>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	22ff      	movs	r2, #255	@ 0xff
 8003336:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003338:	2003      	movs	r0, #3
 800333a:	f001 ff2c 	bl	8005196 <HAL_NVIC_EnableIRQ>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800334a:	bf00      	nop
}
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	200002b8 	.word	0x200002b8
 8003358:	20000398 	.word	0x20000398
 800335c:	20000348 	.word	0x20000348
 8003360:	20000349 	.word	0x20000349

08003364 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	460b      	mov	r3, r1
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4798      	blx	r3

  return;
 8003376:	bf00      	nop
}
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	4603      	mov	r3, r0
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	4613      	mov	r3, r2
 8003390:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003396:	2300      	movs	r3, #0
 8003398:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10e      	bne.n	80033be <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80033a0:	4a17      	ldr	r2, [pc, #92]	@ (8003400 <HW_UART_Transmit_DMA+0x80>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80033a6:	4b17      	ldr	r3, [pc, #92]	@ (8003404 <HW_UART_Transmit_DMA+0x84>)
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HW_UART_Transmit_DMA+0x88>)
 80033aa:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80033ac:	89bb      	ldrh	r3, [r7, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	4814      	ldr	r0, [pc, #80]	@ (8003404 <HW_UART_Transmit_DMA+0x84>)
 80033b4:	f005 fe3c 	bl	8009030 <HAL_UART_Transmit_DMA>
 80033b8:	4603      	mov	r3, r0
 80033ba:	75fb      	strb	r3, [r7, #23]
            break;
 80033bc:	e000      	b.n	80033c0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80033be:	bf00      	nop
    }

    switch (hal_status)
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d816      	bhi.n	80033f4 <HW_UART_Transmit_DMA+0x74>
 80033c6:	a201      	add	r2, pc, #4	@ (adr r2, 80033cc <HW_UART_Transmit_DMA+0x4c>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033e3 	.word	0x080033e3
 80033d4:	080033e9 	.word	0x080033e9
 80033d8:	080033ef 	.word	0x080033ef
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80033dc:	2300      	movs	r3, #0
 80033de:	75bb      	strb	r3, [r7, #22]
            break;
 80033e0:	e009      	b.n	80033f6 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75bb      	strb	r3, [r7, #22]
            break;
 80033e6:	e006      	b.n	80033f6 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80033e8:	2302      	movs	r3, #2
 80033ea:	75bb      	strb	r3, [r7, #22]
            break;
 80033ec:	e003      	b.n	80033f6 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80033ee:	2303      	movs	r3, #3
 80033f0:	75bb      	strb	r3, [r7, #22]
            break;
 80033f2:	e000      	b.n	80033f6 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80033f4:	bf00      	nop
    }

    return hw_status;
 80033f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000358 	.word	0x20000358
 8003404:	200004e4 	.word	0x200004e4
 8003408:	40013800 	.word	0x40013800

0800340c <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_UART_TxCpltCallback+0x34>)
 800341c:	429a      	cmp	r2, r3
 800341e:	d107      	bne.n	8003430 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003420:	4b08      	ldr	r3, [pc, #32]	@ (8003444 <HAL_UART_TxCpltCallback+0x38>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_UART_TxCpltCallback+0x38>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4798      	blx	r3
            }
            break;
 800342e:	e001      	b.n	8003434 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003434:	bf00      	nop
    }

    return;
 8003436:	bf00      	nop
}
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40013800 	.word	0x40013800
 8003444:	20000358 	.word	0x20000358

08003448 <LL_AHB3_GRP1_EnableClock>:
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4313      	orrs	r3, r2
 800345e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800346c:	68fb      	ldr	r3, [r7, #12]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8003480:	4b06      	ldr	r3, [pc, #24]	@ (800349c <MX_IPCC_Init+0x20>)
 8003482:	4a07      	ldr	r2, [pc, #28]	@ (80034a0 <MX_IPCC_Init+0x24>)
 8003484:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003486:	4805      	ldr	r0, [pc, #20]	@ (800349c <MX_IPCC_Init+0x20>)
 8003488:	f002 fba8 	bl	8005bdc <HAL_IPCC_Init>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8003492:	f000 f8ef 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000035c 	.word	0x2000035c
 80034a0:	58000c00 	.word	0x58000c00

080034a4 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <HAL_IPCC_MspInit+0x24>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d103      	bne.n	80034be <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80034b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80034ba:	f7ff ffc5 	bl	8003448 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	58000c00 	.word	0x58000c00

080034cc <LL_RCC_LSE_SetDriveCapability>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034dc:	f023 0218 	bic.w	r2, r3, #24
 80034e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034fc:	f000 fdba 	bl	8004074 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003500:	f7fe fd90 	bl	8002024 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003504:	f000 f822 	bl	800354c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003508:	f000 f894 	bl	8003634 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800350c:	f7ff ffb6 	bl	800347c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8003510:	f000 f8b6 	bl	8003680 <MX_RF_Init>
  MX_GPIO_Init();
 8003514:	f7ff f8e0 	bl	80026d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003518:	f7ff f89a 	bl	8002650 <MX_DMA_Init>
  MX_ADC1_Init();
 800351c:	f7fe fa7e 	bl	8001a1c <MX_ADC1_Init>
  MX_RTC_Init();
 8003520:	f000 f8e0 	bl	80036e4 <MX_RTC_Init>
  MX_SPI2_Init();
 8003524:	f000 f978 	bl	8003818 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003528:	f000 fc3e 	bl	8003da8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800352c:	2201      	movs	r2, #1
 800352e:	2102      	movs	r1, #2
 8003530:	4805      	ldr	r0, [pc, #20]	@ (8003548 <main+0x50>)
 8003532:	f002 fb17 	bl	8005b64 <HAL_GPIO_WritePin>
  APPD_Init();
 8003536:	f7fe fb70 	bl	8001c1a <APPD_Init>
//  lsm6dsv16b_pedometer();
  lsm6dsv16b_pedometer();
 800353a:	f7fd fd5b 	bl	8000ff4 <lsm6dsv16b_pedometer>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800353e:	f7fe fd7f 	bl	8002040 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003542:	f7ff f82e 	bl	80025a2 <MX_APPE_Process>
 8003546:	e7fc      	b.n	8003542 <main+0x4a>
 8003548:	48000400 	.word	0x48000400

0800354c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b09a      	sub	sp, #104	@ 0x68
 8003550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003552:	f107 0320 	add.w	r3, r7, #32
 8003556:	2248      	movs	r2, #72	@ 0x48
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f00c f93e 	bl	800f7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	615a      	str	r2, [r3, #20]
 8003570:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800357c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003580:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f023 0303 	bic.w	r3, r3, #3
 800358c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003596:	f002 fc33 	bl	8005e00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800359a:	2010      	movs	r0, #16
 800359c:	f7ff ff96 	bl	80034cc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a0:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <SystemClock_Config+0xe4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035a8:	4a21      	ldr	r2, [pc, #132]	@ (8003630 <SystemClock_Config+0xe4>)
 80035aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003630 <SystemClock_Config+0xe4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80035bc:	2327      	movs	r3, #39	@ 0x27
 80035be:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80035c6:	2301      	movs	r3, #1
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80035d0:	2301      	movs	r3, #1
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035d4:	2340      	movs	r3, #64	@ 0x40
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80035d8:	2300      	movs	r3, #0
 80035da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80035dc:	2360      	movs	r3, #96	@ 0x60
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035e4:	f107 0320 	add.w	r3, r7, #32
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 ffef 	bl	80065cc <HAL_RCC_OscConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80035f4:	f000 f83e 	bl	8003674 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80035f8:	236f      	movs	r3, #111	@ 0x6f
 80035fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80035fc:	2302      	movs	r3, #2
 80035fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800360c:	2300      	movs	r3, #0
 800360e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f003 fb4b 	bl	8006cb4 <HAL_RCC_ClockConfig>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8003624:	f000 f826 	bl	8003674 <Error_Handler>
  }
}
 8003628:	bf00      	nop
 800362a:	3768      	adds	r7, #104	@ 0x68
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	58000400 	.word	0x58000400

08003634 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b094      	sub	sp, #80	@ 0x50
 8003638:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800363a:	463b      	mov	r3, r7
 800363c:	2250      	movs	r2, #80	@ 0x50
 800363e:	2100      	movs	r1, #0
 8003640:	4618      	mov	r0, r3
 8003642:	f00c f8cb 	bl	800f7dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003646:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800364a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800364c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003650:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003652:	2302      	movs	r3, #2
 8003654:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8003656:	2300      	movs	r3, #0
 8003658:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365a:	463b      	mov	r3, r7
 800365c:	4618      	mov	r0, r3
 800365e:	f003 ff66 	bl	800752e <HAL_RCCEx_PeriphCLKConfig>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003668:	f000 f804 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800366c:	bf00      	nop
 800366e:	3750      	adds	r7, #80	@ 0x50
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003678:	b672      	cpsid	i
}
 800367a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <Error_Handler+0x8>

08003680 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800369e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_APB1_GRP1_EnableClock>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80036c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036d4:	68fb      	ldr	r3, [r7, #12]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036e8:	4b16      	ldr	r3, [pc, #88]	@ (8003744 <MX_RTC_Init+0x60>)
 80036ea:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <MX_RTC_Init+0x64>)
 80036ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <MX_RTC_Init+0x60>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <MX_RTC_Init+0x60>)
 80036f6:	220f      	movs	r2, #15
 80036f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <MX_RTC_Init+0x60>)
 80036fc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003700:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <MX_RTC_Init+0x60>)
 8003704:	2200      	movs	r2, #0
 8003706:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <MX_RTC_Init+0x60>)
 800370a:	2200      	movs	r2, #0
 800370c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <MX_RTC_Init+0x60>)
 8003710:	2200      	movs	r2, #0
 8003712:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <MX_RTC_Init+0x60>)
 8003716:	2200      	movs	r2, #0
 8003718:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800371a:	480a      	ldr	r0, [pc, #40]	@ (8003744 <MX_RTC_Init+0x60>)
 800371c:	f004 f98e 	bl	8007a3c <HAL_RTC_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003726:	f7ff ffa5 	bl	8003674 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800372a:	2200      	movs	r2, #0
 800372c:	2100      	movs	r1, #0
 800372e:	4805      	ldr	r0, [pc, #20]	@ (8003744 <MX_RTC_Init+0x60>)
 8003730:	f004 fa84 	bl	8007c3c <HAL_RTCEx_SetWakeUpTimer_IT>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800373a:	f7ff ff9b 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000398 	.word	0x20000398
 8003748:	40002800 	.word	0x40002800

0800374c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b096      	sub	sp, #88	@ 0x58
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003754:	f107 0308 	add.w	r3, r7, #8
 8003758:	2250      	movs	r2, #80	@ 0x50
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f00c f83d 	bl	800f7dc <memset>
  if(rtcHandle->Instance==RTC)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <HAL_RTC_MspInit+0x64>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d11d      	bne.n	80037a8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800376c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003770:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003778:	f107 0308 	add.w	r3, r7, #8
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fed6 	bl	800752e <HAL_RCCEx_PeriphCLKConfig>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003788:	f7ff ff74 	bl	8003674 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800378c:	f7ff ff7f 	bl	800368e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003790:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003794:	f7ff ff8c 	bl	80036b0 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	2003      	movs	r0, #3
 800379e:	f001 fce0 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037a2:	2003      	movs	r0, #3
 80037a4:	f001 fcf7 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037a8:	bf00      	nop
 80037aa:	3758      	adds	r7, #88	@ 0x58
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40002800 	.word	0x40002800

080037b4 <LL_AHB2_GRP1_EnableClock>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_APB1_GRP1_EnableClock>:
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003802:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800381c:	4b1b      	ldr	r3, [pc, #108]	@ (800388c <MX_SPI2_Init+0x74>)
 800381e:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <MX_SPI2_Init+0x78>)
 8003820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <MX_SPI2_Init+0x74>)
 8003824:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <MX_SPI2_Init+0x74>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003830:	4b16      	ldr	r3, [pc, #88]	@ (800388c <MX_SPI2_Init+0x74>)
 8003832:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003836:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003838:	4b14      	ldr	r3, [pc, #80]	@ (800388c <MX_SPI2_Init+0x74>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800383e:	4b13      	ldr	r3, [pc, #76]	@ (800388c <MX_SPI2_Init+0x74>)
 8003840:	2200      	movs	r2, #0
 8003842:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <MX_SPI2_Init+0x74>)
 8003846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800384a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800384c:	4b0f      	ldr	r3, [pc, #60]	@ (800388c <MX_SPI2_Init+0x74>)
 800384e:	2210      	movs	r2, #16
 8003850:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <MX_SPI2_Init+0x74>)
 8003854:	2200      	movs	r2, #0
 8003856:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <MX_SPI2_Init+0x74>)
 800385a:	2200      	movs	r2, #0
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800385e:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <MX_SPI2_Init+0x74>)
 8003860:	2200      	movs	r2, #0
 8003862:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003864:	4b09      	ldr	r3, [pc, #36]	@ (800388c <MX_SPI2_Init+0x74>)
 8003866:	2207      	movs	r2, #7
 8003868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800386a:	4b08      	ldr	r3, [pc, #32]	@ (800388c <MX_SPI2_Init+0x74>)
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <MX_SPI2_Init+0x74>)
 8003872:	2208      	movs	r2, #8
 8003874:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003876:	4805      	ldr	r0, [pc, #20]	@ (800388c <MX_SPI2_Init+0x74>)
 8003878:	f004 fa9c 	bl	8007db4 <HAL_SPI_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003882:	f7ff fef7 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200003bc 	.word	0x200003bc
 8003890:	40003800 	.word	0x40003800

08003894 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 030c 	add.w	r3, r7, #12
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a46      	ldr	r2, [pc, #280]	@ (80039cc <HAL_SPI_MspInit+0x138>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	f040 8085 	bne.w	80039c2 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80038bc:	f7ff ff93 	bl	80037e6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c0:	2002      	movs	r0, #2
 80038c2:	f7ff ff77 	bl	80037b4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	2008      	movs	r0, #8
 80038c8:	f7ff ff74 	bl	80037b4 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2300      	movs	r3, #0
 80038dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038de:	2305      	movs	r3, #5
 80038e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4619      	mov	r1, r3
 80038e8:	4839      	ldr	r0, [pc, #228]	@ (80039d0 <HAL_SPI_MspInit+0x13c>)
 80038ea:	f001 ffcb 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80038ee:	2318      	movs	r3, #24
 80038f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	2302      	movs	r3, #2
 80038f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80038fe:	2305      	movs	r3, #5
 8003900:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	4619      	mov	r1, r3
 8003908:	4832      	ldr	r0, [pc, #200]	@ (80039d4 <HAL_SPI_MspInit+0x140>)
 800390a:	f001 ffbb 	bl	8005884 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 800390e:	4b32      	ldr	r3, [pc, #200]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003910:	4a32      	ldr	r2, [pc, #200]	@ (80039dc <HAL_SPI_MspInit+0x148>)
 8003912:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003914:	4b30      	ldr	r3, [pc, #192]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003916:	2208      	movs	r2, #8
 8003918:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800391a:	4b2f      	ldr	r3, [pc, #188]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003920:	4b2d      	ldr	r3, [pc, #180]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003926:	4b2c      	ldr	r3, [pc, #176]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003928:	2280      	movs	r2, #128	@ 0x80
 800392a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392c:	4b2a      	ldr	r3, [pc, #168]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 800392e:	2200      	movs	r2, #0
 8003930:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003932:	4b29      	ldr	r3, [pc, #164]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003938:	4b27      	ldr	r3, [pc, #156]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800393e:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003940:	2200      	movs	r2, #0
 8003942:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003944:	4824      	ldr	r0, [pc, #144]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003946:	f001 fc6b 	bl	8005220 <HAL_DMA_Init>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003950:	f7ff fe90 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a20      	ldr	r2, [pc, #128]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 8003958:	659a      	str	r2, [r3, #88]	@ 0x58
 800395a:	4a1f      	ldr	r2, [pc, #124]	@ (80039d8 <HAL_SPI_MspInit+0x144>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel4;
 8003960:	4b1f      	ldr	r3, [pc, #124]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003962:	4a20      	ldr	r2, [pc, #128]	@ (80039e4 <HAL_SPI_MspInit+0x150>)
 8003964:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8003966:	4b1e      	ldr	r3, [pc, #120]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003968:	2209      	movs	r2, #9
 800396a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800396c:	4b1c      	ldr	r3, [pc, #112]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 800396e:	2210      	movs	r2, #16
 8003970:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003972:	4b1b      	ldr	r3, [pc, #108]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 800397a:	2280      	movs	r2, #128	@ 0x80
 800397c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800397e:	4b18      	ldr	r3, [pc, #96]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003984:	4b16      	ldr	r3, [pc, #88]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800398a:	4b15      	ldr	r3, [pc, #84]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 800398c:	2200      	movs	r2, #0
 800398e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003990:	4b13      	ldr	r3, [pc, #76]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003992:	2200      	movs	r2, #0
 8003994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8003996:	4812      	ldr	r0, [pc, #72]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 8003998:	f001 fc42 	bl	8005220 <HAL_DMA_Init>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80039a2:	f7ff fe67 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80039ac:	4a0c      	ldr	r2, [pc, #48]	@ (80039e0 <HAL_SPI_MspInit+0x14c>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2100      	movs	r1, #0
 80039b6:	2023      	movs	r0, #35	@ 0x23
 80039b8:	f001 fbd3 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80039bc:	2023      	movs	r0, #35	@ 0x23
 80039be:	f001 fbea 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40003800 	.word	0x40003800
 80039d0:	48000400 	.word	0x48000400
 80039d4:	48000c00 	.word	0x48000c00
 80039d8:	20000420 	.word	0x20000420
 80039dc:	40020030 	.word	0x40020030
 80039e0:	20000480 	.word	0x20000480
 80039e4:	40020044 	.word	0x40020044

080039e8 <LL_AHB3_GRP1_EnableClock>:
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80039f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003a20:	463b      	mov	r3, r7
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003a28:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003a2c:	f7ff ffdc 	bl	80039e8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2100      	movs	r1, #0
 8003a34:	202e      	movs	r0, #46	@ 0x2e
 8003a36:	f001 fb94 	bl	8005162 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003a3a:	202e      	movs	r0, #46	@ 0x2e
 8003a3c:	f001 fbab 	bl	8005196 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003a48:	463b      	mov	r3, r7
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f002 f9e8 	bl	8005e20 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003a50:	f002 fa28 	bl	8005ea4 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <NMI_Handler+0x4>

08003a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <HardFault_Handler+0x4>

08003a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <MemManage_Handler+0x4>

08003a74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <BusFault_Handler+0x4>

08003a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <UsageFault_Handler+0x4>

08003a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab2:	f000 fb39 	bl	8004128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003abe:	f7ff f9a5 	bl	8002e0c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003acc:	4802      	ldr	r0, [pc, #8]	@ (8003ad8 <DMA1_Channel1_IRQHandler+0x10>)
 8003ace:	f001 fd88 	bl	80055e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000578 	.word	0x20000578

08003adc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003ae0:	4802      	ldr	r0, [pc, #8]	@ (8003aec <DMA1_Channel2_IRQHandler+0x10>)
 8003ae2:	f001 fd7e 	bl	80055e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200005d8 	.word	0x200005d8

08003af0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003af4:	4802      	ldr	r0, [pc, #8]	@ (8003b00 <DMA1_Channel3_IRQHandler+0x10>)
 8003af6:	f001 fd74 	bl	80055e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000420 	.word	0x20000420

08003b04 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <DMA1_Channel4_IRQHandler+0x10>)
 8003b0a:	f001 fd6a 	bl	80055e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000480 	.word	0x20000480

08003b18 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <SPI2_IRQHandler+0x10>)
 8003b1e:	f004 feb9 	bl	8008894 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200003bc 	.word	0x200003bc

08003b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b30:	4802      	ldr	r0, [pc, #8]	@ (8003b3c <USART1_IRQHandler+0x10>)
 8003b32:	f005 fafd 	bl	8009130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200004e4 	.word	0x200004e4

08003b40 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003b44:	f002 f826 	bl	8005b94 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return 1;
 8003b50:	2301      	movs	r3, #1
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_kill>:

int _kill(int pid, int sig)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b66:	f00b fea1 	bl	800f8ac <__errno>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2216      	movs	r2, #22
 8003b6e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_exit>:

void _exit (int status)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b84:	f04f 31ff 	mov.w	r1, #4294967295
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ffe7 	bl	8003b5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b8e:	bf00      	nop
 8003b90:	e7fd      	b.n	8003b8e <_exit+0x12>

08003b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e00a      	b.n	8003bba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	4601      	mov	r1, r0
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	60ba      	str	r2, [r7, #8]
 8003bb0:	b2ca      	uxtb	r2, r1
 8003bb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	dbf0      	blt.n	8003ba4 <_read+0x12>
  }

  return len;
 8003bc2:	687b      	ldr	r3, [r7, #4]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_close>:
  }
  return len;
}

int _close(int file)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bf4:	605a      	str	r2, [r3, #4]
  return 0;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_isatty>:

int _isatty(int file)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c3c:	4a14      	ldr	r2, [pc, #80]	@ (8003c90 <_sbrk+0x5c>)
 8003c3e:	4b15      	ldr	r3, [pc, #84]	@ (8003c94 <_sbrk+0x60>)
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <_sbrk+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c50:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <_sbrk+0x64>)
 8003c52:	4a12      	ldr	r2, [pc, #72]	@ (8003c9c <_sbrk+0x68>)
 8003c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c56:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <_sbrk+0x64>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d207      	bcs.n	8003c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c64:	f00b fe22 	bl	800f8ac <__errno>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c72:	e009      	b.n	8003c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c74:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <_sbrk+0x64>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c7a:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <_sbrk+0x64>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	4a05      	ldr	r2, [pc, #20]	@ (8003c98 <_sbrk+0x64>)
 8003c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20030000 	.word	0x20030000
 8003c94:	00000400 	.word	0x00000400
 8003c98:	200004e0 	.word	0x200004e0
 8003c9c:	20001958 	.word	0x20001958

08003ca0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003ca4:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <SystemInit+0x98>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	4a23      	ldr	r2, [pc, #140]	@ (8003d38 <SystemInit+0x98>)
 8003cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003ccc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cd8:	4b18      	ldr	r3, [pc, #96]	@ (8003d3c <SystemInit+0x9c>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cea:	f023 0305 	bic.w	r3, r3, #5
 8003cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <SystemInit+0xa0>)
 8003d0c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d12:	4a0b      	ldr	r2, [pc, #44]	@ (8003d40 <SystemInit+0xa0>)
 8003d14:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00
 8003d3c:	faf6fefb 	.word	0xfaf6fefb
 8003d40:	22041000 	.word	0x22041000

08003d44 <LL_AHB2_GRP1_EnableClock>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d68:	68fb      	ldr	r3, [r7, #12]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_APB2_GRP1_EnableClock>:
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4013      	ands	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dac:	4b23      	ldr	r3, [pc, #140]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dae:	4a24      	ldr	r2, [pc, #144]	@ (8003e40 <MX_USART1_UART_Init+0x98>)
 8003db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003db2:	4b22      	ldr	r3, [pc, #136]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dba:	4b20      	ldr	r3, [pc, #128]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dce:	220c      	movs	r2, #12
 8003dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8003dd8:	4b18      	ldr	r3, [pc, #96]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003dde:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003de0:	4b16      	ldr	r3, [pc, #88]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003de6:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dec:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003df2:	4812      	ldr	r0, [pc, #72]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003df4:	f005 f83e 	bl	8008e74 <HAL_UART_Init>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003dfe:	f7ff fc39 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e02:	2100      	movs	r1, #0
 8003e04:	480d      	ldr	r0, [pc, #52]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003e06:	f006 faac 	bl	800a362 <HAL_UARTEx_SetTxFifoThreshold>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003e10:	f7ff fc30 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e14:	2100      	movs	r1, #0
 8003e16:	4809      	ldr	r0, [pc, #36]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003e18:	f006 fae1 	bl	800a3de <HAL_UARTEx_SetRxFifoThreshold>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003e22:	f7ff fc27 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e26:	4805      	ldr	r0, [pc, #20]	@ (8003e3c <MX_USART1_UART_Init+0x94>)
 8003e28:	f006 fa62 	bl	800a2f0 <HAL_UARTEx_DisableFifoMode>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003e32:	f7ff fc1f 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200004e4 	.word	0x200004e4
 8003e40:	40013800 	.word	0x40013800

08003e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b09c      	sub	sp, #112	@ 0x70
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e5c:	f107 030c 	add.w	r3, r7, #12
 8003e60:	2250      	movs	r2, #80	@ 0x50
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f00b fcb9 	bl	800f7dc <memset>
  if(uartHandle->Instance==USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8003fa8 <HAL_UART_MspInit+0x164>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	f040 8095 	bne.w	8003fa0 <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	4618      	mov	r0, r3
 8003e84:	f003 fb53 	bl	800752e <HAL_RCCEx_PeriphCLKConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e8e:	f7ff fbf1 	bl	8003674 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e92:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e96:	f7ff ff6e 	bl	8003d76 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	f7ff ff52 	bl	8003d44 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	f7ff ff4f 	bl	8003d44 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eb6:	2307      	movs	r3, #7
 8003eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	483a      	ldr	r0, [pc, #232]	@ (8003fac <HAL_UART_MspInit+0x168>)
 8003ec2:	f001 fcdf 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ec6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003eca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ed8:	2307      	movs	r3, #7
 8003eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003edc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ee6:	f001 fccd 	bl	8005884 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003eea:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003eec:	4a31      	ldr	r2, [pc, #196]	@ (8003fb4 <HAL_UART_MspInit+0x170>)
 8003eee:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003ef2:	220e      	movs	r2, #14
 8003ef4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003efc:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f02:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f08:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f0e:	4b28      	ldr	r3, [pc, #160]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003f14:	4b26      	ldr	r3, [pc, #152]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f1a:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f20:	4823      	ldr	r0, [pc, #140]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f22:	f001 f97d 	bl	8005220 <HAL_DMA_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8003f2c:	f7ff fba2 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003f38:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb0 <HAL_UART_MspInit+0x16c>)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f40:	4a1e      	ldr	r2, [pc, #120]	@ (8003fbc <HAL_UART_MspInit+0x178>)
 8003f42:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003f44:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f46:	220f      	movs	r2, #15
 8003f48:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f50:	4b19      	ldr	r3, [pc, #100]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f56:	4b18      	ldr	r3, [pc, #96]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f5c:	4b16      	ldr	r3, [pc, #88]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f62:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003f68:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f6e:	4b12      	ldr	r3, [pc, #72]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003f74:	4810      	ldr	r0, [pc, #64]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f76:	f001 f953 	bl	8005220 <HAL_DMA_Init>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8003f80:	f7ff fb78 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f88:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb8 <HAL_UART_MspInit+0x174>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	2024      	movs	r0, #36	@ 0x24
 8003f96:	f001 f8e4 	bl	8005162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f9a:	2024      	movs	r0, #36	@ 0x24
 8003f9c:	f001 f8fb 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	3770      	adds	r7, #112	@ 0x70
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	48000400 	.word	0x48000400
 8003fb0:	20000578 	.word	0x20000578
 8003fb4:	40020008 	.word	0x40020008
 8003fb8:	200005d8 	.word	0x200005d8
 8003fbc:	4002001c 	.word	0x4002001c

08003fc0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003fc0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fc4:	3304      	adds	r3, #4

08003fc6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fc6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fc8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003fca:	d3f9      	bcc.n	8003fc0 <CopyDataInit>
  bx lr
 8003fcc:	4770      	bx	lr

08003fce <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003fce:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003fd0:	3004      	adds	r0, #4

08003fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003fd2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003fd4:	d3fb      	bcc.n	8003fce <FillZerobss>
  bx lr
 8003fd6:	4770      	bx	lr

08003fd8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fd8:	480c      	ldr	r0, [pc, #48]	@ (800400c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fda:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fdc:	f7ff fe60 	bl	8003ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003fe0:	480b      	ldr	r0, [pc, #44]	@ (8004010 <LoopForever+0x6>)
 8003fe2:	490c      	ldr	r1, [pc, #48]	@ (8004014 <LoopForever+0xa>)
 8003fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8004018 <LoopForever+0xe>)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	f7ff ffed 	bl	8003fc6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003fec:	480b      	ldr	r0, [pc, #44]	@ (800401c <LoopForever+0x12>)
 8003fee:	490c      	ldr	r1, [pc, #48]	@ (8004020 <LoopForever+0x16>)
 8003ff0:	4a0c      	ldr	r2, [pc, #48]	@ (8004024 <LoopForever+0x1a>)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f7ff ffe7 	bl	8003fc6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003ff8:	480b      	ldr	r0, [pc, #44]	@ (8004028 <LoopForever+0x1e>)
 8003ffa:	490c      	ldr	r1, [pc, #48]	@ (800402c <LoopForever+0x22>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f7ff ffe8 	bl	8003fd2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004002:	f00b fc59 	bl	800f8b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004006:	f7ff fa77 	bl	80034f8 <main>

0800400a <LoopForever>:

LoopForever:
  b LoopForever
 800400a:	e7fe      	b.n	800400a <LoopForever>
  ldr   r0, =_estack
 800400c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004010:	20000008 	.word	0x20000008
 8004014:	200001ec 	.word	0x200001ec
 8004018:	08013438 	.word	0x08013438
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800401c:	200301e4 	.word	0x200301e4
 8004020:	20030a67 	.word	0x20030a67
 8004024:	08013662 	.word	0x08013662
  INIT_BSS _sbss, _ebss
 8004028:	20000238 	.word	0x20000238
 800402c:	20001954 	.word	0x20001954

08004030 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004030:	e7fe      	b.n	8004030 <ADC1_IRQHandler>
	...

08004034 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a04      	ldr	r2, [pc, #16]	@ (8004050 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6053      	str	r3, [r2, #4]
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	e0042000 	.word	0xe0042000

08004054 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	6053      	str	r3, [r2, #4]
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e0042000 	.word	0xe0042000

08004074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800407e:	4b0c      	ldr	r3, [pc, #48]	@ (80040b0 <HAL_Init+0x3c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a0b      	ldr	r2, [pc, #44]	@ (80040b0 <HAL_Init+0x3c>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800408a:	2003      	movs	r0, #3
 800408c:	f001 f85e 	bl	800514c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004090:	200f      	movs	r0, #15
 8004092:	f000 f80f 	bl	80040b4 <HAL_InitTick>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	71fb      	strb	r3, [r7, #7]
 80040a0:	e001      	b.n	80040a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040a2:	f7ff fcba 	bl	8003a1a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	58004000 	.word	0x58004000

080040b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80040c0:	4b17      	ldr	r3, [pc, #92]	@ (8004120 <HAL_InitTick+0x6c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d024      	beq.n	8004112 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80040c8:	f002 ffa0 	bl	800700c <HAL_RCC_GetHCLKFreq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <HAL_InitTick+0x6c>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f874 	bl	80051ce <HAL_SYSTICK_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10f      	bne.n	800410c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d809      	bhi.n	8004106 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f2:	2200      	movs	r2, #0
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	f001 f832 	bl	8005162 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040fe:	4a09      	ldr	r2, [pc, #36]	@ (8004124 <HAL_InitTick+0x70>)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e007      	b.n	8004116 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e004      	b.n	8004116 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
 8004110:	e001      	b.n	8004116 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000010 	.word	0x20000010
 8004124:	2000000c 	.word	0x2000000c

08004128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800412c:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_IncTick+0x20>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_IncTick+0x24>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4413      	add	r3, r2
 8004138:	4a04      	ldr	r2, [pc, #16]	@ (800414c <HAL_IncTick+0x24>)
 800413a:	6013      	str	r3, [r2, #0]
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000010 	.word	0x20000010
 800414c:	20000638 	.word	0x20000638

08004150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return uwTick;
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <HAL_GetTick+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000638 	.word	0x20000638

08004168 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <HAL_GetTickPrio+0x14>)
 800416e:	681b      	ldr	r3, [r3, #0]
}
 8004170:	4618      	mov	r0, r3
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	2000000c 	.word	0x2000000c

08004180 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004184:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_GetTickFreq+0x14>)
 8004186:	781b      	ldrb	r3, [r3, #0]
}
 8004188:	4618      	mov	r0, r3
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000010 	.word	0x20000010

08004198 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800419c:	f7ff ff4a 	bl	8004034 <LL_DBGMCU_EnableDBGSleepMode>
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80041a8:	f7ff ff54 	bl	8004054 <LL_DBGMCU_EnableDBGStopMode>
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800420c:	4618      	mov	r0, r3
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3360      	adds	r3, #96	@ 0x60
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4b08      	ldr	r3, [pc, #32]	@ (800425c <LL_ADC_SetOffset+0x44>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	4313      	orrs	r3, r2
 8004248:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	03fff000 	.word	0x03fff000

08004260 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3360      	adds	r3, #96	@ 0x60
 800426e:	461a      	mov	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3360      	adds	r3, #96	@ 0x60
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3330      	adds	r3, #48	@ 0x30
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	4413      	add	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	211f      	movs	r1, #31
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43db      	mvns	r3, r3
 80042f4:	401a      	ands	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	f003 011f 	and.w	r1, r3, #31
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	431a      	orrs	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800431a:	b480      	push	{r7}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3314      	adds	r3, #20
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	0e5b      	lsrs	r3, r3, #25
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	4413      	add	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	0d1b      	lsrs	r3, r3, #20
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2107      	movs	r1, #7
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	43db      	mvns	r3, r3
 800434e:	401a      	ands	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	0d1b      	lsrs	r3, r3, #20
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	431a      	orrs	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004364:	bf00      	nop
 8004366:	371c      	adds	r7, #28
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f003 0318 	and.w	r3, r3, #24
 8004392:	4908      	ldr	r1, [pc, #32]	@ (80043b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004394:	40d9      	lsrs	r1, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	400b      	ands	r3, r1
 800439a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439e:	431a      	orrs	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	0007ffff 	.word	0x0007ffff

080043b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80043c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6093      	str	r3, [r2, #8]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043f0:	d101      	bne.n	80043f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004418:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004440:	d101      	bne.n	8004446 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <LL_ADC_IsEnabled+0x18>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <LL_ADC_IsEnabled+0x1a>
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d101      	bne.n	8004492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d101      	bne.n	80044b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e12e      	b.n	8004744 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7fd faf5 	bl	8001ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ff65 	bl	80043dc <LL_ADC_IsDeepPowerDownEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff4b 	bl	80043b8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff ff80 	bl	800442c <LL_ADC_IsInternalRegulatorEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d115      	bne.n	800455e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff64 	bl	8004404 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800453c:	4b83      	ldr	r3, [pc, #524]	@ (800474c <HAL_ADC_Init+0x284>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	099b      	lsrs	r3, r3, #6
 8004542:	4a83      	ldr	r2, [pc, #524]	@ (8004750 <HAL_ADC_Init+0x288>)
 8004544:	fba2 2303 	umull	r2, r3, r2, r3
 8004548:	099b      	lsrs	r3, r3, #6
 800454a:	3301      	adds	r3, #1
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004550:	e002      	b.n	8004558 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3b01      	subs	r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f9      	bne.n	8004552 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff ff62 	bl	800442c <LL_ADC_IsInternalRegulatorEnabled>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	f043 0210 	orr.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff73 	bl	800447a <LL_ADC_REG_IsConversionOngoing>
 8004594:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f040 80c7 	bne.w	8004732 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 80c3 	bne.w	8004732 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80045b4:	f043 0202 	orr.w	r2, r3, #2
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff ff47 	bl	8004454 <LL_ADC_IsEnabled>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045cc:	4861      	ldr	r0, [pc, #388]	@ (8004754 <HAL_ADC_Init+0x28c>)
 80045ce:	f7ff ff41 	bl	8004454 <LL_ADC_IsEnabled>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4619      	mov	r1, r3
 80045de:	485e      	ldr	r0, [pc, #376]	@ (8004758 <HAL_ADC_Init+0x290>)
 80045e0:	f7ff fde6 	bl	80041b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7e5b      	ldrb	r3, [r3, #25]
 80045e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80045f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80045fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004602:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8004604:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d106      	bne.n	8004624 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	3b01      	subs	r3, #1
 800461c:	045b      	lsls	r3, r3, #17
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	2b00      	cmp	r3, #0
 800462a:	d009      	beq.n	8004640 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4313      	orrs	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	4b45      	ldr	r3, [pc, #276]	@ (800475c <HAL_ADC_Init+0x294>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	430b      	orrs	r3, r1
 8004652:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ff0e 	bl	800447a <LL_ADC_REG_IsConversionOngoing>
 800465e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ff1b 	bl	80044a0 <LL_ADC_INJ_IsConversionOngoing>
 800466a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d13d      	bne.n	80046ee <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d13a      	bne.n	80046ee <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800467c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004684:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	430b      	orrs	r3, r1
 80046a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d118      	bne.n	80046de <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80046b6:	f023 0304 	bic.w	r3, r3, #4
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80046c2:	4311      	orrs	r1, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046c8:	4311      	orrs	r1, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046ce:	430a      	orrs	r2, r1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	611a      	str	r2, [r3, #16]
 80046dc:	e007      	b.n	80046ee <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d10c      	bne.n	8004710 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fc:	f023 010f 	bic.w	r1, r3, #15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	1e5a      	subs	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	631a      	str	r2, [r3, #48]	@ 0x30
 800470e:	e007      	b.n	8004720 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 020f 	bic.w	r2, r2, #15
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004724:	f023 0303 	bic.w	r3, r3, #3
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004730:	e007      	b.n	8004742 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004736:	f043 0210 	orr.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004742:	7ffb      	ldrb	r3, [r7, #31]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000008 	.word	0x20000008
 8004750:	053e2d63 	.word	0x053e2d63
 8004754:	50040000 	.word	0x50040000
 8004758:	50040300 	.word	0x50040300
 800475c:	fff0c007 	.word	0xfff0c007

08004760 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0b6      	sub	sp, #216	@ 0xd8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x22>
 800477e:	2302      	movs	r3, #2
 8004780:	e39f      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x762>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fe73 	bl	800447a <LL_ADC_REG_IsConversionOngoing>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 8384 	bne.w	8004ea4 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6818      	ldr	r0, [r3, #0]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	f7ff fd8a 	bl	80042c2 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fe61 	bl	800447a <LL_ADC_REG_IsConversionOngoing>
 80047b8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fe6d 	bl	80044a0 <LL_ADC_INJ_IsConversionOngoing>
 80047c6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f040 81a6 	bne.w	8004b20 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f040 81a1 	bne.w	8004b20 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f7ff fd95 	bl	800431a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	08db      	lsrs	r3, r3, #3
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b04      	cmp	r3, #4
 8004810:	d00a      	beq.n	8004828 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6919      	ldr	r1, [r3, #16]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004822:	f7ff fcf9 	bl	8004218 <LL_ADC_SetOffset>
 8004826:	e17b      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2100      	movs	r1, #0
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fd16 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004834:	4603      	mov	r3, r0
 8004836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_ADC_ConfigChannel+0xf4>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fd0b 	bl	8004260 <LL_ADC_GetOffsetChannel>
 800484a:	4603      	mov	r3, r0
 800484c:	0e9b      	lsrs	r3, r3, #26
 800484e:	f003 021f 	and.w	r2, r3, #31
 8004852:	e01e      	b.n	8004892 <HAL_ADC_ConfigChannel+0x132>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2100      	movs	r1, #0
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fd00 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004860:	4603      	mov	r3, r0
 8004862:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004866:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8004872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004876:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800487a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8004882:	2320      	movs	r3, #32
 8004884:	e004      	b.n	8004890 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8004886:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800488a:	fab3 f383 	clz	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x14a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	e018      	b.n	80048dc <HAL_ADC_ConfigChannel+0x17c>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80048be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80048c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e004      	b.n	80048dc <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80048d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	429a      	cmp	r2, r3
 80048de:	d106      	bne.n	80048ee <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2200      	movs	r2, #0
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fccf 	bl	800428c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2101      	movs	r1, #1
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fcb3 	bl	8004260 <LL_ADC_GetOffsetChannel>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <HAL_ADC_ConfigChannel+0x1ba>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fca8 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004910:	4603      	mov	r3, r0
 8004912:	0e9b      	lsrs	r3, r3, #26
 8004914:	f003 021f 	and.w	r2, r3, #31
 8004918:	e01e      	b.n	8004958 <HAL_ADC_ConfigChannel+0x1f8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2101      	movs	r1, #1
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fc9d 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800493c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8004948:	2320      	movs	r3, #32
 800494a:	e004      	b.n	8004956 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800494c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004960:	2b00      	cmp	r3, #0
 8004962:	d105      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x210>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	0e9b      	lsrs	r3, r3, #26
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	e018      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x242>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004984:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004988:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800498c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e004      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8004998:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d106      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2200      	movs	r2, #0
 80049ac:	2101      	movs	r1, #1
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fc6c 	bl	800428c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fc50 	bl	8004260 <LL_ADC_GetOffsetChannel>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x280>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fc45 	bl	8004260 <LL_ADC_GetOffsetChannel>
 80049d6:	4603      	mov	r3, r0
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	f003 021f 	and.w	r2, r3, #31
 80049de:	e01e      	b.n	8004a1e <HAL_ADC_ConfigChannel+0x2be>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2102      	movs	r1, #2
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fc3a 	bl	8004260 <LL_ADC_GetOffsetChannel>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049f6:	fa93 f3a3 	rbit	r3, r3
 80049fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80049fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8004a0e:	2320      	movs	r3, #32
 8004a10:	e004      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004a12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a16:	fab3 f383 	clz	r3, r3
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <HAL_ADC_ConfigChannel+0x2d6>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	0e9b      	lsrs	r3, r3, #26
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	e016      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x304>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8004a56:	2320      	movs	r3, #32
 8004a58:	e004      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8004a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d106      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff fc0b 	bl	800428c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2103      	movs	r1, #3
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fbef 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x342>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2103      	movs	r1, #3
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fbe4 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	e017      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x372>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2103      	movs	r1, #3
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fbd9 	bl	8004260 <LL_ADC_GetOffsetChannel>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004aba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004abc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004abe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e003      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8004ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x38a>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	0e9b      	lsrs	r3, r3, #26
 8004ae4:	f003 031f 	and.w	r3, r3, #31
 8004ae8:	e011      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x3ae>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8004b02:	2320      	movs	r3, #32
 8004b04:	e003      	b.n	8004b0e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8004b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b08:	fab3 f383 	clz	r3, r3
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d106      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2200      	movs	r2, #0
 8004b18:	2103      	movs	r1, #3
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fbb6 	bl	800428c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fc95 	bl	8004454 <LL_ADC_IsEnabled>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 81c2 	bne.w	8004eb6 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6819      	ldr	r1, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f7ff fc16 	bl	8004370 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4a8e      	ldr	r2, [pc, #568]	@ (8004d84 <HAL_ADC_ConfigChannel+0x624>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f040 8130 	bne.w	8004db0 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <HAL_ADC_ConfigChannel+0x418>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	0e9b      	lsrs	r3, r3, #26
 8004b66:	3301      	adds	r3, #1
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	bf94      	ite	ls
 8004b70:	2301      	movls	r3, #1
 8004b72:	2300      	movhi	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e019      	b.n	8004bac <HAL_ADC_ConfigChannel+0x44c>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004b90:	2320      	movs	r3, #32
 8004b92:	e003      	b.n	8004b9c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f003 031f 	and.w	r3, r3, #31
 8004ba2:	2b09      	cmp	r3, #9
 8004ba4:	bf94      	ite	ls
 8004ba6:	2301      	movls	r3, #1
 8004ba8:	2300      	movhi	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d079      	beq.n	8004ca4 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x46c>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	0e9b      	lsrs	r3, r3, #26
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	069b      	lsls	r3, r3, #26
 8004bc6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bca:	e015      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x498>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bd4:	fa93 f3a3 	rbit	r3, r3
 8004bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004be4:	2320      	movs	r3, #32
 8004be6:	e003      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bea:	fab3 f383 	clz	r3, r3
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	069b      	lsls	r3, r3, #26
 8004bf4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x4b8>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	0e9b      	lsrs	r3, r3, #26
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	e017      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x4e8>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c28:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004c30:	2320      	movs	r3, #32
 8004c32:	e003      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8004c34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	f003 031f 	and.w	r3, r3, #31
 8004c42:	2101      	movs	r1, #1
 8004c44:	fa01 f303 	lsl.w	r3, r1, r3
 8004c48:	ea42 0103 	orr.w	r1, r2, r3
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x50e>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f003 021f 	and.w	r2, r3, #31
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	051b      	lsls	r3, r3, #20
 8004c6c:	e018      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x540>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c76:	fa93 f3a3 	rbit	r3, r3
 8004c7a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e003      	b.n	8004c92 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c8c:	fab3 f383 	clz	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	3301      	adds	r3, #1
 8004c94:	f003 021f 	and.w	r2, r3, #31
 8004c98:	4613      	mov	r3, r2
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4413      	add	r3, r2
 8004c9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	e080      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <HAL_ADC_ConfigChannel+0x560>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	0e9b      	lsrs	r3, r3, #26
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	069b      	lsls	r3, r3, #26
 8004cba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cbe:	e015      	b.n	8004cec <HAL_ADC_ConfigChannel+0x58c>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	fa93 f3a3 	rbit	r3, r3
 8004ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	e003      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	069b      	lsls	r3, r3, #26
 8004ce8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d109      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x5ac>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	0e9b      	lsrs	r3, r3, #26
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2101      	movs	r1, #1
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	e017      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x5dc>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	61fb      	str	r3, [r7, #28]
  return result;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e003      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2101      	movs	r1, #1
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	ea42 0103 	orr.w	r1, r2, r3
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10d      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x608>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	0e9b      	lsrs	r3, r3, #26
 8004d52:	3301      	adds	r3, #1
 8004d54:	f003 021f 	and.w	r2, r3, #31
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3b1e      	subs	r3, #30
 8004d60:	051b      	lsls	r3, r3, #20
 8004d62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	e01d      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x644>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	fa93 f3a3 	rbit	r3, r3
 8004d74:	613b      	str	r3, [r7, #16]
  return result;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d103      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004d80:	2320      	movs	r3, #32
 8004d82:	e005      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x630>
 8004d84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3b1e      	subs	r3, #30
 8004d9e:	051b      	lsls	r3, r3, #20
 8004da0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da4:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7ff fab5 	bl	800431a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b45      	ldr	r3, [pc, #276]	@ (8004ecc <HAL_ADC_ConfigChannel+0x76c>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d07c      	beq.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dbc:	4844      	ldr	r0, [pc, #272]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x770>)
 8004dbe:	f7ff fa1d 	bl	80041fc <LL_ADC_GetCommonPathInternalCh>
 8004dc2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dc6:	4843      	ldr	r0, [pc, #268]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x774>)
 8004dc8:	f7ff fb44 	bl	8004454 <LL_ADC_IsEnabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d15e      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a40      	ldr	r2, [pc, #256]	@ (8004ed8 <HAL_ADC_ConfigChannel+0x778>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d127      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x6cc>
 8004ddc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004de0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d121      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a39      	ldr	r2, [pc, #228]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x774>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d161      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004df2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004df6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4834      	ldr	r0, [pc, #208]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x770>)
 8004dfe:	f7ff f9ea 	bl	80041d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e02:	4b36      	ldr	r3, [pc, #216]	@ (8004edc <HAL_ADC_ConfigChannel+0x77c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	099b      	lsrs	r3, r3, #6
 8004e08:	4a35      	ldr	r2, [pc, #212]	@ (8004ee0 <HAL_ADC_ConfigChannel+0x780>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	099b      	lsrs	r3, r3, #6
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004e1c:	e002      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f9      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e2a:	e044      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a2c      	ldr	r2, [pc, #176]	@ (8004ee4 <HAL_ADC_ConfigChannel+0x784>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d113      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x6fe>
 8004e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a23      	ldr	r2, [pc, #140]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x774>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d134      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e54:	4619      	mov	r1, r3
 8004e56:	481e      	ldr	r0, [pc, #120]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x770>)
 8004e58:	f7ff f9bd 	bl	80041d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e5c:	e02b      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a21      	ldr	r2, [pc, #132]	@ (8004ee8 <HAL_ADC_ConfigChannel+0x788>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d126      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
 8004e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d120      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a16      	ldr	r2, [pc, #88]	@ (8004ed4 <HAL_ADC_ConfigChannel+0x774>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d11b      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e86:	4619      	mov	r1, r3
 8004e88:	4811      	ldr	r0, [pc, #68]	@ (8004ed0 <HAL_ADC_ConfigChannel+0x770>)
 8004e8a:	f7ff f9a4 	bl	80041d6 <LL_ADC_SetCommonPathInternalCh>
 8004e8e:	e012      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ea2:	e008      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004ebe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	37d8      	adds	r7, #216	@ 0xd8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	80080000 	.word	0x80080000
 8004ed0:	50040300 	.word	0x50040300
 8004ed4:	50040000 	.word	0x50040000
 8004ed8:	c7520000 	.word	0xc7520000
 8004edc:	20000008 	.word	0x20000008
 8004ee0:	053e2d63 	.word	0x053e2d63
 8004ee4:	cb840000 	.word	0xcb840000
 8004ee8:	80000001 	.word	0x80000001

08004eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004efc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <__NVIC_SetPriorityGrouping+0x44>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1e:	4a04      	ldr	r2, [pc, #16]	@ (8004f30 <__NVIC_SetPriorityGrouping+0x44>)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	60d3      	str	r3, [r2, #12]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f38:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <__NVIC_GetPriorityGrouping+0x18>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	0a1b      	lsrs	r3, r3, #8
 8004f3e:	f003 0307 	and.w	r3, r3, #7
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	e000ed00 	.word	0xe000ed00

08004f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	db0b      	blt.n	8004f7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	f003 021f 	and.w	r2, r3, #31
 8004f68:	4907      	ldr	r1, [pc, #28]	@ (8004f88 <__NVIC_EnableIRQ+0x38>)
 8004f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	2001      	movs	r0, #1
 8004f72:	fa00 f202 	lsl.w	r2, r0, r2
 8004f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	e000e100 	.word	0xe000e100

08004f8c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db12      	blt.n	8004fc4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	490a      	ldr	r1, [pc, #40]	@ (8004fd0 <__NVIC_DisableIRQ+0x44>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	3320      	adds	r3, #32
 8004fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fb8:	f3bf 8f4f 	dsb	sy
}
 8004fbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fbe:	f3bf 8f6f 	isb	sy
}
 8004fc2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	e000e100 	.word	0xe000e100

08004fd4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	db0c      	blt.n	8005000 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	4907      	ldr	r1, [pc, #28]	@ (800500c <__NVIC_SetPendingIRQ+0x38>)
 8004fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff2:	095b      	lsrs	r3, r3, #5
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8004ffa:	3340      	adds	r3, #64	@ 0x40
 8004ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000e100 	.word	0xe000e100

08005010 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	2b00      	cmp	r3, #0
 8005020:	db0c      	blt.n	800503c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4907      	ldr	r1, [pc, #28]	@ (8005048 <__NVIC_ClearPendingIRQ+0x38>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2001      	movs	r0, #1
 8005032:	fa00 f202 	lsl.w	r2, r0, r2
 8005036:	3360      	adds	r3, #96	@ 0x60
 8005038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000e100 	.word	0xe000e100

0800504c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	6039      	str	r1, [r7, #0]
 8005056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	db0a      	blt.n	8005076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	490c      	ldr	r1, [pc, #48]	@ (8005098 <__NVIC_SetPriority+0x4c>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	0112      	lsls	r2, r2, #4
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	440b      	add	r3, r1
 8005070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005074:	e00a      	b.n	800508c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4908      	ldr	r1, [pc, #32]	@ (800509c <__NVIC_SetPriority+0x50>)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3b04      	subs	r3, #4
 8005084:	0112      	lsls	r2, r2, #4
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	440b      	add	r3, r1
 800508a:	761a      	strb	r2, [r3, #24]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	e000e100 	.word	0xe000e100
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b089      	sub	sp, #36	@ 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f1c3 0307 	rsb	r3, r3, #7
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	bf28      	it	cs
 80050be:	2304      	movcs	r3, #4
 80050c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3304      	adds	r3, #4
 80050c6:	2b06      	cmp	r3, #6
 80050c8:	d902      	bls.n	80050d0 <NVIC_EncodePriority+0x30>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3b03      	subs	r3, #3
 80050ce:	e000      	b.n	80050d2 <NVIC_EncodePriority+0x32>
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d4:	f04f 32ff 	mov.w	r2, #4294967295
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43da      	mvns	r2, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	401a      	ands	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e8:	f04f 31ff 	mov.w	r1, #4294967295
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	fa01 f303 	lsl.w	r3, r1, r3
 80050f2:	43d9      	mvns	r1, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f8:	4313      	orrs	r3, r2
         );
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3724      	adds	r7, #36	@ 0x24
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3b01      	subs	r3, #1
 8005114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005118:	d301      	bcc.n	800511e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800511a:	2301      	movs	r3, #1
 800511c:	e00f      	b.n	800513e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800511e:	4a0a      	ldr	r2, [pc, #40]	@ (8005148 <SysTick_Config+0x40>)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3b01      	subs	r3, #1
 8005124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005126:	210f      	movs	r1, #15
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	f7ff ff8e 	bl	800504c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005130:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <SysTick_Config+0x40>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005136:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <SysTick_Config+0x40>)
 8005138:	2207      	movs	r2, #7
 800513a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	e000e010 	.word	0xe000e010

0800514c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fec9 	bl	8004eec <__NVIC_SetPriorityGrouping>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	4603      	mov	r3, r0
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005170:	f7ff fee0 	bl	8004f34 <__NVIC_GetPriorityGrouping>
 8005174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	6978      	ldr	r0, [r7, #20]
 800517c:	f7ff ff90 	bl	80050a0 <NVIC_EncodePriority>
 8005180:	4602      	mov	r2, r0
 8005182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff5f 	bl	800504c <__NVIC_SetPriority>
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	4603      	mov	r3, r0
 800519e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff fed3 	bl	8004f50 <__NVIC_EnableIRQ>
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	4603      	mov	r3, r0
 80051ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80051bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fee3 	bl	8004f8c <__NVIC_DisableIRQ>
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7ff ff96 	bl	8005108 <SysTick_Config>
 80051dc:	4603      	mov	r3, r0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	4603      	mov	r3, r0
 80051ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80051f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff feed 	bl	8004fd4 <__NVIC_SetPendingIRQ>
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	4603      	mov	r3, r0
 800520a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800520c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fefd 	bl	8005010 <__NVIC_ClearPendingIRQ>
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e08e      	b.n	8005350 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	4b47      	ldr	r3, [pc, #284]	@ (8005358 <HAL_DMA_Init+0x138>)
 800523a:	429a      	cmp	r2, r3
 800523c:	d80f      	bhi.n	800525e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	4b45      	ldr	r3, [pc, #276]	@ (800535c <HAL_DMA_Init+0x13c>)
 8005246:	4413      	add	r3, r2
 8005248:	4a45      	ldr	r2, [pc, #276]	@ (8005360 <HAL_DMA_Init+0x140>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	091b      	lsrs	r3, r3, #4
 8005250:	009a      	lsls	r2, r3, #2
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a42      	ldr	r2, [pc, #264]	@ (8005364 <HAL_DMA_Init+0x144>)
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40
 800525c:	e00e      	b.n	800527c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	4b40      	ldr	r3, [pc, #256]	@ (8005368 <HAL_DMA_Init+0x148>)
 8005266:	4413      	add	r3, r2
 8005268:	4a3d      	ldr	r2, [pc, #244]	@ (8005360 <HAL_DMA_Init+0x140>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	091b      	lsrs	r3, r3, #4
 8005270:	009a      	lsls	r2, r3, #2
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a3c      	ldr	r2, [pc, #240]	@ (800536c <HAL_DMA_Init+0x14c>)
 800527a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa74 	bl	80057bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052dc:	d102      	bne.n	80052e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80052f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80052fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d010      	beq.n	8005326 <HAL_DMA_Init+0x106>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d80c      	bhi.n	8005326 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa93 	bl	8005838 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	e008      	b.n	8005338 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40020407 	.word	0x40020407
 800535c:	bffdfff8 	.word	0xbffdfff8
 8005360:	cccccccd 	.word	0xcccccccd
 8005364:	40020000 	.word	0x40020000
 8005368:	bffdfbf8 	.word	0xbffdfbf8
 800536c:	40020400 	.word	0x40020400

08005370 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_DMA_Start_IT+0x20>
 800538c:	2302      	movs	r3, #2
 800538e:	e066      	b.n	800545e <HAL_DMA_Start_IT+0xee>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d155      	bne.n	8005450 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f9b9 	bl	8005740 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 020e 	orr.w	r2, r2, #14
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e00f      	b.n	8005408 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0204 	bic.w	r2, r2, #4
 80053f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 020a 	orr.w	r2, r2, #10
 8005406:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005424:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800543c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e005      	b.n	800545c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005458:	2302      	movs	r3, #2
 800545a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04f      	b.n	8005518 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d008      	beq.n	8005496 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2204      	movs	r2, #4
 8005488:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e040      	b.n	8005518 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 020e 	bic.w	r2, r2, #14
 80054a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0201 	bic.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	f003 021c 	and.w	r2, r3, #28
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005504:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d005      	beq.n	8005548 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2204      	movs	r2, #4
 8005540:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	e047      	b.n	80055d8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 020e 	bic.w	r2, r2, #14
 8005556:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005572:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005576:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557c:	f003 021c 	and.w	r2, r3, #28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f202 	lsl.w	r2, r1, r2
 800558a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005594:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00c      	beq.n	80055b8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
    }
  }
  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fe:	f003 031c 	and.w	r3, r3, #28
 8005602:	2204      	movs	r2, #4
 8005604:	409a      	lsls	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4013      	ands	r3, r2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d026      	beq.n	800565c <HAL_DMA_IRQHandler+0x7a>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d021      	beq.n	800565c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0204 	bic.w	r2, r2, #4
 8005634:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563a:	f003 021c 	and.w	r2, r3, #28
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005642:	2104      	movs	r1, #4
 8005644:	fa01 f202 	lsl.w	r2, r1, r2
 8005648:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	2b00      	cmp	r3, #0
 8005650:	d071      	beq.n	8005736 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800565a:	e06c      	b.n	8005736 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005660:	f003 031c 	and.w	r3, r3, #28
 8005664:	2202      	movs	r2, #2
 8005666:	409a      	lsls	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02e      	beq.n	80056ce <HAL_DMA_IRQHandler+0xec>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d029      	beq.n	80056ce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 020a 	bic.w	r2, r2, #10
 8005696:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a4:	f003 021c 	and.w	r2, r3, #28
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	2102      	movs	r1, #2
 80056ae:	fa01 f202 	lsl.w	r2, r1, r2
 80056b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d038      	beq.n	8005736 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80056cc:	e033      	b.n	8005736 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d2:	f003 031c 	and.w	r3, r3, #28
 80056d6:	2208      	movs	r2, #8
 80056d8:	409a      	lsls	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d02a      	beq.n	8005738 <HAL_DMA_IRQHandler+0x156>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d025      	beq.n	8005738 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 020e 	bic.w	r2, r2, #14
 80056fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	f003 021c 	and.w	r2, r3, #28
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	2101      	movs	r1, #1
 800570a:	fa01 f202 	lsl.w	r2, r1, r2
 800570e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	2b00      	cmp	r3, #0
 800572c:	d004      	beq.n	8005738 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005736:	bf00      	nop
 8005738:	bf00      	nop
}
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005756:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575c:	2b00      	cmp	r3, #0
 800575e:	d004      	beq.n	800576a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005768:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576e:	f003 021c 	and.w	r2, r3, #28
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f202 	lsl.w	r2, r1, r2
 800577c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	2b10      	cmp	r3, #16
 800578c:	d108      	bne.n	80057a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800579e:	e007      	b.n	80057b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	4b17      	ldr	r3, [pc, #92]	@ (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d80a      	bhi.n	80057e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057dc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6493      	str	r3, [r2, #72]	@ 0x48
 80057e4:	e007      	b.n	80057f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	009a      	lsls	r2, r3, #2
 80057ee:	4b0f      	ldr	r3, [pc, #60]	@ (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80057f0:	4413      	add	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	3b08      	subs	r3, #8
 80057fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005800:	fba2 2303 	umull	r2, r3, r2, r3
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a0a      	ldr	r2, [pc, #40]	@ (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800580c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40020407 	.word	0x40020407
 800582c:	4002081c 	.word	0x4002081c
 8005830:	cccccccd 	.word	0xcccccccd
 8005834:	40020880 	.word	0x40020880

08005838 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005848:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	4b0b      	ldr	r3, [pc, #44]	@ (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a09      	ldr	r2, [pc, #36]	@ (8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800585c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b01      	subs	r3, #1
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2201      	movs	r2, #1
 8005868:	409a      	lsls	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800586e:	bf00      	nop
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	1000823f 	.word	0x1000823f
 8005880:	40020940 	.word	0x40020940

08005884 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005892:	e14c      	b.n	8005b2e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	2101      	movs	r1, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa01 f303 	lsl.w	r3, r1, r3
 80058a0:	4013      	ands	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 813e 	beq.w	8005b28 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d005      	beq.n	80058c4 <HAL_GPIO_Init+0x40>
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d130      	bne.n	8005926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	2203      	movs	r2, #3
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	43db      	mvns	r3, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68da      	ldr	r2, [r3, #12]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fa:	2201      	movs	r2, #1
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005902:	43db      	mvns	r3, r3
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 0201 	and.w	r2, r3, #1
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b03      	cmp	r3, #3
 8005930:	d017      	beq.n	8005962 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	2203      	movs	r2, #3
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4013      	ands	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d123      	bne.n	80059b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	08da      	lsrs	r2, r3, #3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3208      	adds	r2, #8
 8005976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	220f      	movs	r2, #15
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4013      	ands	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	08da      	lsrs	r2, r3, #3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3208      	adds	r2, #8
 80059b0:	6939      	ldr	r1, [r7, #16]
 80059b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	2203      	movs	r2, #3
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0203 	and.w	r2, r3, #3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f000 8098 	beq.w	8005b28 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80059f8:	4a54      	ldr	r2, [pc, #336]	@ (8005b4c <HAL_GPIO_Init+0x2c8>)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	089b      	lsrs	r3, r3, #2
 80059fe:	3302      	adds	r3, #2
 8005a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	220f      	movs	r2, #15
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43db      	mvns	r3, r3
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a22:	d019      	beq.n	8005a58 <HAL_GPIO_Init+0x1d4>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a4a      	ldr	r2, [pc, #296]	@ (8005b50 <HAL_GPIO_Init+0x2cc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_GPIO_Init+0x1d0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a49      	ldr	r2, [pc, #292]	@ (8005b54 <HAL_GPIO_Init+0x2d0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00d      	beq.n	8005a50 <HAL_GPIO_Init+0x1cc>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a48      	ldr	r2, [pc, #288]	@ (8005b58 <HAL_GPIO_Init+0x2d4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d007      	beq.n	8005a4c <HAL_GPIO_Init+0x1c8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a47      	ldr	r2, [pc, #284]	@ (8005b5c <HAL_GPIO_Init+0x2d8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d101      	bne.n	8005a48 <HAL_GPIO_Init+0x1c4>
 8005a44:	2304      	movs	r3, #4
 8005a46:	e008      	b.n	8005a5a <HAL_GPIO_Init+0x1d6>
 8005a48:	2307      	movs	r3, #7
 8005a4a:	e006      	b.n	8005a5a <HAL_GPIO_Init+0x1d6>
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e004      	b.n	8005a5a <HAL_GPIO_Init+0x1d6>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e002      	b.n	8005a5a <HAL_GPIO_Init+0x1d6>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_GPIO_Init+0x1d6>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	f002 0203 	and.w	r2, r2, #3
 8005a60:	0092      	lsls	r2, r2, #2
 8005a62:	4093      	lsls	r3, r2
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005a6a:	4938      	ldr	r1, [pc, #224]	@ (8005b4c <HAL_GPIO_Init+0x2c8>)
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	089b      	lsrs	r3, r3, #2
 8005a70:	3302      	adds	r3, #2
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a78:	4b39      	ldr	r3, [pc, #228]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	43db      	mvns	r3, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a9c:	4a30      	ldr	r2, [pc, #192]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	43db      	mvns	r3, r3
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ac6:	4a26      	ldr	r2, [pc, #152]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005acc:	4b24      	ldr	r3, [pc, #144]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	43db      	mvns	r3, r3
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4013      	ands	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005af2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005afa:	4b19      	ldr	r3, [pc, #100]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b20:	4a0f      	ldr	r2, [pc, #60]	@ (8005b60 <HAL_GPIO_Init+0x2dc>)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	fa22 f303 	lsr.w	r3, r2, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f47f aeab 	bne.w	8005894 <HAL_GPIO_Init+0x10>
  }
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	48000400 	.word	0x48000400
 8005b54:	48000800 	.word	0x48000800
 8005b58:	48000c00 	.word	0x48000c00
 8005b5c:	48001000 	.word	0x48001000
 8005b60:	58000800 	.word	0x58000800

08005b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
 8005b70:	4613      	mov	r3, r2
 8005b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b74:	787b      	ldrb	r3, [r7, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b7a:	887a      	ldrh	r2, [r7, #2]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b80:	e002      	b.n	8005b88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b82:	887a      	ldrh	r2, [r7, #2]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <HAL_HSEM_IRQHandler+0x30>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005ba0:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <HAL_HSEM_IRQHandler+0x30>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	43db      	mvns	r3, r3
 8005ba8:	4906      	ldr	r1, [pc, #24]	@ (8005bc4 <HAL_HSEM_IRQHandler+0x30>)
 8005baa:	4013      	ands	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005bae:	4a05      	ldr	r2, [pc, #20]	@ (8005bc4 <HAL_HSEM_IRQHandler+0x30>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f807 	bl	8005bc8 <HAL_HSEM_FreeCallback>
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	58001500 	.word	0x58001500

08005bc8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01e      	beq.n	8005c2c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005bee:	4b13      	ldr	r3, [pc, #76]	@ (8005c3c <HAL_IPCC_Init+0x60>)
 8005bf0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d102      	bne.n	8005c04 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fd fc50 	bl	80034a4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005c04:	68b8      	ldr	r0, [r7, #8]
 8005c06:	f000 f85b 	bl	8005cc0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f82c 	bl	8005c74 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005c2a:	e001      	b.n	8005c30 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	58000c00 	.word	0x58000c00

08005c40 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	4613      	mov	r3, r2
 8005c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e00f      	b.n	8005ca2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb8 <IPCC_SetDefaultCallbacks+0x44>)
 8005c8c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3306      	adds	r3, #6
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	4a08      	ldr	r2, [pc, #32]	@ (8005cbc <IPCC_SetDefaultCallbacks+0x48>)
 8005c9a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b05      	cmp	r3, #5
 8005ca6:	d9ec      	bls.n	8005c82 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005ca8:	bf00      	nop
 8005caa:	bf00      	nop
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	08005c41 	.word	0x08005c41
 8005cbc:	08005c5b 	.word	0x08005c5b

08005cc0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	223f      	movs	r2, #63	@ 0x3f
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <LL_EXTI_EnableIT_0_31>:
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005cf0:	4b06      	ldr	r3, [pc, #24]	@ (8005d0c <LL_EXTI_EnableIT_0_31+0x24>)
 8005cf2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005cf6:	4905      	ldr	r1, [pc, #20]	@ (8005d0c <LL_EXTI_EnableIT_0_31+0x24>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	58000800 	.word	0x58000800

08005d10 <LL_EXTI_DisableIT_0_31>:
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <LL_EXTI_DisableIT_0_31+0x28>)
 8005d1a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	4905      	ldr	r1, [pc, #20]	@ (8005d38 <LL_EXTI_DisableIT_0_31+0x28>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	58000800 	.word	0x58000800

08005d3c <LL_C2_EXTI_DisableIT_0_31>:
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8005d44:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8005d46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	4905      	ldr	r1, [pc, #20]	@ (8005d64 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	58000800 	.word	0x58000800

08005d68 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005d70:	4b05      	ldr	r3, [pc, #20]	@ (8005d88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	4904      	ldr	r1, [pc, #16]	@ (8005d88 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	600b      	str	r3, [r1, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	58000800 	.word	0x58000800

08005d8c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005d94:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	4904      	ldr	r1, [pc, #16]	@ (8005db0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	600b      	str	r3, [r1, #0]

}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	58000800 	.word	0x58000800

08005db4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005dbc:	4b05      	ldr	r3, [pc, #20]	@ (8005dd4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4904      	ldr	r1, [pc, #16]	@ (8005dd4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	604b      	str	r3, [r1, #4]
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	58000800 	.word	0x58000800

08005dd8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	4904      	ldr	r1, [pc, #16]	@ (8005dfc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	58000800 	.word	0x58000800

08005e00 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e04:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	58000400 	.word	0x58000400

08005e20 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005e28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <HAL_PWR_ConfigPVD+0x80>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f023 020e 	bic.w	r2, r3, #14
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	491a      	ldr	r1, [pc, #104]	@ (8005ea0 <HAL_PWR_ConfigPVD+0x80>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8005e3a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e3e:	f7ff ff67 	bl	8005d10 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8005e42:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e46:	f7ff ff79 	bl	8005d3c <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005e4a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e4e:	f7ff ffc3 	bl	8005dd8 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005e52:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e56:	f7ff ff99 	bl	8005d8c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005e66:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e6a:	f7ff ff3d 	bl	8005ce8 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005e7a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e7e:	f7ff ff73 	bl	8005d68 <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005e8e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e92:	f7ff ff8f 	bl	8005db4 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	58000400 	.word	0x58000400

08005ea4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <HAL_PWR_EnablePVD+0x1c>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4a04      	ldr	r2, [pc, #16]	@ (8005ec0 <HAL_PWR_EnablePVD+0x1c>)
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	6053      	str	r3, [r2, #4]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	58000400 	.word	0x58000400

08005ec4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005ec8:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <HAL_PWREx_GetVoltageRange+0x18>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	58000400 	.word	0x58000400

08005ee0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ef2:	d101      	bne.n	8005ef8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <LL_RCC_HSE_Enable>:
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f16:	6013      	str	r3, [r2, #0]
}
 8005f18:	bf00      	nop
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <LL_RCC_HSE_Disable>:
{
 8005f22:	b480      	push	{r7}
 8005f24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
}
 8005f36:	bf00      	nop
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <LL_RCC_HSE_IsReady>:
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f52:	d101      	bne.n	8005f58 <LL_RCC_HSE_IsReady+0x18>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <LL_RCC_HSE_IsReady+0x1a>
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <LL_RCC_HSI_Enable>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f76:	6013      	str	r3, [r2, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <LL_RCC_HSI_Disable>:
{
 8005f82:	b480      	push	{r7}
 8005f84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f94:	6013      	str	r3, [r2, #0]
}
 8005f96:	bf00      	nop
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <LL_RCC_HSI_IsReady>:
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fb2:	d101      	bne.n	8005fb8 <LL_RCC_HSI_IsReady+0x18>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <LL_RCC_HSI_IsReady+0x1a>
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	061b      	lsls	r3, r3, #24
 8005fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	604b      	str	r3, [r1, #4]
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <LL_RCC_HSI48_Enable>:
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006006:	bf00      	nop
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_HSI48_Disable>:
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006018:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800601c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006028:	bf00      	nop
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <LL_RCC_HSI48_IsReady>:
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d101      	bne.n	800604a <LL_RCC_HSI48_IsReady+0x18>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <LL_RCC_HSI48_IsReady+0x1a>
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_RCC_LSE_Enable>:
{
 8006056:	b480      	push	{r7}
 8006058:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800605a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <LL_RCC_LSE_Disable>:
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <LL_RCC_LSE_EnableBypass>:
{
 800609a:	b480      	push	{r7}
 800609c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060aa:	f043 0304 	orr.w	r3, r3, #4
 80060ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060b2:	bf00      	nop
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <LL_RCC_LSE_DisableBypass>:
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060cc:	f023 0304 	bic.w	r3, r3, #4
 80060d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060d4:	bf00      	nop
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <LL_RCC_LSE_IsReady>:
{
 80060de:	b480      	push	{r7}
 80060e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d101      	bne.n	80060f6 <LL_RCC_LSE_IsReady+0x18>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <LL_RCC_LSE_IsReady+0x1a>
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_RCC_LSI1_Enable>:
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800610e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800611a:	bf00      	nop
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <LL_RCC_LSI1_Disable>:
{
 8006124:	b480      	push	{r7}
 8006126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800612c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800613c:	bf00      	nop
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <LL_RCC_LSI1_IsReady>:
{
 8006146:	b480      	push	{r7}
 8006148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800614a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d101      	bne.n	800615e <LL_RCC_LSI1_IsReady+0x18>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <LL_RCC_LSI1_IsReady+0x1a>
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <LL_RCC_LSI2_Enable>:
{
 800616a:	b480      	push	{r7}
 800616c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006176:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800617a:	f043 0304 	orr.w	r3, r3, #4
 800617e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006182:	bf00      	nop
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <LL_RCC_LSI2_Disable>:
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800619c:	f023 0304 	bic.w	r3, r3, #4
 80061a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <LL_RCC_LSI2_IsReady>:
{
 80061ae:	b480      	push	{r7}
 80061b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d101      	bne.n	80061c6 <LL_RCC_LSI2_IsReady+0x18>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <LL_RCC_LSI2_IsReady+0x1a>
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <LL_RCC_LSI2_SetTrimming>:
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80061da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80061ee:	4313      	orrs	r3, r2
 80061f0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <LL_RCC_MSI_Enable>:
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	6013      	str	r3, [r2, #0]
}
 8006214:	bf00      	nop
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_MSI_Disable>:
{
 800621e:	b480      	push	{r7}
 8006220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	6013      	str	r3, [r2, #0]
}
 8006232:	bf00      	nop
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LL_RCC_MSI_IsReady>:
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d101      	bne.n	8006252 <LL_RCC_MSI_IsReady+0x16>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <LL_RCC_MSI_IsReady+0x18>
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <LL_RCC_MSI_SetRange>:
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006270:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_RCC_MSI_GetRange>:
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800628c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006296:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2bb0      	cmp	r3, #176	@ 0xb0
 800629c:	d901      	bls.n	80062a2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800629e:	23b0      	movs	r3, #176	@ 0xb0
 80062a0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80062a2:	687b      	ldr	r3, [r7, #4]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80062b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ca:	4313      	orrs	r3, r2
 80062cc:	604b      	str	r3, [r1, #4]
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <LL_RCC_SetSysClkSource>:
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 0203 	bic.w	r2, r3, #3
 80062ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <LL_RCC_GetSysClkSource>:
{
 8006302:	b480      	push	{r7}
 8006304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 030c 	and.w	r3, r3, #12
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <LL_RCC_SetAHBPrescaler>:
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800632c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800634a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800634e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006352:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006356:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4313      	orrs	r3, r2
 800635e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <LL_RCC_SetAHB4Prescaler>:
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800637a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800637e:	f023 020f 	bic.w	r2, r3, #15
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <LL_RCC_SetAPB1Prescaler>:
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80063a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <LL_RCC_SetAPB2Prescaler>:
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80063cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4313      	orrs	r3, r2
 80063de:	608b      	str	r3, [r1, #8]
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <LL_RCC_GetAHBPrescaler>:
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <LL_RCC_GetAHB4Prescaler>:
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006416:	4618      	mov	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <LL_RCC_GetAPB1Prescaler>:
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800642e:	4618      	mov	r0, r3
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_RCC_GetAPB2Prescaler>:
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800645e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800646e:	b480      	push	{r7}
 8006470:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800647c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006480:	6013      	str	r3, [r2, #0]
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800649e:	d101      	bne.n	80064a4 <LL_RCC_PLL_IsReady+0x18>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <LL_RCC_PLL_IsReady+0x1a>
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80064ca:	b480      	push	{r7}
 80064cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80064ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80064e2:	b480      	push	{r7}
 80064e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80064e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80064fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0303 	and.w	r3, r3, #3
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006512:	b480      	push	{r7}
 8006514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006524:	d101      	bne.n	800652a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr

08006536 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006536:	b480      	push	{r7}
 8006538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800653a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800653e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006546:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800654a:	d101      	bne.n	8006550 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006564:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006570:	d101      	bne.n	8006576 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006582:	b480      	push	{r7}
 8006584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006590:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006594:	d101      	bne.n	800659a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006596:	2301      	movs	r3, #1
 8006598:	e000      	b.n	800659c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80065a6:	b480      	push	{r7}
 80065a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80065aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80065b8:	d101      	bne.n	80065be <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
	...

080065cc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b08d      	sub	sp, #52	@ 0x34
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e363      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 808d 	beq.w	8006706 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ec:	f7ff fe89 	bl	8006302 <LL_RCC_GetSysClkSource>
 80065f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065f2:	f7ff ff82 	bl	80064fa <LL_RCC_PLL_GetMainSource>
 80065f6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_RCC_OscConfig+0x3e>
 80065fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006600:	2b0c      	cmp	r3, #12
 8006602:	d147      	bne.n	8006694 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2b01      	cmp	r3, #1
 8006608:	d144      	bne.n	8006694 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e347      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800661a:	f7ff fe34 	bl	8006286 <LL_RCC_MSI_GetRange>
 800661e:	4603      	mov	r3, r0
 8006620:	429c      	cmp	r4, r3
 8006622:	d914      	bls.n	800664e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fd2f 	bl	800708c <RCC_SetFlashLatencyFromMSIRange>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e336      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fe0e 	bl	800625e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	4618      	mov	r0, r3
 8006648:	f7ff fe32 	bl	80062b0 <LL_RCC_MSI_SetCalibTrimming>
 800664c:	e013      	b.n	8006676 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fe03 	bl	800625e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	4618      	mov	r0, r3
 800665e:	f7ff fe27 	bl	80062b0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006666:	4618      	mov	r0, r3
 8006668:	f000 fd10 	bl	800708c <RCC_SetFlashLatencyFromMSIRange>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e317      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006676:	f000 fcc9 	bl	800700c <HAL_RCC_GetHCLKFreq>
 800667a:	4603      	mov	r3, r0
 800667c:	4aa4      	ldr	r2, [pc, #656]	@ (8006910 <HAL_RCC_OscConfig+0x344>)
 800667e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006680:	4ba4      	ldr	r3, [pc, #656]	@ (8006914 <HAL_RCC_OscConfig+0x348>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7fd fd15 	bl	80040b4 <HAL_InitTick>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d039      	beq.n	8006704 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e308      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01e      	beq.n	80066da <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800669c:	f7ff fdb0 	bl	8006200 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066a0:	f7fd fd56 	bl	8004150 <HAL_GetTick>
 80066a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066a8:	f7fd fd52 	bl	8004150 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e2f5      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80066ba:	f7ff fdbf 	bl	800623c <LL_RCC_MSI_IsReady>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f1      	beq.n	80066a8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fdc8 	bl	800625e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff fdec 	bl	80062b0 <LL_RCC_MSI_SetCalibTrimming>
 80066d8:	e015      	b.n	8006706 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066da:	f7ff fda0 	bl	800621e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066de:	f7fd fd37 	bl	8004150 <HAL_GetTick>
 80066e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80066e4:	e008      	b.n	80066f8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066e6:	f7fd fd33 	bl	8004150 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e2d6      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80066f8:	f7ff fda0 	bl	800623c <LL_RCC_MSI_IsReady>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1f1      	bne.n	80066e6 <HAL_RCC_OscConfig+0x11a>
 8006702:	e000      	b.n	8006706 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006704:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d047      	beq.n	80067a2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006712:	f7ff fdf6 	bl	8006302 <LL_RCC_GetSysClkSource>
 8006716:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006718:	f7ff feef 	bl	80064fa <LL_RCC_PLL_GetMainSource>
 800671c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	2b08      	cmp	r3, #8
 8006722:	d005      	beq.n	8006730 <HAL_RCC_OscConfig+0x164>
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b0c      	cmp	r3, #12
 8006728:	d108      	bne.n	800673c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d105      	bne.n	800673c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d134      	bne.n	80067a2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e2b4      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006744:	d102      	bne.n	800674c <HAL_RCC_OscConfig+0x180>
 8006746:	f7ff fbdd 	bl	8005f04 <LL_RCC_HSE_Enable>
 800674a:	e001      	b.n	8006750 <HAL_RCC_OscConfig+0x184>
 800674c:	f7ff fbe9 	bl	8005f22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d012      	beq.n	800677e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fd fcfa 	bl	8004150 <HAL_GetTick>
 800675c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006760:	f7fd fcf6 	bl	8004150 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b64      	cmp	r3, #100	@ 0x64
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e299      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006772:	f7ff fbe5 	bl	8005f40 <LL_RCC_HSE_IsReady>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f1      	beq.n	8006760 <HAL_RCC_OscConfig+0x194>
 800677c:	e011      	b.n	80067a2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fd fce7 	bl	8004150 <HAL_GetTick>
 8006782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006786:	f7fd fce3 	bl	8004150 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b64      	cmp	r3, #100	@ 0x64
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e286      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006798:	f7ff fbd2 	bl	8005f40 <LL_RCC_HSE_IsReady>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f1      	bne.n	8006786 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d04c      	beq.n	8006848 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067ae:	f7ff fda8 	bl	8006302 <LL_RCC_GetSysClkSource>
 80067b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067b4:	f7ff fea1 	bl	80064fa <LL_RCC_PLL_GetMainSource>
 80067b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d005      	beq.n	80067cc <HAL_RCC_OscConfig+0x200>
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b0c      	cmp	r3, #12
 80067c4:	d10e      	bne.n	80067e4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d10b      	bne.n	80067e4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e266      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fbf1 	bl	8005fc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067e2:	e031      	b.n	8006848 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d019      	beq.n	8006820 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067ec:	f7ff fbba 	bl	8005f64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067f0:	f7fd fcae 	bl	8004150 <HAL_GetTick>
 80067f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f8:	f7fd fcaa 	bl	8004150 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e24d      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800680a:	f7ff fbc9 	bl	8005fa0 <LL_RCC_HSI_IsReady>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0f1      	beq.n	80067f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff fbd3 	bl	8005fc4 <LL_RCC_HSI_SetCalibTrimming>
 800681e:	e013      	b.n	8006848 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006820:	f7ff fbaf 	bl	8005f82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd fc94 	bl	8004150 <HAL_GetTick>
 8006828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800682c:	f7fd fc90 	bl	8004150 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e233      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800683e:	f7ff fbaf 	bl	8005fa0 <LL_RCC_HSI_IsReady>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f1      	bne.n	800682c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80a3 	beq.w	80069a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d076      	beq.n	8006958 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b00      	cmp	r3, #0
 8006874:	d046      	beq.n	8006904 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006876:	f7ff fc66 	bl	8006146 <LL_RCC_LSI1_IsReady>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d113      	bne.n	80068a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006880:	f7ff fc3f 	bl	8006102 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006884:	f7fd fc64 	bl	8004150 <HAL_GetTick>
 8006888:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800688c:	f7fd fc60 	bl	8004150 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e203      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800689e:	f7ff fc52 	bl	8006146 <LL_RCC_LSI1_IsReady>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f1      	beq.n	800688c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80068a8:	f7ff fc5f 	bl	800616a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fd fc50 	bl	8004150 <HAL_GetTick>
 80068b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068b4:	f7fd fc4c 	bl	8004150 <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e1ef      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80068c6:	f7ff fc72 	bl	80061ae <LL_RCC_LSI2_IsReady>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0f1      	beq.n	80068b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fc7c 	bl	80061d2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80068da:	f7ff fc23 	bl	8006124 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068de:	f7fd fc37 	bl	8004150 <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068e6:	f7fd fc33 	bl	8004150 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e1d6      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068f8:	f7ff fc25 	bl	8006146 <LL_RCC_LSI1_IsReady>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f1      	bne.n	80068e6 <HAL_RCC_OscConfig+0x31a>
 8006902:	e051      	b.n	80069a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006904:	f7ff fbfd 	bl	8006102 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006908:	f7fd fc22 	bl	8004150 <HAL_GetTick>
 800690c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800690e:	e00c      	b.n	800692a <HAL_RCC_OscConfig+0x35e>
 8006910:	20000008 	.word	0x20000008
 8006914:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006918:	f7fd fc1a 	bl	8004150 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e1bd      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800692a:	f7ff fc0c 	bl	8006146 <LL_RCC_LSI1_IsReady>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f1      	beq.n	8006918 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006934:	f7ff fc2a 	bl	800618c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006938:	e008      	b.n	800694c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800693a:	f7fd fc09 	bl	8004150 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	2b03      	cmp	r3, #3
 8006946:	d901      	bls.n	800694c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e1ac      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800694c:	f7ff fc2f 	bl	80061ae <LL_RCC_LSI2_IsReady>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f1      	bne.n	800693a <HAL_RCC_OscConfig+0x36e>
 8006956:	e027      	b.n	80069a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006958:	f7ff fc18 	bl	800618c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fd fbf8 	bl	8004150 <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006962:	e008      	b.n	8006976 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006964:	f7fd fbf4 	bl	8004150 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e197      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006976:	f7ff fc1a 	bl	80061ae <LL_RCC_LSI2_IsReady>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1f1      	bne.n	8006964 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006980:	f7ff fbd0 	bl	8006124 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fd fbe4 	bl	8004150 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800698c:	f7fd fbe0 	bl	8004150 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e183      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800699e:	f7ff fbd2 	bl	8006146 <LL_RCC_LSI1_IsReady>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f1      	bne.n	800698c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d05b      	beq.n	8006a6c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069b4:	4ba7      	ldr	r3, [pc, #668]	@ (8006c54 <HAL_RCC_OscConfig+0x688>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d114      	bne.n	80069ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80069c0:	f7ff fa1e 	bl	8005e00 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c4:	f7fd fbc4 	bl	8004150 <HAL_GetTick>
 80069c8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069cc:	f7fd fbc0 	bl	8004150 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e163      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069de:	4b9d      	ldr	r3, [pc, #628]	@ (8006c54 <HAL_RCC_OscConfig+0x688>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d102      	bne.n	80069f8 <HAL_RCC_OscConfig+0x42c>
 80069f2:	f7ff fb30 	bl	8006056 <LL_RCC_LSE_Enable>
 80069f6:	e00c      	b.n	8006a12 <HAL_RCC_OscConfig+0x446>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	2b05      	cmp	r3, #5
 80069fe:	d104      	bne.n	8006a0a <HAL_RCC_OscConfig+0x43e>
 8006a00:	f7ff fb4b 	bl	800609a <LL_RCC_LSE_EnableBypass>
 8006a04:	f7ff fb27 	bl	8006056 <LL_RCC_LSE_Enable>
 8006a08:	e003      	b.n	8006a12 <HAL_RCC_OscConfig+0x446>
 8006a0a:	f7ff fb35 	bl	8006078 <LL_RCC_LSE_Disable>
 8006a0e:	f7ff fb55 	bl	80060bc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fd fb99 	bl	8004150 <HAL_GetTick>
 8006a1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fd fb95 	bl	8004150 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e136      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a38:	f7ff fb51 	bl	80060de <LL_RCC_LSE_IsReady>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <HAL_RCC_OscConfig+0x456>
 8006a42:	e013      	b.n	8006a6c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fd fb84 	bl	8004150 <HAL_GetTick>
 8006a48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a4a:	e00a      	b.n	8006a62 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4c:	f7fd fb80 	bl	8004150 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e121      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a62:	f7ff fb3c 	bl	80060de <LL_RCC_LSE_IsReady>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ef      	bne.n	8006a4c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02c      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d014      	beq.n	8006aaa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a80:	f7ff fab5 	bl	8005fee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fd fb64 	bl	8004150 <HAL_GetTick>
 8006a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a8a:	e008      	b.n	8006a9e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a8c:	f7fd fb60 	bl	8004150 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e103      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a9e:	f7ff fac8 	bl	8006032 <LL_RCC_HSI48_IsReady>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f1      	beq.n	8006a8c <HAL_RCC_OscConfig+0x4c0>
 8006aa8:	e013      	b.n	8006ad2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006aaa:	f7ff fab1 	bl	8006010 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aae:	f7fd fb4f 	bl	8004150 <HAL_GetTick>
 8006ab2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ab4:	e008      	b.n	8006ac8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ab6:	f7fd fb4b 	bl	8004150 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e0ee      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ac8:	f7ff fab3 	bl	8006032 <LL_RCC_HSI48_IsReady>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1f1      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80e4 	beq.w	8006ca4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006adc:	f7ff fc11 	bl	8006302 <LL_RCC_GetSysClkSource>
 8006ae0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	f040 80b4 	bne.w	8006c5c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d123      	bne.n	8006b4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d11c      	bne.n	8006b4a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d114      	bne.n	8006b4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d10d      	bne.n	8006b4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d05d      	beq.n	8006c06 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	d058      	beq.n	8006c02 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e0a1      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b62:	f7ff fc84 	bl	800646e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b66:	f7fd faf3 	bl	8004150 <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6e:	f7fd faef 	bl	8004150 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e092      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1ef      	bne.n	8006b6e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <HAL_RCC_OscConfig+0x68c>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ba6:	0212      	lsls	r2, r2, #8
 8006ba8:	4311      	orrs	r1, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bae:	4311      	orrs	r1, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006bb4:	4311      	orrs	r1, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bc4:	f7ff fc44 	bl	8006450 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bd8:	f7fd faba 	bl	8004150 <HAL_GetTick>
 8006bdc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fd fab6 	bl	8004150 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e059      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0ef      	beq.n	8006be0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c00:	e050      	b.n	8006ca4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e04f      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d147      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c14:	f7ff fc1c 	bl	8006450 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c28:	f7fd fa92 	bl	8004150 <HAL_GetTick>
 8006c2c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c30:	f7fd fa8e 	bl	8004150 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e031      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0ef      	beq.n	8006c30 <HAL_RCC_OscConfig+0x664>
 8006c50:	e028      	b.n	8006ca4 <HAL_RCC_OscConfig+0x6d8>
 8006c52:	bf00      	nop
 8006c54:	58000400 	.word	0x58000400
 8006c58:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b0c      	cmp	r3, #12
 8006c60:	d01e      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c62:	f7ff fc04 	bl	800646e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c66:	f7fd fa73 	bl	8004150 <HAL_GetTick>
 8006c6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c6c:	e008      	b.n	8006c80 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6e:	f7fd fa6f 	bl	8004150 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d901      	bls.n	8006c80 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e012      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1ef      	bne.n	8006c6e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c98:	4b05      	ldr	r3, [pc, #20]	@ (8006cb0 <HAL_RCC_OscConfig+0x6e4>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60cb      	str	r3, [r1, #12]
 8006c9e:	e001      	b.n	8006ca4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3734      	adds	r7, #52	@ 0x34
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd90      	pop	{r4, r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	eefefffc 	.word	0xeefefffc

08006cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e12d      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cc8:	4b98      	ldr	r3, [pc, #608]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d91b      	bls.n	8006d0e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd6:	4b95      	ldr	r3, [pc, #596]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 0207 	bic.w	r2, r3, #7
 8006cde:	4993      	ldr	r1, [pc, #588]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ce6:	f7fd fa33 	bl	8004150 <HAL_GetTick>
 8006cea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006cee:	f7fd fa2f 	bl	8004150 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e111      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d00:	4b8a      	ldr	r3, [pc, #552]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d1ef      	bne.n	8006cee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d016      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fafb 	bl	800631a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d24:	f7fd fa14 	bl	8004150 <HAL_GetTick>
 8006d28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d2c:	f7fd fa10 	bl	8004150 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e0f2      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d3e:	f7ff fbe8 	bl	8006512 <LL_RCC_IsActiveFlag_HPRE>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d0f1      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0320 	and.w	r3, r3, #32
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff faf2 	bl	8006342 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d5e:	f7fd f9f7 	bl	8004150 <HAL_GetTick>
 8006d62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d64:	e008      	b.n	8006d78 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d66:	f7fd f9f3 	bl	8004150 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e0d5      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d78:	f7ff fbdd 	bl	8006536 <LL_RCC_IsActiveFlag_C2HPRE>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f1      	beq.n	8006d66 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d016      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff faeb 	bl	800636e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d98:	f7fd f9da 	bl	8004150 <HAL_GetTick>
 8006d9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006da0:	f7fd f9d6 	bl	8004150 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e0b8      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006db2:	f7ff fbd3 	bl	800655c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f1      	beq.n	8006da0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d016      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fae5 	bl	800639c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006dd2:	f7fd f9bd 	bl	8004150 <HAL_GetTick>
 8006dd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dda:	f7fd f9b9 	bl	8004150 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e09b      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006dec:	f7ff fbc9 	bl	8006582 <LL_RCC_IsActiveFlag_PPRE1>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f1      	beq.n	8006dda <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d017      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff fadb 	bl	80063c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e0e:	f7fd f99f 	bl	8004150 <HAL_GetTick>
 8006e12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e16:	f7fd f99b 	bl	8004150 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e07d      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e28:	f7ff fbbd 	bl	80065a6 <LL_RCC_IsActiveFlag_PPRE2>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d0f1      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d043      	beq.n	8006ec6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d106      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006e46:	f7ff f87b 	bl	8005f40 <LL_RCC_HSE_IsReady>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11e      	bne.n	8006e8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e067      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d106      	bne.n	8006e6a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006e5c:	f7ff fb16 	bl	800648c <LL_RCC_PLL_IsReady>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d113      	bne.n	8006e8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e05c      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006e72:	f7ff f9e3 	bl	800623c <LL_RCC_MSI_IsReady>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d108      	bne.n	8006e8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e051      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006e80:	f7ff f88e 	bl	8005fa0 <LL_RCC_HSI_IsReady>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e04a      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff fa21 	bl	80062da <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e98:	f7fd f95a 	bl	8004150 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9e:	e00a      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea0:	f7fd f956 	bl	8004150 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e036      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb6:	f7ff fa24 	bl	8006302 <LL_RCC_GetSysClkSource>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d1ec      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec6:	4b19      	ldr	r3, [pc, #100]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d21b      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed4:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f023 0207 	bic.w	r2, r3, #7
 8006edc:	4913      	ldr	r1, [pc, #76]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ee4:	f7fd f934 	bl	8004150 <HAL_GetTick>
 8006ee8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006eec:	f7fd f930 	bl	8004150 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e012      	b.n	8006f24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b0b      	ldr	r3, [pc, #44]	@ (8006f2c <HAL_RCC_ClockConfig+0x278>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0307 	and.w	r3, r3, #7
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1ef      	bne.n	8006eec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f0c:	f000 f87e 	bl	800700c <HAL_RCC_GetHCLKFreq>
 8006f10:	4603      	mov	r3, r0
 8006f12:	4a07      	ldr	r2, [pc, #28]	@ (8006f30 <HAL_RCC_ClockConfig+0x27c>)
 8006f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006f16:	f7fd f927 	bl	8004168 <HAL_GetTickPrio>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fd f8c9 	bl	80040b4 <HAL_InitTick>
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	58004000 	.word	0x58004000
 8006f30:	20000008 	.word	0x20000008

08006f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f3a:	f7ff f9e2 	bl	8006302 <LL_RCC_GetSysClkSource>
 8006f3e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10a      	bne.n	8006f5c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f46:	f7ff f99e 	bl	8006286 <LL_RCC_MSI_GetRange>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	091b      	lsrs	r3, r3, #4
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	4a2b      	ldr	r2, [pc, #172]	@ (8007000 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e04b      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d102      	bne.n	8006f68 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f62:	4b28      	ldr	r3, [pc, #160]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e045      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b08      	cmp	r3, #8
 8006f6c:	d10a      	bne.n	8006f84 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f6e:	f7fe ffb7 	bl	8005ee0 <LL_RCC_HSE_IsEnabledDiv2>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d102      	bne.n	8006f7e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006f78:	4b22      	ldr	r3, [pc, #136]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e03a      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006f7e:	4b22      	ldr	r3, [pc, #136]	@ (8007008 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e037      	b.n	8006ff4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006f84:	f7ff fab9 	bl	80064fa <LL_RCC_PLL_GetMainSource>
 8006f88:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d003      	beq.n	8006f98 <HAL_RCC_GetSysClockFreq+0x64>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d003      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0x6a>
 8006f96:	e00d      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006f98:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f9a:	60bb      	str	r3, [r7, #8]
        break;
 8006f9c:	e015      	b.n	8006fca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f9e:	f7fe ff9f 	bl	8005ee0 <LL_RCC_HSE_IsEnabledDiv2>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d102      	bne.n	8006fae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006fa8:	4b16      	ldr	r3, [pc, #88]	@ (8007004 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006faa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006fac:	e00d      	b.n	8006fca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006fae:	4b16      	ldr	r3, [pc, #88]	@ (8007008 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006fb0:	60bb      	str	r3, [r7, #8]
        break;
 8006fb2:	e00a      	b.n	8006fca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006fb4:	f7ff f967 	bl	8006286 <LL_RCC_MSI_GetRange>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	091b      	lsrs	r3, r3, #4
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8007000 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc6:	60bb      	str	r3, [r7, #8]
        break;
 8006fc8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006fca:	f7ff fa71 	bl	80064b0 <LL_RCC_PLL_GetN>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	fb03 f402 	mul.w	r4, r3, r2
 8006fd6:	f7ff fa84 	bl	80064e2 <LL_RCC_PLL_GetDivider>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	3301      	adds	r3, #1
 8006fe0:	fbb4 f4f3 	udiv	r4, r4, r3
 8006fe4:	f7ff fa71 	bl	80064ca <LL_RCC_PLL_GetR>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	0f5b      	lsrs	r3, r3, #29
 8006fec:	3301      	adds	r3, #1
 8006fee:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd90      	pop	{r4, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	08012fbc 	.word	0x08012fbc
 8007004:	00f42400 	.word	0x00f42400
 8007008:	01e84800 	.word	0x01e84800

0800700c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800700c:	b598      	push	{r3, r4, r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007010:	f7ff ff90 	bl	8006f34 <HAL_RCC_GetSysClockFreq>
 8007014:	4604      	mov	r4, r0
 8007016:	f7ff f9e9 	bl	80063ec <LL_RCC_GetAHBPrescaler>
 800701a:	4603      	mov	r3, r0
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	4a03      	ldr	r2, [pc, #12]	@ (8007030 <HAL_RCC_GetHCLKFreq+0x24>)
 8007024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007028:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd98      	pop	{r3, r4, r7, pc}
 8007030:	08012f5c 	.word	0x08012f5c

08007034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007034:	b598      	push	{r3, r4, r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007038:	f7ff ffe8 	bl	800700c <HAL_RCC_GetHCLKFreq>
 800703c:	4604      	mov	r4, r0
 800703e:	f7ff f9ef 	bl	8006420 <LL_RCC_GetAPB1Prescaler>
 8007042:	4603      	mov	r3, r0
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	4a04      	ldr	r2, [pc, #16]	@ (800705c <HAL_RCC_GetPCLK1Freq+0x28>)
 800704c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd98      	pop	{r3, r4, r7, pc}
 800705c:	08012f9c 	.word	0x08012f9c

08007060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007060:	b598      	push	{r3, r4, r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007064:	f7ff ffd2 	bl	800700c <HAL_RCC_GetHCLKFreq>
 8007068:	4604      	mov	r4, r0
 800706a:	f7ff f9e5 	bl	8006438 <LL_RCC_GetAPB2Prescaler>
 800706e:	4603      	mov	r3, r0
 8007070:	0adb      	lsrs	r3, r3, #11
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	4a04      	ldr	r2, [pc, #16]	@ (8007088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800707c:	f003 031f 	and.w	r3, r3, #31
 8007080:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd98      	pop	{r3, r4, r7, pc}
 8007088:	08012f9c 	.word	0x08012f9c

0800708c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2bb0      	cmp	r3, #176	@ 0xb0
 8007098:	d903      	bls.n	80070a2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800709a:	4b15      	ldr	r3, [pc, #84]	@ (80070f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	e007      	b.n	80070b2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	091b      	lsrs	r3, r3, #4
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	4a11      	ldr	r2, [pc, #68]	@ (80070f0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80070b2:	f7ff f9a7 	bl	8006404 <LL_RCC_GetAHB4Prescaler>
 80070b6:	4603      	mov	r3, r0
 80070b8:	091b      	lsrs	r3, r3, #4
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	4a0d      	ldr	r2, [pc, #52]	@ (80070f4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80070c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a0a      	ldr	r2, [pc, #40]	@ (80070f8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	0c9c      	lsrs	r4, r3, #18
 80070d6:	f7fe fef5 	bl	8005ec4 <HAL_PWREx_GetVoltageRange>
 80070da:	4603      	mov	r3, r0
 80070dc:	4619      	mov	r1, r3
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 f80c 	bl	80070fc <RCC_SetFlashLatency>
 80070e4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd90      	pop	{r4, r7, pc}
 80070ee:	bf00      	nop
 80070f0:	08012fbc 	.word	0x08012fbc
 80070f4:	08012f5c 	.word	0x08012f5c
 80070f8:	431bde83 	.word	0x431bde83

080070fc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80070fc:	b590      	push	{r4, r7, lr}
 80070fe:	b093      	sub	sp, #76	@ 0x4c
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007106:	4b37      	ldr	r3, [pc, #220]	@ (80071e4 <RCC_SetFlashLatency+0xe8>)
 8007108:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800710c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800710e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007112:	4a35      	ldr	r2, [pc, #212]	@ (80071e8 <RCC_SetFlashLatency+0xec>)
 8007114:	f107 031c 	add.w	r3, r7, #28
 8007118:	ca07      	ldmia	r2, {r0, r1, r2}
 800711a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800711e:	4b33      	ldr	r3, [pc, #204]	@ (80071ec <RCC_SetFlashLatency+0xf0>)
 8007120:	f107 040c 	add.w	r4, r7, #12
 8007124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800712a:	2300      	movs	r3, #0
 800712c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007134:	d11a      	bne.n	800716c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007136:	2300      	movs	r3, #0
 8007138:	643b      	str	r3, [r7, #64]	@ 0x40
 800713a:	e013      	b.n	8007164 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800713c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	3348      	adds	r3, #72	@ 0x48
 8007142:	443b      	add	r3, r7
 8007144:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	429a      	cmp	r2, r3
 800714c:	d807      	bhi.n	800715e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800714e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	3348      	adds	r3, #72	@ 0x48
 8007154:	443b      	add	r3, r7
 8007156:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800715a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800715c:	e020      	b.n	80071a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800715e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007160:	3301      	adds	r3, #1
 8007162:	643b      	str	r3, [r7, #64]	@ 0x40
 8007164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007166:	2b03      	cmp	r3, #3
 8007168:	d9e8      	bls.n	800713c <RCC_SetFlashLatency+0x40>
 800716a:	e019      	b.n	80071a0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800716c:	2300      	movs	r3, #0
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007170:	e013      	b.n	800719a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	3348      	adds	r3, #72	@ 0x48
 8007178:	443b      	add	r3, r7
 800717a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d807      	bhi.n	8007194 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	3348      	adds	r3, #72	@ 0x48
 800718a:	443b      	add	r3, r7
 800718c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007190:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007192:	e005      	b.n	80071a0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007196:	3301      	adds	r3, #1
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800719a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719c:	2b02      	cmp	r3, #2
 800719e:	d9e8      	bls.n	8007172 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80071a0:	4b13      	ldr	r3, [pc, #76]	@ (80071f0 <RCC_SetFlashLatency+0xf4>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f023 0207 	bic.w	r2, r3, #7
 80071a8:	4911      	ldr	r1, [pc, #68]	@ (80071f0 <RCC_SetFlashLatency+0xf4>)
 80071aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071ac:	4313      	orrs	r3, r2
 80071ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071b0:	f7fc ffce 	bl	8004150 <HAL_GetTick>
 80071b4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071b6:	e008      	b.n	80071ca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80071b8:	f7fc ffca 	bl	8004150 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e007      	b.n	80071da <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <RCC_SetFlashLatency+0xf4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d1ef      	bne.n	80071b8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	374c      	adds	r7, #76	@ 0x4c
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd90      	pop	{r4, r7, pc}
 80071e2:	bf00      	nop
 80071e4:	08011d38 	.word	0x08011d38
 80071e8:	08011d48 	.word	0x08011d48
 80071ec:	08011d54 	.word	0x08011d54
 80071f0:	58004000 	.word	0x58004000

080071f4 <LL_RCC_LSE_IsEnabled>:
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80071f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <LL_RCC_LSE_IsEnabled+0x18>
 8007208:	2301      	movs	r3, #1
 800720a:	e000      	b.n	800720e <LL_RCC_LSE_IsEnabled+0x1a>
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <LL_RCC_LSE_IsReady>:
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800721c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b02      	cmp	r3, #2
 800722a:	d101      	bne.n	8007230 <LL_RCC_LSE_IsReady+0x18>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <LL_RCC_LSE_IsReady+0x1a>
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <LL_RCC_SetRFWKPClockSource>:
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800724c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <LL_RCC_SetSMPSClockSource>:
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	f023 0203 	bic.w	r2, r3, #3
 800727a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4313      	orrs	r3, r2
 8007282:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <LL_RCC_SetSMPSPrescaler>:
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <LL_RCC_SetUSARTClockSource>:
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80072c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c8:	f023 0203 	bic.w	r2, r3, #3
 80072cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <LL_RCC_SetLPUARTClockSource>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80072ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4313      	orrs	r3, r2
 8007300:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_RCC_SetI2CClockSource>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800731c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	091b      	lsrs	r3, r3, #4
 8007324:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007328:	43db      	mvns	r3, r3
 800732a:	401a      	ands	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007338:	4313      	orrs	r3, r2
 800733a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <LL_RCC_SetLPTIMClockSource>:
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007356:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	041b      	lsls	r3, r3, #16
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_RCC_SetSAIClockSource>:
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800738a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4313      	orrs	r3, r2
 800739a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <LL_RCC_SetRNGClockSource>:
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80073be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <LL_RCC_SetCLK48ClockSource>:
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80073de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_RCC_SetUSBClockSource>:
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff ffe3 	bl	80073d6 <LL_RCC_SetCLK48ClockSource>
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <LL_RCC_SetADCClockSource>:
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007428:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800742c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <LL_RCC_SetRTCClockSource>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800744c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <LL_RCC_GetRTCClockSource>:
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800747c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007480:	4618      	mov	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <LL_RCC_ForceBackupDomainReset>:
{
 800748a:	b480      	push	{r7}
 800748c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800748e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800749a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800749e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <LL_RCC_ReleaseBackupDomainReset>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074c4:	bf00      	nop
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <LL_RCC_PLLSAI1_Enable>:
{
 80074ce:	b480      	push	{r7}
 80074d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074e0:	6013      	str	r3, [r2, #0]
}
 80074e2:	bf00      	nop
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <LL_RCC_PLLSAI1_Disable>:
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074fe:	6013      	str	r3, [r2, #0]
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <LL_RCC_PLLSAI1_IsReady>:
{
 800750a:	b480      	push	{r7}
 800750c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800750e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800751c:	d101      	bne.n	8007522 <LL_RCC_PLLSAI1_IsReady+0x18>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b088      	sub	sp, #32
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007536:	2300      	movs	r3, #0
 8007538:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800753a:	2300      	movs	r3, #0
 800753c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d034      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007552:	d021      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007554:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007558:	d81b      	bhi.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800755a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800755e:	d01d      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007560:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007564:	d815      	bhi.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800756a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800756e:	d110      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800757a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800757e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007580:	e00d      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f947 	bl	800781a <RCCEx_PLLSAI1_ConfigNP>
 800758c:	4603      	mov	r3, r0
 800758e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007590:	e005      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	77fb      	strb	r3, [r7, #31]
        break;
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	7ffb      	ldrb	r3, [r7, #31]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fee8 	bl	800737e <LL_RCC_SetSAIClockSource>
 80075ae:	e001      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b0:	7ffb      	ldrb	r3, [r7, #31]
 80075b2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d046      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80075c0:	f7ff ff56 	bl	8007470 <LL_RCC_GetRTCClockSource>
 80075c4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d03c      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80075d0:	f7fe fc16 	bl	8005e00 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff ff30 	bl	8007444 <LL_RCC_SetRTCClockSource>
 80075e4:	e02e      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80075e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80075f0:	f7ff ff4b 	bl	800748a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80075f4:	f7ff ff5a 	bl	80074ac <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	4313      	orrs	r3, r2
 8007604:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007610:	f7ff fdf0 	bl	80071f4 <LL_RCC_LSE_IsEnabled>
 8007614:	4603      	mov	r3, r0
 8007616:	2b01      	cmp	r3, #1
 8007618:	d114      	bne.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800761a:	f7fc fd99 	bl	8004150 <HAL_GetTick>
 800761e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007620:	e00b      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007622:	f7fc fd95 	bl	8004150 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007630:	4293      	cmp	r3, r2
 8007632:	d902      	bls.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	77fb      	strb	r3, [r7, #31]
              break;
 8007638:	e004      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800763a:	f7ff fded 	bl	8007218 <LL_RCC_LSE_IsReady>
 800763e:	4603      	mov	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d1ee      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007644:	7ffb      	ldrb	r3, [r7, #31]
 8007646:	77bb      	strb	r3, [r7, #30]
 8007648:	e001      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764a:	7ffb      	ldrb	r3, [r7, #31]
 800764c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	4618      	mov	r0, r3
 8007660:	f7ff fe2a 	bl	80072b8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff fe35 	bl	80072e4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0310 	and.w	r3, r3, #16
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fe5d 	bl	800734a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	d004      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff fe52 	bl	800734a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d004      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fe2a 	bl	8007310 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d004      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fe1f 	bl	8007310 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d022      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7ff fe8d 	bl	8007402 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076f0:	d107      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80076f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007700:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007706:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800770a:	d10b      	bne.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f8dd 	bl	80078d0 <RCCEx_PLLSAI1_ConfigNQ>
 8007716:	4603      	mov	r3, r0
 8007718:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800771a:	7ffb      	ldrb	r3, [r7, #31]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007720:	7ffb      	ldrb	r3, [r7, #31]
 8007722:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800772c:	2b00      	cmp	r3, #0
 800772e:	d02b      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007738:	d008      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007742:	d003      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fe2a 	bl	80073aa <LL_RCC_SetRNGClockSource>
 8007756:	e00a      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	2000      	movs	r0, #0
 8007764:	f7ff fe21 	bl	80073aa <LL_RCC_SetRNGClockSource>
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fe34 	bl	80073d6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007776:	d107      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007786:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007790:	2b00      	cmp	r3, #0
 8007792:	d022      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fe3d 	bl	8007418 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a6:	d107      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077b6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077c0:	d10b      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 f8dd 	bl	8007986 <RCCEx_PLLSAI1_ConfigNR>
 80077cc:	4603      	mov	r3, r0
 80077ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80077d0:	7ffb      	ldrb	r3, [r7, #31]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80077d6:	7ffb      	ldrb	r3, [r7, #31]
 80077d8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d004      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fd26 	bl	800723c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d009      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fd45 	bl	8007290 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fd2c 	bl	8007268 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007810:	7fbb      	ldrb	r3, [r7, #30]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007826:	f7ff fe61 	bl	80074ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800782a:	f7fc fc91 	bl	8004150 <HAL_GetTick>
 800782e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007830:	e009      	b.n	8007846 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007832:	f7fc fc8d 	bl	8004150 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d902      	bls.n	8007846 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
      break;
 8007844:	e004      	b.n	8007850 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007846:	f7ff fe60 	bl	800750a <LL_RCC_PLLSAI1_IsReady>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1f0      	bne.n	8007832 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d137      	bne.n	80078c6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800786a:	4313      	orrs	r3, r2
 800786c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800786e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007880:	4313      	orrs	r3, r2
 8007882:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007884:	f7ff fe23 	bl	80074ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007888:	f7fc fc62 	bl	8004150 <HAL_GetTick>
 800788c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800788e:	e009      	b.n	80078a4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007890:	f7fc fc5e 	bl	8004150 <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b02      	cmp	r3, #2
 800789c:	d902      	bls.n	80078a4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	73fb      	strb	r3, [r7, #15]
        break;
 80078a2:	e004      	b.n	80078ae <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078a4:	f7ff fe31 	bl	800750a <LL_RCC_PLLSAI1_IsReady>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d1f0      	bne.n	8007890 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078c2:	4313      	orrs	r3, r2
 80078c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078d8:	2300      	movs	r3, #0
 80078da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078dc:	f7ff fe06 	bl	80074ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078e0:	f7fc fc36 	bl	8004150 <HAL_GetTick>
 80078e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078e6:	e009      	b.n	80078fc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078e8:	f7fc fc32 	bl	8004150 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d902      	bls.n	80078fc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
      break;
 80078fa:	e004      	b.n	8007906 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078fc:	f7ff fe05 	bl	800750a <LL_RCC_PLLSAI1_IsReady>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d137      	bne.n	800797c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800790c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007920:	4313      	orrs	r3, r2
 8007922:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007936:	4313      	orrs	r3, r2
 8007938:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800793a:	f7ff fdc8 	bl	80074ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793e:	f7fc fc07 	bl	8004150 <HAL_GetTick>
 8007942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007944:	e009      	b.n	800795a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007946:	f7fc fc03 	bl	8004150 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d902      	bls.n	800795a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	73fb      	strb	r3, [r7, #15]
        break;
 8007958:	e004      	b.n	8007964 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800795a:	f7ff fdd6 	bl	800750a <LL_RCC_PLLSAI1_IsReady>
 800795e:	4603      	mov	r3, r0
 8007960:	2b01      	cmp	r3, #1
 8007962:	d1f0      	bne.n	8007946 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d108      	bne.n	800797c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800796a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007978:	4313      	orrs	r3, r2
 800797a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007992:	f7ff fdab 	bl	80074ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007996:	f7fc fbdb 	bl	8004150 <HAL_GetTick>
 800799a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800799c:	e009      	b.n	80079b2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800799e:	f7fc fbd7 	bl	8004150 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d902      	bls.n	80079b2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	73fb      	strb	r3, [r7, #15]
      break;
 80079b0:	e004      	b.n	80079bc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079b2:	f7ff fdaa 	bl	800750a <LL_RCC_PLLSAI1_IsReady>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1f0      	bne.n	800799e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d137      	bne.n	8007a32 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079d6:	4313      	orrs	r3, r2
 80079d8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80079da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079ec:	4313      	orrs	r3, r2
 80079ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079f0:	f7ff fd6d 	bl	80074ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f4:	f7fc fbac 	bl	8004150 <HAL_GetTick>
 80079f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079fa:	e009      	b.n	8007a10 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079fc:	f7fc fba8 	bl	8004150 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d902      	bls.n	8007a10 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a0e:	e004      	b.n	8007a1a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a10:	f7ff fd7b 	bl	800750a <LL_RCC_PLLSAI1_IsReady>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d1f0      	bne.n	80079fc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d108      	bne.n	8007a32 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e09f      	b.n	8007b8e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fb fe72 	bl	800374c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007a70:	4b49      	ldr	r3, [pc, #292]	@ (8007b98 <HAL_RTC_Init+0x15c>)
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d07e      	beq.n	8007b7a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	22ca      	movs	r2, #202	@ 0xca
 8007a82:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2253      	movs	r2, #83	@ 0x53
 8007a8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8ab 	bl	8007be8 <RTC_EnterInitMode>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	22ff      	movs	r2, #255	@ 0xff
 8007a9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	e067      	b.n	8007b7e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6899      	ldr	r1, [r3, #8]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68d2      	ldr	r2, [r2, #12]
 8007ae8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6919      	ldr	r1, [r3, #16]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	041a      	lsls	r2, r3, #16
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68da      	ldr	r2, [r3, #12]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b0c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0203 	bic.w	r2, r2, #3
 8007b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69da      	ldr	r2, [r3, #28]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d113      	bne.n	8007b6c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f829 	bl	8007b9c <HAL_RTC_WaitForSynchro>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00d      	beq.n	8007b6c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	22ff      	movs	r2, #255	@ 0xff
 8007b56:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e010      	b.n	8007b8e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	22ff      	movs	r2, #255	@ 0xff
 8007b72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
 8007b78:	e001      	b.n	8007b7e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40002800 	.word	0x40002800

08007b9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007bb2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007bb4:	f7fc facc 	bl	8004150 <HAL_GetTick>
 8007bb8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007bba:	e009      	b.n	8007bd0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bbc:	f7fc fac8 	bl	8004150 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bca:	d901      	bls.n	8007bd0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e007      	b.n	8007be0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0ee      	beq.n	8007bbc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d119      	bne.n	8007c32 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f04f 32ff 	mov.w	r2, #4294967295
 8007c06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c08:	f7fc faa2 	bl	8004150 <HAL_GetTick>
 8007c0c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c0e:	e009      	b.n	8007c24 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c10:	f7fc fa9e 	bl	8004150 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c1e:	d901      	bls.n	8007c24 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e007      	b.n	8007c34 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0ee      	beq.n	8007c10 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d101      	bne.n	8007c56 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007c52:	2302      	movs	r3, #2
 8007c54:	e0a8      	b.n	8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	22ca      	movs	r2, #202	@ 0xca
 8007c6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2253      	movs	r2, #83	@ 0x53
 8007c74:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d020      	beq.n	8007cc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007c84:	f7fc fa64 	bl	8004150 <HAL_GetTick>
 8007c88:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007c8a:	e015      	b.n	8007cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c8c:	f7fc fa60 	bl	8004150 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c9a:	d90d      	bls.n	8007cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	22ff      	movs	r2, #255	@ 0xff
 8007ca2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e077      	b.n	8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e2      	bne.n	8007c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cd4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007ce6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ce8:	f7fc fa32 	bl	8004150 <HAL_GetTick>
 8007cec:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007cee:	e015      	b.n	8007d1c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cf0:	f7fc fa2e 	bl	8004150 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cfe:	d90d      	bls.n	8007d1c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	22ff      	movs	r2, #255	@ 0xff
 8007d06:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e045      	b.n	8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0e2      	beq.n	8007cf0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0207 	bic.w	r2, r2, #7
 8007d40:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6899      	ldr	r1, [r3, #8]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d52:	4b17      	ldr	r3, [pc, #92]	@ (8007db0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d58:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007d62:	4b13      	ldr	r3, [pc, #76]	@ (8007db0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a12      	ldr	r2, [pc, #72]	@ (8007db0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d6c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	689a      	ldr	r2, [r3, #8]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d7c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d8c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	22ff      	movs	r2, #255	@ 0xff
 8007d94:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3718      	adds	r7, #24
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	58000800 	.word	0x58000800

08007db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e095      	b.n	8007ef2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d108      	bne.n	8007de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dd6:	d009      	beq.n	8007dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	61da      	str	r2, [r3, #28]
 8007dde:	e005      	b.n	8007dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fb fd44 	bl	8003894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e2c:	d902      	bls.n	8007e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	e002      	b.n	8007e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e42:	d007      	beq.n	8007e54 <HAL_SPI_Init+0xa0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e4c:	d002      	beq.n	8007e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e96:	ea42 0103 	orr.w	r1, r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	0c1b      	lsrs	r3, r3, #16
 8007eb0:	f003 0204 	and.w	r2, r3, #4
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ed0:	ea42 0103 	orr.w	r1, r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b088      	sub	sp, #32
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f0a:	f7fc f921 	bl	8004150 <HAL_GetTick>
 8007f0e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d001      	beq.n	8007f24 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f20:	2302      	movs	r3, #2
 8007f22:	e15c      	b.n	80081de <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <HAL_SPI_Transmit+0x36>
 8007f2a:	88fb      	ldrh	r3, [r7, #6]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e154      	b.n	80081de <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d101      	bne.n	8007f42 <HAL_SPI_Transmit+0x48>
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e14d      	b.n	80081de <HAL_SPI_Transmit+0x2e4>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f94:	d10f      	bne.n	8007fb6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc0:	2b40      	cmp	r3, #64	@ 0x40
 8007fc2:	d007      	beq.n	8007fd4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007fdc:	d952      	bls.n	8008084 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <HAL_SPI_Transmit+0xf2>
 8007fe6:	8b7b      	ldrh	r3, [r7, #26]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d145      	bne.n	8008078 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff0:	881a      	ldrh	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffc:	1c9a      	adds	r2, r3, #2
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008006:	b29b      	uxth	r3, r3
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008010:	e032      	b.n	8008078 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b02      	cmp	r3, #2
 800801e:	d112      	bne.n	8008046 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008024:	881a      	ldrh	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008030:	1c9a      	adds	r2, r3, #2
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800803a:	b29b      	uxth	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008044:	e018      	b.n	8008078 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008046:	f7fc f883 	bl	8004150 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d803      	bhi.n	800805e <HAL_SPI_Transmit+0x164>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805c:	d102      	bne.n	8008064 <HAL_SPI_Transmit+0x16a>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d109      	bne.n	8008078 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e0b2      	b.n	80081de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1c7      	bne.n	8008012 <HAL_SPI_Transmit+0x118>
 8008082:	e083      	b.n	800818c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_SPI_Transmit+0x198>
 800808c:	8b7b      	ldrh	r3, [r7, #26]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d177      	bne.n	8008182 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008096:	b29b      	uxth	r3, r3
 8008098:	2b01      	cmp	r3, #1
 800809a:	d912      	bls.n	80080c2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a0:	881a      	ldrh	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ac:	1c9a      	adds	r2, r3, #2
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3b02      	subs	r3, #2
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080c0:	e05f      	b.n	8008182 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	330c      	adds	r3, #12
 80080cc:	7812      	ldrb	r2, [r2, #0]
 80080ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	3b01      	subs	r3, #1
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80080e8:	e04b      	b.n	8008182 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d12b      	bne.n	8008150 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d912      	bls.n	8008128 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008112:	1c9a      	adds	r2, r3, #2
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800811c:	b29b      	uxth	r3, r3
 800811e:	3b02      	subs	r3, #2
 8008120:	b29a      	uxth	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008126:	e02c      	b.n	8008182 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800814e:	e018      	b.n	8008182 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008150:	f7fb fffe 	bl	8004150 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d803      	bhi.n	8008168 <HAL_SPI_Transmit+0x26e>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d102      	bne.n	800816e <HAL_SPI_Transmit+0x274>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e02d      	b.n	80081de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1ae      	bne.n	80080ea <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fe09 	bl	8008da8 <SPI_EndRxTxTransaction>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10a      	bne.n	80081c0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80081dc:	2300      	movs	r3, #0
  }
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3720      	adds	r7, #32
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b088      	sub	sp, #32
 80081ea:	af02      	add	r7, sp, #8
 80081ec:	60f8      	str	r0, [r7, #12]
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	603b      	str	r3, [r7, #0]
 80081f2:	4613      	mov	r3, r2
 80081f4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d001      	beq.n	8008206 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008202:	2302      	movs	r3, #2
 8008204:	e123      	b.n	800844e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <HAL_SPI_Receive+0x2c>
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e11b      	b.n	800844e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800821e:	d112      	bne.n	8008246 <HAL_SPI_Receive+0x60>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10e      	bne.n	8008246 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2204      	movs	r2, #4
 800822c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008230:	88fa      	ldrh	r2, [r7, #6]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	4613      	mov	r3, r2
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 f90a 	bl	8008456 <HAL_SPI_TransmitReceive>
 8008242:	4603      	mov	r3, r0
 8008244:	e103      	b.n	800844e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008246:	f7fb ff83 	bl	8004150 <HAL_GetTick>
 800824a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <HAL_SPI_Receive+0x74>
 8008256:	2302      	movs	r3, #2
 8008258:	e0f9      	b.n	800844e <HAL_SPI_Receive+0x268>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2204      	movs	r2, #4
 8008266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	88fa      	ldrh	r2, [r7, #6]
 8008282:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082ac:	d908      	bls.n	80082c0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80082bc:	605a      	str	r2, [r3, #4]
 80082be:	e007      	b.n	80082d0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80082ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082d8:	d10f      	bne.n	80082fa <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008304:	2b40      	cmp	r3, #64	@ 0x40
 8008306:	d007      	beq.n	8008318 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008316:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008320:	d875      	bhi.n	800840e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008322:	e037      	b.n	8008394 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b01      	cmp	r3, #1
 8008330:	d117      	bne.n	8008362 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f103 020c 	add.w	r2, r3, #12
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	7812      	ldrb	r2, [r2, #0]
 8008340:	b2d2      	uxtb	r2, r2
 8008342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008360:	e018      	b.n	8008394 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008362:	f7fb fef5 	bl	8004150 <HAL_GetTick>
 8008366:	4602      	mov	r2, r0
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	1ad3      	subs	r3, r2, r3
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d803      	bhi.n	800837a <HAL_SPI_Receive+0x194>
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008378:	d102      	bne.n	8008380 <HAL_SPI_Receive+0x19a>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e05c      	b.n	800844e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1c1      	bne.n	8008324 <HAL_SPI_Receive+0x13e>
 80083a0:	e03b      	b.n	800841a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d115      	bne.n	80083dc <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	b292      	uxth	r2, r2
 80083bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	1c9a      	adds	r2, r3, #2
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80083da:	e018      	b.n	800840e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083dc:	f7fb feb8 	bl	8004150 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d803      	bhi.n	80083f4 <HAL_SPI_Receive+0x20e>
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d102      	bne.n	80083fa <HAL_SPI_Receive+0x214>
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e01f      	b.n	800844e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008414:	b29b      	uxth	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1c3      	bne.n	80083a2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fc6a 	bl	8008cf8 <SPI_EndRxTransaction>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800844c:	2300      	movs	r3, #0
  }
}
 800844e:	4618      	mov	r0, r3
 8008450:	3718      	adds	r7, #24
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b08a      	sub	sp, #40	@ 0x28
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008464:	2301      	movs	r3, #1
 8008466:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008468:	f7fb fe72 	bl	8004150 <HAL_GetTick>
 800846c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008474:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800847c:	887b      	ldrh	r3, [r7, #2]
 800847e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008480:	887b      	ldrh	r3, [r7, #2]
 8008482:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008484:	7ffb      	ldrb	r3, [r7, #31]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d00c      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x4e>
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008490:	d106      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x4a>
 800849a:	7ffb      	ldrb	r3, [r7, #31]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d001      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80084a0:	2302      	movs	r3, #2
 80084a2:	e1f3      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0x60>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0x60>
 80084b0:	887b      	ldrh	r3, [r7, #2]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e1e8      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_SPI_TransmitReceive+0x72>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e1e1      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d003      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2205      	movs	r2, #5
 80084e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	887a      	ldrh	r2, [r7, #2]
 80084f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	887a      	ldrh	r2, [r7, #2]
 80084fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	887a      	ldrh	r2, [r7, #2]
 800850a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	887a      	ldrh	r2, [r7, #2]
 8008510:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008526:	d802      	bhi.n	800852e <HAL_SPI_TransmitReceive+0xd8>
 8008528:	8abb      	ldrh	r3, [r7, #20]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d908      	bls.n	8008540 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800853c:	605a      	str	r2, [r3, #4]
 800853e:	e007      	b.n	8008550 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685a      	ldr	r2, [r3, #4]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800854e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855a:	2b40      	cmp	r3, #64	@ 0x40
 800855c:	d007      	beq.n	800856e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800856c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008576:	f240 8083 	bls.w	8008680 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <HAL_SPI_TransmitReceive+0x132>
 8008582:	8afb      	ldrh	r3, [r7, #22]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d16f      	bne.n	8008668 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	1c9a      	adds	r2, r3, #2
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	3b01      	subs	r3, #1
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085ac:	e05c      	b.n	8008668 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d11b      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x19e>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d016      	beq.n	80085f4 <HAL_SPI_TransmitReceive+0x19e>
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d113      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d0:	881a      	ldrh	r2, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085dc:	1c9a      	adds	r2, r3, #2
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d11c      	bne.n	800863c <HAL_SPI_TransmitReceive+0x1e6>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d016      	beq.n	800863c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68da      	ldr	r2, [r3, #12]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008618:	b292      	uxth	r2, r2
 800861a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008620:	1c9a      	adds	r2, r3, #2
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800862c:	b29b      	uxth	r3, r3
 800862e:	3b01      	subs	r3, #1
 8008630:	b29a      	uxth	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008638:	2301      	movs	r3, #1
 800863a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800863c:	f7fb fd88 	bl	8004150 <HAL_GetTick>
 8008640:	4602      	mov	r2, r0
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	1ad3      	subs	r3, r2, r3
 8008646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008648:	429a      	cmp	r2, r3
 800864a:	d80d      	bhi.n	8008668 <HAL_SPI_TransmitReceive+0x212>
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008652:	d009      	beq.n	8008668 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e111      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800866c:	b29b      	uxth	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d19d      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x158>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d197      	bne.n	80085ae <HAL_SPI_TransmitReceive+0x158>
 800867e:	e0e5      	b.n	800884c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_SPI_TransmitReceive+0x23a>
 8008688:	8afb      	ldrh	r3, [r7, #22]
 800868a:	2b01      	cmp	r3, #1
 800868c:	f040 80d1 	bne.w	8008832 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008694:	b29b      	uxth	r3, r3
 8008696:	2b01      	cmp	r3, #1
 8008698:	d912      	bls.n	80086c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869e:	881a      	ldrh	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086aa:	1c9a      	adds	r2, r3, #2
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b02      	subs	r3, #2
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086be:	e0b8      	b.n	8008832 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	330c      	adds	r3, #12
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086dc:	b29b      	uxth	r3, r3
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e6:	e0a4      	b.n	8008832 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d134      	bne.n	8008760 <HAL_SPI_TransmitReceive+0x30a>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d02f      	beq.n	8008760 <HAL_SPI_TransmitReceive+0x30a>
 8008700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008702:	2b01      	cmp	r3, #1
 8008704:	d12c      	bne.n	8008760 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800870a:	b29b      	uxth	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d912      	bls.n	8008736 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	881a      	ldrh	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	1c9a      	adds	r2, r3, #2
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800872a:	b29b      	uxth	r3, r3
 800872c:	3b02      	subs	r3, #2
 800872e:	b29a      	uxth	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008734:	e012      	b.n	800875c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	1c5a      	adds	r2, r3, #1
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b01      	cmp	r3, #1
 800876c:	d148      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x3aa>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d042      	beq.n	8008800 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b01      	cmp	r3, #1
 8008784:	d923      	bls.n	80087ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008790:	b292      	uxth	r2, r2
 8008792:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008798:	1c9a      	adds	r2, r3, #2
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b02      	subs	r3, #2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d81f      	bhi.n	80087fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80087ca:	605a      	str	r2, [r3, #4]
 80087cc:	e016      	b.n	80087fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f103 020c 	add.w	r2, r3, #12
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087da:	7812      	ldrb	r2, [r2, #0]
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087fc:	2301      	movs	r3, #1
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008800:	f7fb fca6 	bl	8004150 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800880c:	429a      	cmp	r2, r3
 800880e:	d803      	bhi.n	8008818 <HAL_SPI_TransmitReceive+0x3c2>
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008816:	d102      	bne.n	800881e <HAL_SPI_TransmitReceive+0x3c8>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	2b00      	cmp	r3, #0
 800881c:	d109      	bne.n	8008832 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e02c      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008836:	b29b      	uxth	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	f47f af55 	bne.w	80086e8 <HAL_SPI_TransmitReceive+0x292>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008844:	b29b      	uxth	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	f47f af4e 	bne.w	80086e8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800884c:	6a3a      	ldr	r2, [r7, #32]
 800884e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 faa9 	bl	8008da8 <SPI_EndRxTxTransaction>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e00e      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e000      	b.n	800888c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800888a:	2300      	movs	r3, #0
  }
}
 800888c:	4618      	mov	r0, r3
 800888e:	3728      	adds	r7, #40	@ 0x28
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d10e      	bne.n	80088d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d009      	beq.n	80088d4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
    return;
 80088d2:	e0ce      	b.n	8008a72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <HAL_SPI_IRQHandler+0x5e>
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
    return;
 80088f0:	e0bf      	b.n	8008a72 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <HAL_SPI_IRQHandler+0x7e>
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008902:	2b00      	cmp	r3, #0
 8008904:	d105      	bne.n	8008912 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 80b0 	beq.w	8008a72 <HAL_SPI_IRQHandler+0x1de>
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f003 0320 	and.w	r3, r3, #32
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 80aa 	beq.w	8008a72 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d023      	beq.n	8008970 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b03      	cmp	r3, #3
 8008932:	d011      	beq.n	8008958 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008938:	f043 0204 	orr.w	r2, r3, #4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	617b      	str	r3, [r7, #20]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	e00b      	b.n	8008970 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68db      	ldr	r3, [r3, #12]
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	693b      	ldr	r3, [r7, #16]
        return;
 800896e:	e080      	b.n	8008a72 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800897e:	f043 0201 	orr.w	r2, r3, #1
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00c      	beq.n	80089c8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089b2:	f043 0208 	orr.w	r2, r3, #8
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089ba:	2300      	movs	r3, #0
 80089bc:	60bb      	str	r3, [r7, #8]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	60bb      	str	r3, [r7, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d04f      	beq.n	8008a70 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089de:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d104      	bne.n	80089fc <HAL_SPI_IRQHandler+0x168>
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d034      	beq.n	8008a66 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f022 0203 	bic.w	r2, r2, #3
 8008a0a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d011      	beq.n	8008a38 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a18:	4a17      	ldr	r2, [pc, #92]	@ (8008a78 <HAL_SPI_IRQHandler+0x1e4>)
 8008a1a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fc fd7f 	bl	8005524 <HAL_DMA_Abort_IT>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d016      	beq.n	8008a6e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a44:	4a0c      	ldr	r2, [pc, #48]	@ (8008a78 <HAL_SPI_IRQHandler+0x1e4>)
 8008a46:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7fc fd69 	bl	8005524 <HAL_DMA_Abort_IT>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008a64:	e003      	b.n	8008a6e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f808 	bl	8008a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a6c:	e000      	b.n	8008a70 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008a6e:	bf00      	nop
    return;
 8008a70:	bf00      	nop
  }
}
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	08008a91 	.word	0x08008a91

08008a7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008a84:	bf00      	nop
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff ffe5 	bl	8008a7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ab2:	bf00      	nop
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b088      	sub	sp, #32
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	603b      	str	r3, [r7, #0]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008acc:	f7fb fb40 	bl	8004150 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	4413      	add	r3, r2
 8008ada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008adc:	f7fb fb38 	bl	8004150 <HAL_GetTick>
 8008ae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ae2:	4b39      	ldr	r3, [pc, #228]	@ (8008bc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	015b      	lsls	r3, r3, #5
 8008ae8:	0d1b      	lsrs	r3, r3, #20
 8008aea:	69fa      	ldr	r2, [r7, #28]
 8008aec:	fb02 f303 	mul.w	r3, r2, r3
 8008af0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008af2:	e054      	b.n	8008b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afa:	d050      	beq.n	8008b9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008afc:	f7fb fb28 	bl	8004150 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d902      	bls.n	8008b12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d13d      	bne.n	8008b8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b2a:	d111      	bne.n	8008b50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b34:	d004      	beq.n	8008b40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b3e:	d107      	bne.n	8008b50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b58:	d10f      	bne.n	8008b7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	e017      	b.n	8008bbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	bf0c      	ite	eq
 8008bae:	2301      	moveq	r3, #1
 8008bb0:	2300      	movne	r3, #0
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d19b      	bne.n	8008af4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000008 	.word	0x20000008

08008bcc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008bde:	f7fb fab7 	bl	8004150 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	4413      	add	r3, r2
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008bee:	f7fb faaf 	bl	8004150 <HAL_GetTick>
 8008bf2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008bfc:	4b3d      	ldr	r3, [pc, #244]	@ (8008cf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	00da      	lsls	r2, r3, #3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	0d1b      	lsrs	r3, r3, #20
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c0e:	fb02 f303 	mul.w	r3, r2, r3
 8008c12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c14:	e060      	b.n	8008cd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008c1c:	d107      	bne.n	8008c2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d050      	beq.n	8008cd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c36:	f7fb fa8b 	bl	8004150 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d902      	bls.n	8008c4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d13d      	bne.n	8008cc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008c5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c64:	d111      	bne.n	8008c8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c6e:	d004      	beq.n	8008c7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c78:	d107      	bne.n	8008c8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c92:	d10f      	bne.n	8008cb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008cb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e010      	b.n	8008cea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689a      	ldr	r2, [r3, #8]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d196      	bne.n	8008c16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3728      	adds	r7, #40	@ 0x28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000008 	.word	0x20000008

08008cf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d0c:	d111      	bne.n	8008d32 <SPI_EndRxTransaction+0x3a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d16:	d004      	beq.n	8008d22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d20:	d107      	bne.n	8008d32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	2180      	movs	r1, #128	@ 0x80
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff febd 	bl	8008abc <SPI_WaitFlagStateUntilTimeout>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d007      	beq.n	8008d58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d4c:	f043 0220 	orr.w	r2, r3, #32
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e023      	b.n	8008da0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d60:	d11d      	bne.n	8008d9e <SPI_EndRxTransaction+0xa6>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d6a:	d004      	beq.n	8008d76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d74:	d113      	bne.n	8008d9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f7ff ff22 	bl	8008bcc <SPI_WaitFifoStateUntilTimeout>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d92:	f043 0220 	orr.w	r2, r3, #32
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e000      	b.n	8008da0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff ff03 	bl	8008bcc <SPI_WaitFifoStateUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d007      	beq.n	8008ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dd0:	f043 0220 	orr.w	r2, r3, #32
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e027      	b.n	8008e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2200      	movs	r2, #0
 8008de4:	2180      	movs	r1, #128	@ 0x80
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fe68 	bl	8008abc <SPI_WaitFlagStateUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008df6:	f043 0220 	orr.w	r2, r3, #32
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e014      	b.n	8008e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff fedc 	bl	8008bcc <SPI_WaitFifoStateUntilTimeout>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1e:	f043 0220 	orr.w	r2, r3, #32
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e000      	b.n	8008e2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <LL_RCC_GetUSARTClockSource>:
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008e3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4013      	ands	r3, r2
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <LL_RCC_GetLPUARTClockSource>:
{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e60:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4013      	ands	r3, r2
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e042      	b.n	8008f0c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d106      	bne.n	8008e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7fa ffd3 	bl	8003e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2224      	movs	r2, #36	@ 0x24
 8008ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 0201 	bic.w	r2, r2, #1
 8008eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fec0 	bl	8009c44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fc95 	bl	80097f4 <UART_SetConfig>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e01b      	b.n	8008f0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0201 	orr.w	r2, r2, #1
 8008f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 ff3f 	bl	8009d88 <UART_CheckIdleState>
 8008f0a:	4603      	mov	r3, r0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	@ 0x28
 8008f18:	af02      	add	r7, sp, #8
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	603b      	str	r3, [r7, #0]
 8008f20:	4613      	mov	r3, r2
 8008f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f2a:	2b20      	cmp	r3, #32
 8008f2c:	d17b      	bne.n	8009026 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <HAL_UART_Transmit+0x26>
 8008f34:	88fb      	ldrh	r3, [r7, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e074      	b.n	8009028 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2221      	movs	r2, #33	@ 0x21
 8008f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f4e:	f7fb f8ff 	bl	8004150 <HAL_GetTick>
 8008f52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f6c:	d108      	bne.n	8008f80 <HAL_UART_Transmit+0x6c>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d104      	bne.n	8008f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	e003      	b.n	8008f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f88:	e030      	b.n	8008fec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2200      	movs	r2, #0
 8008f92:	2180      	movs	r1, #128	@ 0x80
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 ffa1 	bl	8009edc <UART_WaitOnFlagUntilTimeout>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e03d      	b.n	8009028 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	3302      	adds	r3, #2
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	e007      	b.n	8008fda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	781a      	ldrb	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1c8      	bne.n	8008f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2140      	movs	r1, #64	@ 0x40
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f000 ff6a 	bl	8009edc <UART_WaitOnFlagUntilTimeout>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d005      	beq.n	800901a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2220      	movs	r2, #32
 8009012:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e006      	b.n	8009028 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	e000      	b.n	8009028 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009026:	2302      	movs	r3, #2
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b08a      	sub	sp, #40	@ 0x28
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009044:	2b20      	cmp	r3, #32
 8009046:	d167      	bne.n	8009118 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <HAL_UART_Transmit_DMA+0x24>
 800904e:	88fb      	ldrh	r3, [r7, #6]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e060      	b.n	800911a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	88fa      	ldrh	r2, [r7, #6]
 8009062:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	88fa      	ldrh	r2, [r7, #6]
 800906a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2221      	movs	r2, #33	@ 0x21
 800907a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009082:	2b00      	cmp	r3, #0
 8009084:	d028      	beq.n	80090d8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800908a:	4a26      	ldr	r2, [pc, #152]	@ (8009124 <HAL_UART_Transmit_DMA+0xf4>)
 800908c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009092:	4a25      	ldr	r2, [pc, #148]	@ (8009128 <HAL_UART_Transmit_DMA+0xf8>)
 8009094:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800909a:	4a24      	ldr	r2, [pc, #144]	@ (800912c <HAL_UART_Transmit_DMA+0xfc>)
 800909c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a2:	2200      	movs	r2, #0
 80090a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ae:	4619      	mov	r1, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3328      	adds	r3, #40	@ 0x28
 80090b6:	461a      	mov	r2, r3
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	f7fc f959 	bl	8005370 <HAL_DMA_Start_IT>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d009      	beq.n	80090d8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2210      	movs	r2, #16
 80090c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e020      	b.n	800911a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2240      	movs	r2, #64	@ 0x40
 80090de:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	613b      	str	r3, [r7, #16]
   return(result);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3308      	adds	r3, #8
 80090fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009100:	623a      	str	r2, [r7, #32]
 8009102:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	69f9      	ldr	r1, [r7, #28]
 8009106:	6a3a      	ldr	r2, [r7, #32]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	61bb      	str	r3, [r7, #24]
   return(result);
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	e000      	b.n	800911a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009118:	2302      	movs	r3, #2
  }
}
 800911a:	4618      	mov	r0, r3
 800911c:	3728      	adds	r7, #40	@ 0x28
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	0800a105 	.word	0x0800a105
 8009128:	0800a19f 	.word	0x0800a19f
 800912c:	0800a1bb 	.word	0x0800a1bb

08009130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b0ba      	sub	sp, #232	@ 0xe8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800915a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800915e:	4013      	ands	r3, r2
 8009160:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d11b      	bne.n	80091a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800916c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b00      	cmp	r3, #0
 8009176:	d015      	beq.n	80091a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b00      	cmp	r3, #0
 8009182:	d105      	bne.n	8009190 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009194:	2b00      	cmp	r3, #0
 8009196:	f000 8300 	beq.w	800979a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	4798      	blx	r3
      }
      return;
 80091a2:	e2fa      	b.n	800979a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 8123 	beq.w	80093f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80091b2:	4b8d      	ldr	r3, [pc, #564]	@ (80093e8 <HAL_UART_IRQHandler+0x2b8>)
 80091b4:	4013      	ands	r3, r2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80091be:	4b8b      	ldr	r3, [pc, #556]	@ (80093ec <HAL_UART_IRQHandler+0x2bc>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8116 	beq.w	80093f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d011      	beq.n	80091f8 <HAL_UART_IRQHandler+0xc8>
 80091d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2201      	movs	r2, #1
 80091e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ee:	f043 0201 	orr.w	r2, r3, #1
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d011      	beq.n	8009228 <HAL_UART_IRQHandler+0xf8>
 8009204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2202      	movs	r2, #2
 8009216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921e:	f043 0204 	orr.w	r2, r3, #4
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d011      	beq.n	8009258 <HAL_UART_IRQHandler+0x128>
 8009234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009238:	f003 0301 	and.w	r3, r3, #1
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2204      	movs	r2, #4
 8009246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924e:	f043 0202 	orr.w	r2, r3, #2
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925c:	f003 0308 	and.w	r3, r3, #8
 8009260:	2b00      	cmp	r3, #0
 8009262:	d017      	beq.n	8009294 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009270:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009274:	4b5c      	ldr	r3, [pc, #368]	@ (80093e8 <HAL_UART_IRQHandler+0x2b8>)
 8009276:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2208      	movs	r2, #8
 8009282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800928a:	f043 0208 	orr.w	r2, r3, #8
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800929c:	2b00      	cmp	r3, #0
 800929e:	d012      	beq.n	80092c6 <HAL_UART_IRQHandler+0x196>
 80092a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00c      	beq.n	80092c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092bc:	f043 0220 	orr.w	r2, r3, #32
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 8266 	beq.w	800979e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d6:	f003 0320 	and.w	r3, r3, #32
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d013      	beq.n	8009306 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d105      	bne.n	80092f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931a:	2b40      	cmp	r3, #64	@ 0x40
 800931c:	d005      	beq.n	800932a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800931e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009322:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009326:	2b00      	cmp	r3, #0
 8009328:	d054      	beq.n	80093d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fe84 	bl	800a038 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800933a:	2b40      	cmp	r3, #64	@ 0x40
 800933c:	d146      	bne.n	80093cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009348:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800935c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3308      	adds	r3, #8
 8009366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800936a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800936e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1d9      	bne.n	800933e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009390:	2b00      	cmp	r3, #0
 8009392:	d017      	beq.n	80093c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800939a:	4a15      	ldr	r2, [pc, #84]	@ (80093f0 <HAL_UART_IRQHandler+0x2c0>)
 800939c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7fc f8bd 	bl	8005524 <HAL_DMA_Abort_IT>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d019      	beq.n	80093e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80093be:	4610      	mov	r0, r2
 80093c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c2:	e00f      	b.n	80093e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f9ff 	bl	80097c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ca:	e00b      	b.n	80093e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f9fb 	bl	80097c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d2:	e007      	b.n	80093e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f9f7 	bl	80097c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80093e2:	e1dc      	b.n	800979e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e4:	bf00      	nop
    return;
 80093e6:	e1da      	b.n	800979e <HAL_UART_IRQHandler+0x66e>
 80093e8:	10000001 	.word	0x10000001
 80093ec:	04000120 	.word	0x04000120
 80093f0:	0800a23b 	.word	0x0800a23b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	f040 8170 	bne.w	80096de <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009402:	f003 0310 	and.w	r3, r3, #16
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 8169 	beq.w	80096de <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800940c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 8162 	beq.w	80096de <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2210      	movs	r2, #16
 8009420:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800942c:	2b40      	cmp	r3, #64	@ 0x40
 800942e:	f040 80d8 	bne.w	80095e2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 80af 	beq.w	80095a8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009454:	429a      	cmp	r2, r3
 8009456:	f080 80a7 	bcs.w	80095a8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0320 	and.w	r3, r3, #32
 8009472:	2b00      	cmp	r3, #0
 8009474:	f040 8087 	bne.w	8009586 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800948c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80094ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80094ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1da      	bne.n	8009478 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3308      	adds	r3, #8
 80094c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80094e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80094ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e1      	bne.n	80094c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3308      	adds	r3, #8
 8009504:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800950e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009514:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3308      	adds	r3, #8
 800951e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009522:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009524:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009528:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009530:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e3      	bne.n	80094fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009554:	f023 0310 	bic.w	r3, r3, #16
 8009558:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009566:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009568:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800956c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e4      	bne.n	8009544 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009580:	4618      	mov	r0, r3
 8009582:	f7fb ff70 	bl	8005466 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009598:	b29b      	uxth	r3, r3
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	b29b      	uxth	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f91b 	bl	80097dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80095a6:	e0fc      	b.n	80097a2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095b2:	429a      	cmp	r2, r3
 80095b4:	f040 80f5 	bne.w	80097a2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0320 	and.w	r3, r3, #32
 80095c6:	2b20      	cmp	r3, #32
 80095c8:	f040 80eb 	bne.w	80097a2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f8fe 	bl	80097dc <HAL_UARTEx_RxEventCallback>
      return;
 80095e0:	e0df      	b.n	80097a2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80d1 	beq.w	80097a6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 80cc 	beq.w	80097a6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800961c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800961e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009630:	647b      	str	r3, [r7, #68]	@ 0x44
 8009632:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800963e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e4      	bne.n	800960e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	3308      	adds	r3, #8
 800964a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	e853 3f00 	ldrex	r3, [r3]
 8009652:	623b      	str	r3, [r7, #32]
   return(result);
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800965a:	f023 0301 	bic.w	r3, r3, #1
 800965e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800966c:	633a      	str	r2, [r7, #48]	@ 0x30
 800966e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009674:	e841 2300 	strex	r3, r2, [r1]
 8009678:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800967a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e1      	bne.n	8009644 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2220      	movs	r2, #32
 8009684:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	461a      	mov	r2, r3
 80096b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80096b6:	61fb      	str	r3, [r7, #28]
 80096b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ba:	69b9      	ldr	r1, [r7, #24]
 80096bc:	69fa      	ldr	r2, [r7, #28]
 80096be:	e841 2300 	strex	r3, r2, [r1]
 80096c2:	617b      	str	r3, [r7, #20]
   return(result);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1e4      	bne.n	8009694 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f880 	bl	80097dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096dc:	e063      	b.n	80097a6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00e      	beq.n	8009708 <HAL_UART_IRQHandler+0x5d8>
 80096ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d008      	beq.n	8009708 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80096fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fdd7 	bl	800a2b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009706:	e051      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009710:	2b00      	cmp	r3, #0
 8009712:	d014      	beq.n	800973e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800971c:	2b00      	cmp	r3, #0
 800971e:	d105      	bne.n	800972c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d008      	beq.n	800973e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009730:	2b00      	cmp	r3, #0
 8009732:	d03a      	beq.n	80097aa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
    }
    return;
 800973c:	e035      	b.n	80097aa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800973e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <HAL_UART_IRQHandler+0x62e>
 800974a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800974e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009752:	2b00      	cmp	r3, #0
 8009754:	d003      	beq.n	800975e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 fd81 	bl	800a25e <UART_EndTransmit_IT>
    return;
 800975c:	e026      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800975e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d009      	beq.n	800977e <HAL_UART_IRQHandler+0x64e>
 800976a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800976e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fdb0 	bl	800a2dc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800977c:	e016      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009782:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009786:	2b00      	cmp	r3, #0
 8009788:	d010      	beq.n	80097ac <HAL_UART_IRQHandler+0x67c>
 800978a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800978e:	2b00      	cmp	r3, #0
 8009790:	da0c      	bge.n	80097ac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 fd98 	bl	800a2c8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009798:	e008      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
      return;
 800979a:	bf00      	nop
 800979c:	e006      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
    return;
 800979e:	bf00      	nop
 80097a0:	e004      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
      return;
 80097a2:	bf00      	nop
 80097a4:	e002      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
      return;
 80097a6:	bf00      	nop
 80097a8:	e000      	b.n	80097ac <HAL_UART_IRQHandler+0x67c>
    return;
 80097aa:	bf00      	nop
  }
}
 80097ac:	37e8      	adds	r7, #232	@ 0xe8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097f8:	b08c      	sub	sp, #48	@ 0x30
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	431a      	orrs	r2, r3
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	431a      	orrs	r2, r3
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	4313      	orrs	r3, r2
 800981a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	4baf      	ldr	r3, [pc, #700]	@ (8009ae0 <UART_SetConfig+0x2ec>)
 8009824:	4013      	ands	r3, r2
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	6812      	ldr	r2, [r2, #0]
 800982a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800982c:	430b      	orrs	r3, r1
 800982e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4aa4      	ldr	r2, [pc, #656]	@ (8009ae4 <UART_SetConfig+0x2f0>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800985c:	4313      	orrs	r3, r2
 800985e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800986a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	6812      	ldr	r2, [r2, #0]
 8009872:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009874:	430b      	orrs	r3, r1
 8009876:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987e:	f023 010f 	bic.w	r1, r3, #15
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a95      	ldr	r2, [pc, #596]	@ (8009ae8 <UART_SetConfig+0x2f4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d125      	bne.n	80098e4 <UART_SetConfig+0xf0>
 8009898:	2003      	movs	r0, #3
 800989a:	f7ff facb 	bl	8008e34 <LL_RCC_GetUSARTClockSource>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d81b      	bhi.n	80098dc <UART_SetConfig+0xe8>
 80098a4:	a201      	add	r2, pc, #4	@ (adr r2, 80098ac <UART_SetConfig+0xb8>)
 80098a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098aa:	bf00      	nop
 80098ac:	080098bd 	.word	0x080098bd
 80098b0:	080098cd 	.word	0x080098cd
 80098b4:	080098c5 	.word	0x080098c5
 80098b8:	080098d5 	.word	0x080098d5
 80098bc:	2301      	movs	r3, #1
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	e042      	b.n	800994a <UART_SetConfig+0x156>
 80098c4:	2302      	movs	r3, #2
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ca:	e03e      	b.n	800994a <UART_SetConfig+0x156>
 80098cc:	2304      	movs	r3, #4
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d2:	e03a      	b.n	800994a <UART_SetConfig+0x156>
 80098d4:	2308      	movs	r3, #8
 80098d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098da:	e036      	b.n	800994a <UART_SetConfig+0x156>
 80098dc:	2310      	movs	r3, #16
 80098de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e2:	e032      	b.n	800994a <UART_SetConfig+0x156>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a7e      	ldr	r2, [pc, #504]	@ (8009ae4 <UART_SetConfig+0x2f0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d12a      	bne.n	8009944 <UART_SetConfig+0x150>
 80098ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80098f2:	f7ff faaf 	bl	8008e54 <LL_RCC_GetLPUARTClockSource>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098fc:	d01a      	beq.n	8009934 <UART_SetConfig+0x140>
 80098fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009902:	d81b      	bhi.n	800993c <UART_SetConfig+0x148>
 8009904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009908:	d00c      	beq.n	8009924 <UART_SetConfig+0x130>
 800990a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800990e:	d815      	bhi.n	800993c <UART_SetConfig+0x148>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <UART_SetConfig+0x128>
 8009914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009918:	d008      	beq.n	800992c <UART_SetConfig+0x138>
 800991a:	e00f      	b.n	800993c <UART_SetConfig+0x148>
 800991c:	2300      	movs	r3, #0
 800991e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009922:	e012      	b.n	800994a <UART_SetConfig+0x156>
 8009924:	2302      	movs	r3, #2
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992a:	e00e      	b.n	800994a <UART_SetConfig+0x156>
 800992c:	2304      	movs	r3, #4
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009932:	e00a      	b.n	800994a <UART_SetConfig+0x156>
 8009934:	2308      	movs	r3, #8
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993a:	e006      	b.n	800994a <UART_SetConfig+0x156>
 800993c:	2310      	movs	r3, #16
 800993e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009942:	e002      	b.n	800994a <UART_SetConfig+0x156>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a65      	ldr	r2, [pc, #404]	@ (8009ae4 <UART_SetConfig+0x2f0>)
 8009950:	4293      	cmp	r3, r2
 8009952:	f040 8097 	bne.w	8009a84 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009956:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800995a:	2b08      	cmp	r3, #8
 800995c:	d823      	bhi.n	80099a6 <UART_SetConfig+0x1b2>
 800995e:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <UART_SetConfig+0x170>)
 8009960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009964:	08009989 	.word	0x08009989
 8009968:	080099a7 	.word	0x080099a7
 800996c:	08009991 	.word	0x08009991
 8009970:	080099a7 	.word	0x080099a7
 8009974:	08009997 	.word	0x08009997
 8009978:	080099a7 	.word	0x080099a7
 800997c:	080099a7 	.word	0x080099a7
 8009980:	080099a7 	.word	0x080099a7
 8009984:	0800999f 	.word	0x0800999f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009988:	f7fd fb54 	bl	8007034 <HAL_RCC_GetPCLK1Freq>
 800998c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800998e:	e010      	b.n	80099b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009990:	4b56      	ldr	r3, [pc, #344]	@ (8009aec <UART_SetConfig+0x2f8>)
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009994:	e00d      	b.n	80099b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009996:	f7fd facd 	bl	8006f34 <HAL_RCC_GetSysClockFreq>
 800999a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800999c:	e009      	b.n	80099b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800999e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099a4:	e005      	b.n	80099b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 812b 	beq.w	8009c10 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099be:	4a4c      	ldr	r2, [pc, #304]	@ (8009af0 <UART_SetConfig+0x2fc>)
 80099c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099c4:	461a      	mov	r2, r3
 80099c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	685a      	ldr	r2, [r3, #4]
 80099d2:	4613      	mov	r3, r2
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d305      	bcc.n	80099ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d903      	bls.n	80099f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099f0:	e10e      	b.n	8009c10 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	2200      	movs	r2, #0
 80099f6:	60bb      	str	r3, [r7, #8]
 80099f8:	60fa      	str	r2, [r7, #12]
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fe:	4a3c      	ldr	r2, [pc, #240]	@ (8009af0 <UART_SetConfig+0x2fc>)
 8009a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2200      	movs	r2, #0
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a14:	f7f7 f8a0 	bl	8000b58 <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	4619      	mov	r1, r3
 8009a20:	f04f 0200 	mov.w	r2, #0
 8009a24:	f04f 0300 	mov.w	r3, #0
 8009a28:	020b      	lsls	r3, r1, #8
 8009a2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a2e:	0202      	lsls	r2, r0, #8
 8009a30:	6979      	ldr	r1, [r7, #20]
 8009a32:	6849      	ldr	r1, [r1, #4]
 8009a34:	0849      	lsrs	r1, r1, #1
 8009a36:	2000      	movs	r0, #0
 8009a38:	460c      	mov	r4, r1
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	eb12 0804 	adds.w	r8, r2, r4
 8009a40:	eb43 0905 	adc.w	r9, r3, r5
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	469a      	mov	sl, r3
 8009a4c:	4693      	mov	fp, r2
 8009a4e:	4652      	mov	r2, sl
 8009a50:	465b      	mov	r3, fp
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	f7f7 f87f 	bl	8000b58 <__aeabi_uldivmod>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4613      	mov	r3, r2
 8009a60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a68:	d308      	bcc.n	8009a7c <UART_SetConfig+0x288>
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a70:	d204      	bcs.n	8009a7c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6a3a      	ldr	r2, [r7, #32]
 8009a78:	60da      	str	r2, [r3, #12]
 8009a7a:	e0c9      	b.n	8009c10 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a82:	e0c5      	b.n	8009c10 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a8c:	d16d      	bne.n	8009b6a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a92:	3b01      	subs	r3, #1
 8009a94:	2b07      	cmp	r3, #7
 8009a96:	d82d      	bhi.n	8009af4 <UART_SetConfig+0x300>
 8009a98:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <UART_SetConfig+0x2ac>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009ac9 	.word	0x08009ac9
 8009aa8:	08009af5 	.word	0x08009af5
 8009aac:	08009acf 	.word	0x08009acf
 8009ab0:	08009af5 	.word	0x08009af5
 8009ab4:	08009af5 	.word	0x08009af5
 8009ab8:	08009af5 	.word	0x08009af5
 8009abc:	08009ad7 	.word	0x08009ad7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ac0:	f7fd face 	bl	8007060 <HAL_RCC_GetPCLK2Freq>
 8009ac4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ac6:	e01b      	b.n	8009b00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ac8:	4b08      	ldr	r3, [pc, #32]	@ (8009aec <UART_SetConfig+0x2f8>)
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009acc:	e018      	b.n	8009b00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ace:	f7fd fa31 	bl	8006f34 <HAL_RCC_GetSysClockFreq>
 8009ad2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ad4:	e014      	b.n	8009b00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009adc:	e010      	b.n	8009b00 <UART_SetConfig+0x30c>
 8009ade:	bf00      	nop
 8009ae0:	cfff69f3 	.word	0xcfff69f3
 8009ae4:	40008000 	.word	0x40008000
 8009ae8:	40013800 	.word	0x40013800
 8009aec:	00f42400 	.word	0x00f42400
 8009af0:	08012ffc 	.word	0x08012ffc
      default:
        pclk = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009afe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 8084 	beq.w	8009c10 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b0c:	4a4b      	ldr	r2, [pc, #300]	@ (8009c3c <UART_SetConfig+0x448>)
 8009b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b1a:	005a      	lsls	r2, r3, #1
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	085b      	lsrs	r3, r3, #1
 8009b22:	441a      	add	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	2b0f      	cmp	r3, #15
 8009b32:	d916      	bls.n	8009b62 <UART_SetConfig+0x36e>
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b3a:	d212      	bcs.n	8009b62 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f023 030f 	bic.w	r3, r3, #15
 8009b44:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f003 0307 	and.w	r3, r3, #7
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	8bfb      	ldrh	r3, [r7, #30]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	8bfa      	ldrh	r2, [r7, #30]
 8009b5e:	60da      	str	r2, [r3, #12]
 8009b60:	e056      	b.n	8009c10 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b68:	e052      	b.n	8009c10 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	2b07      	cmp	r3, #7
 8009b72:	d822      	bhi.n	8009bba <UART_SetConfig+0x3c6>
 8009b74:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <UART_SetConfig+0x388>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009b9d 	.word	0x08009b9d
 8009b80:	08009ba5 	.word	0x08009ba5
 8009b84:	08009bbb 	.word	0x08009bbb
 8009b88:	08009bab 	.word	0x08009bab
 8009b8c:	08009bbb 	.word	0x08009bbb
 8009b90:	08009bbb 	.word	0x08009bbb
 8009b94:	08009bbb 	.word	0x08009bbb
 8009b98:	08009bb3 	.word	0x08009bb3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b9c:	f7fd fa60 	bl	8007060 <HAL_RCC_GetPCLK2Freq>
 8009ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ba2:	e010      	b.n	8009bc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ba4:	4b26      	ldr	r3, [pc, #152]	@ (8009c40 <UART_SetConfig+0x44c>)
 8009ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ba8:	e00d      	b.n	8009bc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009baa:	f7fd f9c3 	bl	8006f34 <HAL_RCC_GetSysClockFreq>
 8009bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bb0:	e009      	b.n	8009bc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bb8:	e005      	b.n	8009bc6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009bc4:	bf00      	nop
    }

    if (pclk != 0U)
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d021      	beq.n	8009c10 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8009c3c <UART_SetConfig+0x448>)
 8009bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bda:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	085b      	lsrs	r3, r3, #1
 8009be4:	441a      	add	r2, r3
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bf0:	6a3b      	ldr	r3, [r7, #32]
 8009bf2:	2b0f      	cmp	r3, #15
 8009bf4:	d909      	bls.n	8009c0a <UART_SetConfig+0x416>
 8009bf6:	6a3b      	ldr	r3, [r7, #32]
 8009bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bfc:	d205      	bcs.n	8009c0a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60da      	str	r2, [r3, #12]
 8009c08:	e002      	b.n	8009c10 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2200      	movs	r2, #0
 8009c24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3730      	adds	r7, #48	@ 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08012ffc 	.word	0x08012ffc
 8009c40:	00f42400 	.word	0x00f42400

08009c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d00a      	beq.n	8009c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00a      	beq.n	8009c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	430a      	orrs	r2, r1
 8009c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	430a      	orrs	r2, r1
 8009cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd8:	f003 0310 	and.w	r3, r3, #16
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfa:	f003 0320 	and.w	r3, r3, #32
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	430a      	orrs	r2, r1
 8009d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01a      	beq.n	8009d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d42:	d10a      	bne.n	8009d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	605a      	str	r2, [r3, #4]
  }
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b098      	sub	sp, #96	@ 0x60
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d98:	f7fa f9da 	bl	8004150 <HAL_GetTick>
 8009d9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0308 	and.w	r3, r3, #8
 8009da8:	2b08      	cmp	r3, #8
 8009daa:	d12f      	bne.n	8009e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009db4:	2200      	movs	r2, #0
 8009db6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f88e 	bl	8009edc <UART_WaitOnFlagUntilTimeout>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d022      	beq.n	8009e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dce:	e853 3f00 	ldrex	r3, [r3]
 8009dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dda:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	461a      	mov	r2, r3
 8009de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009de6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dec:	e841 2300 	strex	r3, r2, [r1]
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1e6      	bne.n	8009dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e063      	b.n	8009ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 0304 	and.w	r3, r3, #4
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d149      	bne.n	8009eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e22:	2200      	movs	r2, #0
 8009e24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f857 	bl	8009edc <UART_WaitOnFlagUntilTimeout>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d03c      	beq.n	8009eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	623b      	str	r3, [r7, #32]
   return(result);
 8009e42:	6a3b      	ldr	r3, [r7, #32]
 8009e44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e52:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e5a:	e841 2300 	strex	r3, r2, [r1]
 8009e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1e6      	bne.n	8009e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f023 0301 	bic.w	r3, r3, #1
 8009e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3308      	adds	r3, #8
 8009e84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e86:	61fa      	str	r2, [r7, #28]
 8009e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	69b9      	ldr	r1, [r7, #24]
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	617b      	str	r3, [r7, #20]
   return(result);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e5      	bne.n	8009e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e012      	b.n	8009ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2220      	movs	r2, #32
 8009eba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3758      	adds	r7, #88	@ 0x58
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eec:	e04f      	b.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef4:	d04b      	beq.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ef6:	f7fa f92b 	bl	8004150 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	69ba      	ldr	r2, [r7, #24]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d302      	bcc.n	8009f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d101      	bne.n	8009f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e04e      	b.n	8009fae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0304 	and.w	r3, r3, #4
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d037      	beq.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	2b80      	cmp	r3, #128	@ 0x80
 8009f22:	d034      	beq.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2b40      	cmp	r3, #64	@ 0x40
 8009f28:	d031      	beq.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69db      	ldr	r3, [r3, #28]
 8009f30:	f003 0308 	and.w	r3, r3, #8
 8009f34:	2b08      	cmp	r3, #8
 8009f36:	d110      	bne.n	8009f5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2208      	movs	r2, #8
 8009f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 f879 	bl	800a038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2208      	movs	r2, #8
 8009f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e029      	b.n	8009fae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f68:	d111      	bne.n	8009f8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f85f 	bl	800a038 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e00f      	b.n	8009fae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69da      	ldr	r2, [r3, #28]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	4013      	ands	r3, r2
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	bf0c      	ite	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	2300      	movne	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d0a0      	beq.n	8009eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3710      	adds	r7, #16
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b08f      	sub	sp, #60	@ 0x3c
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fde:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e6      	bne.n	8009fbe <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3308      	adds	r3, #8
 8009ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a006:	633b      	str	r3, [r7, #48]	@ 0x30
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3308      	adds	r3, #8
 800a00e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a010:	61ba      	str	r2, [r7, #24]
 800a012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a014:	6979      	ldr	r1, [r7, #20]
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	e841 2300 	strex	r3, r2, [r1]
 800a01c:	613b      	str	r3, [r7, #16]
   return(result);
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e5      	bne.n	8009ff0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2220      	movs	r2, #32
 800a028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a02c:	bf00      	nop
 800a02e:	373c      	adds	r7, #60	@ 0x3c
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a038:	b480      	push	{r7}
 800a03a:	b095      	sub	sp, #84	@ 0x54
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a050:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	461a      	mov	r2, r3
 800a05c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a05e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a060:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a064:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a066:	e841 2300 	strex	r3, r2, [r1]
 800a06a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1e6      	bne.n	800a040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3308      	adds	r3, #8
 800a078:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	61fb      	str	r3, [r7, #28]
   return(result);
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a088:	f023 0301 	bic.w	r3, r3, #1
 800a08c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3308      	adds	r3, #8
 800a094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a09a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a09c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1e3      	bne.n	800a072 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d118      	bne.n	800a0e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	e853 3f00 	ldrex	r3, [r3]
 800a0be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	f023 0310 	bic.w	r3, r3, #16
 800a0c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0d0:	61bb      	str	r3, [r7, #24]
 800a0d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6979      	ldr	r1, [r7, #20]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	e841 2300 	strex	r3, r2, [r1]
 800a0dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1e6      	bne.n	800a0b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2220      	movs	r2, #32
 800a0e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a0f8:	bf00      	nop
 800a0fa:	3754      	adds	r7, #84	@ 0x54
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b090      	sub	sp, #64	@ 0x40
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a110:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d137      	bne.n	800a190 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a122:	2200      	movs	r2, #0
 800a124:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3308      	adds	r3, #8
 800a12e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	623b      	str	r3, [r7, #32]
   return(result);
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a13e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3308      	adds	r3, #8
 800a146:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a148:	633a      	str	r2, [r7, #48]	@ 0x30
 800a14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a150:	e841 2300 	strex	r3, r2, [r1]
 800a154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1e5      	bne.n	800a128 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	60fb      	str	r3, [r7, #12]
   return(result);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
 800a172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17a:	61fb      	str	r3, [r7, #28]
 800a17c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	69b9      	ldr	r1, [r7, #24]
 800a180:	69fa      	ldr	r2, [r7, #28]
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	617b      	str	r3, [r7, #20]
   return(result);
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e6      	bne.n	800a15c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a18e:	e002      	b.n	800a196 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a190:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a192:	f7f9 f93b 	bl	800340c <HAL_UART_TxCpltCallback>
}
 800a196:	bf00      	nop
 800a198:	3740      	adds	r7, #64	@ 0x40
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fb01 	bl	80097b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1b2:	bf00      	nop
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1e2:	2b80      	cmp	r3, #128	@ 0x80
 800a1e4:	d109      	bne.n	800a1fa <UART_DMAError+0x40>
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b21      	cmp	r3, #33	@ 0x21
 800a1ea:	d106      	bne.n	800a1fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a1f4:	6978      	ldr	r0, [r7, #20]
 800a1f6:	f7ff fede 	bl	8009fb6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a204:	2b40      	cmp	r3, #64	@ 0x40
 800a206:	d109      	bne.n	800a21c <UART_DMAError+0x62>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2b22      	cmp	r3, #34	@ 0x22
 800a20c:	d106      	bne.n	800a21c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2200      	movs	r2, #0
 800a212:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f7ff ff0e 	bl	800a038 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a222:	f043 0210 	orr.w	r2, r3, #16
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a22c:	6978      	ldr	r0, [r7, #20]
 800a22e:	f7ff facb 	bl	80097c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a232:	bf00      	nop
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b084      	sub	sp, #16
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f7ff fab9 	bl	80097c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a256:	bf00      	nop
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b088      	sub	sp, #32
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	60bb      	str	r3, [r7, #8]
   return(result);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a27a:	61fb      	str	r3, [r7, #28]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	69fb      	ldr	r3, [r7, #28]
 800a284:	61bb      	str	r3, [r7, #24]
 800a286:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6979      	ldr	r1, [r7, #20]
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	613b      	str	r3, [r7, #16]
   return(result);
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e6      	bne.n	800a266 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2220      	movs	r2, #32
 800a29c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7f9 f8b0 	bl	800340c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ac:	bf00      	nop
 800a2ae:	3720      	adds	r7, #32
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d101      	bne.n	800a306 <HAL_UARTEx_DisableFifoMode+0x16>
 800a302:	2302      	movs	r3, #2
 800a304:	e027      	b.n	800a356 <HAL_UARTEx_DisableFifoMode+0x66>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2224      	movs	r2, #36	@ 0x24
 800a312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f022 0201 	bic.w	r2, r2, #1
 800a32c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2220      	movs	r2, #32
 800a348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b084      	sub	sp, #16
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a376:	2302      	movs	r3, #2
 800a378:	e02d      	b.n	800a3d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2224      	movs	r2, #36	@ 0x24
 800a386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f022 0201 	bic.w	r2, r2, #1
 800a3a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f850 	bl	800a45c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e02d      	b.n	800a452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2224      	movs	r2, #36	@ 0x24
 800a402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0201 	bic.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	430a      	orrs	r2, r1
 800a430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f812 	bl	800a45c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2220      	movs	r2, #32
 800a444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d108      	bne.n	800a47e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a47c:	e031      	b.n	800a4e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a47e:	2308      	movs	r3, #8
 800a480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a482:	2308      	movs	r3, #8
 800a484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	0e5b      	lsrs	r3, r3, #25
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 0307 	and.w	r3, r3, #7
 800a494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	0f5b      	lsrs	r3, r3, #29
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	f003 0307 	and.w	r3, r3, #7
 800a4a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	7b3a      	ldrb	r2, [r7, #12]
 800a4aa:	4911      	ldr	r1, [pc, #68]	@ (800a4f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a4ac:	5c8a      	ldrb	r2, [r1, r2]
 800a4ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4b2:	7b3a      	ldrb	r2, [r7, #12]
 800a4b4:	490f      	ldr	r1, [pc, #60]	@ (800a4f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	7b7a      	ldrb	r2, [r7, #13]
 800a4c8:	4909      	ldr	r1, [pc, #36]	@ (800a4f0 <UARTEx_SetNbDataToProcess+0x94>)
 800a4ca:	5c8a      	ldrb	r2, [r1, r2]
 800a4cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4d0:	7b7a      	ldrb	r2, [r7, #13]
 800a4d2:	4908      	ldr	r1, [pc, #32]	@ (800a4f4 <UARTEx_SetNbDataToProcess+0x98>)
 800a4d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4e2:	bf00      	nop
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	08013014 	.word	0x08013014
 800a4f4:	0801301c 	.word	0x0801301c

0800a4f8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b088      	sub	sp, #32
 800a4fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a502:	f107 0308 	add.w	r3, r7, #8
 800a506:	2218      	movs	r2, #24
 800a508:	2100      	movs	r1, #0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f001 f92d 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a510:	233f      	movs	r3, #63	@ 0x3f
 800a512:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a514:	2381      	movs	r3, #129	@ 0x81
 800a516:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a518:	1dfb      	adds	r3, r7, #7
 800a51a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a51c:	2301      	movs	r3, #1
 800a51e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a520:	f107 0308 	add.w	r3, r7, #8
 800a524:	2100      	movs	r1, #0
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fba8 	bl	800bc7c <hci_send_req>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	da01      	bge.n	800a536 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a532:	23ff      	movs	r3, #255	@ 0xff
 800a534:	e000      	b.n	800a538 <aci_gap_set_non_discoverable+0x40>
  return status;
 800a536:	79fb      	ldrb	r3, [r7, #7]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800a540:	b5b0      	push	{r4, r5, r7, lr}
 800a542:	b0ce      	sub	sp, #312	@ 0x138
 800a544:	af00      	add	r7, sp, #0
 800a546:	4605      	mov	r5, r0
 800a548:	460c      	mov	r4, r1
 800a54a:	4610      	mov	r0, r2
 800a54c:	4619      	mov	r1, r3
 800a54e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a552:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a556:	462a      	mov	r2, r5
 800a558:	701a      	strb	r2, [r3, #0]
 800a55a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a55e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a562:	4622      	mov	r2, r4
 800a564:	801a      	strh	r2, [r3, #0]
 800a566:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a56a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800a56e:	4602      	mov	r2, r0
 800a570:	801a      	strh	r2, [r3, #0]
 800a572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a576:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a57a:	460a      	mov	r2, r1
 800a57c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a57e:	f107 0310 	add.w	r3, r7, #16
 800a582:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a586:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a58a:	3308      	adds	r3, #8
 800a58c:	f107 0210 	add.w	r2, r7, #16
 800a590:	4413      	add	r3, r2
 800a592:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a596:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a59a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a59e:	4413      	add	r3, r2
 800a5a0:	3309      	adds	r3, #9
 800a5a2:	f107 0210 	add.w	r2, r7, #16
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a5ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5b0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800a5be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a5c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a5c6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a5ca:	7812      	ldrb	r2, [r2, #0]
 800a5cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a5ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800a5d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a5dc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a5e0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800a5e4:	8812      	ldrh	r2, [r2, #0]
 800a5e6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a5ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5ee:	3302      	adds	r3, #2
 800a5f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800a5f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a5f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a5fc:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800a600:	8812      	ldrh	r2, [r2, #0]
 800a602:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a606:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a60a:	3302      	adds	r3, #2
 800a60c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a610:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a614:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a618:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a620:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a624:	3301      	adds	r3, #1
 800a626:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800a62a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a62e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800a632:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a634:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a638:	3301      	adds	r3, #1
 800a63a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800a63e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a642:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a646:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a64c:	3301      	adds	r3, #1
 800a64e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800a652:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a656:	3308      	adds	r3, #8
 800a658:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a65c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800a660:	4618      	mov	r0, r3
 800a662:	f001 f872 	bl	800b74a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a666:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a66a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a66e:	4413      	add	r3, r2
 800a670:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800a674:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a678:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a67c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a67e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a682:	3301      	adds	r3, #1
 800a684:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800a688:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a68c:	3301      	adds	r3, #1
 800a68e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a692:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800a696:	4618      	mov	r0, r3
 800a698:	f001 f857 	bl	800b74a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a69c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a6a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800a6aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6ae:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800a6b2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a6b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6b8:	3302      	adds	r3, #2
 800a6ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800a6be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6c2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800a6c6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a6c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6cc:	3302      	adds	r3, #2
 800a6ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6d6:	2218      	movs	r2, #24
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 f845 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6e0:	233f      	movs	r3, #63	@ 0x3f
 800a6e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800a6e6:	2383      	movs	r3, #131	@ 0x83
 800a6e8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a6ec:	f107 0310 	add.w	r3, r7, #16
 800a6f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a6f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a6fc:	f107 030f 	add.w	r3, r7, #15
 800a700:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a704:	2301      	movs	r3, #1
 800a706:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a70a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a70e:	2100      	movs	r1, #0
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fab3 	bl	800bc7c <hci_send_req>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	da01      	bge.n	800a720 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800a71c:	23ff      	movs	r3, #255	@ 0xff
 800a71e:	e004      	b.n	800a72a <aci_gap_set_discoverable+0x1ea>
  return status;
 800a720:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a724:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a728:	781b      	ldrb	r3, [r3, #0]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a730:	46bd      	mov	sp, r7
 800a732:	bdb0      	pop	{r4, r5, r7, pc}

0800a734 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b0cc      	sub	sp, #304	@ 0x130
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4602      	mov	r2, r0
 800a73c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a740:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a744:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a746:	f107 0310 	add.w	r3, r7, #16
 800a74a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a74e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a752:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a756:	2200      	movs	r2, #0
 800a758:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800a760:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a764:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a768:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a76c:	7812      	ldrb	r2, [r2, #0]
 800a76e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a770:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a774:	3301      	adds	r3, #1
 800a776:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a77a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a77e:	2218      	movs	r2, #24
 800a780:	2100      	movs	r1, #0
 800a782:	4618      	mov	r0, r3
 800a784:	f000 fff1 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a788:	233f      	movs	r3, #63	@ 0x3f
 800a78a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800a78e:	2385      	movs	r3, #133	@ 0x85
 800a790:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a794:	f107 0310 	add.w	r3, r7, #16
 800a798:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a79c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a7a4:	f107 030f 	add.w	r3, r7, #15
 800a7a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fa5f 	bl	800bc7c <hci_send_req>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da01      	bge.n	800a7c8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a7c4:	23ff      	movs	r3, #255	@ 0xff
 800a7c6:	e004      	b.n	800a7d2 <aci_gap_set_io_capability+0x9e>
  return status;
 800a7c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7d0:	781b      	ldrb	r3, [r3, #0]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a7dc:	b5b0      	push	{r4, r5, r7, lr}
 800a7de:	b0cc      	sub	sp, #304	@ 0x130
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a7fe:	4622      	mov	r2, r4
 800a800:	701a      	strb	r2, [r3, #0]
 800a802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a806:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a80a:	4602      	mov	r2, r0
 800a80c:	701a      	strb	r2, [r3, #0]
 800a80e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a812:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a816:	460a      	mov	r2, r1
 800a818:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a81a:	f107 0310 	add.w	r3, r7, #16
 800a81e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a822:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a826:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a82a:	2200      	movs	r2, #0
 800a82c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a838:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a83c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a840:	7812      	ldrb	r2, [r2, #0]
 800a842:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a848:	3301      	adds	r3, #1
 800a84a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a84e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a852:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a856:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a85a:	7812      	ldrb	r2, [r2, #0]
 800a85c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a85e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a862:	3301      	adds	r3, #1
 800a864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800a868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a86c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a870:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a874:	7812      	ldrb	r2, [r2, #0]
 800a876:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a87c:	3301      	adds	r3, #1
 800a87e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a882:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a886:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a88a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a88e:	7812      	ldrb	r2, [r2, #0]
 800a890:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a896:	3301      	adds	r3, #1
 800a898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8a0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800a8a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a8a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a8b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8b4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800a8b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a8ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8be:	3301      	adds	r3, #1
 800a8c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a8c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8c8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800a8cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a8ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800a8e0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a8e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a8ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8f2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a8f6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a8f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a906:	2218      	movs	r2, #24
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 ff2d 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a910:	233f      	movs	r3, #63	@ 0x3f
 800a912:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800a916:	2386      	movs	r3, #134	@ 0x86
 800a918:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a91c:	f107 0310 	add.w	r3, r7, #16
 800a920:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a924:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a928:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a92c:	f107 030f 	add.w	r3, r7, #15
 800a930:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a934:	2301      	movs	r3, #1
 800a936:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a93a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a93e:	2100      	movs	r1, #0
 800a940:	4618      	mov	r0, r3
 800a942:	f001 f99b 	bl	800bc7c <hci_send_req>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	da01      	bge.n	800a950 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800a94c:	23ff      	movs	r3, #255	@ 0xff
 800a94e:	e004      	b.n	800a95a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800a950:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a954:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a958:	781b      	ldrb	r3, [r3, #0]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a960:	46bd      	mov	sp, r7
 800a962:	bdb0      	pop	{r4, r5, r7, pc}

0800a964 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b0cc      	sub	sp, #304	@ 0x130
 800a968:	af00      	add	r7, sp, #0
 800a96a:	4602      	mov	r2, r0
 800a96c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a970:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a974:	6019      	str	r1, [r3, #0]
 800a976:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a97a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a97e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800a980:	f107 0310 	add.w	r3, r7, #16
 800a984:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a98c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a990:	2200      	movs	r2, #0
 800a992:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a99a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a99e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9a2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a9a6:	8812      	ldrh	r2, [r2, #0]
 800a9a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a9aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9ae:	3302      	adds	r3, #2
 800a9b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800a9b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a9b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9bc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a9c0:	6812      	ldr	r2, [r2, #0]
 800a9c2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800a9c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a9d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a9d4:	2218      	movs	r2, #24
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f000 fec6 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800a9de:	233f      	movs	r3, #63	@ 0x3f
 800a9e0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800a9e4:	2388      	movs	r3, #136	@ 0x88
 800a9e6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a9ea:	f107 0310 	add.w	r3, r7, #16
 800a9ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a9f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a9f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a9fa:	f107 030f 	add.w	r3, r7, #15
 800a9fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800aa02:	2301      	movs	r3, #1
 800aa04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 f934 	bl	800bc7c <hci_send_req>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	da01      	bge.n	800aa1e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800aa1a:	23ff      	movs	r3, #255	@ 0xff
 800aa1c:	e004      	b.n	800aa28 <aci_gap_pass_key_resp+0xc4>
  return status;
 800aa1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa22:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800aa26:	781b      	ldrb	r3, [r3, #0]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800aa32:	b590      	push	{r4, r7, lr}
 800aa34:	b0cd      	sub	sp, #308	@ 0x134
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa42:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa4c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800aa50:	4622      	mov	r2, r4
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa58:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800aa5c:	4602      	mov	r2, r0
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa64:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800aa68:	460a      	mov	r2, r1
 800aa6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800aa6c:	f107 0310 	add.w	r3, r7, #16
 800aa70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800aa74:	f107 0308 	add.w	r3, r7, #8
 800aa78:	2207      	movs	r2, #7
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 fe74 	bl	800b76a <Osal_MemSet>
  int index_input = 0;
 800aa82:	2300      	movs	r3, #0
 800aa84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800aa88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa90:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800aa94:	7812      	ldrb	r2, [r2, #0]
 800aa96:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800aaa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aaa6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aaaa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aaae:	7812      	ldrb	r2, [r2, #0]
 800aab0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aab6:	3301      	adds	r3, #1
 800aab8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800aabc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aac0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aac4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800aac8:	7812      	ldrb	r2, [r2, #0]
 800aaca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aacc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aad0:	3301      	adds	r3, #1
 800aad2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aad6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aada:	2218      	movs	r2, #24
 800aadc:	2100      	movs	r1, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f000 fe43 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800aae4:	233f      	movs	r3, #63	@ 0x3f
 800aae6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800aaea:	238a      	movs	r3, #138	@ 0x8a
 800aaec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aaf0:	f107 0310 	add.w	r3, r7, #16
 800aaf4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800aaf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aafc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ab08:	2307      	movs	r3, #7
 800ab0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 f8b1 	bl	800bc7c <hci_send_req>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	da01      	bge.n	800ab24 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800ab20:	23ff      	movs	r3, #255	@ 0xff
 800ab22:	e02e      	b.n	800ab82 <aci_gap_init+0x150>
  if ( resp.Status )
 800ab24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab28:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <aci_gap_init+0x10c>
    return resp.Status;
 800ab32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	e021      	b.n	800ab82 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800ab3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab42:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ab46:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab50:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800ab58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab5c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ab60:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ab6a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ab6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab70:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ab74:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ab7e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd90      	pop	{r4, r7, pc}

0800ab8c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b0cc      	sub	sp, #304	@ 0x130
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4602      	mov	r2, r0
 800ab94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab98:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab9c:	6019      	str	r1, [r3, #0]
 800ab9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aba2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800aba6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800aba8:	f107 0310 	add.w	r3, r7, #16
 800abac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800abb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abb4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800abb8:	2200      	movs	r2, #0
 800abba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800abc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800abc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800abca:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800abd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800abd6:	3301      	adds	r3, #1
 800abd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800abdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800abe0:	1c58      	adds	r0, r3, #1
 800abe2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abe6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800abea:	781a      	ldrb	r2, [r3, #0]
 800abec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abf0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800abf4:	6819      	ldr	r1, [r3, #0]
 800abf6:	f000 fda8 	bl	800b74a <Osal_MemCpy>
  index_input += AdvDataLen;
 800abfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abfe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ac08:	4413      	add	r3, r2
 800ac0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac12:	2218      	movs	r2, #24
 800ac14:	2100      	movs	r1, #0
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fda7 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac1c:	233f      	movs	r3, #63	@ 0x3f
 800ac1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800ac22:	238e      	movs	r3, #142	@ 0x8e
 800ac24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ac28:	f107 0310 	add.w	r3, r7, #16
 800ac2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ac30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ac34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ac38:	f107 030f 	add.w	r3, r7, #15
 800ac3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ac40:	2301      	movs	r3, #1
 800ac42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f001 f815 	bl	800bc7c <hci_send_req>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	da01      	bge.n	800ac5c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800ac58:	23ff      	movs	r3, #255	@ 0xff
 800ac5a:	e004      	b.n	800ac66 <aci_gap_update_adv_data+0xda>
  return status;
 800ac5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ac60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ac64:	781b      	ldrb	r3, [r3, #0]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ac76:	2300      	movs	r3, #0
 800ac78:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac7a:	f107 0308 	add.w	r3, r7, #8
 800ac7e:	2218      	movs	r2, #24
 800ac80:	2100      	movs	r1, #0
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fd71 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac88:	233f      	movs	r3, #63	@ 0x3f
 800ac8a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ac8c:	2392      	movs	r3, #146	@ 0x92
 800ac8e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac90:	1dfb      	adds	r3, r7, #7
 800ac92:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac94:	2301      	movs	r3, #1
 800ac96:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac98:	f107 0308 	add.w	r3, r7, #8
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 ffec 	bl	800bc7c <hci_send_req>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da01      	bge.n	800acae <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800acaa:	23ff      	movs	r3, #255	@ 0xff
 800acac:	e000      	b.n	800acb0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800acae:	79fb      	ldrb	r3, [r7, #7]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3720      	adds	r7, #32
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b0cc      	sub	sp, #304	@ 0x130
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4602      	mov	r2, r0
 800acc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acc4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800acc8:	801a      	strh	r2, [r3, #0]
 800acca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800acce:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800acd2:	460a      	mov	r2, r1
 800acd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800acd6:	f107 0310 	add.w	r3, r7, #16
 800acda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800acde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ace2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800acf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800acf4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800acf8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800acfc:	8812      	ldrh	r2, [r2, #0]
 800acfe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ad00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad04:	3302      	adds	r3, #2
 800ad06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800ad0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad0e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ad12:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ad16:	7812      	ldrb	r2, [r2, #0]
 800ad18:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ad1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad1e:	3301      	adds	r3, #1
 800ad20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ad24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad28:	2218      	movs	r2, #24
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 fd1c 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad32:	233f      	movs	r3, #63	@ 0x3f
 800ad34:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800ad38:	23a5      	movs	r3, #165	@ 0xa5
 800ad3a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ad3e:	f107 0310 	add.w	r3, r7, #16
 800ad42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ad46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ad4e:	f107 030f 	add.w	r3, r7, #15
 800ad52:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ad5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 ff8a 	bl	800bc7c <hci_send_req>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da01      	bge.n	800ad72 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800ad6e:	23ff      	movs	r3, #255	@ 0xff
 800ad70:	e004      	b.n	800ad7c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800ad72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ad76:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ad7a:	781b      	ldrb	r3, [r3, #0]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b088      	sub	sp, #32
 800ad8a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	2218      	movs	r2, #24
 800ad96:	2100      	movs	r1, #0
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 fce6 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad9e:	233f      	movs	r3, #63	@ 0x3f
 800ada0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ada2:	f240 1301 	movw	r3, #257	@ 0x101
 800ada6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ada8:	1dfb      	adds	r3, r7, #7
 800adaa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800adac:	2301      	movs	r3, #1
 800adae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	2100      	movs	r1, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 ff60 	bl	800bc7c <hci_send_req>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	da01      	bge.n	800adc6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800adc2:	23ff      	movs	r3, #255	@ 0xff
 800adc4:	e000      	b.n	800adc8 <aci_gatt_init+0x42>
  return status;
 800adc6:	79fb      	ldrb	r3, [r7, #7]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800add0:	b590      	push	{r4, r7, lr}
 800add2:	b0cf      	sub	sp, #316	@ 0x13c
 800add4:	af00      	add	r7, sp, #0
 800add6:	4604      	mov	r4, r0
 800add8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800addc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800ade0:	6001      	str	r1, [r0, #0]
 800ade2:	4610      	mov	r0, r2
 800ade4:	4619      	mov	r1, r3
 800ade6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800adea:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800adee:	4622      	mov	r2, r4
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800adf6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800adfa:	4602      	mov	r2, r0
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae02:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ae06:	460a      	mov	r2, r1
 800ae08:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ae0a:	f107 0310 	add.w	r3, r7, #16
 800ae0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ae12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae16:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d00a      	beq.n	800ae36 <aci_gatt_add_service+0x66>
 800ae20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae24:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d101      	bne.n	800ae32 <aci_gatt_add_service+0x62>
 800ae2e:	2311      	movs	r3, #17
 800ae30:	e002      	b.n	800ae38 <aci_gatt_add_service+0x68>
 800ae32:	2301      	movs	r3, #1
 800ae34:	e000      	b.n	800ae38 <aci_gatt_add_service+0x68>
 800ae36:	2303      	movs	r3, #3
 800ae38:	f107 0210 	add.w	r2, r7, #16
 800ae3c:	4413      	add	r3, r2
 800ae3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ae42:	f107 030c 	add.w	r3, r7, #12
 800ae46:	2203      	movs	r2, #3
 800ae48:	2100      	movs	r1, #0
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f000 fc8d 	bl	800b76a <Osal_MemSet>
  int index_input = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800ae56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ae5a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ae5e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ae62:	7812      	ldrb	r2, [r2, #0]
 800ae64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ae66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800ae70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae74:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d002      	beq.n	800ae84 <aci_gatt_add_service+0xb4>
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d004      	beq.n	800ae8c <aci_gatt_add_service+0xbc>
 800ae82:	e007      	b.n	800ae94 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800ae84:	2302      	movs	r3, #2
 800ae86:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ae8a:	e005      	b.n	800ae98 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ae8c:	2310      	movs	r3, #16
 800ae8e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ae92:	e001      	b.n	800ae98 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ae94:	2397      	movs	r3, #151	@ 0x97
 800ae96:	e06c      	b.n	800af72 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800ae98:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ae9c:	1c58      	adds	r0, r3, #1
 800ae9e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800aea2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800aea6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800aeaa:	6819      	ldr	r1, [r3, #0]
 800aeac:	f000 fc4d 	bl	800b74a <Osal_MemCpy>
    index_input += size;
 800aeb0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800aeb4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800aeb8:	4413      	add	r3, r2
 800aeba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800aebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aec2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800aec6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800aeca:	7812      	ldrb	r2, [r2, #0]
 800aecc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800aece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aed2:	3301      	adds	r3, #1
 800aed4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800aed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aedc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800aee0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800aee4:	7812      	ldrb	r2, [r2, #0]
 800aee6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800aee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aeec:	3301      	adds	r3, #1
 800aeee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aef2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aef6:	2218      	movs	r2, #24
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fc35 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800af00:	233f      	movs	r3, #63	@ 0x3f
 800af02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800af06:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800af0a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800af0e:	f107 0310 	add.w	r3, r7, #16
 800af12:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800af16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800af1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800af1e:	f107 030c 	add.w	r3, r7, #12
 800af22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800af26:	2303      	movs	r3, #3
 800af28:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800af30:	2100      	movs	r1, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f000 fea2 	bl	800bc7c <hci_send_req>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	da01      	bge.n	800af42 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800af3e:	23ff      	movs	r3, #255	@ 0xff
 800af40:	e017      	b.n	800af72 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800af42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800af46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800af50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800af54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	e00a      	b.n	800af72 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800af5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800af60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800af64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800af6e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd90      	pop	{r4, r7, pc}

0800af7c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800af7c:	b590      	push	{r4, r7, lr}
 800af7e:	b0d1      	sub	sp, #324	@ 0x144
 800af80:	af00      	add	r7, sp, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800af8a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800af8e:	600a      	str	r2, [r1, #0]
 800af90:	4619      	mov	r1, r3
 800af92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af96:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800af9a:	4622      	mov	r2, r4
 800af9c:	801a      	strh	r2, [r3, #0]
 800af9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800afa2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800afa6:	4602      	mov	r2, r0
 800afa8:	701a      	strb	r2, [r3, #0]
 800afaa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800afae:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800afb2:	460a      	mov	r2, r1
 800afb4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800afb6:	f107 0318 	add.w	r3, r7, #24
 800afba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800afbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800afc2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d00a      	beq.n	800afe2 <aci_gatt_add_char+0x66>
 800afcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800afd0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d101      	bne.n	800afde <aci_gatt_add_char+0x62>
 800afda:	2313      	movs	r3, #19
 800afdc:	e002      	b.n	800afe4 <aci_gatt_add_char+0x68>
 800afde:	2303      	movs	r3, #3
 800afe0:	e000      	b.n	800afe4 <aci_gatt_add_char+0x68>
 800afe2:	2305      	movs	r3, #5
 800afe4:	f107 0218 	add.w	r2, r7, #24
 800afe8:	4413      	add	r3, r2
 800afea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800afee:	f107 0314 	add.w	r3, r7, #20
 800aff2:	2203      	movs	r2, #3
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fbb7 	bl	800b76a <Osal_MemSet>
  int index_input = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800b002:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800b006:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800b00a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800b00e:	8812      	ldrh	r2, [r2, #0]
 800b010:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b012:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b016:	3302      	adds	r3, #2
 800b018:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800b01c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800b020:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800b024:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800b028:	7812      	ldrb	r2, [r2, #0]
 800b02a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b02c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b030:	3301      	adds	r3, #1
 800b032:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800b036:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b03a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d002      	beq.n	800b04a <aci_gatt_add_char+0xce>
 800b044:	2b02      	cmp	r3, #2
 800b046:	d004      	beq.n	800b052 <aci_gatt_add_char+0xd6>
 800b048:	e007      	b.n	800b05a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800b04a:	2302      	movs	r3, #2
 800b04c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800b050:	e005      	b.n	800b05e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800b052:	2310      	movs	r3, #16
 800b054:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800b058:	e001      	b.n	800b05e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800b05a:	2397      	movs	r3, #151	@ 0x97
 800b05c:	e091      	b.n	800b182 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800b05e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800b062:	1cd8      	adds	r0, r3, #3
 800b064:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800b068:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b06c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b070:	6819      	ldr	r1, [r3, #0]
 800b072:	f000 fb6a 	bl	800b74a <Osal_MemCpy>
    index_input += size;
 800b076:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b07a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800b07e:	4413      	add	r3, r2
 800b080:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800b084:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b088:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800b08c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800b090:	8812      	ldrh	r2, [r2, #0]
 800b092:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b094:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b098:	3302      	adds	r3, #2
 800b09a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800b09e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b0a2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800b0a6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800b0a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800b0b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b0b6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800b0ba:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800b0bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800b0c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b0ca:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800b0ce:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800b0d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800b0da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b0de:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800b0e2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800b0e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800b0ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b0f2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800b0f6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800b0f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b102:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b106:	2218      	movs	r2, #24
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 fb2d 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b110:	233f      	movs	r3, #63	@ 0x3f
 800b112:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800b116:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800b11a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800b11e:	f107 0318 	add.w	r3, r7, #24
 800b122:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800b126:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b12a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800b12e:	f107 0314 	add.w	r3, r7, #20
 800b132:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800b136:	2303      	movs	r3, #3
 800b138:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b13c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fd9a 	bl	800bc7c <hci_send_req>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	da01      	bge.n	800b152 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800b14e:	23ff      	movs	r3, #255	@ 0xff
 800b150:	e017      	b.n	800b182 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800b152:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d005      	beq.n	800b16c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800b160:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b164:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	e00a      	b.n	800b182 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800b16c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b170:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b174:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b178:	b29a      	uxth	r2, r3
 800b17a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800b17e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd90      	pop	{r4, r7, pc}

0800b18c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800b18c:	b5b0      	push	{r4, r5, r7, lr}
 800b18e:	b0cc      	sub	sp, #304	@ 0x130
 800b190:	af00      	add	r7, sp, #0
 800b192:	4605      	mov	r5, r0
 800b194:	460c      	mov	r4, r1
 800b196:	4610      	mov	r0, r2
 800b198:	4619      	mov	r1, r3
 800b19a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b19e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b1a2:	462a      	mov	r2, r5
 800b1a4:	801a      	strh	r2, [r3, #0]
 800b1a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b1aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	801a      	strh	r2, [r3, #0]
 800b1b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b1b6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b1c2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b1c6:	460a      	mov	r2, r1
 800b1c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b1ca:	f107 0310 	add.w	r3, r7, #16
 800b1ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b1d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b1d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b1da:	2200      	movs	r2, #0
 800b1dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800b1e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b1e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b1ec:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b1f0:	8812      	ldrh	r2, [r2, #0]
 800b1f2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800b1fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b202:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b206:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800b20a:	8812      	ldrh	r2, [r2, #0]
 800b20c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b20e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b212:	3302      	adds	r3, #2
 800b214:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800b218:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b21c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b220:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800b224:	7812      	ldrb	r2, [r2, #0]
 800b226:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b228:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b22c:	3301      	adds	r3, #1
 800b22e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800b232:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b236:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b23a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b242:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b246:	3301      	adds	r3, #1
 800b248:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800b24c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b250:	1d98      	adds	r0, r3, #6
 800b252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b256:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	461a      	mov	r2, r3
 800b25e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800b262:	f000 fa72 	bl	800b74a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b26a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b274:	4413      	add	r3, r2
 800b276:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b27a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b27e:	2218      	movs	r2, #24
 800b280:	2100      	movs	r1, #0
 800b282:	4618      	mov	r0, r3
 800b284:	f000 fa71 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b288:	233f      	movs	r3, #63	@ 0x3f
 800b28a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800b28e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800b292:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b296:	f107 0310 	add.w	r3, r7, #16
 800b29a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b29e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b2a6:	f107 030f 	add.w	r3, r7, #15
 800b2aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b2b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 fcde 	bl	800bc7c <hci_send_req>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	da01      	bge.n	800b2ca <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800b2c6:	23ff      	movs	r3, #255	@ 0xff
 800b2c8:	e004      	b.n	800b2d4 <aci_gatt_update_char_value+0x148>
  return status;
 800b2ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b2ce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b2d2:	781b      	ldrb	r3, [r3, #0]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bdb0      	pop	{r4, r5, r7, pc}

0800b2de <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b0cc      	sub	sp, #304	@ 0x130
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b2ea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b2ee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800b2f0:	f107 0310 	add.w	r3, r7, #16
 800b2f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b2f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b2fc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b300:	2200      	movs	r2, #0
 800b302:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b304:	2300      	movs	r3, #0
 800b306:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b30a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b30e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b312:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b316:	8812      	ldrh	r2, [r2, #0]
 800b318:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b31a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b31e:	3302      	adds	r3, #2
 800b320:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b324:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b328:	2218      	movs	r2, #24
 800b32a:	2100      	movs	r1, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fa1c 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b332:	233f      	movs	r3, #63	@ 0x3f
 800b334:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800b338:	f240 1325 	movw	r3, #293	@ 0x125
 800b33c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b340:	f107 0310 	add.w	r3, r7, #16
 800b344:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b348:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b34c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b350:	f107 030f 	add.w	r3, r7, #15
 800b354:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b358:	2301      	movs	r3, #1
 800b35a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b35e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b362:	2100      	movs	r1, #0
 800b364:	4618      	mov	r0, r3
 800b366:	f000 fc89 	bl	800bc7c <hci_send_req>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	da01      	bge.n	800b374 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800b370:	23ff      	movs	r3, #255	@ 0xff
 800b372:	e004      	b.n	800b37e <aci_gatt_confirm_indication+0xa0>
  return status;
 800b374:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b378:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b37c:	781b      	ldrb	r3, [r3, #0]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b0cc      	sub	sp, #304	@ 0x130
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b392:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b39c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b3a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b3ac:	460a      	mov	r2, r1
 800b3ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b3b0:	f107 0310 	add.w	r3, r7, #16
 800b3b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b3b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b3bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800b3ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3d2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b3d6:	7812      	ldrb	r2, [r2, #0]
 800b3d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b3da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3de:	3301      	adds	r3, #1
 800b3e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800b3e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3ec:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b3f0:	7812      	ldrb	r2, [r2, #0]
 800b3f2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b3f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b3fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b402:	1c98      	adds	r0, r3, #2
 800b404:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b408:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b40c:	781a      	ldrb	r2, [r3, #0]
 800b40e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b412:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b416:	6819      	ldr	r1, [r3, #0]
 800b418:	f000 f997 	bl	800b74a <Osal_MemCpy>
  index_input += Length;
 800b41c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b420:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b42a:	4413      	add	r3, r2
 800b42c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b430:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b434:	2218      	movs	r2, #24
 800b436:	2100      	movs	r1, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f996 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b43e:	233f      	movs	r3, #63	@ 0x3f
 800b440:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800b444:	230c      	movs	r3, #12
 800b446:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b44a:	f107 0310 	add.w	r3, r7, #16
 800b44e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b452:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b456:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b45a:	f107 030f 	add.w	r3, r7, #15
 800b45e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b462:	2301      	movs	r3, #1
 800b464:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b468:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b46c:	2100      	movs	r1, #0
 800b46e:	4618      	mov	r0, r3
 800b470:	f000 fc04 	bl	800bc7c <hci_send_req>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	da01      	bge.n	800b47e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800b47a:	23ff      	movs	r3, #255	@ 0xff
 800b47c:	e004      	b.n	800b488 <aci_hal_write_config_data+0x100>
  return status;
 800b47e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b482:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b486:	781b      	ldrb	r3, [r3, #0]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b0cc      	sub	sp, #304	@ 0x130
 800b496:	af00      	add	r7, sp, #0
 800b498:	4602      	mov	r2, r0
 800b49a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b49e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b4ac:	460a      	mov	r2, r1
 800b4ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b4b0:	f107 0310 	add.w	r3, r7, #16
 800b4b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b4b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800b4ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b4ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b4d2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b4d6:	7812      	ldrb	r2, [r2, #0]
 800b4d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b4da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b4de:	3301      	adds	r3, #1
 800b4e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800b4e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b4e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b4ec:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b4f0:	7812      	ldrb	r2, [r2, #0]
 800b4f2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b4f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b4fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b502:	2218      	movs	r2, #24
 800b504:	2100      	movs	r1, #0
 800b506:	4618      	mov	r0, r3
 800b508:	f000 f92f 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b50c:	233f      	movs	r3, #63	@ 0x3f
 800b50e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800b512:	230f      	movs	r3, #15
 800b514:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b518:	f107 0310 	add.w	r3, r7, #16
 800b51c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b520:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b524:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b528:	f107 030f 	add.w	r3, r7, #15
 800b52c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b530:	2301      	movs	r3, #1
 800b532:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b536:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fb9d 	bl	800bc7c <hci_send_req>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	da01      	bge.n	800b54c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800b548:	23ff      	movs	r3, #255	@ 0xff
 800b54a:	e004      	b.n	800b556 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800b54c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b550:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b554:	781b      	ldrb	r3, [r3, #0]
}
 800b556:	4618      	mov	r0, r3
 800b558:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b0cc      	sub	sp, #304	@ 0x130
 800b564:	af00      	add	r7, sp, #0
 800b566:	4602      	mov	r2, r0
 800b568:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b56c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b570:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b572:	f107 0310 	add.w	r3, r7, #16
 800b576:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b57a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b57e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b582:	2200      	movs	r2, #0
 800b584:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800b58c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b590:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b594:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b598:	8812      	ldrh	r2, [r2, #0]
 800b59a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b59c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b5a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b5aa:	2218      	movs	r2, #24
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f8db 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x3f;
 800b5b4:	233f      	movs	r3, #63	@ 0x3f
 800b5b6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800b5ba:	2318      	movs	r3, #24
 800b5bc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b5c0:	f107 0310 	add.w	r3, r7, #16
 800b5c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b5c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b5cc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b5d0:	f107 030f 	add.w	r3, r7, #15
 800b5d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b5de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fb49 	bl	800bc7c <hci_send_req>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	da01      	bge.n	800b5f4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800b5f0:	23ff      	movs	r3, #255	@ 0xff
 800b5f2:	e004      	b.n	800b5fe <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800b5f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b5f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b5fc:	781b      	ldrb	r3, [r3, #0]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b088      	sub	sp, #32
 800b60c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b612:	f107 0308 	add.w	r3, r7, #8
 800b616:	2218      	movs	r2, #24
 800b618:	2100      	movs	r1, #0
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f8a5 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x03;
 800b620:	2303      	movs	r3, #3
 800b622:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b624:	2303      	movs	r3, #3
 800b626:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b628:	1dfb      	adds	r3, r7, #7
 800b62a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b62c:	2301      	movs	r3, #1
 800b62e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	2100      	movs	r1, #0
 800b636:	4618      	mov	r0, r3
 800b638:	f000 fb20 	bl	800bc7c <hci_send_req>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	da01      	bge.n	800b646 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b642:	23ff      	movs	r3, #255	@ 0xff
 800b644:	e000      	b.n	800b648 <hci_reset+0x40>
  return status;
 800b646:	79fb      	ldrb	r3, [r7, #7]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b650:	b590      	push	{r4, r7, lr}
 800b652:	b0cd      	sub	sp, #308	@ 0x134
 800b654:	af00      	add	r7, sp, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	4611      	mov	r1, r2
 800b65c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b660:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b664:	4622      	mov	r2, r4
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b66c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b670:	4602      	mov	r2, r0
 800b672:	701a      	strb	r2, [r3, #0]
 800b674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b678:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800b67c:	460a      	mov	r2, r1
 800b67e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b680:	f107 0310 	add.w	r3, r7, #16
 800b684:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b688:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b68c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b690:	2200      	movs	r2, #0
 800b692:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b69a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b69e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b6a2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b6a6:	7812      	ldrb	r2, [r2, #0]
 800b6a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b6aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b6b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b6b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b6bc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b6c0:	7812      	ldrb	r2, [r2, #0]
 800b6c2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b6ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b6d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b6d6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800b6da:	7812      	ldrb	r2, [r2, #0]
 800b6dc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b6de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b6e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b6ec:	2218      	movs	r2, #24
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 f83a 	bl	800b76a <Osal_MemSet>
  rq.ogf = 0x08;
 800b6f6:	2308      	movs	r3, #8
 800b6f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800b6fc:	2331      	movs	r3, #49	@ 0x31
 800b6fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b702:	f107 0310 	add.w	r3, r7, #16
 800b706:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b70a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b70e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b712:	f107 030f 	add.w	r3, r7, #15
 800b716:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b720:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f000 faa8 	bl	800bc7c <hci_send_req>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	da01      	bge.n	800b736 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800b732:	23ff      	movs	r3, #255	@ 0xff
 800b734:	e004      	b.n	800b740 <hci_le_set_default_phy+0xf0>
  return status;
 800b736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b73a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b73e:	781b      	ldrb	r3, [r3, #0]
}
 800b740:	4618      	mov	r0, r3
 800b742:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800b746:	46bd      	mov	sp, r7
 800b748:	bd90      	pop	{r4, r7, pc}

0800b74a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b084      	sub	sp, #16
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f004 f8d3 	bl	800f906 <memcpy>
 800b760:	4603      	mov	r3, r0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	60f8      	str	r0, [r7, #12]
 800b772:	60b9      	str	r1, [r7, #8]
 800b774:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	68b9      	ldr	r1, [r7, #8]
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f004 f82e 	bl	800f7dc <memset>
 800b780:	4603      	mov	r3, r0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800b78a:	b480      	push	{r7}
 800b78c:	af00      	add	r7, sp, #0
  return;
 800b78e:	bf00      	nop
}
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
  return;
 800b79c:	bf00      	nop
}
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	af00      	add	r7, sp, #0
  return;
 800b7aa:	bf00      	nop
}
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	af00      	add	r7, sp, #0
  return;
 800b7b8:	bf00      	nop
}
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	af00      	add	r7, sp, #0
  return;
 800b7c6:	bf00      	nop
}
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	af00      	add	r7, sp, #0
  return;
 800b7d4:	bf00      	nop
}
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800b7de:	b480      	push	{r7}
 800b7e0:	af00      	add	r7, sp, #0
  return;
 800b7e2:	bf00      	nop
}
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	af00      	add	r7, sp, #0
  return;
 800b7f0:	bf00      	nop
}
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	af00      	add	r7, sp, #0
  return;
 800b7fe:	bf00      	nop
}
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800b808:	b480      	push	{r7}
 800b80a:	af00      	add	r7, sp, #0
  return;
 800b80c:	bf00      	nop
}
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800b816:	b480      	push	{r7}
 800b818:	af00      	add	r7, sp, #0
  return;
 800b81a:	bf00      	nop
}
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800b824:	b480      	push	{r7}
 800b826:	af00      	add	r7, sp, #0
  return;
 800b828:	bf00      	nop
}
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800b832:	b480      	push	{r7}
 800b834:	af00      	add	r7, sp, #0
  return;
 800b836:	bf00      	nop
}
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
  return;
 800b844:	bf00      	nop
}
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800b84e:	b480      	push	{r7}
 800b850:	af00      	add	r7, sp, #0
  return;
 800b852:	bf00      	nop
}
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	af00      	add	r7, sp, #0
  return;
 800b860:	bf00      	nop
}
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800b86a:	b480      	push	{r7}
 800b86c:	af00      	add	r7, sp, #0
  return;
 800b86e:	bf00      	nop
}
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b87c:	4b04      	ldr	r3, [pc, #16]	@ (800b890 <SVCCTL_Init+0x18>)
 800b87e:	2200      	movs	r2, #0
 800b880:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b882:	4b04      	ldr	r3, [pc, #16]	@ (800b894 <SVCCTL_Init+0x1c>)
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b888:	f000 f806 	bl	800b898 <SVCCTL_SvcInit>

  return;
 800b88c:	bf00      	nop
}
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	200001ec 	.word	0x200001ec
 800b894:	2000020c 	.word	0x2000020c

0800b898 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	af00      	add	r7, sp, #0
  BAS_Init();
 800b89c:	f7ff ff75 	bl	800b78a <BAS_Init>

  BLS_Init();
 800b8a0:	f7ff ff7a 	bl	800b798 <BLS_Init>

  CRS_STM_Init();
 800b8a4:	f7ff ff7f 	bl	800b7a6 <CRS_STM_Init>

  DIS_Init();
 800b8a8:	f7ff ff84 	bl	800b7b4 <DIS_Init>

  EDS_STM_Init();
 800b8ac:	f7ff ff89 	bl	800b7c2 <EDS_STM_Init>

  HIDS_Init();
 800b8b0:	f7ff ff8e 	bl	800b7d0 <HIDS_Init>

  HRS_Init();
 800b8b4:	f7ff ff93 	bl	800b7de <HRS_Init>

  HTS_Init();
 800b8b8:	f7ff ff98 	bl	800b7ec <HTS_Init>

  IAS_Init();
 800b8bc:	f7ff ff9d 	bl	800b7fa <IAS_Init>

  LLS_Init();
 800b8c0:	f7ff ffa2 	bl	800b808 <LLS_Init>

  TPS_Init();
 800b8c4:	f7ff ffa7 	bl	800b816 <TPS_Init>

  MOTENV_STM_Init();
 800b8c8:	f7ff ffac 	bl	800b824 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b8cc:	f7ff ffb1 	bl	800b832 <P2PS_STM_Init>

  ZDD_STM_Init();
 800b8d0:	f7ff ffb6 	bl	800b840 <ZDD_STM_Init>

  OTAS_STM_Init();
 800b8d4:	f7ff ffbb 	bl	800b84e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b8d8:	f7ff ffc7 	bl	800b86a <BVOPUS_STM_Init>

  MESH_Init();
 800b8dc:	f7ff ffbe 	bl	800b85c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b8e0:	f002 fc68 	bl	800e1b4 <SVCCTL_InitCustomSvc>
  
  return;
 800b8e4:	bf00      	nop
}
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b8f0:	4b09      	ldr	r3, [pc, #36]	@ (800b918 <SVCCTL_RegisterSvcHandler+0x30>)
 800b8f2:	7f1b      	ldrb	r3, [r3, #28]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4a08      	ldr	r2, [pc, #32]	@ (800b918 <SVCCTL_RegisterSvcHandler+0x30>)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b8fe:	4b06      	ldr	r3, [pc, #24]	@ (800b918 <SVCCTL_RegisterSvcHandler+0x30>)
 800b900:	7f1b      	ldrb	r3, [r3, #28]
 800b902:	3301      	adds	r3, #1
 800b904:	b2da      	uxtb	r2, r3
 800b906:	4b04      	ldr	r3, [pc, #16]	@ (800b918 <SVCCTL_RegisterSvcHandler+0x30>)
 800b908:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b90a:	bf00      	nop
}
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	200001ec 	.word	0x200001ec

0800b91c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3301      	adds	r3, #1
 800b928:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b92a:	2300      	movs	r3, #0
 800b92c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	2bff      	cmp	r3, #255	@ 0xff
 800b934:	d125      	bne.n	800b982 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3302      	adds	r3, #2
 800b93a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	b29b      	uxth	r3, r3
 800b942:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b94a:	d118      	bne.n	800b97e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b94c:	2300      	movs	r3, #0
 800b94e:	757b      	strb	r3, [r7, #21]
 800b950:	e00d      	b.n	800b96e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b952:	7d7b      	ldrb	r3, [r7, #21]
 800b954:	4a1a      	ldr	r2, [pc, #104]	@ (800b9c0 <SVCCTL_UserEvtRx+0xa4>)
 800b956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
 800b95e:	4603      	mov	r3, r0
 800b960:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b962:	7dfb      	ldrb	r3, [r7, #23]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d108      	bne.n	800b97a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b968:	7d7b      	ldrb	r3, [r7, #21]
 800b96a:	3301      	adds	r3, #1
 800b96c:	757b      	strb	r3, [r7, #21]
 800b96e:	4b14      	ldr	r3, [pc, #80]	@ (800b9c0 <SVCCTL_UserEvtRx+0xa4>)
 800b970:	7f1b      	ldrb	r3, [r3, #28]
 800b972:	7d7a      	ldrb	r2, [r7, #21]
 800b974:	429a      	cmp	r2, r3
 800b976:	d3ec      	bcc.n	800b952 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800b978:	e002      	b.n	800b980 <SVCCTL_UserEvtRx+0x64>
              break;
 800b97a:	bf00      	nop
          break;
 800b97c:	e000      	b.n	800b980 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800b97e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800b980:	e000      	b.n	800b984 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800b982:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	2b02      	cmp	r3, #2
 800b988:	d00f      	beq.n	800b9aa <SVCCTL_UserEvtRx+0x8e>
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	dc10      	bgt.n	800b9b0 <SVCCTL_UserEvtRx+0x94>
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d002      	beq.n	800b998 <SVCCTL_UserEvtRx+0x7c>
 800b992:	2b01      	cmp	r3, #1
 800b994:	d006      	beq.n	800b9a4 <SVCCTL_UserEvtRx+0x88>
 800b996:	e00b      	b.n	800b9b0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 fc17 	bl	800d1cc <SVCCTL_App_Notification>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75bb      	strb	r3, [r7, #22]
      break;
 800b9a2:	e008      	b.n	800b9b6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	75bb      	strb	r3, [r7, #22]
      break;
 800b9a8:	e005      	b.n	800b9b6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	75bb      	strb	r3, [r7, #22]
      break;
 800b9ae:	e002      	b.n	800b9b6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	75bb      	strb	r3, [r7, #22]
      break;
 800b9b4:	bf00      	nop
  }

  return (return_status);
 800b9b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200001ec 	.word	0x200001ec

0800b9c4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b088      	sub	sp, #32
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b9cc:	f107 030c 	add.w	r3, r7, #12
 800b9d0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	212e      	movs	r1, #46	@ 0x2e
 800b9dc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800b9e0:	f000 fae8 	bl	800bfb4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	330b      	adds	r3, #11
 800b9e8:	78db      	ldrb	r3, [r3, #3]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3720      	adds	r7, #32
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b088      	sub	sp, #32
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b9fa:	f107 030c 	add.w	r3, r7, #12
 800b9fe:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ba06:	69fb      	ldr	r3, [r7, #28]
 800ba08:	210f      	movs	r1, #15
 800ba0a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ba0e:	f000 fad1 	bl	800bfb4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	330b      	adds	r3, #11
 800ba16:	78db      	ldrb	r3, [r3, #3]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3720      	adds	r7, #32
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ba28:	f107 030c 	add.w	r3, r7, #12
 800ba2c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	2110      	movs	r1, #16
 800ba34:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ba38:	f000 fabc 	bl	800bfb4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	330b      	adds	r3, #11
 800ba40:	78db      	ldrb	r3, [r3, #3]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3720      	adds	r7, #32
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b08b      	sub	sp, #44	@ 0x2c
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ba64:	2300      	movs	r3, #0
 800ba66:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ba74:	4b4a      	ldr	r3, [pc, #296]	@ (800bba0 <SHCI_GetWirelessFwInfo+0x154>)
 800ba76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba7c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ba86:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a44      	ldr	r2, [pc, #272]	@ (800bba4 <SHCI_GetWirelessFwInfo+0x158>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d10f      	bne.n	800bab8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	695b      	ldr	r3, [r3, #20]
 800ba9c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	699b      	ldr	r3, [r3, #24]
 800baa2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	69db      	ldr	r3, [r3, #28]
 800baa8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	e01a      	b.n	800baee <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800bac0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800bac4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	699b      	ldr	r3, [r3, #24]
 800badc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800baee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf0:	0e1b      	lsrs	r3, r3, #24
 800baf2:	b2da      	uxtb	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	0c1b      	lsrs	r3, r3, #16
 800bafc:	b2da      	uxtb	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb04:	0a1b      	lsrs	r3, r3, #8
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0e:	091b      	lsrs	r3, r3, #4
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 030f 	and.w	r3, r3, #15
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	f003 030f 	and.w	r3, r3, #15
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	0e1b      	lsrs	r3, r3, #24
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bb34:	6a3b      	ldr	r3, [r7, #32]
 800bb36:	0c1b      	lsrs	r3, r3, #16
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bb3e:	6a3b      	ldr	r3, [r7, #32]
 800bb40:	0a1b      	lsrs	r3, r3, #8
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bb48:	6a3b      	ldr	r3, [r7, #32]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	0e1b      	lsrs	r3, r3, #24
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	0c1b      	lsrs	r3, r3, #16
 800bb66:	b2da      	uxtb	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	0a1b      	lsrs	r3, r3, #8
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	0e1b      	lsrs	r3, r3, #24
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	0c1b      	lsrs	r3, r3, #16
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	372c      	adds	r7, #44	@ 0x2c
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	58004000 	.word	0x58004000
 800bba4:	a94656b9 	.word	0xa94656b9

0800bba8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	4a08      	ldr	r2, [pc, #32]	@ (800bbd8 <hci_init+0x30>)
 800bbb8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800bbba:	4a08      	ldr	r2, [pc, #32]	@ (800bbdc <hci_init+0x34>)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800bbc0:	4806      	ldr	r0, [pc, #24]	@ (800bbdc <hci_init+0x34>)
 800bbc2:	f000 f979 	bl	800beb8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f8da 	bl	800bd84 <TlInit>

  return;
 800bbd0:	bf00      	nop
}
 800bbd2:	3708      	adds	r7, #8
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	20000664 	.word	0x20000664
 800bbdc:	2000063c 	.word	0x2000063c

0800bbe0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bbe6:	4822      	ldr	r0, [pc, #136]	@ (800bc70 <hci_user_evt_proc+0x90>)
 800bbe8:	f000 fd7a 	bl	800c6e0 <LST_is_empty>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d12b      	bne.n	800bc4a <hci_user_evt_proc+0x6a>
 800bbf2:	4b20      	ldr	r3, [pc, #128]	@ (800bc74 <hci_user_evt_proc+0x94>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d027      	beq.n	800bc4a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bbfa:	f107 030c 	add.w	r3, r7, #12
 800bbfe:	4619      	mov	r1, r3
 800bc00:	481b      	ldr	r0, [pc, #108]	@ (800bc70 <hci_user_evt_proc+0x90>)
 800bc02:	f000 fdfc 	bl	800c7fe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800bc06:	4b1c      	ldr	r3, [pc, #112]	@ (800bc78 <hci_user_evt_proc+0x98>)
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00c      	beq.n	800bc28 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800bc12:	2301      	movs	r3, #1
 800bc14:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bc16:	4b18      	ldr	r3, [pc, #96]	@ (800bc78 <hci_user_evt_proc+0x98>)
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	1d3a      	adds	r2, r7, #4
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800bc20:	793a      	ldrb	r2, [r7, #4]
 800bc22:	4b14      	ldr	r3, [pc, #80]	@ (800bc74 <hci_user_evt_proc+0x94>)
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	e002      	b.n	800bc2e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bc28:	4b12      	ldr	r3, [pc, #72]	@ (800bc74 <hci_user_evt_proc+0x94>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800bc2e:	4b11      	ldr	r3, [pc, #68]	@ (800bc74 <hci_user_evt_proc+0x94>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d004      	beq.n	800bc40 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fb9b 	bl	800c374 <TL_MM_EvtDone>
 800bc3e:	e004      	b.n	800bc4a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4619      	mov	r1, r3
 800bc44:	480a      	ldr	r0, [pc, #40]	@ (800bc70 <hci_user_evt_proc+0x90>)
 800bc46:	f000 fd6d 	bl	800c724 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800bc4a:	4809      	ldr	r0, [pc, #36]	@ (800bc70 <hci_user_evt_proc+0x90>)
 800bc4c:	f000 fd48 	bl	800c6e0 <LST_is_empty>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d107      	bne.n	800bc66 <hci_user_evt_proc+0x86>
 800bc56:	4b07      	ldr	r3, [pc, #28]	@ (800bc74 <hci_user_evt_proc+0x94>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800bc5e:	4804      	ldr	r0, [pc, #16]	@ (800bc70 <hci_user_evt_proc+0x90>)
 800bc60:	f002 f982 	bl	800df68 <hci_notify_asynch_evt>
  }


  return;
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop
}
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000214 	.word	0x20000214
 800bc74:	20000220 	.word	0x20000220
 800bc78:	2000063c 	.word	0x2000063c

0800bc7c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f000 f8d1 	bl	800be30 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	885b      	ldrh	r3, [r3, #2]
 800bc96:	b21b      	sxth	r3, r3
 800bc98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc9c:	b21a      	sxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	881b      	ldrh	r3, [r3, #0]
 800bca2:	029b      	lsls	r3, r3, #10
 800bca4:	b21b      	sxth	r3, r3
 800bca6:	4313      	orrs	r3, r2
 800bca8:	b21b      	sxth	r3, r3
 800bcaa:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800bcac:	4b33      	ldr	r3, [pc, #204]	@ (800bd7c <hci_send_req+0x100>)
 800bcae:	2201      	movs	r2, #1
 800bcb0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	b2d9      	uxtb	r1, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	8bbb      	ldrh	r3, [r7, #28]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 f890 	bl	800bde4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800bcc4:	e04e      	b.n	800bd64 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800bcc6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800bcca:	f002 f964 	bl	800df96 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bcce:	e043      	b.n	800bd58 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800bcd0:	f107 030c 	add.w	r3, r7, #12
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	482a      	ldr	r0, [pc, #168]	@ (800bd80 <hci_send_req+0x104>)
 800bcd8:	f000 fd91 	bl	800c7fe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	7a5b      	ldrb	r3, [r3, #9]
 800bce0:	2b0f      	cmp	r3, #15
 800bce2:	d114      	bne.n	800bd0e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	330b      	adds	r3, #11
 800bce8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	885b      	ldrh	r3, [r3, #2]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	8bba      	ldrh	r2, [r7, #28]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d104      	bne.n	800bd00 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	7812      	ldrb	r2, [r2, #0]
 800bcfe:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	785b      	ldrb	r3, [r3, #1]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d027      	beq.n	800bd58 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	77fb      	strb	r3, [r7, #31]
 800bd0c:	e024      	b.n	800bd58 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	330b      	adds	r3, #11
 800bd12:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	8bba      	ldrh	r2, [r7, #28]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d114      	bne.n	800bd4c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	7a9b      	ldrb	r3, [r3, #10]
 800bd26:	3b03      	subs	r3, #3
 800bd28:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	695a      	ldr	r2, [r3, #20]
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	bfa8      	it	ge
 800bd34:	461a      	movge	r2, r3
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6918      	ldr	r0, [r3, #16]
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	1cd9      	adds	r1, r3, #3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	695b      	ldr	r3, [r3, #20]
 800bd46:	461a      	mov	r2, r3
 800bd48:	f003 fddd 	bl	800f906 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800bd4c:	69bb      	ldr	r3, [r7, #24]
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bd54:	2301      	movs	r3, #1
 800bd56:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bd58:	4809      	ldr	r0, [pc, #36]	@ (800bd80 <hci_send_req+0x104>)
 800bd5a:	f000 fcc1 	bl	800c6e0 <LST_is_empty>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0b5      	beq.n	800bcd0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800bd64:	7ffb      	ldrb	r3, [r7, #31]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0ad      	beq.n	800bcc6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	f000 f860 	bl	800be30 <NotifyCmdStatus>

  return 0;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3720      	adds	r7, #32
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20000668 	.word	0x20000668
 800bd80:	2000065c 	.word	0x2000065c

0800bd84 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800bd8c:	480f      	ldr	r0, [pc, #60]	@ (800bdcc <TlInit+0x48>)
 800bd8e:	f000 fc97 	bl	800c6c0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800bd92:	4a0f      	ldr	r2, [pc, #60]	@ (800bdd0 <TlInit+0x4c>)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bd98:	480e      	ldr	r0, [pc, #56]	@ (800bdd4 <TlInit+0x50>)
 800bd9a:	f000 fc91 	bl	800c6c0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bd9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd8 <TlInit+0x54>)
 800bda0:	2201      	movs	r2, #1
 800bda2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bda4:	4b0d      	ldr	r3, [pc, #52]	@ (800bddc <TlInit+0x58>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00a      	beq.n	800bdc2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bde0 <TlInit+0x5c>)
 800bdb2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800bdb4:	4b09      	ldr	r3, [pc, #36]	@ (800bddc <TlInit+0x58>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f107 0208 	add.w	r2, r7, #8
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4798      	blx	r3
  }

  return;
 800bdc0:	bf00      	nop
 800bdc2:	bf00      	nop
}
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	2000065c 	.word	0x2000065c
 800bdd0:	2000021c 	.word	0x2000021c
 800bdd4:	20000214 	.word	0x20000214
 800bdd8:	20000220 	.word	0x20000220
 800bddc:	2000063c 	.word	0x2000063c
 800bde0:	0800be71 	.word	0x0800be71

0800bde4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	603a      	str	r2, [r7, #0]
 800bdee:	80fb      	strh	r3, [r7, #6]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800bdf4:	4b0c      	ldr	r3, [pc, #48]	@ (800be28 <SendCmd+0x44>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	88fa      	ldrh	r2, [r7, #6]
 800bdfa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800bdfe:	4b0a      	ldr	r3, [pc, #40]	@ (800be28 <SendCmd+0x44>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	797a      	ldrb	r2, [r7, #5]
 800be04:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800be06:	4b08      	ldr	r3, [pc, #32]	@ (800be28 <SendCmd+0x44>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	330c      	adds	r3, #12
 800be0c:	797a      	ldrb	r2, [r7, #5]
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	4618      	mov	r0, r3
 800be12:	f003 fd78 	bl	800f906 <memcpy>

  hciContext.io.Send(0,0);
 800be16:	4b05      	ldr	r3, [pc, #20]	@ (800be2c <SendCmd+0x48>)
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	2100      	movs	r1, #0
 800be1c:	2000      	movs	r0, #0
 800be1e:	4798      	blx	r3

  return;
 800be20:	bf00      	nop
}
 800be22:	3708      	adds	r7, #8
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	2000021c 	.word	0x2000021c
 800be2c:	2000063c 	.word	0x2000063c

0800be30 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800be3a:	79fb      	ldrb	r3, [r7, #7]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d108      	bne.n	800be52 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800be40:	4b0a      	ldr	r3, [pc, #40]	@ (800be6c <NotifyCmdStatus+0x3c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00d      	beq.n	800be64 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800be48:	4b08      	ldr	r3, [pc, #32]	@ (800be6c <NotifyCmdStatus+0x3c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2000      	movs	r0, #0
 800be4e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800be50:	e008      	b.n	800be64 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800be52:	4b06      	ldr	r3, [pc, #24]	@ (800be6c <NotifyCmdStatus+0x3c>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d004      	beq.n	800be64 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800be5a:	4b04      	ldr	r3, [pc, #16]	@ (800be6c <NotifyCmdStatus+0x3c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2001      	movs	r0, #1
 800be60:	4798      	blx	r3
  return;
 800be62:	bf00      	nop
 800be64:	bf00      	nop
}
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20000664 	.word	0x20000664

0800be70 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	7a5b      	ldrb	r3, [r3, #9]
 800be7c:	2b0f      	cmp	r3, #15
 800be7e:	d003      	beq.n	800be88 <TlEvtReceived+0x18>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	7a5b      	ldrb	r3, [r3, #9]
 800be84:	2b0e      	cmp	r3, #14
 800be86:	d107      	bne.n	800be98 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	4809      	ldr	r0, [pc, #36]	@ (800beb0 <TlEvtReceived+0x40>)
 800be8c:	f000 fc70 	bl	800c770 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800be90:	2000      	movs	r0, #0
 800be92:	f002 f875 	bl	800df80 <hci_cmd_resp_release>
 800be96:	e006      	b.n	800bea6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	4806      	ldr	r0, [pc, #24]	@ (800beb4 <TlEvtReceived+0x44>)
 800be9c:	f000 fc68 	bl	800c770 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bea0:	4804      	ldr	r0, [pc, #16]	@ (800beb4 <TlEvtReceived+0x44>)
 800bea2:	f002 f861 	bl	800df68 <hci_notify_asynch_evt>
  }

  return;
 800bea6:	bf00      	nop
}
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	2000065c 	.word	0x2000065c
 800beb4:	20000214 	.word	0x20000214

0800beb8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a05      	ldr	r2, [pc, #20]	@ (800bed8 <hci_register_io_bus+0x20>)
 800bec4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a04      	ldr	r2, [pc, #16]	@ (800bedc <hci_register_io_bus+0x24>)
 800beca:	611a      	str	r2, [r3, #16]

  return;
 800becc:	bf00      	nop
}
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	0800c1d1 	.word	0x0800c1d1
 800bedc:	0800c239 	.word	0x0800c239

0800bee0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	4a08      	ldr	r2, [pc, #32]	@ (800bf10 <shci_init+0x30>)
 800bef0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bef2:	4a08      	ldr	r2, [pc, #32]	@ (800bf14 <shci_init+0x34>)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bef8:	4806      	ldr	r0, [pc, #24]	@ (800bf14 <shci_init+0x34>)
 800befa:	f000 f915 	bl	800c128 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f898 	bl	800c038 <TlInit>

  return;
 800bf08:	bf00      	nop
}
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	2000068c 	.word	0x2000068c
 800bf14:	2000066c 	.word	0x2000066c

0800bf18 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf1e:	4822      	ldr	r0, [pc, #136]	@ (800bfa8 <shci_user_evt_proc+0x90>)
 800bf20:	f000 fbde 	bl	800c6e0 <LST_is_empty>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d12b      	bne.n	800bf82 <shci_user_evt_proc+0x6a>
 800bf2a:	4b20      	ldr	r3, [pc, #128]	@ (800bfac <shci_user_evt_proc+0x94>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d027      	beq.n	800bf82 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bf32:	f107 030c 	add.w	r3, r7, #12
 800bf36:	4619      	mov	r1, r3
 800bf38:	481b      	ldr	r0, [pc, #108]	@ (800bfa8 <shci_user_evt_proc+0x90>)
 800bf3a:	f000 fc60 	bl	800c7fe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bf3e:	4b1c      	ldr	r3, [pc, #112]	@ (800bfb0 <shci_user_evt_proc+0x98>)
 800bf40:	69db      	ldr	r3, [r3, #28]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00c      	beq.n	800bf60 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bf4e:	4b18      	ldr	r3, [pc, #96]	@ (800bfb0 <shci_user_evt_proc+0x98>)
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	1d3a      	adds	r2, r7, #4
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bf58:	793a      	ldrb	r2, [r7, #4]
 800bf5a:	4b14      	ldr	r3, [pc, #80]	@ (800bfac <shci_user_evt_proc+0x94>)
 800bf5c:	701a      	strb	r2, [r3, #0]
 800bf5e:	e002      	b.n	800bf66 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bf60:	4b12      	ldr	r3, [pc, #72]	@ (800bfac <shci_user_evt_proc+0x94>)
 800bf62:	2201      	movs	r2, #1
 800bf64:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bf66:	4b11      	ldr	r3, [pc, #68]	@ (800bfac <shci_user_evt_proc+0x94>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d004      	beq.n	800bf78 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 f9ff 	bl	800c374 <TL_MM_EvtDone>
 800bf76:	e004      	b.n	800bf82 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	480a      	ldr	r0, [pc, #40]	@ (800bfa8 <shci_user_evt_proc+0x90>)
 800bf7e:	f000 fbd1 	bl	800c724 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bf82:	4809      	ldr	r0, [pc, #36]	@ (800bfa8 <shci_user_evt_proc+0x90>)
 800bf84:	f000 fbac 	bl	800c6e0 <LST_is_empty>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d107      	bne.n	800bf9e <shci_user_evt_proc+0x86>
 800bf8e:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <shci_user_evt_proc+0x94>)
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bf96:	4804      	ldr	r0, [pc, #16]	@ (800bfa8 <shci_user_evt_proc+0x90>)
 800bf98:	f7f6 fb1f 	bl	80025da <shci_notify_asynch_evt>
  }


  return;
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
}
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	20000224 	.word	0x20000224
 800bfac:	20000234 	.word	0x20000234
 800bfb0:	2000066c 	.word	0x2000066c

0800bfb4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60ba      	str	r2, [r7, #8]
 800bfbc:	607b      	str	r3, [r7, #4]
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	81fb      	strh	r3, [r7, #14]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f000 f868 	bl	800c09c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bfcc:	4b17      	ldr	r3, [pc, #92]	@ (800c02c <shci_send+0x78>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	89fa      	ldrh	r2, [r7, #14]
 800bfd2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bfd6:	4b15      	ldr	r3, [pc, #84]	@ (800c02c <shci_send+0x78>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	7b7a      	ldrb	r2, [r7, #13]
 800bfdc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bfde:	4b13      	ldr	r3, [pc, #76]	@ (800c02c <shci_send+0x78>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	330c      	adds	r3, #12
 800bfe4:	7b7a      	ldrb	r2, [r7, #13]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f003 fc8c 	bl	800f906 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800bfee:	4b10      	ldr	r3, [pc, #64]	@ (800c030 <shci_send+0x7c>)
 800bff0:	2201      	movs	r2, #1
 800bff2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800bff4:	4b0f      	ldr	r3, [pc, #60]	@ (800c034 <shci_send+0x80>)
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	2100      	movs	r1, #0
 800bffa:	2000      	movs	r0, #0
 800bffc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bffe:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800c002:	f7f6 fb01 	bl	8002608 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f103 0008 	add.w	r0, r3, #8
 800c00c:	4b07      	ldr	r3, [pc, #28]	@ (800c02c <shci_send+0x78>)
 800c00e:	6819      	ldr	r1, [r3, #0]
 800c010:	4b06      	ldr	r3, [pc, #24]	@ (800c02c <shci_send+0x78>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	789b      	ldrb	r3, [r3, #2]
 800c016:	3303      	adds	r3, #3
 800c018:	461a      	mov	r2, r3
 800c01a:	f003 fc74 	bl	800f906 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c01e:	2001      	movs	r0, #1
 800c020:	f000 f83c 	bl	800c09c <Cmd_SetStatus>

  return;
 800c024:	bf00      	nop
}
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20000230 	.word	0x20000230
 800c030:	20000690 	.word	0x20000690
 800c034:	2000066c 	.word	0x2000066c

0800c038 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c040:	4a10      	ldr	r2, [pc, #64]	@ (800c084 <TlInit+0x4c>)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c046:	4810      	ldr	r0, [pc, #64]	@ (800c088 <TlInit+0x50>)
 800c048:	f000 fb3a 	bl	800c6c0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c04c:	2001      	movs	r0, #1
 800c04e:	f000 f825 	bl	800c09c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c052:	4b0e      	ldr	r3, [pc, #56]	@ (800c08c <TlInit+0x54>)
 800c054:	2201      	movs	r2, #1
 800c056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c058:	4b0d      	ldr	r3, [pc, #52]	@ (800c090 <TlInit+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00c      	beq.n	800c07a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c064:	4b0b      	ldr	r3, [pc, #44]	@ (800c094 <TlInit+0x5c>)
 800c066:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c068:	4b0b      	ldr	r3, [pc, #44]	@ (800c098 <TlInit+0x60>)
 800c06a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c06c:	4b08      	ldr	r3, [pc, #32]	@ (800c090 <TlInit+0x58>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f107 020c 	add.w	r2, r7, #12
 800c074:	4610      	mov	r0, r2
 800c076:	4798      	blx	r3
  }

  return;
 800c078:	bf00      	nop
 800c07a:	bf00      	nop
}
 800c07c:	3718      	adds	r7, #24
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20000230 	.word	0x20000230
 800c088:	20000224 	.word	0x20000224
 800c08c:	20000234 	.word	0x20000234
 800c090:	2000066c 	.word	0x2000066c
 800c094:	0800c0ed 	.word	0x0800c0ed
 800c098:	0800c105 	.word	0x0800c105

0800c09c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10b      	bne.n	800c0c4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e4 <Cmd_SetStatus+0x48>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d003      	beq.n	800c0bc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e4 <Cmd_SetStatus+0x48>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c0e8 <Cmd_SetStatus+0x4c>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c0c2:	e00b      	b.n	800c0dc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c0c4:	4b08      	ldr	r3, [pc, #32]	@ (800c0e8 <Cmd_SetStatus+0x4c>)
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c0ca:	4b06      	ldr	r3, [pc, #24]	@ (800c0e4 <Cmd_SetStatus+0x48>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d004      	beq.n	800c0dc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c0d2:	4b04      	ldr	r3, [pc, #16]	@ (800c0e4 <Cmd_SetStatus+0x48>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2001      	movs	r0, #1
 800c0d8:	4798      	blx	r3
  return;
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
}
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	2000068c 	.word	0x2000068c
 800c0e8:	2000022c 	.word	0x2000022c

0800c0ec <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	f7f6 fa7c 	bl	80025f2 <shci_cmd_resp_release>

  return;
 800c0fa:	bf00      	nop
}
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c10c:	6879      	ldr	r1, [r7, #4]
 800c10e:	4805      	ldr	r0, [pc, #20]	@ (800c124 <TlUserEvtReceived+0x20>)
 800c110:	f000 fb2e 	bl	800c770 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c114:	4803      	ldr	r0, [pc, #12]	@ (800c124 <TlUserEvtReceived+0x20>)
 800c116:	f7f6 fa60 	bl	80025da <shci_notify_asynch_evt>

  return;
 800c11a:	bf00      	nop
}
 800c11c:	3708      	adds	r7, #8
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20000224 	.word	0x20000224

0800c128 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a05      	ldr	r2, [pc, #20]	@ (800c148 <shci_register_io_bus+0x20>)
 800c134:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a04      	ldr	r2, [pc, #16]	@ (800c14c <shci_register_io_bus+0x24>)
 800c13a:	611a      	str	r2, [r3, #16]

  return;
 800c13c:	bf00      	nop
}
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	0800c271 	.word	0x0800c271
 800c14c:	0800c2c5 	.word	0x0800c2c5

0800c150 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c154:	f002 f9c6 	bl	800e4e4 <HW_IPCC_Enable>

  return;
 800c158:	bf00      	nop
}
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <TL_Init>:


void TL_Init( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c160:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <TL_Init+0x48>)
 800c162:	4a11      	ldr	r2, [pc, #68]	@ (800c1a8 <TL_Init+0x4c>)
 800c164:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c166:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a4 <TL_Init+0x48>)
 800c168:	4a10      	ldr	r2, [pc, #64]	@ (800c1ac <TL_Init+0x50>)
 800c16a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c16c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a4 <TL_Init+0x48>)
 800c16e:	4a10      	ldr	r2, [pc, #64]	@ (800c1b0 <TL_Init+0x54>)
 800c170:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c172:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a4 <TL_Init+0x48>)
 800c174:	4a0f      	ldr	r2, [pc, #60]	@ (800c1b4 <TL_Init+0x58>)
 800c176:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c178:	4b0a      	ldr	r3, [pc, #40]	@ (800c1a4 <TL_Init+0x48>)
 800c17a:	4a0f      	ldr	r2, [pc, #60]	@ (800c1b8 <TL_Init+0x5c>)
 800c17c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c17e:	4b09      	ldr	r3, [pc, #36]	@ (800c1a4 <TL_Init+0x48>)
 800c180:	4a0e      	ldr	r2, [pc, #56]	@ (800c1bc <TL_Init+0x60>)
 800c182:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c184:	4b07      	ldr	r3, [pc, #28]	@ (800c1a4 <TL_Init+0x48>)
 800c186:	4a0e      	ldr	r2, [pc, #56]	@ (800c1c0 <TL_Init+0x64>)
 800c188:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c18a:	4b06      	ldr	r3, [pc, #24]	@ (800c1a4 <TL_Init+0x48>)
 800c18c:	4a0d      	ldr	r2, [pc, #52]	@ (800c1c4 <TL_Init+0x68>)
 800c18e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c190:	4b04      	ldr	r3, [pc, #16]	@ (800c1a4 <TL_Init+0x48>)
 800c192:	4a0d      	ldr	r2, [pc, #52]	@ (800c1c8 <TL_Init+0x6c>)
 800c194:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c196:	4b03      	ldr	r3, [pc, #12]	@ (800c1a4 <TL_Init+0x48>)
 800c198:	4a0c      	ldr	r2, [pc, #48]	@ (800c1cc <TL_Init+0x70>)
 800c19a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c19c:	f002 f9b6 	bl	800e50c <HW_IPCC_Init>

  return;
 800c1a0:	bf00      	nop
}
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	20030000 	.word	0x20030000
 800c1a8:	20030028 	.word	0x20030028
 800c1ac:	20030048 	.word	0x20030048
 800c1b0:	20030058 	.word	0x20030058
 800c1b4:	20030068 	.word	0x20030068
 800c1b8:	20030070 	.word	0x20030070
 800c1bc:	20030078 	.word	0x20030078
 800c1c0:	20030080 	.word	0x20030080
 800c1c4:	2003009c 	.word	0x2003009c
 800c1c8:	200300a0 	.word	0x200300a0
 800c1cc:	200300ac 	.word	0x200300ac

0800c1d0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c1dc:	4811      	ldr	r0, [pc, #68]	@ (800c224 <TL_BLE_Init+0x54>)
 800c1de:	f000 fa6f 	bl	800c6c0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c1e2:	4b11      	ldr	r3, [pc, #68]	@ (800c228 <TL_BLE_Init+0x58>)
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68da      	ldr	r2, [r3, #12]
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c22c <TL_BLE_Init+0x5c>)
 800c1fc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	4a08      	ldr	r2, [pc, #32]	@ (800c224 <TL_BLE_Init+0x54>)
 800c202:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c204:	f002 f998 	bl	800e538 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a08      	ldr	r2, [pc, #32]	@ (800c230 <TL_BLE_Init+0x60>)
 800c20e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	4a07      	ldr	r2, [pc, #28]	@ (800c234 <TL_BLE_Init+0x64>)
 800c216:	6013      	str	r3, [r2, #0]

  return 0;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	200300c8 	.word	0x200300c8
 800c228:	20030000 	.word	0x20030000
 800c22c:	20030a58 	.word	0x20030a58
 800c230:	2000069c 	.word	0x2000069c
 800c234:	200006a0 	.word	0x200006a0

0800c238 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c244:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <TL_BLE_SendCmd+0x34>)
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2201      	movs	r2, #1
 800c24c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c24e:	4b07      	ldr	r3, [pc, #28]	@ (800c26c <TL_BLE_SendCmd+0x34>)
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4619      	mov	r1, r3
 800c256:	2001      	movs	r0, #1
 800c258:	f000 f8d6 	bl	800c408 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c25c:	f002 f976 	bl	800e54c <HW_IPCC_BLE_SendCmd>

  return 0;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20030000 	.word	0x20030000

0800c270 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c27c:	480d      	ldr	r0, [pc, #52]	@ (800c2b4 <TL_SYS_Init+0x44>)
 800c27e:	f000 fa1f 	bl	800c6c0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c282:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b8 <TL_SYS_Init+0x48>)
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	689a      	ldr	r2, [r3, #8]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4a08      	ldr	r2, [pc, #32]	@ (800c2b4 <TL_SYS_Init+0x44>)
 800c294:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c296:	f002 f963 	bl	800e560 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a07      	ldr	r2, [pc, #28]	@ (800c2bc <TL_SYS_Init+0x4c>)
 800c2a0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	4a06      	ldr	r2, [pc, #24]	@ (800c2c0 <TL_SYS_Init+0x50>)
 800c2a8:	6013      	str	r3, [r2, #0]

  return 0;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	200300d0 	.word	0x200300d0
 800c2b8:	20030000 	.word	0x20030000
 800c2bc:	200006a4 	.word	0x200006a4
 800c2c0:	200006a8 	.word	0x200006a8

0800c2c4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c2d0:	4b09      	ldr	r3, [pc, #36]	@ (800c2f8 <TL_SYS_SendCmd+0x34>)
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2210      	movs	r2, #16
 800c2d8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c2da:	4b07      	ldr	r3, [pc, #28]	@ (800c2f8 <TL_SYS_SendCmd+0x34>)
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	2004      	movs	r0, #4
 800c2e4:	f000 f890 	bl	800c408 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c2e8:	f002 f944 	bl	800e574 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20030000 	.word	0x20030000

0800c2fc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c304:	4817      	ldr	r0, [pc, #92]	@ (800c364 <TL_MM_Init+0x68>)
 800c306:	f000 f9db 	bl	800c6c0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c30a:	4817      	ldr	r0, [pc, #92]	@ (800c368 <TL_MM_Init+0x6c>)
 800c30c:	f000 f9d8 	bl	800c6c0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c310:	4b16      	ldr	r3, [pc, #88]	@ (800c36c <TL_MM_Init+0x70>)
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	4a16      	ldr	r2, [pc, #88]	@ (800c370 <TL_MM_Init+0x74>)
 800c316:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c318:	4b15      	ldr	r3, [pc, #84]	@ (800c370 <TL_MM_Init+0x74>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	6892      	ldr	r2, [r2, #8]
 800c320:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c322:	4b13      	ldr	r3, [pc, #76]	@ (800c370 <TL_MM_Init+0x74>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	68d2      	ldr	r2, [r2, #12]
 800c32a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c32c:	4b10      	ldr	r3, [pc, #64]	@ (800c370 <TL_MM_Init+0x74>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a0c      	ldr	r2, [pc, #48]	@ (800c364 <TL_MM_Init+0x68>)
 800c332:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c334:	4b0e      	ldr	r3, [pc, #56]	@ (800c370 <TL_MM_Init+0x74>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	6812      	ldr	r2, [r2, #0]
 800c33c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c33e:	4b0c      	ldr	r3, [pc, #48]	@ (800c370 <TL_MM_Init+0x74>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	6852      	ldr	r2, [r2, #4]
 800c346:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c348:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <TL_MM_Init+0x74>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6912      	ldr	r2, [r2, #16]
 800c350:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c352:	4b07      	ldr	r3, [pc, #28]	@ (800c370 <TL_MM_Init+0x74>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	6952      	ldr	r2, [r2, #20]
 800c35a:	619a      	str	r2, [r3, #24]

  return;
 800c35c:	bf00      	nop
}
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200300b8 	.word	0x200300b8
 800c368:	20000694 	.word	0x20000694
 800c36c:	20030000 	.word	0x20030000
 800c370:	200006ac 	.word	0x200006ac

0800c374 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	4807      	ldr	r0, [pc, #28]	@ (800c39c <TL_MM_EvtDone+0x28>)
 800c380:	f000 f9f6 	bl	800c770 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	2000      	movs	r0, #0
 800c388:	f000 f83e 	bl	800c408 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c38c:	4804      	ldr	r0, [pc, #16]	@ (800c3a0 <TL_MM_EvtDone+0x2c>)
 800c38e:	f002 f8ff 	bl	800e590 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c392:	bf00      	nop
}
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20000694 	.word	0x20000694
 800c3a0:	0800c3a5 	.word	0x0800c3a5

0800c3a4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c3aa:	e00c      	b.n	800c3c6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c3ac:	1d3b      	adds	r3, r7, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	480a      	ldr	r0, [pc, #40]	@ (800c3dc <SendFreeBuf+0x38>)
 800c3b2:	f000 fa24 	bl	800c7fe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e0 <SendFreeBuf+0x3c>)
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	691b      	ldr	r3, [r3, #16]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 f9d5 	bl	800c770 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c3c6:	4805      	ldr	r0, [pc, #20]	@ (800c3dc <SendFreeBuf+0x38>)
 800c3c8:	f000 f98a 	bl	800c6e0 <LST_is_empty>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0ec      	beq.n	800c3ac <SendFreeBuf+0x8>
  }

  return;
 800c3d2:	bf00      	nop
}
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20000694 	.word	0x20000694
 800c3e0:	20030000 	.word	0x20030000

0800c3e4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c3e8:	4805      	ldr	r0, [pc, #20]	@ (800c400 <TL_TRACES_Init+0x1c>)
 800c3ea:	f000 f969 	bl	800c6c0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c3ee:	4b05      	ldr	r3, [pc, #20]	@ (800c404 <TL_TRACES_Init+0x20>)
 800c3f0:	695b      	ldr	r3, [r3, #20]
 800c3f2:	4a03      	ldr	r2, [pc, #12]	@ (800c400 <TL_TRACES_Init+0x1c>)
 800c3f4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c3f6:	f002 f8ed 	bl	800e5d4 <HW_IPCC_TRACES_Init>

  return;
 800c3fa:	bf00      	nop
}
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	bf00      	nop
 800c400:	200300c0 	.word	0x200300c0
 800c404:	20030000 	.word	0x20030000

0800c408 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c408:	b480      	push	{r7}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	6039      	str	r1, [r7, #0]
 800c412:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800c414:	79fb      	ldrb	r3, [r7, #7]
 800c416:	2b06      	cmp	r3, #6
 800c418:	d845      	bhi.n	800c4a6 <OutputDbgTrace+0x9e>
 800c41a:	a201      	add	r2, pc, #4	@ (adr r2, 800c420 <OutputDbgTrace+0x18>)
 800c41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c420:	0800c43d 	.word	0x0800c43d
 800c424:	0800c461 	.word	0x0800c461
 800c428:	0800c467 	.word	0x0800c467
 800c42c:	0800c47b 	.word	0x0800c47b
 800c430:	0800c487 	.word	0x0800c487
 800c434:	0800c48d 	.word	0x0800c48d
 800c438:	0800c49b 	.word	0x0800c49b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	7a5b      	ldrb	r3, [r3, #9]
 800c444:	2bff      	cmp	r3, #255	@ 0xff
 800c446:	d005      	beq.n	800c454 <OutputDbgTrace+0x4c>
 800c448:	2bff      	cmp	r3, #255	@ 0xff
 800c44a:	dc05      	bgt.n	800c458 <OutputDbgTrace+0x50>
 800c44c:	2b0e      	cmp	r3, #14
 800c44e:	d005      	beq.n	800c45c <OutputDbgTrace+0x54>
 800c450:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c452:	e001      	b.n	800c458 <OutputDbgTrace+0x50>
          break;
 800c454:	bf00      	nop
 800c456:	e027      	b.n	800c4a8 <OutputDbgTrace+0xa0>
          break;
 800c458:	bf00      	nop
 800c45a:	e025      	b.n	800c4a8 <OutputDbgTrace+0xa0>
          break;
 800c45c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c45e:	e023      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c464:	e020      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	7a5b      	ldrb	r3, [r3, #9]
 800c46e:	2b0e      	cmp	r3, #14
 800c470:	d001      	beq.n	800c476 <OutputDbgTrace+0x6e>
 800c472:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c474:	e000      	b.n	800c478 <OutputDbgTrace+0x70>
          break;
 800c476:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c478:	e016      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	7a5b      	ldrb	r3, [r3, #9]
 800c482:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c484:	e010      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c48a:	e00d      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	785b      	ldrb	r3, [r3, #1]
 800c494:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800c496:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c498:	e006      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	7a5b      	ldrb	r3, [r3, #9]
 800c4a2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c4a4:	e000      	b.n	800c4a8 <OutputDbgTrace+0xa0>

    default:
      break;
 800c4a6:	bf00      	nop
  }

  return;
 800c4a8:	bf00      	nop
}
 800c4aa:	371c      	adds	r7, #28
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800c4c0:	215c      	movs	r1, #92	@ 0x5c
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f003 f992 	bl	800f7ec <strrchr>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d007      	beq.n	800c4de <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800c4ce:	215c      	movs	r1, #92	@ 0x5c
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f003 f98b 	bl	800f7ec <strrchr>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	3301      	adds	r3, #1
 800c4da:	60fb      	str	r3, [r7, #12]
 800c4dc:	e00d      	b.n	800c4fa <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800c4de:	212f      	movs	r1, #47	@ 0x2f
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f003 f983 	bl	800f7ec <strrchr>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d006      	beq.n	800c4fa <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800c4ec:	212f      	movs	r1, #47	@ 0x2f
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f003 f97c 	bl	800f7ec <strrchr>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}

0800c504 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c50a:	f3ef 8310 	mrs	r3, PRIMASK
 800c50e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c510:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800c512:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c514:	b672      	cpsid	i
}
 800c516:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800c518:	1cbb      	adds	r3, r7, #2
 800c51a:	4619      	mov	r1, r3
 800c51c:	4812      	ldr	r0, [pc, #72]	@ (800c568 <DbgTrace_TxCpltCallback+0x64>)
 800c51e:	f000 fbe5 	bl	800ccec <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800c522:	1cbb      	adds	r3, r7, #2
 800c524:	4619      	mov	r1, r3
 800c526:	4810      	ldr	r0, [pc, #64]	@ (800c568 <DbgTrace_TxCpltCallback+0x64>)
 800c528:	f000 fccf 	bl	800ceca <CircularQueue_Sense>
 800c52c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00c      	beq.n	800c54e <DbgTrace_TxCpltCallback+0x4a>
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	f383 8810 	msr	PRIMASK, r3
}
 800c53e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800c540:	887b      	ldrh	r3, [r7, #2]
 800c542:	4a0a      	ldr	r2, [pc, #40]	@ (800c56c <DbgTrace_TxCpltCallback+0x68>)
 800c544:	4619      	mov	r1, r3
 800c546:	6938      	ldr	r0, [r7, #16]
 800c548:	f7f5 fc45 	bl	8001dd6 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800c54c:	e008      	b.n	800c560 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800c54e:	4b08      	ldr	r3, [pc, #32]	@ (800c570 <DbgTrace_TxCpltCallback+0x6c>)
 800c550:	2201      	movs	r2, #1
 800c552:	701a      	strb	r2, [r3, #0]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f383 8810 	msr	PRIMASK, r3
}
 800c55e:	bf00      	nop
}
 800c560:	bf00      	nop
 800c562:	3718      	adds	r7, #24
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	200006b0 	.word	0x200006b0
 800c56c:	0800c505 	.word	0x0800c505
 800c570:	20000011 	.word	0x20000011

0800c574 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800c57a:	f7f5 fc26 	bl	8001dca <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800c57e:	2302      	movs	r3, #2
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	2300      	movs	r3, #0
 800c584:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c588:	4903      	ldr	r1, [pc, #12]	@ (800c598 <DbgTraceInit+0x24>)
 800c58a:	4804      	ldr	r0, [pc, #16]	@ (800c59c <DbgTraceInit+0x28>)
 800c58c:	f000 f956 	bl	800c83c <CircularQueue_Init>
#endif 
#endif
  return;
 800c590:	bf00      	nop
}
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	200006d0 	.word	0x200006d0
 800c59c:	200006b0 	.word	0x200006b0

0800c5a0 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f000 f805 	bl	800c5c0 <DbgTraceWrite>
 800c5b6:	4603      	mov	r3, r0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800c5d8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e0:	d102      	bne.n	800c5e8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5e6:	e037      	b.n	800c658 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b01      	cmp	r3, #1
 800c5ec:	d006      	beq.n	800c5fc <DbgTraceWrite+0x3c>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d003      	beq.n	800c5fc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800c5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5fa:	e02d      	b.n	800c658 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d02a      	beq.n	800c658 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800c606:	b672      	cpsid	i
}
 800c608:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	2301      	movs	r3, #1
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	4814      	ldr	r0, [pc, #80]	@ (800c664 <DbgTraceWrite+0xa4>)
 800c614:	f000 f944 	bl	800c8a0 <CircularQueue_Add>
 800c618:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d015      	beq.n	800c64c <DbgTraceWrite+0x8c>
 800c620:	4b11      	ldr	r3, [pc, #68]	@ (800c668 <DbgTraceWrite+0xa8>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d010      	beq.n	800c64c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800c62a:	4b0f      	ldr	r3, [pc, #60]	@ (800c668 <DbgTraceWrite+0xa8>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	701a      	strb	r2, [r3, #0]
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f383 8810 	msr	PRIMASK, r3
}
 800c63a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	4a0a      	ldr	r2, [pc, #40]	@ (800c66c <DbgTraceWrite+0xac>)
 800c642:	4619      	mov	r1, r3
 800c644:	69f8      	ldr	r0, [r7, #28]
 800c646:	f7f5 fbc6 	bl	8001dd6 <DbgOutputTraces>
 800c64a:	e005      	b.n	800c658 <DbgTraceWrite+0x98>
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f383 8810 	msr	PRIMASK, r3
}
 800c656:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3728      	adds	r7, #40	@ 0x28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	200006b0 	.word	0x200006b0
 800c668:	20000011 	.word	0x20000011
 800c66c:	0800c505 	.word	0x0800c505

0800c670 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c67a:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b8 <OTP_Read+0x48>)
 800c67c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c67e:	e002      	b.n	800c686 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	3b08      	subs	r3, #8
 800c684:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	3307      	adds	r3, #7
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	79fa      	ldrb	r2, [r7, #7]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d003      	beq.n	800c69a <OTP_Read+0x2a>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4a09      	ldr	r2, [pc, #36]	@ (800c6bc <OTP_Read+0x4c>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d1f2      	bne.n	800c680 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3307      	adds	r3, #7
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	79fa      	ldrb	r2, [r7, #7]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d001      	beq.n	800c6aa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr
 800c6b8:	1fff73f8 	.word	0x1fff73f8
 800c6bc:	1fff7000 	.word	0x1fff7000

0800c6c0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c6f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6f2:	b672      	cpsid	i
}
 800c6f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d102      	bne.n	800c706 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c700:	2301      	movs	r3, #1
 800c702:	75fb      	strb	r3, [r7, #23]
 800c704:	e001      	b.n	800c70a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c706:	2300      	movs	r3, #0
 800c708:	75fb      	strb	r3, [r7, #23]
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	f383 8810 	msr	PRIMASK, r3
}
 800c714:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c716:	7dfb      	ldrb	r3, [r7, #23]
}
 800c718:	4618      	mov	r0, r3
 800c71a:	371c      	adds	r7, #28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c72e:	f3ef 8310 	mrs	r3, PRIMASK
 800c732:	60fb      	str	r3, [r7, #12]
  return(result);
 800c734:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c736:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c738:	b672      	cpsid	i
}
 800c73a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	683a      	ldr	r2, [r7, #0]
 800c74e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	605a      	str	r2, [r3, #4]
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f383 8810 	msr	PRIMASK, r3
}
 800c762:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c764:	bf00      	nop
 800c766:	371c      	adds	r7, #28
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c77a:	f3ef 8310 	mrs	r3, PRIMASK
 800c77e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c780:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c784:	b672      	cpsid	i
}
 800c786:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685a      	ldr	r2, [r3, #4]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	683a      	ldr	r2, [r7, #0]
 800c79a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f383 8810 	msr	PRIMASK, r3
}
 800c7ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c7b0:	bf00      	nop
 800c7b2:	371c      	adds	r7, #28
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7c4:	f3ef 8310 	mrs	r3, PRIMASK
 800c7c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c7cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7ce:	b672      	cpsid	i
}
 800c7d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6812      	ldr	r2, [r2, #0]
 800c7da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	6852      	ldr	r2, [r2, #4]
 800c7e4:	605a      	str	r2, [r3, #4]
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	f383 8810 	msr	PRIMASK, r3
}
 800c7f0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c7f2:	bf00      	nop
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b086      	sub	sp, #24
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c808:	f3ef 8310 	mrs	r3, PRIMASK
 800c80c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c80e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c812:	b672      	cpsid	i
}
 800c814:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4618      	mov	r0, r3
 800c824:	f7ff ffca 	bl	800c7bc <LST_remove_node>
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	f383 8810 	msr	PRIMASK, r3
}
 800c832:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c834:	bf00      	nop
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	68ba      	ldr	r2, [r7, #8]
 800c84e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2200      	movs	r2, #0
 800c85a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	887a      	ldrh	r2, [r7, #2]
 800c872:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	7e3a      	ldrb	r2, [r7, #24]
 800c878:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c87a:	7e3b      	ldrb	r3, [r7, #24]
 800c87c:	f003 0302 	and.w	r3, r3, #2
 800c880:	2b00      	cmp	r3, #0
 800c882:	d006      	beq.n	800c892 <CircularQueue_Init+0x56>
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	891b      	ldrh	r3, [r3, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c88c:	f04f 33ff 	mov.w	r3, #4294967295
 800c890:	e000      	b.n	800c894 <CircularQueue_Init+0x58>
  }
  return 0;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08e      	sub	sp, #56	@ 0x38
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c8bc:	2300      	movs	r3, #0
 800c8be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	891b      	ldrh	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <CircularQueue_Add+0x38>
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	e000      	b.n	800c8da <CircularQueue_Add+0x3a>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d029      	beq.n	800c938 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	891b      	ldrh	r3, [r3, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d122      	bne.n	800c932 <CircularQueue_Add+0x92>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	691b      	ldr	r3, [r3, #16]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	1c59      	adds	r1, r3, #1
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	4299      	cmp	r1, r3
 800c90a:	d306      	bcc.n	800c91a <CircularQueue_Add+0x7a>
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6919      	ldr	r1, [r3, #16]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	1acb      	subs	r3, r1, r3
 800c916:	3301      	adds	r3, #1
 800c918:	e002      	b.n	800c920 <CircularQueue_Add+0x80>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	3301      	adds	r3, #1
 800c920:	4413      	add	r3, r2
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	021b      	lsls	r3, r3, #8
 800c926:	b29b      	uxth	r3, r3
 800c928:	4403      	add	r3, r0
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	3302      	adds	r3, #2
 800c92e:	b29b      	uxth	r3, r3
 800c930:	e001      	b.n	800c936 <CircularQueue_Add+0x96>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	891b      	ldrh	r3, [r3, #8]
 800c936:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	891b      	ldrh	r3, [r3, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	891b      	ldrh	r3, [r3, #8]
 800c944:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	691a      	ldr	r2, [r3, #16]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d307      	bcc.n	800c962 <CircularQueue_Add+0xc2>
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	685a      	ldr	r2, [r3, #4]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6919      	ldr	r1, [r3, #16]
 800c95a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c95c:	440b      	add	r3, r1
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	e000      	b.n	800c964 <CircularQueue_Add+0xc4>
 800c962:	2300      	movs	r3, #0
 800c964:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c966:	88fa      	ldrh	r2, [r7, #6]
 800c968:	7ffb      	ldrb	r3, [r7, #31]
 800c96a:	4413      	add	r3, r2
 800c96c:	461a      	mov	r2, r3
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	fb02 f303 	mul.w	r3, r2, r3
 800c974:	69ba      	ldr	r2, [r7, #24]
 800c976:	429a      	cmp	r2, r3
 800c978:	d80b      	bhi.n	800c992 <CircularQueue_Add+0xf2>
 800c97a:	88fa      	ldrh	r2, [r7, #6]
 800c97c:	7ffb      	ldrb	r3, [r7, #31]
 800c97e:	4413      	add	r3, r2
 800c980:	461a      	mov	r2, r3
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	fbb3 f1f2 	udiv	r1, r3, r2
 800c988:	fb01 f202 	mul.w	r2, r1, r2
 800c98c:	1a9b      	subs	r3, r3, r2
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	e000      	b.n	800c994 <CircularQueue_Add+0xf4>
 800c992:	2300      	movs	r3, #0
 800c994:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c996:	7dfa      	ldrb	r2, [r7, #23]
 800c998:	7ffb      	ldrb	r3, [r7, #31]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	bf8c      	ite	hi
 800c99e:	2301      	movhi	r3, #1
 800c9a0:	2300      	movls	r3, #0
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c9a6:	7fbb      	ldrb	r3, [r7, #30]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d008      	beq.n	800c9be <CircularQueue_Add+0x11e>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	7f1b      	ldrb	r3, [r3, #28]
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <CircularQueue_Add+0x11e>
 800c9b8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	e000      	b.n	800c9c0 <CircularQueue_Add+0x120>
 800c9be:	8bbb      	ldrh	r3, [r7, #28]
 800c9c0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c9c2:	7fbb      	ldrb	r3, [r7, #30]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d008      	beq.n	800c9da <CircularQueue_Add+0x13a>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	7f1b      	ldrb	r3, [r3, #28]
 800c9cc:	f003 0302 	and.w	r3, r3, #2
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <CircularQueue_Add+0x13a>
 800c9d4:	7ffb      	ldrb	r3, [r7, #31]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	e000      	b.n	800c9dc <CircularQueue_Add+0x13c>
 800c9da:	8bbb      	ldrh	r3, [r7, #28]
 800c9dc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c9de:	88fb      	ldrh	r3, [r7, #6]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 817e 	beq.w	800cce2 <CircularQueue_Add+0x442>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	695a      	ldr	r2, [r3, #20]
 800c9ea:	88f9      	ldrh	r1, [r7, #6]
 800c9ec:	7ffb      	ldrb	r3, [r7, #31]
 800c9ee:	440b      	add	r3, r1
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	fb01 f303 	mul.w	r3, r1, r3
 800c9f8:	441a      	add	r2, r3
 800c9fa:	8bbb      	ldrh	r3, [r7, #28]
 800c9fc:	441a      	add	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	f200 816d 	bhi.w	800cce2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ca08:	2300      	movs	r3, #0
 800ca0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca0c:	e14a      	b.n	800cca4 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	691a      	ldr	r2, [r3, #16]
 800ca12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca14:	441a      	add	r2, r3
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d307      	bcc.n	800ca2e <CircularQueue_Add+0x18e>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	691a      	ldr	r2, [r3, #16]
 800ca22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca24:	441a      	add	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	e003      	b.n	800ca36 <CircularQueue_Add+0x196>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	691a      	ldr	r2, [r3, #16]
 800ca32:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca34:	4413      	add	r3, r2
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	691b      	ldr	r3, [r3, #16]
 800ca3e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	891b      	ldrh	r3, [r3, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d130      	bne.n	800caaa <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	1c59      	adds	r1, r3, #1
 800ca50:	6339      	str	r1, [r7, #48]	@ 0x30
 800ca52:	4413      	add	r3, r2
 800ca54:	88fa      	ldrh	r2, [r7, #6]
 800ca56:	b2d2      	uxtb	r2, r2
 800ca58:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d304      	bcc.n	800ca6e <CircularQueue_Add+0x1ce>
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	e000      	b.n	800ca70 <CircularQueue_Add+0x1d0>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca70:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	0a1b      	lsrs	r3, r3, #8
 800ca76:	b298      	uxth	r0, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7e:	1c59      	adds	r1, r3, #1
 800ca80:	6339      	str	r1, [r7, #48]	@ 0x30
 800ca82:	4413      	add	r3, r2
 800ca84:	b2c2      	uxtb	r2, r0
 800ca86:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d304      	bcc.n	800ca9c <CircularQueue_Add+0x1fc>
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	e000      	b.n	800ca9e <CircularQueue_Add+0x1fe>
 800ca9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	1c9a      	adds	r2, r3, #2
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800caaa:	88fa      	ldrh	r2, [r7, #6]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6859      	ldr	r1, [r3, #4]
 800cab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab2:	1acb      	subs	r3, r1, r3
 800cab4:	4293      	cmp	r3, r2
 800cab6:	bf28      	it	cs
 800cab8:	4613      	movcs	r3, r2
 800caba:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800cabc:	88fb      	ldrh	r3, [r7, #6]
 800cabe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d007      	beq.n	800cad4 <CircularQueue_Add+0x234>
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cac8:	429a      	cmp	r2, r3
 800caca:	d225      	bcs.n	800cb18 <CircularQueue_Add+0x278>
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	7f1b      	ldrb	r3, [r3, #28]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d121      	bne.n	800cb18 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cada:	18d0      	adds	r0, r2, r3
 800cadc:	88fb      	ldrh	r3, [r7, #6]
 800cade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cae0:	fb02 f303 	mul.w	r3, r2, r3
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	4413      	add	r3, r2
 800cae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800caea:	4619      	mov	r1, r3
 800caec:	f002 ff0b 	bl	800f906 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	695a      	ldr	r2, [r3, #20]
 800caf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf6:	441a      	add	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800cafc:	2300      	movs	r3, #0
 800cafe:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800cb00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb02:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800cb04:	88fa      	ldrh	r2, [r7, #6]
 800cb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb08:	1ad3      	subs	r3, r2, r3
 800cb0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800cb0c:	7ffb      	ldrb	r3, [r7, #31]
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	88fb      	ldrh	r3, [r7, #6]
 800cb12:	4413      	add	r3, r2
 800cb14:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cb16:	e0a4      	b.n	800cc62 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800cb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 80a1 	beq.w	800cc62 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	7f1b      	ldrb	r3, [r3, #28]
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d03a      	beq.n	800cba2 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	891b      	ldrh	r3, [r3, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10d      	bne.n	800cb50 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	3b02      	subs	r3, #2
 800cb3c:	4413      	add	r3, r2
 800cb3e:	22ff      	movs	r2, #255	@ 0xff
 800cb40:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	22ff      	movs	r2, #255	@ 0xff
 800cb4e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	695a      	ldr	r2, [r3, #20]
 800cb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb56:	441a      	add	r2, r3
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800cb60:	88fb      	ldrh	r3, [r7, #6]
 800cb62:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800cb64:	2300      	movs	r3, #0
 800cb66:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	891b      	ldrh	r3, [r3, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d16f      	bne.n	800cc50 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	1c59      	adds	r1, r3, #1
 800cb78:	6339      	str	r1, [r7, #48]	@ 0x30
 800cb7a:	4413      	add	r3, r2
 800cb7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb7e:	b2d2      	uxtb	r2, r2
 800cb80:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800cb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb84:	0a18      	lsrs	r0, r3, #8
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb8c:	1c59      	adds	r1, r3, #1
 800cb8e:	6339      	str	r1, [r7, #48]	@ 0x30
 800cb90:	4413      	add	r3, r2
 800cb92:	b2c2      	uxtb	r2, r0
 800cb94:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	1c9a      	adds	r2, r3, #2
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	615a      	str	r2, [r3, #20]
 800cba0:	e056      	b.n	800cc50 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	7f1b      	ldrb	r3, [r3, #28]
 800cba6:	f003 0302 	and.w	r3, r3, #2
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d050      	beq.n	800cc50 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	891b      	ldrh	r3, [r3, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d14a      	bne.n	800cc4c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbc:	3b02      	subs	r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbc2:	b2d2      	uxtb	r2, r2
 800cbc4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800cbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc8:	0a19      	lsrs	r1, r3, #8
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	4413      	add	r3, r2
 800cbd4:	b2ca      	uxtb	r2, r1
 800cbd6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbde:	18d0      	adds	r0, r2, r3
 800cbe0:	88fb      	ldrh	r3, [r7, #6]
 800cbe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbe4:	fb02 f303 	mul.w	r3, r2, r3
 800cbe8:	68ba      	ldr	r2, [r7, #8]
 800cbea:	4413      	add	r3, r2
 800cbec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbee:	4619      	mov	r1, r3
 800cbf0:	f002 fe89 	bl	800f906 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	695a      	ldr	r2, [r3, #20]
 800cbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfa:	441a      	add	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc02:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800cc04:	88fa      	ldrh	r2, [r7, #6]
 800cc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	1c5a      	adds	r2, r3, #1
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800cc16:	2300      	movs	r3, #0
 800cc18:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc20:	1c59      	adds	r1, r3, #1
 800cc22:	6339      	str	r1, [r7, #48]	@ 0x30
 800cc24:	4413      	add	r3, r2
 800cc26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc28:	b2d2      	uxtb	r2, r2
 800cc2a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800cc2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2e:	0a18      	lsrs	r0, r3, #8
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681a      	ldr	r2, [r3, #0]
 800cc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc36:	1c59      	adds	r1, r3, #1
 800cc38:	6339      	str	r1, [r7, #48]	@ 0x30
 800cc3a:	4413      	add	r3, r2
 800cc3c:	b2c2      	uxtb	r2, r0
 800cc3e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	695b      	ldr	r3, [r3, #20]
 800cc44:	1c9a      	adds	r2, r3, #2
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	615a      	str	r2, [r3, #20]
 800cc4a:	e001      	b.n	800cc50 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	e049      	b.n	800cce4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800cc50:	7ffb      	ldrb	r3, [r7, #31]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	4413      	add	r3, r2
 800cc5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800cc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d015      	beq.n	800cc94 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6e:	18d0      	adds	r0, r2, r3
 800cc70:	88fb      	ldrh	r3, [r7, #6]
 800cc72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc74:	fb03 f202 	mul.w	r2, r3, r2
 800cc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7a:	4413      	add	r3, r2
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	4413      	add	r3, r2
 800cc80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc82:	4619      	mov	r1, r3
 800cc84:	f002 fe3f 	bl	800f906 <memcpy>
        q->byteCount += NbBytesToCopy;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	695a      	ldr	r2, [r3, #20]
 800cc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8e:	441a      	add	r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	1c5a      	adds	r2, r3, #1
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800cc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca0:	3301      	adds	r3, #1
 800cca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	f4ff aeb0 	bcc.w	800ca0e <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6919      	ldr	r1, [r3, #16]
 800ccb6:	7ffb      	ldrb	r3, [r7, #31]
 800ccb8:	4419      	add	r1, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	4299      	cmp	r1, r3
 800ccc0:	d307      	bcc.n	800ccd2 <CircularQueue_Add+0x432>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6919      	ldr	r1, [r3, #16]
 800ccc6:	7ffb      	ldrb	r3, [r7, #31]
 800ccc8:	4419      	add	r1, r3
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	1acb      	subs	r3, r1, r3
 800ccd0:	e003      	b.n	800ccda <CircularQueue_Add+0x43a>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6919      	ldr	r1, [r3, #16]
 800ccd6:	7ffb      	ldrb	r3, [r7, #31]
 800ccd8:	440b      	add	r3, r1
 800ccda:	4413      	add	r3, r2
 800ccdc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	e000      	b.n	800cce4 <CircularQueue_Add+0x444>
    return NULL;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3738      	adds	r7, #56	@ 0x38
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b085      	sub	sp, #20
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	891b      	ldrh	r3, [r3, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <CircularQueue_Remove+0x1e>
 800cd06:	2302      	movs	r3, #2
 800cd08:	e000      	b.n	800cd0c <CircularQueue_Remove+0x20>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	695b      	ldr	r3, [r3, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 80ca 	beq.w	800ceb0 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	891b      	ldrh	r3, [r3, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d120      	bne.n	800cd66 <CircularQueue_Remove+0x7a>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	1c59      	adds	r1, r3, #1
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	4299      	cmp	r1, r3
 800cd42:	d306      	bcc.n	800cd52 <CircularQueue_Remove+0x66>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68d9      	ldr	r1, [r3, #12]
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	1acb      	subs	r3, r1, r3
 800cd4e:	3301      	adds	r3, #1
 800cd50:	e002      	b.n	800cd58 <CircularQueue_Remove+0x6c>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	3301      	adds	r3, #1
 800cd58:	4413      	add	r3, r2
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	021b      	lsls	r3, r3, #8
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	4403      	add	r3, r0
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	e001      	b.n	800cd6a <CircularQueue_Remove+0x7e>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	891b      	ldrh	r3, [r3, #8]
 800cd6a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7f1b      	ldrb	r3, [r3, #28]
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d056      	beq.n	800ce26 <CircularQueue_Remove+0x13a>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7f1b      	ldrb	r3, [r3, #28]
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d150      	bne.n	800ce26 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cd84:	897b      	ldrh	r3, [r7, #10]
 800cd86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d103      	bne.n	800cd96 <CircularQueue_Remove+0xaa>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	891b      	ldrh	r3, [r3, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d012      	beq.n	800cdbc <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d941      	bls.n	800ce26 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	891b      	ldrh	r3, [r3, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d03d      	beq.n	800ce26 <CircularQueue_Remove+0x13a>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685a      	ldr	r2, [r3, #4]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	1ad3      	subs	r3, r2, r3
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	8912      	ldrh	r2, [r2, #8]
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d234      	bcs.n	800ce26 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	695a      	ldr	r2, [r3, #20]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68d9      	ldr	r1, [r3, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	1acb      	subs	r3, r1, r3
 800cdca:	441a      	add	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	891b      	ldrh	r3, [r3, #8]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d120      	bne.n	800ce20 <CircularQueue_Remove+0x134>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681a      	ldr	r2, [r3, #0]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	4413      	add	r3, r2
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4618      	mov	r0, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	1c59      	adds	r1, r3, #1
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	4299      	cmp	r1, r3
 800cdfc:	d306      	bcc.n	800ce0c <CircularQueue_Remove+0x120>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68d9      	ldr	r1, [r3, #12]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	1acb      	subs	r3, r1, r3
 800ce08:	3301      	adds	r3, #1
 800ce0a:	e002      	b.n	800ce12 <CircularQueue_Remove+0x126>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	3301      	adds	r3, #1
 800ce12:	4413      	add	r3, r2
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	021b      	lsls	r3, r3, #8
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	4403      	add	r3, r0
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	e001      	b.n	800ce24 <CircularQueue_Remove+0x138>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	891b      	ldrh	r3, [r3, #8]
 800ce24:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	68d9      	ldr	r1, [r3, #12]
 800ce2e:	7a7b      	ldrb	r3, [r7, #9]
 800ce30:	4419      	add	r1, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	4299      	cmp	r1, r3
 800ce38:	d307      	bcc.n	800ce4a <CircularQueue_Remove+0x15e>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	68d9      	ldr	r1, [r3, #12]
 800ce3e:	7a7b      	ldrb	r3, [r7, #9]
 800ce40:	4419      	add	r1, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	1acb      	subs	r3, r1, r3
 800ce48:	e003      	b.n	800ce52 <CircularQueue_Remove+0x166>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	68d9      	ldr	r1, [r3, #12]
 800ce4e:	7a7b      	ldrb	r3, [r7, #9]
 800ce50:	440b      	add	r3, r1
 800ce52:	4413      	add	r3, r2
 800ce54:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	695b      	ldr	r3, [r3, #20]
 800ce5a:	8979      	ldrh	r1, [r7, #10]
 800ce5c:	7a7a      	ldrb	r2, [r7, #9]
 800ce5e:	440a      	add	r2, r1
 800ce60:	1a9a      	subs	r2, r3, r2
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	695b      	ldr	r3, [r3, #20]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d01b      	beq.n	800cea6 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	897b      	ldrh	r3, [r7, #10]
 800ce74:	441a      	add	r2, r3
 800ce76:	7a7b      	ldrb	r3, [r7, #9]
 800ce78:	441a      	add	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d309      	bcc.n	800ce96 <CircularQueue_Remove+0x1aa>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68da      	ldr	r2, [r3, #12]
 800ce86:	897b      	ldrh	r3, [r7, #10]
 800ce88:	441a      	add	r2, r3
 800ce8a:	7a7b      	ldrb	r3, [r7, #9]
 800ce8c:	441a      	add	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	e005      	b.n	800cea2 <CircularQueue_Remove+0x1b6>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	68da      	ldr	r2, [r3, #12]
 800ce9a:	897b      	ldrh	r3, [r7, #10]
 800ce9c:	441a      	add	r2, r3
 800ce9e:	7a7b      	ldrb	r3, [r7, #9]
 800cea0:	4413      	add	r3, r2
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	1e5a      	subs	r2, r3, #1
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	897a      	ldrh	r2, [r7, #10]
 800ceba:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800cebc:	68fb      	ldr	r3, [r7, #12]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3714      	adds	r7, #20
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ceca:	b480      	push	{r7}
 800cecc:	b087      	sub	sp, #28
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800ced8:	2300      	movs	r3, #0
 800ceda:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	891b      	ldrh	r3, [r3, #8]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d101      	bne.n	800cee8 <CircularQueue_Sense+0x1e>
 800cee4:	2302      	movs	r3, #2
 800cee6:	e000      	b.n	800ceea <CircularQueue_Sense+0x20>
 800cee8:	2300      	movs	r3, #0
 800ceea:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	695b      	ldr	r3, [r3, #20]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 808e 	beq.w	800d01a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	891b      	ldrh	r3, [r3, #8]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d120      	bne.n	800cf4e <CircularQueue_Sense+0x84>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	4413      	add	r3, r2
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	1c59      	adds	r1, r3, #1
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	4299      	cmp	r1, r3
 800cf2a:	d306      	bcc.n	800cf3a <CircularQueue_Sense+0x70>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68d9      	ldr	r1, [r3, #12]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	1acb      	subs	r3, r1, r3
 800cf36:	3301      	adds	r3, #1
 800cf38:	e002      	b.n	800cf40 <CircularQueue_Sense+0x76>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	4413      	add	r3, r2
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	021b      	lsls	r3, r3, #8
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	4403      	add	r3, r0
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	e001      	b.n	800cf52 <CircularQueue_Sense+0x88>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	891b      	ldrh	r3, [r3, #8]
 800cf52:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	7f1b      	ldrb	r3, [r3, #28]
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d047      	beq.n	800cff0 <CircularQueue_Sense+0x126>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	7f1b      	ldrb	r3, [r3, #28]
 800cf64:	f003 0302 	and.w	r3, r3, #2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d141      	bne.n	800cff0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cf6c:	8a7b      	ldrh	r3, [r7, #18]
 800cf6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d103      	bne.n	800cf7e <CircularQueue_Sense+0xb4>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	891b      	ldrh	r3, [r3, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d012      	beq.n	800cfa4 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d932      	bls.n	800cff0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	891b      	ldrh	r3, [r3, #8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d02e      	beq.n	800cff0 <CircularQueue_Sense+0x126>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	68db      	ldr	r3, [r3, #12]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	8912      	ldrh	r2, [r2, #8]
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d225      	bcs.n	800cff0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	891b      	ldrh	r3, [r3, #8]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d11c      	bne.n	800cfea <CircularQueue_Sense+0x120>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	1c59      	adds	r1, r3, #1
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	4299      	cmp	r1, r3
 800cfca:	d305      	bcc.n	800cfd8 <CircularQueue_Sense+0x10e>
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	68f9      	ldr	r1, [r7, #12]
 800cfd2:	1acb      	subs	r3, r1, r3
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	e001      	b.n	800cfdc <CircularQueue_Sense+0x112>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	4413      	add	r3, r2
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	021b      	lsls	r3, r3, #8
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	4403      	add	r3, r0
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	e001      	b.n	800cfee <CircularQueue_Sense+0x124>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	891b      	ldrh	r3, [r3, #8]
 800cfee:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	7af9      	ldrb	r1, [r7, #11]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	4419      	add	r1, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	4299      	cmp	r1, r3
 800d000:	d306      	bcc.n	800d010 <CircularQueue_Sense+0x146>
 800d002:	7af9      	ldrb	r1, [r7, #11]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4419      	add	r1, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	1acb      	subs	r3, r1, r3
 800d00e:	e002      	b.n	800d016 <CircularQueue_Sense+0x14c>
 800d010:	7af9      	ldrb	r1, [r7, #11]
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	440b      	add	r3, r1
 800d016:	4413      	add	r3, r2
 800d018:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	8a7a      	ldrh	r2, [r7, #18]
 800d024:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800d026:	697b      	ldr	r3, [r7, #20]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	371c      	adds	r7, #28
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800d034:	b480      	push	{r7}
 800d036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800d038:	4b03      	ldr	r3, [pc, #12]	@ (800d048 <LL_FLASH_GetUDN+0x14>)
 800d03a:	681b      	ldr	r3, [r3, #0]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	1fff7580 	.word	0x1fff7580

0800d04c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800d050:	4b03      	ldr	r3, [pc, #12]	@ (800d060 <LL_FLASH_GetDeviceID+0x14>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	b2db      	uxtb	r3, r3
}
 800d056:	4618      	mov	r0, r3
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	1fff7584 	.word	0x1fff7584

0800d064 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800d064:	b480      	push	{r7}
 800d066:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800d068:	4b03      	ldr	r3, [pc, #12]	@ (800d078 <LL_FLASH_GetSTCompanyID+0x14>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	0a1b      	lsrs	r3, r3, #8
}
 800d06e:	4618      	mov	r0, r3
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr
 800d078:	1fff7584 	.word	0x1fff7584

0800d07c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800d07c:	b5b0      	push	{r4, r5, r7, lr}
 800d07e:	b090      	sub	sp, #64	@ 0x40
 800d080:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d082:	2392      	movs	r3, #146	@ 0x92
 800d084:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800d088:	4b45      	ldr	r3, [pc, #276]	@ (800d1a0 <APP_BLE_Init+0x124>)
 800d08a:	1d3c      	adds	r4, r7, #4
 800d08c:	461d      	mov	r5, r3
 800d08e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d09a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d09e:	c403      	stmia	r4!, {r0, r1}
 800d0a0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800d0a2:	f000 fba5 	bl	800d7f0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800d0a6:	2101      	movs	r1, #1
 800d0a8:	2002      	movs	r0, #2
 800d0aa:	f001 faaf 	bl	800e60c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800d0ae:	4a3d      	ldr	r2, [pc, #244]	@ (800d1a4 <APP_BLE_Init+0x128>)
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	2002      	movs	r0, #2
 800d0b4:	f001 fbd6 	bl	800e864 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d0b8:	1d3b      	adds	r3, r7, #4
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fc82 	bl	800b9c4 <SHCI_C2_BLE_Init>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800d0c6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d012      	beq.n	800d0f4 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800d0ce:	4836      	ldr	r0, [pc, #216]	@ (800d1a8 <APP_BLE_Init+0x12c>)
 800d0d0:	f7ff f9f0 	bl	800c4b4 <DbgTraceGetFileName>
 800d0d4:	4601      	mov	r1, r0
 800d0d6:	f44f 73a3 	mov.w	r3, #326	@ 0x146
 800d0da:	4a34      	ldr	r2, [pc, #208]	@ (800d1ac <APP_BLE_Init+0x130>)
 800d0dc:	4834      	ldr	r0, [pc, #208]	@ (800d1b0 <APP_BLE_Init+0x134>)
 800d0de:	f002 f9f9 	bl	800f4d4 <iprintf>
 800d0e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	4832      	ldr	r0, [pc, #200]	@ (800d1b4 <APP_BLE_Init+0x138>)
 800d0ea:	f002 f9f3 	bl	800f4d4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800d0ee:	f7f6 fac1 	bl	8003674 <Error_Handler>
 800d0f2:	e00c      	b.n	800d10e <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800d0f4:	482c      	ldr	r0, [pc, #176]	@ (800d1a8 <APP_BLE_Init+0x12c>)
 800d0f6:	f7ff f9dd 	bl	800c4b4 <DbgTraceGetFileName>
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	f44f 73a6 	mov.w	r3, #332	@ 0x14c
 800d100:	4a2a      	ldr	r2, [pc, #168]	@ (800d1ac <APP_BLE_Init+0x130>)
 800d102:	482b      	ldr	r0, [pc, #172]	@ (800d1b0 <APP_BLE_Init+0x134>)
 800d104:	f002 f9e6 	bl	800f4d4 <iprintf>
 800d108:	482b      	ldr	r0, [pc, #172]	@ (800d1b8 <APP_BLE_Init+0x13c>)
 800d10a:	f002 f9e3 	bl	800f4d4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800d10e:	f000 fb85 	bl	800d81c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800d112:	f7fe fbb1 	bl	800b878 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d116:	4b29      	ldr	r3, [pc, #164]	@ (800d1bc <APP_BLE_Init+0x140>)
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800d11e:	4b27      	ldr	r3, [pc, #156]	@ (800d1bc <APP_BLE_Init+0x140>)
 800d120:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d124:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800d126:	4a26      	ldr	r2, [pc, #152]	@ (800d1c0 <APP_BLE_Init+0x144>)
 800d128:	2100      	movs	r1, #0
 800d12a:	2001      	movs	r0, #1
 800d12c:	f001 fb9a 	bl	800e864 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800d130:	2006      	movs	r0, #6
 800d132:	f7fe fa15 	bl	800b560 <aci_hal_set_radio_activity_mask>
 800d136:	4603      	mov	r3, r0
 800d138:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800d13c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d140:	2b00      	cmp	r3, #0
 800d142:	d010      	beq.n	800d166 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800d144:	4818      	ldr	r0, [pc, #96]	@ (800d1a8 <APP_BLE_Init+0x12c>)
 800d146:	f7ff f9b5 	bl	800c4b4 <DbgTraceGetFileName>
 800d14a:	4601      	mov	r1, r0
 800d14c:	f240 1371 	movw	r3, #369	@ 0x171
 800d150:	4a16      	ldr	r2, [pc, #88]	@ (800d1ac <APP_BLE_Init+0x130>)
 800d152:	4817      	ldr	r0, [pc, #92]	@ (800d1b0 <APP_BLE_Init+0x134>)
 800d154:	f002 f9be 	bl	800f4d4 <iprintf>
 800d158:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d15c:	4619      	mov	r1, r3
 800d15e:	4819      	ldr	r0, [pc, #100]	@ (800d1c4 <APP_BLE_Init+0x148>)
 800d160:	f002 f9b8 	bl	800f4d4 <iprintf>
 800d164:	e00c      	b.n	800d180 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800d166:	4810      	ldr	r0, [pc, #64]	@ (800d1a8 <APP_BLE_Init+0x12c>)
 800d168:	f7ff f9a4 	bl	800c4b4 <DbgTraceGetFileName>
 800d16c:	4601      	mov	r1, r0
 800d16e:	f240 1375 	movw	r3, #373	@ 0x175
 800d172:	4a0e      	ldr	r2, [pc, #56]	@ (800d1ac <APP_BLE_Init+0x130>)
 800d174:	480e      	ldr	r0, [pc, #56]	@ (800d1b0 <APP_BLE_Init+0x134>)
 800d176:	f002 f9ad 	bl	800f4d4 <iprintf>
 800d17a:	4813      	ldr	r0, [pc, #76]	@ (800d1c8 <APP_BLE_Init+0x14c>)
 800d17c:	f002 f9aa 	bl	800f4d4 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800d180:	f000 ff7b 	bl	800e07a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800d184:	4b0d      	ldr	r3, [pc, #52]	@ (800d1bc <APP_BLE_Init+0x140>)
 800d186:	2200      	movs	r2, #0
 800d188:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800d18a:	4b0c      	ldr	r3, [pc, #48]	@ (800d1bc <APP_BLE_Init+0x140>)
 800d18c:	2200      	movs	r2, #0
 800d18e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800d190:	2001      	movs	r0, #1
 800d192:	f000 fdd7 	bl	800dd44 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800d196:	bf00      	nop
}
 800d198:	3740      	adds	r7, #64	@ 0x40
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bdb0      	pop	{r4, r5, r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	08011e70 	.word	0x08011e70
 800d1a4:	0800bbe1 	.word	0x0800bbe1
 800d1a8:	08011d64 	.word	0x08011d64
 800d1ac:	0801304c 	.word	0x0801304c
 800d1b0:	08011d80 	.word	0x08011d80
 800d1b4:	08011d94 	.word	0x08011d94
 800d1b8:	08011dcc 	.word	0x08011dcc
 800d1bc:	200016d8 	.word	0x200016d8
 800d1c0:	0800dec9 	.word	0x0800dec9
 800d1c4:	08011df4 	.word	0x08011df4
 800d1c8:	08011e38 	.word	0x08011e38

0800d1cc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800d1cc:	b5b0      	push	{r4, r5, r7, lr}
 800d1ce:	b090      	sub	sp, #64	@ 0x40
 800d1d0:	af04      	add	r7, sp, #16
 800d1d2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800d1d4:	2392      	movs	r3, #146	@ 0x92
 800d1d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800d1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2bff      	cmp	r3, #255	@ 0xff
 800d1e6:	f000 8143 	beq.w	800d470 <SVCCTL_App_Notification+0x2a4>
 800d1ea:	2bff      	cmp	r3, #255	@ 0xff
 800d1ec:	f300 82cd 	bgt.w	800d78a <SVCCTL_App_Notification+0x5be>
 800d1f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1f2:	d06a      	beq.n	800d2ca <SVCCTL_App_Notification+0xfe>
 800d1f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1f6:	f300 82c8 	bgt.w	800d78a <SVCCTL_App_Notification+0x5be>
 800d1fa:	2b05      	cmp	r3, #5
 800d1fc:	d002      	beq.n	800d204 <SVCCTL_App_Notification+0x38>
 800d1fe:	2b10      	cmp	r3, #16
 800d200:	d042      	beq.n	800d288 <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800d202:	e2c2      	b.n	800d78a <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800d204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d206:	3302      	adds	r3, #2
 800d208:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d210:	b29a      	uxth	r2, r3
 800d212:	4bab      	ldr	r3, [pc, #684]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d214:	8adb      	ldrh	r3, [r3, #22]
 800d216:	429a      	cmp	r2, r3
 800d218:	d128      	bne.n	800d26c <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800d21a:	4ba9      	ldr	r3, [pc, #676]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d21c:	2200      	movs	r2, #0
 800d21e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d220:	4ba7      	ldr	r3, [pc, #668]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800d228:	48a6      	ldr	r0, [pc, #664]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d22a:	f7ff f943 	bl	800c4b4 <DbgTraceGetFileName>
 800d22e:	4601      	mov	r1, r0
 800d230:	f240 13b9 	movw	r3, #441	@ 0x1b9
 800d234:	4aa4      	ldr	r2, [pc, #656]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d236:	48a5      	ldr	r0, [pc, #660]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d238:	f002 f94c 	bl	800f4d4 <iprintf>
 800d23c:	48a4      	ldr	r0, [pc, #656]	@ (800d4d0 <SVCCTL_App_Notification+0x304>)
 800d23e:	f002 f9b9 	bl	800f5b4 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d242:	48a0      	ldr	r0, [pc, #640]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d244:	f7ff f936 	bl	800c4b4 <DbgTraceGetFileName>
 800d248:	4601      	mov	r1, r0
 800d24a:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800d24e:	4a9e      	ldr	r2, [pc, #632]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d250:	489e      	ldr	r0, [pc, #632]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d252:	f002 f93f 	bl	800f4d4 <iprintf>
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	4619      	mov	r1, r3
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	78db      	ldrb	r3, [r3, #3]
 800d264:	461a      	mov	r2, r3
 800d266:	489b      	ldr	r0, [pc, #620]	@ (800d4d4 <SVCCTL_App_Notification+0x308>)
 800d268:	f002 f934 	bl	800f4d4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800d26c:	2001      	movs	r0, #1
 800d26e:	f000 fd69 	bl	800dd44 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800d272:	4b99      	ldr	r3, [pc, #612]	@ (800d4d8 <SVCCTL_App_Notification+0x30c>)
 800d274:	2201      	movs	r2, #1
 800d276:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d278:	4b91      	ldr	r3, [pc, #580]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d27a:	8ada      	ldrh	r2, [r3, #22]
 800d27c:	4b96      	ldr	r3, [pc, #600]	@ (800d4d8 <SVCCTL_App_Notification+0x30c>)
 800d27e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800d280:	4895      	ldr	r0, [pc, #596]	@ (800d4d8 <SVCCTL_App_Notification+0x30c>)
 800d282:	f000 fee6 	bl	800e052 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800d286:	e283      	b.n	800d790 <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800d288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d28a:	3302      	adds	r3, #2
 800d28c:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800d28e:	488d      	ldr	r0, [pc, #564]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d290:	f7ff f910 	bl	800c4b4 <DbgTraceGetFileName>
 800d294:	4601      	mov	r1, r0
 800d296:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 800d29a:	4a8b      	ldr	r2, [pc, #556]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d29c:	488b      	ldr	r0, [pc, #556]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d29e:	f002 f919 	bl	800f4d4 <iprintf>
 800d2a2:	488e      	ldr	r0, [pc, #568]	@ (800d4dc <SVCCTL_App_Notification+0x310>)
 800d2a4:	f002 f986 	bl	800f5b4 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800d2a8:	4886      	ldr	r0, [pc, #536]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d2aa:	f7ff f903 	bl	800c4b4 <DbgTraceGetFileName>
 800d2ae:	4601      	mov	r1, r0
 800d2b0:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800d2b4:	4a84      	ldr	r2, [pc, #528]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d2b6:	4885      	ldr	r0, [pc, #532]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d2b8:	f002 f90c 	bl	800f4d4 <iprintf>
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	4887      	ldr	r0, [pc, #540]	@ (800d4e0 <SVCCTL_App_Notification+0x314>)
 800d2c4:	f002 f906 	bl	800f4d4 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800d2c8:	e262      	b.n	800d790 <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800d2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2cc:	3302      	adds	r3, #2
 800d2ce:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d042      	beq.n	800d35e <SVCCTL_App_Notification+0x192>
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	f040 80c7 	bne.w	800d46c <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	3301      	adds	r3, #1
 800d2e2:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800d2e4:	4877      	ldr	r0, [pc, #476]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d2e6:	f7ff f8e5 	bl	800c4b4 <DbgTraceGetFileName>
 800d2ea:	4601      	mov	r1, r0
 800d2ec:	f240 13ef 	movw	r3, #495	@ 0x1ef
 800d2f0:	4a75      	ldr	r2, [pc, #468]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d2f2:	4876      	ldr	r0, [pc, #472]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d2f4:	f002 f8ee 	bl	800f4d4 <iprintf>
 800d2f8:	487a      	ldr	r0, [pc, #488]	@ (800d4e4 <SVCCTL_App_Notification+0x318>)
 800d2fa:	f002 f95b 	bl	800f5b4 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d2fe:	4871      	ldr	r0, [pc, #452]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d300:	f7ff f8d8 	bl	800c4b4 <DbgTraceGetFileName>
 800d304:	4601      	mov	r1, r0
 800d306:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800d30a:	4a6f      	ldr	r2, [pc, #444]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d30c:	486f      	ldr	r0, [pc, #444]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d30e:	f002 f8e1 	bl	800f4d4 <iprintf>
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7f3 f8da 	bl	80004d4 <__aeabi_i2d>
 800d320:	f04f 0200 	mov.w	r2, #0
 800d324:	4b70      	ldr	r3, [pc, #448]	@ (800d4e8 <SVCCTL_App_Notification+0x31c>)
 800d326:	f7f3 f93f 	bl	80005a8 <__aeabi_dmul>
 800d32a:	4602      	mov	r2, r0
 800d32c:	460b      	mov	r3, r1
 800d32e:	4610      	mov	r0, r2
 800d330:	4619      	mov	r1, r3
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d338:	b29b      	uxth	r3, r3
 800d33a:	461c      	mov	r4, r3
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d342:	b29b      	uxth	r3, r3
 800d344:	461a      	mov	r2, r3
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	9301      	str	r3, [sp, #4]
 800d350:	9400      	str	r4, [sp, #0]
 800d352:	4602      	mov	r2, r0
 800d354:	460b      	mov	r3, r1
 800d356:	4865      	ldr	r0, [pc, #404]	@ (800d4ec <SVCCTL_App_Notification+0x320>)
 800d358:	f002 f8bc 	bl	800f4d4 <iprintf>
          break;
 800d35c:	e087      	b.n	800d46e <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	3301      	adds	r3, #1
 800d362:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800d364:	4857      	ldr	r0, [pc, #348]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d366:	f7ff f8a5 	bl	800c4b4 <DbgTraceGetFileName>
 800d36a:	4601      	mov	r1, r0
 800d36c:	f240 2302 	movw	r3, #514	@ 0x202
 800d370:	4a55      	ldr	r2, [pc, #340]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d372:	4856      	ldr	r0, [pc, #344]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d374:	f002 f8ae 	bl	800f4d4 <iprintf>
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	4619      	mov	r1, r3
 800d382:	485b      	ldr	r0, [pc, #364]	@ (800d4f0 <SVCCTL_App_Notification+0x324>)
 800d384:	f002 f8a6 	bl	800f4d4 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d388:	484e      	ldr	r0, [pc, #312]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d38a:	f7ff f893 	bl	800c4b4 <DbgTraceGetFileName>
 800d38e:	4601      	mov	r1, r0
 800d390:	f240 2303 	movw	r3, #515	@ 0x203
 800d394:	4a4c      	ldr	r2, [pc, #304]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d396:	484d      	ldr	r0, [pc, #308]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d398:	f002 f89c 	bl	800f4d4 <iprintf>
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	7a9b      	ldrb	r3, [r3, #10]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	7a5b      	ldrb	r3, [r3, #9]
 800d3a6:	461c      	mov	r4, r3
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	7a1b      	ldrb	r3, [r3, #8]
 800d3ac:	461d      	mov	r5, r3
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	79db      	ldrb	r3, [r3, #7]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	799b      	ldrb	r3, [r3, #6]
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	795b      	ldrb	r3, [r3, #5]
 800d3be:	9302      	str	r3, [sp, #8]
 800d3c0:	9101      	str	r1, [sp, #4]
 800d3c2:	9200      	str	r2, [sp, #0]
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4601      	mov	r1, r0
 800d3ca:	484a      	ldr	r0, [pc, #296]	@ (800d4f4 <SVCCTL_App_Notification+0x328>)
 800d3cc:	f002 f882 	bl	800f4d4 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d3d0:	483c      	ldr	r0, [pc, #240]	@ (800d4c4 <SVCCTL_App_Notification+0x2f8>)
 800d3d2:	f7ff f86f 	bl	800c4b4 <DbgTraceGetFileName>
 800d3d6:	4601      	mov	r1, r0
 800d3d8:	f240 230a 	movw	r3, #522	@ 0x20a
 800d3dc:	4a3a      	ldr	r2, [pc, #232]	@ (800d4c8 <SVCCTL_App_Notification+0x2fc>)
 800d3de:	483b      	ldr	r0, [pc, #236]	@ (800d4cc <SVCCTL_App_Notification+0x300>)
 800d3e0:	f002 f878 	bl	800f4d4 <iprintf>
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7f3 f871 	bl	80004d4 <__aeabi_i2d>
 800d3f2:	f04f 0200 	mov.w	r2, #0
 800d3f6:	4b3c      	ldr	r3, [pc, #240]	@ (800d4e8 <SVCCTL_App_Notification+0x31c>)
 800d3f8:	f7f3 f8d6 	bl	80005a8 <__aeabi_dmul>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4610      	mov	r0, r2
 800d402:	4619      	mov	r1, r3
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	461c      	mov	r4, r3
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800d414:	b29b      	uxth	r3, r3
 800d416:	461a      	mov	r2, r3
 800d418:	4613      	mov	r3, r2
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	9400      	str	r4, [sp, #0]
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	4830      	ldr	r0, [pc, #192]	@ (800d4ec <SVCCTL_App_Notification+0x320>)
 800d42a:	f002 f853 	bl	800f4d4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800d42e:	4b24      	ldr	r3, [pc, #144]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d430:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800d434:	2b04      	cmp	r3, #4
 800d436:	d104      	bne.n	800d442 <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800d438:	4b21      	ldr	r3, [pc, #132]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d43a:	2206      	movs	r2, #6
 800d43c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800d440:	e003      	b.n	800d44a <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800d442:	4b1f      	ldr	r3, [pc, #124]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d444:	2205      	movs	r2, #5
 800d446:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d450:	b29a      	uxth	r2, r3
 800d452:	4b1b      	ldr	r3, [pc, #108]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d454:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800d456:	4b20      	ldr	r3, [pc, #128]	@ (800d4d8 <SVCCTL_App_Notification+0x30c>)
 800d458:	2200      	movs	r2, #0
 800d45a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d45c:	4b18      	ldr	r3, [pc, #96]	@ (800d4c0 <SVCCTL_App_Notification+0x2f4>)
 800d45e:	8ada      	ldrh	r2, [r3, #22]
 800d460:	4b1d      	ldr	r3, [pc, #116]	@ (800d4d8 <SVCCTL_App_Notification+0x30c>)
 800d462:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800d464:	481c      	ldr	r0, [pc, #112]	@ (800d4d8 <SVCCTL_App_Notification+0x30c>)
 800d466:	f000 fdf4 	bl	800e052 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800d46a:	e000      	b.n	800d46e <SVCCTL_App_Notification+0x2a2>
          break;
 800d46c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800d46e:	e18f      	b.n	800d790 <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800d470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d472:	3302      	adds	r3, #2
 800d474:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800d476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800d480:	4293      	cmp	r3, r2
 800d482:	f000 814a 	beq.w	800d71a <SVCCTL_App_Notification+0x54e>
 800d486:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800d48a:	4293      	cmp	r3, r2
 800d48c:	f300 817f 	bgt.w	800d78e <SVCCTL_App_Notification+0x5c2>
 800d490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d494:	f000 8175 	beq.w	800d782 <SVCCTL_App_Notification+0x5b6>
 800d498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d49c:	f300 8177 	bgt.w	800d78e <SVCCTL_App_Notification+0x5c2>
 800d4a0:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	f300 8172 	bgt.w	800d78e <SVCCTL_App_Notification+0x5c2>
 800d4aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d4ae:	dc23      	bgt.n	800d4f8 <SVCCTL_App_Notification+0x32c>
 800d4b0:	2b04      	cmp	r3, #4
 800d4b2:	f000 8168 	beq.w	800d786 <SVCCTL_App_Notification+0x5ba>
 800d4b6:	2b06      	cmp	r3, #6
 800d4b8:	f000 8142 	beq.w	800d740 <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d4bc:	e167      	b.n	800d78e <SVCCTL_App_Notification+0x5c2>
 800d4be:	bf00      	nop
 800d4c0:	200016d8 	.word	0x200016d8
 800d4c4:	08011d64 	.word	0x08011d64
 800d4c8:	0801305c 	.word	0x0801305c
 800d4cc:	08011d80 	.word	0x08011d80
 800d4d0:	08011eac 	.word	0x08011eac
 800d4d4:	08011ed8 	.word	0x08011ed8
 800d4d8:	2000175c 	.word	0x2000175c
 800d4dc:	08011f14 	.word	0x08011f14
 800d4e0:	08011f38 	.word	0x08011f38
 800d4e4:	08011f50 	.word	0x08011f50
 800d4e8:	3ff40000 	.word	0x3ff40000
 800d4ec:	08011f84 	.word	0x08011f84
 800d4f0:	08011ff0 	.word	0x08011ff0
 800d4f4:	08012038 	.word	0x08012038
 800d4f8:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800d4fc:	2b09      	cmp	r3, #9
 800d4fe:	f200 8146 	bhi.w	800d78e <SVCCTL_App_Notification+0x5c2>
 800d502:	a201      	add	r2, pc, #4	@ (adr r2, 800d508 <SVCCTL_App_Notification+0x33c>)
 800d504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d508:	0800d695 	.word	0x0800d695
 800d50c:	0800d569 	.word	0x0800d569
 800d510:	0800d78f 	.word	0x0800d78f
 800d514:	0800d78f 	.word	0x0800d78f
 800d518:	0800d78f 	.word	0x0800d78f
 800d51c:	0800d78f 	.word	0x0800d78f
 800d520:	0800d531 	.word	0x0800d531
 800d524:	0800d78f 	.word	0x0800d78f
 800d528:	0800d5db 	.word	0x0800d5db
 800d52c:	0800d54d 	.word	0x0800d54d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800d530:	489a      	ldr	r0, [pc, #616]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d532:	f7fe ffbf 	bl	800c4b4 <DbgTraceGetFileName>
 800d536:	4601      	mov	r1, r0
 800d538:	f44f 7313 	mov.w	r3, #588	@ 0x24c
 800d53c:	4a98      	ldr	r2, [pc, #608]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d53e:	4899      	ldr	r0, [pc, #612]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d540:	f001 ffc8 	bl	800f4d4 <iprintf>
 800d544:	4898      	ldr	r0, [pc, #608]	@ (800d7a8 <SVCCTL_App_Notification+0x5dc>)
 800d546:	f001 ffc5 	bl	800f4d4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800d54a:	e11d      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800d54c:	4893      	ldr	r0, [pc, #588]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d54e:	f7fe ffb1 	bl	800c4b4 <DbgTraceGetFileName>
 800d552:	4601      	mov	r1, r0
 800d554:	f44f 7317 	mov.w	r3, #604	@ 0x25c
 800d558:	4a91      	ldr	r2, [pc, #580]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d55a:	4892      	ldr	r0, [pc, #584]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d55c:	f001 ffba 	bl	800f4d4 <iprintf>
 800d560:	4892      	ldr	r0, [pc, #584]	@ (800d7ac <SVCCTL_App_Notification+0x5e0>)
 800d562:	f002 f827 	bl	800f5b4 <puts>
          break;
 800d566:	e10f      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800d568:	488c      	ldr	r0, [pc, #560]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d56a:	f7fe ffa3 	bl	800c4b4 <DbgTraceGetFileName>
 800d56e:	4601      	mov	r1, r0
 800d570:	f240 2363 	movw	r3, #611	@ 0x263
 800d574:	4a8a      	ldr	r2, [pc, #552]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d576:	488b      	ldr	r0, [pc, #556]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d578:	f001 ffac 	bl	800f4d4 <iprintf>
 800d57c:	488c      	ldr	r0, [pc, #560]	@ (800d7b0 <SVCCTL_App_Notification+0x5e4>)
 800d57e:	f002 f819 	bl	800f5b4 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800d582:	4b8c      	ldr	r3, [pc, #560]	@ (800d7b4 <SVCCTL_App_Notification+0x5e8>)
 800d584:	8adb      	ldrh	r3, [r3, #22]
 800d586:	498c      	ldr	r1, [pc, #560]	@ (800d7b8 <SVCCTL_App_Notification+0x5ec>)
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fd f9eb 	bl	800a964 <aci_gap_pass_key_resp>
 800d58e:	4603      	mov	r3, r0
 800d590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d010      	beq.n	800d5be <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800d59c:	487f      	ldr	r0, [pc, #508]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d59e:	f7fe ff89 	bl	800c4b4 <DbgTraceGetFileName>
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800d5a8:	4a7d      	ldr	r2, [pc, #500]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d5aa:	487e      	ldr	r0, [pc, #504]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d5ac:	f001 ff92 	bl	800f4d4 <iprintf>
 800d5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4881      	ldr	r0, [pc, #516]	@ (800d7bc <SVCCTL_App_Notification+0x5f0>)
 800d5b8:	f001 ff8c 	bl	800f4d4 <iprintf>
          break;
 800d5bc:	e0e4      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800d5be:	4877      	ldr	r0, [pc, #476]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d5c0:	f7fe ff78 	bl	800c4b4 <DbgTraceGetFileName>
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	f44f 731b 	mov.w	r3, #620	@ 0x26c
 800d5ca:	4a75      	ldr	r2, [pc, #468]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d5cc:	4875      	ldr	r0, [pc, #468]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d5ce:	f001 ff81 	bl	800f4d4 <iprintf>
 800d5d2:	487b      	ldr	r0, [pc, #492]	@ (800d7c0 <SVCCTL_App_Notification+0x5f4>)
 800d5d4:	f001 ffee 	bl	800f5b4 <puts>
          break;
 800d5d8:	e0d6      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800d5da:	4870      	ldr	r0, [pc, #448]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d5dc:	f7fe ff6a 	bl	800c4b4 <DbgTraceGetFileName>
 800d5e0:	4601      	mov	r1, r0
 800d5e2:	f44f 731d 	mov.w	r3, #628	@ 0x274
 800d5e6:	4a6e      	ldr	r2, [pc, #440]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d5e8:	486e      	ldr	r0, [pc, #440]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d5ea:	f001 ff73 	bl	800f4d4 <iprintf>
 800d5ee:	4875      	ldr	r0, [pc, #468]	@ (800d7c4 <SVCCTL_App_Notification+0x5f8>)
 800d5f0:	f001 ffe0 	bl	800f5b4 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800d5f4:	4869      	ldr	r0, [pc, #420]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d5f6:	f7fe ff5d 	bl	800c4b4 <DbgTraceGetFileName>
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	f240 2375 	movw	r3, #629	@ 0x275
 800d600:	4a67      	ldr	r2, [pc, #412]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d602:	4868      	ldr	r0, [pc, #416]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d604:	f001 ff66 	bl	800f4d4 <iprintf>
 800d608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d60a:	3302      	adds	r3, #2
 800d60c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d610:	4619      	mov	r1, r3
 800d612:	486d      	ldr	r0, [pc, #436]	@ (800d7c8 <SVCCTL_App_Notification+0x5fc>)
 800d614:	f001 ff5e 	bl	800f4d4 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800d618:	4860      	ldr	r0, [pc, #384]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d61a:	f7fe ff4b 	bl	800c4b4 <DbgTraceGetFileName>
 800d61e:	4601      	mov	r1, r0
 800d620:	f240 2377 	movw	r3, #631	@ 0x277
 800d624:	4a5e      	ldr	r2, [pc, #376]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d626:	485f      	ldr	r0, [pc, #380]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d628:	f001 ff54 	bl	800f4d4 <iprintf>
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	3302      	adds	r3, #2
 800d630:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d634:	4619      	mov	r1, r3
 800d636:	4865      	ldr	r0, [pc, #404]	@ (800d7cc <SVCCTL_App_Notification+0x600>)
 800d638:	f001 ff4c 	bl	800f4d4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800d63c:	4b5d      	ldr	r3, [pc, #372]	@ (800d7b4 <SVCCTL_App_Notification+0x5e8>)
 800d63e:	8adb      	ldrh	r3, [r3, #22]
 800d640:	2101      	movs	r1, #1
 800d642:	4618      	mov	r0, r3
 800d644:	f7fd fb38 	bl	800acb8 <aci_gap_numeric_comparison_value_confirm_yesno>
 800d648:	4603      	mov	r3, r0
 800d64a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d64e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d652:	2b00      	cmp	r3, #0
 800d654:	d010      	beq.n	800d678 <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800d656:	4851      	ldr	r0, [pc, #324]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d658:	f7fe ff2c 	bl	800c4b4 <DbgTraceGetFileName>
 800d65c:	4601      	mov	r1, r0
 800d65e:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 800d662:	4a4f      	ldr	r2, [pc, #316]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d664:	484f      	ldr	r0, [pc, #316]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d666:	f001 ff35 	bl	800f4d4 <iprintf>
 800d66a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d66e:	4619      	mov	r1, r3
 800d670:	4857      	ldr	r0, [pc, #348]	@ (800d7d0 <SVCCTL_App_Notification+0x604>)
 800d672:	f001 ff2f 	bl	800f4d4 <iprintf>
          break;
 800d676:	e087      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800d678:	4848      	ldr	r0, [pc, #288]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d67a:	f7fe ff1b 	bl	800c4b4 <DbgTraceGetFileName>
 800d67e:	4601      	mov	r1, r0
 800d680:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800d684:	4a46      	ldr	r2, [pc, #280]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d686:	4847      	ldr	r0, [pc, #284]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d688:	f001 ff24 	bl	800f4d4 <iprintf>
 800d68c:	4851      	ldr	r0, [pc, #324]	@ (800d7d4 <SVCCTL_App_Notification+0x608>)
 800d68e:	f001 ff91 	bl	800f5b4 <puts>
          break;
 800d692:	e079      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800d694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d696:	3302      	adds	r3, #2
 800d698:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800d69a:	4840      	ldr	r0, [pc, #256]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d69c:	f7fe ff0a 	bl	800c4b4 <DbgTraceGetFileName>
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	f240 238a 	movw	r3, #650	@ 0x28a
 800d6a6:	4a3e      	ldr	r2, [pc, #248]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d6a8:	483e      	ldr	r0, [pc, #248]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d6aa:	f001 ff13 	bl	800f4d4 <iprintf>
 800d6ae:	484a      	ldr	r0, [pc, #296]	@ (800d7d8 <SVCCTL_App_Notification+0x60c>)
 800d6b0:	f001 ff80 	bl	800f5b4 <puts>
          if (p_pairing_complete->Status != 0)
 800d6b4:	6a3b      	ldr	r3, [r7, #32]
 800d6b6:	789b      	ldrb	r3, [r3, #2]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d013      	beq.n	800d6e4 <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800d6bc:	4837      	ldr	r0, [pc, #220]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d6be:	f7fe fef9 	bl	800c4b4 <DbgTraceGetFileName>
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	f240 238d 	movw	r3, #653	@ 0x28d
 800d6c8:	4a35      	ldr	r2, [pc, #212]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d6ca:	4836      	ldr	r0, [pc, #216]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d6cc:	f001 ff02 	bl	800f4d4 <iprintf>
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	789b      	ldrb	r3, [r3, #2]
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	78db      	ldrb	r3, [r3, #3]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	483f      	ldr	r0, [pc, #252]	@ (800d7dc <SVCCTL_App_Notification+0x610>)
 800d6de:	f001 fef9 	bl	800f4d4 <iprintf>
 800d6e2:	e00c      	b.n	800d6fe <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800d6e4:	482d      	ldr	r0, [pc, #180]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d6e6:	f7fe fee5 	bl	800c4b4 <DbgTraceGetFileName>
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	f240 2391 	movw	r3, #657	@ 0x291
 800d6f0:	4a2b      	ldr	r2, [pc, #172]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d6f2:	482c      	ldr	r0, [pc, #176]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d6f4:	f001 feee 	bl	800f4d4 <iprintf>
 800d6f8:	4839      	ldr	r0, [pc, #228]	@ (800d7e0 <SVCCTL_App_Notification+0x614>)
 800d6fa:	f001 ff5b 	bl	800f5b4 <puts>
          APP_DBG_MSG("\n");
 800d6fe:	4827      	ldr	r0, [pc, #156]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d700:	f7fe fed8 	bl	800c4b4 <DbgTraceGetFileName>
 800d704:	4601      	mov	r1, r0
 800d706:	f240 2393 	movw	r3, #659	@ 0x293
 800d70a:	4a25      	ldr	r2, [pc, #148]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d70c:	4825      	ldr	r0, [pc, #148]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d70e:	f001 fee1 	bl	800f4d4 <iprintf>
 800d712:	200a      	movs	r0, #10
 800d714:	f001 fef0 	bl	800f4f8 <putchar>
          break;
 800d718:	e036      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800d71a:	4820      	ldr	r0, [pc, #128]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d71c:	f7fe feca 	bl	800c4b4 <DbgTraceGetFileName>
 800d720:	4601      	mov	r1, r0
 800d722:	f44f 7327 	mov.w	r3, #668	@ 0x29c
 800d726:	4a1e      	ldr	r2, [pc, #120]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d728:	481e      	ldr	r0, [pc, #120]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d72a:	f001 fed3 	bl	800f4d4 <iprintf>
 800d72e:	482d      	ldr	r0, [pc, #180]	@ (800d7e4 <SVCCTL_App_Notification+0x618>)
 800d730:	f001 fed0 	bl	800f4d4 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d734:	4b1f      	ldr	r3, [pc, #124]	@ (800d7b4 <SVCCTL_App_Notification+0x5e8>)
 800d736:	8adb      	ldrh	r3, [r3, #22]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fd fdd0 	bl	800b2de <aci_gatt_confirm_indication>
        break;
 800d73e:	e023      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 800d740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d742:	3302      	adds	r3, #2
 800d744:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 800d746:	4815      	ldr	r0, [pc, #84]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d748:	f7fe feb4 	bl	800c4b4 <DbgTraceGetFileName>
 800d74c:	4601      	mov	r1, r0
 800d74e:	f240 23a7 	movw	r3, #679	@ 0x2a7
 800d752:	4a13      	ldr	r2, [pc, #76]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d754:	4813      	ldr	r0, [pc, #76]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d756:	f001 febd 	bl	800f4d4 <iprintf>
 800d75a:	4823      	ldr	r0, [pc, #140]	@ (800d7e8 <SVCCTL_App_Notification+0x61c>)
 800d75c:	f001 ff2a 	bl	800f5b4 <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 800d760:	480e      	ldr	r0, [pc, #56]	@ (800d79c <SVCCTL_App_Notification+0x5d0>)
 800d762:	f7fe fea7 	bl	800c4b4 <DbgTraceGetFileName>
 800d766:	4601      	mov	r1, r0
 800d768:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800d76c:	4a0c      	ldr	r2, [pc, #48]	@ (800d7a0 <SVCCTL_App_Notification+0x5d4>)
 800d76e:	480d      	ldr	r0, [pc, #52]	@ (800d7a4 <SVCCTL_App_Notification+0x5d8>)
 800d770:	f001 feb0 	bl	800f4d4 <iprintf>
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	4619      	mov	r1, r3
 800d77a:	481c      	ldr	r0, [pc, #112]	@ (800d7ec <SVCCTL_App_Notification+0x620>)
 800d77c:	f001 feaa 	bl	800f4d4 <iprintf>
          break;
 800d780:	e002      	b.n	800d788 <SVCCTL_App_Notification+0x5bc>
          break;
 800d782:	bf00      	nop
 800d784:	e003      	b.n	800d78e <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800d786:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d788:	e001      	b.n	800d78e <SVCCTL_App_Notification+0x5c2>
      break;
 800d78a:	bf00      	nop
 800d78c:	e000      	b.n	800d790 <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d78e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800d790:	2301      	movs	r3, #1
}
 800d792:	4618      	mov	r0, r3
 800d794:	3730      	adds	r7, #48	@ 0x30
 800d796:	46bd      	mov	sp, r7
 800d798:	bdb0      	pop	{r4, r5, r7, pc}
 800d79a:	bf00      	nop
 800d79c:	08011d64 	.word	0x08011d64
 800d7a0:	0801305c 	.word	0x0801305c
 800d7a4:	08011d80 	.word	0x08011d80
 800d7a8:	08012088 	.word	0x08012088
 800d7ac:	080120b0 	.word	0x080120b0
 800d7b0:	080120e0 	.word	0x080120e0
 800d7b4:	200016d8 	.word	0x200016d8
 800d7b8:	0001b207 	.word	0x0001b207
 800d7bc:	08012108 	.word	0x08012108
 800d7c0:	0801213c 	.word	0x0801213c
 800d7c4:	08012164 	.word	0x08012164
 800d7c8:	08012198 	.word	0x08012198
 800d7cc:	080121b4 	.word	0x080121b4
 800d7d0:	080121cc 	.word	0x080121cc
 800d7d4:	0801221c 	.word	0x0801221c
 800d7d8:	08012264 	.word	0x08012264
 800d7dc:	08012290 	.word	0x08012290
 800d7e0:	080122cc 	.word	0x080122cc
 800d7e4:	080122e4 	.word	0x080122e4
 800d7e8:	0801230c 	.word	0x0801230c
 800d7ec:	08012330 	.word	0x08012330

0800d7f0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d7f6:	4b06      	ldr	r3, [pc, #24]	@ (800d810 <Ble_Tl_Init+0x20>)
 800d7f8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d7fa:	4b06      	ldr	r3, [pc, #24]	@ (800d814 <Ble_Tl_Init+0x24>)
 800d7fc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d7fe:	463b      	mov	r3, r7
 800d800:	4619      	mov	r1, r3
 800d802:	4805      	ldr	r0, [pc, #20]	@ (800d818 <Ble_Tl_Init+0x28>)
 800d804:	f7fe f9d0 	bl	800bba8 <hci_init>

  return;
 800d808:	bf00      	nop
}
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	200300d8 	.word	0x200300d8
 800d814:	0800dfe5 	.word	0x0800dfe5
 800d818:	0800dfad 	.word	0x0800dfad

0800d81c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81e:	b08d      	sub	sp, #52	@ 0x34
 800d820:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d822:	2300      	movs	r3, #0
 800d824:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d826:	2392      	movs	r3, #146	@ 0x92
 800d828:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800d82a:	48a3      	ldr	r0, [pc, #652]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d82c:	f7fe fe42 	bl	800c4b4 <DbgTraceGetFileName>
 800d830:	4601      	mov	r1, r0
 800d832:	f240 23e6 	movw	r3, #742	@ 0x2e6
 800d836:	4aa1      	ldr	r2, [pc, #644]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d838:	48a1      	ldr	r0, [pc, #644]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d83a:	f001 fe4b 	bl	800f4d4 <iprintf>
 800d83e:	48a1      	ldr	r0, [pc, #644]	@ (800dac4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800d840:	f001 feb8 	bl	800f5b4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d844:	f7fd fee0 	bl	800b608 <hci_reset>
 800d848:	4603      	mov	r3, r0
 800d84a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d84c:	7dfb      	ldrb	r3, [r7, #23]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00f      	beq.n	800d872 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800d852:	4899      	ldr	r0, [pc, #612]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d854:	f7fe fe2e 	bl	800c4b4 <DbgTraceGetFileName>
 800d858:	4601      	mov	r1, r0
 800d85a:	f240 23ef 	movw	r3, #751	@ 0x2ef
 800d85e:	4a97      	ldr	r2, [pc, #604]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d860:	4897      	ldr	r0, [pc, #604]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d862:	f001 fe37 	bl	800f4d4 <iprintf>
 800d866:	7dfb      	ldrb	r3, [r7, #23]
 800d868:	4619      	mov	r1, r3
 800d86a:	4897      	ldr	r0, [pc, #604]	@ (800dac8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800d86c:	f001 fe32 	bl	800f4d4 <iprintf>
 800d870:	e00c      	b.n	800d88c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800d872:	4891      	ldr	r0, [pc, #580]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d874:	f7fe fe1e 	bl	800c4b4 <DbgTraceGetFileName>
 800d878:	4601      	mov	r1, r0
 800d87a:	f240 23f3 	movw	r3, #755	@ 0x2f3
 800d87e:	4a8f      	ldr	r2, [pc, #572]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d880:	488f      	ldr	r0, [pc, #572]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d882:	f001 fe27 	bl	800f4d4 <iprintf>
 800d886:	4891      	ldr	r0, [pc, #580]	@ (800dacc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800d888:	f001 fe94 	bl	800f5b4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800d88c:	f000 fad8 	bl	800de40 <BleGetBdAddress>
 800d890:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	2106      	movs	r1, #6
 800d896:	2000      	movs	r0, #0
 800d898:	f7fd fd76 	bl	800b388 <aci_hal_write_config_data>
 800d89c:	4603      	mov	r3, r0
 800d89e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00f      	beq.n	800d8c6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800d8a6:	4884      	ldr	r0, [pc, #528]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d8a8:	f7fe fe04 	bl	800c4b4 <DbgTraceGetFileName>
 800d8ac:	4601      	mov	r1, r0
 800d8ae:	f240 23fd 	movw	r3, #765	@ 0x2fd
 800d8b2:	4a82      	ldr	r2, [pc, #520]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d8b4:	4882      	ldr	r0, [pc, #520]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d8b6:	f001 fe0d 	bl	800f4d4 <iprintf>
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4884      	ldr	r0, [pc, #528]	@ (800dad0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800d8c0:	f001 fe08 	bl	800f4d4 <iprintf>
 800d8c4:	e035      	b.n	800d932 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800d8c6:	487c      	ldr	r0, [pc, #496]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d8c8:	f7fe fdf4 	bl	800c4b4 <DbgTraceGetFileName>
 800d8cc:	4601      	mov	r1, r0
 800d8ce:	f240 3301 	movw	r3, #769	@ 0x301
 800d8d2:	4a7a      	ldr	r2, [pc, #488]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d8d4:	487a      	ldr	r0, [pc, #488]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d8d6:	f001 fdfd 	bl	800f4d4 <iprintf>
 800d8da:	487e      	ldr	r0, [pc, #504]	@ (800dad4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800d8dc:	f001 fe6a 	bl	800f5b4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800d8e0:	4875      	ldr	r0, [pc, #468]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d8e2:	f7fe fde7 	bl	800c4b4 <DbgTraceGetFileName>
 800d8e6:	4601      	mov	r1, r0
 800d8e8:	f240 3302 	movw	r3, #770	@ 0x302
 800d8ec:	4a73      	ldr	r2, [pc, #460]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d8ee:	4874      	ldr	r0, [pc, #464]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d8f0:	f001 fdf0 	bl	800f4d4 <iprintf>
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	3305      	adds	r3, #5
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	3304      	adds	r3, #4
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	461c      	mov	r4, r3
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	3303      	adds	r3, #3
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	461d      	mov	r5, r3
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	3302      	adds	r3, #2
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	461a      	mov	r2, r3
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	3301      	adds	r3, #1
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	4619      	mov	r1, r3
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	9302      	str	r3, [sp, #8]
 800d922:	9101      	str	r1, [sp, #4]
 800d924:	9200      	str	r2, [sp, #0]
 800d926:	462b      	mov	r3, r5
 800d928:	4622      	mov	r2, r4
 800d92a:	4601      	mov	r1, r0
 800d92c:	486a      	ldr	r0, [pc, #424]	@ (800dad8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d92e:	f001 fdd1 	bl	800f4d4 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d932:	4a6a      	ldr	r2, [pc, #424]	@ (800dadc <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800d934:	2110      	movs	r1, #16
 800d936:	2018      	movs	r0, #24
 800d938:	f7fd fd26 	bl	800b388 <aci_hal_write_config_data>
 800d93c:	4603      	mov	r3, r0
 800d93e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d940:	7dfb      	ldrb	r3, [r7, #23]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00f      	beq.n	800d966 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800d946:	485c      	ldr	r0, [pc, #368]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d948:	f7fe fdb4 	bl	800c4b4 <DbgTraceGetFileName>
 800d94c:	4601      	mov	r1, r0
 800d94e:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800d952:	4a5a      	ldr	r2, [pc, #360]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d954:	485a      	ldr	r0, [pc, #360]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d956:	f001 fdbd 	bl	800f4d4 <iprintf>
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
 800d95c:	4619      	mov	r1, r3
 800d95e:	4860      	ldr	r0, [pc, #384]	@ (800dae0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800d960:	f001 fdb8 	bl	800f4d4 <iprintf>
 800d964:	e00c      	b.n	800d980 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800d966:	4854      	ldr	r0, [pc, #336]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d968:	f7fe fda4 	bl	800c4b4 <DbgTraceGetFileName>
 800d96c:	4601      	mov	r1, r0
 800d96e:	f44f 734a 	mov.w	r3, #808	@ 0x328
 800d972:	4a52      	ldr	r2, [pc, #328]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d974:	4852      	ldr	r0, [pc, #328]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d976:	f001 fdad 	bl	800f4d4 <iprintf>
 800d97a:	485a      	ldr	r0, [pc, #360]	@ (800dae4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800d97c:	f001 fe1a 	bl	800f5b4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d980:	4a59      	ldr	r2, [pc, #356]	@ (800dae8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800d982:	2110      	movs	r1, #16
 800d984:	2008      	movs	r0, #8
 800d986:	f7fd fcff 	bl	800b388 <aci_hal_write_config_data>
 800d98a:	4603      	mov	r3, r0
 800d98c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d98e:	7dfb      	ldrb	r3, [r7, #23]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00f      	beq.n	800d9b4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800d994:	4848      	ldr	r0, [pc, #288]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d996:	f7fe fd8d 	bl	800c4b4 <DbgTraceGetFileName>
 800d99a:	4601      	mov	r1, r0
 800d99c:	f240 3331 	movw	r3, #817	@ 0x331
 800d9a0:	4a46      	ldr	r2, [pc, #280]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d9a2:	4847      	ldr	r0, [pc, #284]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d9a4:	f001 fd96 	bl	800f4d4 <iprintf>
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	484f      	ldr	r0, [pc, #316]	@ (800daec <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800d9ae:	f001 fd91 	bl	800f4d4 <iprintf>
 800d9b2:	e00c      	b.n	800d9ce <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800d9b4:	4840      	ldr	r0, [pc, #256]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d9b6:	f7fe fd7d 	bl	800c4b4 <DbgTraceGetFileName>
 800d9ba:	4601      	mov	r1, r0
 800d9bc:	f240 3335 	movw	r3, #821	@ 0x335
 800d9c0:	4a3e      	ldr	r2, [pc, #248]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d9c2:	483f      	ldr	r0, [pc, #252]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d9c4:	f001 fd86 	bl	800f4d4 <iprintf>
 800d9c8:	4849      	ldr	r0, [pc, #292]	@ (800daf0 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800d9ca:	f001 fdf3 	bl	800f5b4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d9ce:	2118      	movs	r1, #24
 800d9d0:	2001      	movs	r0, #1
 800d9d2:	f7fd fd5e 	bl	800b492 <aci_hal_set_tx_power_level>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00f      	beq.n	800da00 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800d9e0:	4835      	ldr	r0, [pc, #212]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800d9e2:	f7fe fd67 	bl	800c4b4 <DbgTraceGetFileName>
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	f240 333e 	movw	r3, #830	@ 0x33e
 800d9ec:	4a33      	ldr	r2, [pc, #204]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800d9ee:	4834      	ldr	r0, [pc, #208]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d9f0:	f001 fd70 	bl	800f4d4 <iprintf>
 800d9f4:	7dfb      	ldrb	r3, [r7, #23]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	483e      	ldr	r0, [pc, #248]	@ (800daf4 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800d9fa:	f001 fd6b 	bl	800f4d4 <iprintf>
 800d9fe:	e00c      	b.n	800da1a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800da00:	482d      	ldr	r0, [pc, #180]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800da02:	f7fe fd57 	bl	800c4b4 <DbgTraceGetFileName>
 800da06:	4601      	mov	r1, r0
 800da08:	f240 3342 	movw	r3, #834	@ 0x342
 800da0c:	4a2b      	ldr	r2, [pc, #172]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800da0e:	482c      	ldr	r0, [pc, #176]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800da10:	f001 fd60 	bl	800f4d4 <iprintf>
 800da14:	4838      	ldr	r0, [pc, #224]	@ (800daf8 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800da16:	f001 fdcd 	bl	800f5b4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800da1a:	f7fd f9b4 	bl	800ad86 <aci_gatt_init>
 800da1e:	4603      	mov	r3, r0
 800da20:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00f      	beq.n	800da48 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800da28:	4823      	ldr	r0, [pc, #140]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800da2a:	f7fe fd43 	bl	800c4b4 <DbgTraceGetFileName>
 800da2e:	4601      	mov	r1, r0
 800da30:	f240 334b 	movw	r3, #843	@ 0x34b
 800da34:	4a21      	ldr	r2, [pc, #132]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800da36:	4822      	ldr	r0, [pc, #136]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800da38:	f001 fd4c 	bl	800f4d4 <iprintf>
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	4619      	mov	r1, r3
 800da40:	482e      	ldr	r0, [pc, #184]	@ (800dafc <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800da42:	f001 fd47 	bl	800f4d4 <iprintf>
 800da46:	e00c      	b.n	800da62 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800da48:	481b      	ldr	r0, [pc, #108]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800da4a:	f7fe fd33 	bl	800c4b4 <DbgTraceGetFileName>
 800da4e:	4601      	mov	r1, r0
 800da50:	f240 334f 	movw	r3, #847	@ 0x34f
 800da54:	4a19      	ldr	r2, [pc, #100]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800da56:	481a      	ldr	r0, [pc, #104]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800da58:	f001 fd3c 	bl	800f4d4 <iprintf>
 800da5c:	4828      	ldr	r0, [pc, #160]	@ (800db00 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800da5e:	f001 fda9 	bl	800f5b4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800da62:	2300      	movs	r3, #0
 800da64:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	f043 0301 	orr.w	r3, r3, #1
 800da6c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d069      	beq.n	800db48 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800da74:	4b23      	ldr	r3, [pc, #140]	@ (800db04 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800da76:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800da78:	1dba      	adds	r2, r7, #6
 800da7a:	7bf8      	ldrb	r0, [r7, #15]
 800da7c:	1cbb      	adds	r3, r7, #2
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	1d3b      	adds	r3, r7, #4
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	4613      	mov	r3, r2
 800da86:	2208      	movs	r2, #8
 800da88:	2100      	movs	r1, #0
 800da8a:	f7fc ffd2 	bl	800aa32 <aci_gap_init>
 800da8e:	4603      	mov	r3, r0
 800da90:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800da92:	7dfb      	ldrb	r3, [r7, #23]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d039      	beq.n	800db0c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800da98:	4807      	ldr	r0, [pc, #28]	@ (800dab8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800da9a:	f7fe fd0b 	bl	800c4b4 <DbgTraceGetFileName>
 800da9e:	4601      	mov	r1, r0
 800daa0:	f240 336f 	movw	r3, #879	@ 0x36f
 800daa4:	4a05      	ldr	r2, [pc, #20]	@ (800dabc <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800daa6:	4806      	ldr	r0, [pc, #24]	@ (800dac0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800daa8:	f001 fd14 	bl	800f4d4 <iprintf>
 800daac:	7dfb      	ldrb	r3, [r7, #23]
 800daae:	4619      	mov	r1, r3
 800dab0:	4815      	ldr	r0, [pc, #84]	@ (800db08 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800dab2:	f001 fd0f 	bl	800f4d4 <iprintf>
 800dab6:	e036      	b.n	800db26 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800dab8:	08011d64 	.word	0x08011d64
 800dabc:	08013074 	.word	0x08013074
 800dac0:	08011d80 	.word	0x08011d80
 800dac4:	08012348 	.word	0x08012348
 800dac8:	08012374 	.word	0x08012374
 800dacc:	080123a4 	.word	0x080123a4
 800dad0:	080123c4 	.word	0x080123c4
 800dad4:	08012420 	.word	0x08012420
 800dad8:	0801246c 	.word	0x0801246c
 800dadc:	0801302c 	.word	0x0801302c
 800dae0:	080124a8 	.word	0x080124a8
 800dae4:	08012500 	.word	0x08012500
 800dae8:	0801303c 	.word	0x0801303c
 800daec:	08012548 	.word	0x08012548
 800daf0:	080125a0 	.word	0x080125a0
 800daf4:	080125e8 	.word	0x080125e8
 800daf8:	08012628 	.word	0x08012628
 800dafc:	08012658 	.word	0x08012658
 800db00:	0801268c 	.word	0x0801268c
 800db04:	080126b0 	.word	0x080126b0
 800db08:	080126bc 	.word	0x080126bc
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800db0c:	487e      	ldr	r0, [pc, #504]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800db0e:	f7fe fcd1 	bl	800c4b4 <DbgTraceGetFileName>
 800db12:	4601      	mov	r1, r0
 800db14:	f240 3373 	movw	r3, #883	@ 0x373
 800db18:	4a7c      	ldr	r2, [pc, #496]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800db1a:	487d      	ldr	r0, [pc, #500]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800db1c:	f001 fcda 	bl	800f4d4 <iprintf>
 800db20:	487c      	ldr	r0, [pc, #496]	@ (800dd14 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800db22:	f001 fd47 	bl	800f5b4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800db26:	88fc      	ldrh	r4, [r7, #6]
 800db28:	88bd      	ldrh	r5, [r7, #4]
 800db2a:	68b8      	ldr	r0, [r7, #8]
 800db2c:	f7f2 fb78 	bl	8000220 <strlen>
 800db30:	4603      	mov	r3, r0
 800db32:	b2da      	uxtb	r2, r3
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	9300      	str	r3, [sp, #0]
 800db38:	4613      	mov	r3, r2
 800db3a:	2200      	movs	r2, #0
 800db3c:	4629      	mov	r1, r5
 800db3e:	4620      	mov	r0, r4
 800db40:	f7fd fb24 	bl	800b18c <aci_gatt_update_char_value>
 800db44:	4603      	mov	r3, r0
 800db46:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800db48:	88f8      	ldrh	r0, [r7, #6]
 800db4a:	8879      	ldrh	r1, [r7, #2]
 800db4c:	463b      	mov	r3, r7
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	2302      	movs	r3, #2
 800db52:	2200      	movs	r2, #0
 800db54:	f7fd fb1a 	bl	800b18c <aci_gatt_update_char_value>
 800db58:	4603      	mov	r3, r0
 800db5a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800db5c:	2202      	movs	r2, #2
 800db5e:	2102      	movs	r1, #2
 800db60:	2000      	movs	r0, #0
 800db62:	f7fd fd75 	bl	800b650 <hci_le_set_default_phy>
 800db66:	4603      	mov	r3, r0
 800db68:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800db6a:	7dfb      	ldrb	r3, [r7, #23]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00f      	beq.n	800db90 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800db70:	4865      	ldr	r0, [pc, #404]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800db72:	f7fe fc9f 	bl	800c4b4 <DbgTraceGetFileName>
 800db76:	4601      	mov	r1, r0
 800db78:	f240 3395 	movw	r3, #917	@ 0x395
 800db7c:	4a63      	ldr	r2, [pc, #396]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800db7e:	4864      	ldr	r0, [pc, #400]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800db80:	f001 fca8 	bl	800f4d4 <iprintf>
 800db84:	7dfb      	ldrb	r3, [r7, #23]
 800db86:	4619      	mov	r1, r3
 800db88:	4863      	ldr	r0, [pc, #396]	@ (800dd18 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800db8a:	f001 fca3 	bl	800f4d4 <iprintf>
 800db8e:	e00c      	b.n	800dbaa <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800db90:	485d      	ldr	r0, [pc, #372]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800db92:	f7fe fc8f 	bl	800c4b4 <DbgTraceGetFileName>
 800db96:	4601      	mov	r1, r0
 800db98:	f240 3399 	movw	r3, #921	@ 0x399
 800db9c:	4a5b      	ldr	r2, [pc, #364]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800db9e:	485c      	ldr	r0, [pc, #368]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dba0:	f001 fc98 	bl	800f4d4 <iprintf>
 800dba4:	485d      	ldr	r0, [pc, #372]	@ (800dd1c <Ble_Hci_Gap_Gatt_Init+0x500>)
 800dba6:	f001 fd05 	bl	800f5b4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800dbaa:	4b5d      	ldr	r3, [pc, #372]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dbac:	2201      	movs	r2, #1
 800dbae:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800dbb0:	4b5b      	ldr	r3, [pc, #364]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fc fdbd 	bl	800a734 <aci_gap_set_io_capability>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00f      	beq.n	800dbe4 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800dbc4:	4850      	ldr	r0, [pc, #320]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dbc6:	f7fe fc75 	bl	800c4b4 <DbgTraceGetFileName>
 800dbca:	4601      	mov	r1, r0
 800dbcc:	f240 33a3 	movw	r3, #931	@ 0x3a3
 800dbd0:	4a4e      	ldr	r2, [pc, #312]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dbd2:	484f      	ldr	r0, [pc, #316]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dbd4:	f001 fc7e 	bl	800f4d4 <iprintf>
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	4619      	mov	r1, r3
 800dbdc:	4851      	ldr	r0, [pc, #324]	@ (800dd24 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800dbde:	f001 fc79 	bl	800f4d4 <iprintf>
 800dbe2:	e00c      	b.n	800dbfe <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800dbe4:	4848      	ldr	r0, [pc, #288]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dbe6:	f7fe fc65 	bl	800c4b4 <DbgTraceGetFileName>
 800dbea:	4601      	mov	r1, r0
 800dbec:	f240 33a7 	movw	r3, #935	@ 0x3a7
 800dbf0:	4a46      	ldr	r2, [pc, #280]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dbf2:	4847      	ldr	r0, [pc, #284]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dbf4:	f001 fc6e 	bl	800f4d4 <iprintf>
 800dbf8:	484b      	ldr	r0, [pc, #300]	@ (800dd28 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800dbfa:	f001 fcdb 	bl	800f5b4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800dbfe:	4b48      	ldr	r3, [pc, #288]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc00:	2201      	movs	r2, #1
 800dc02:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800dc04:	4b46      	ldr	r3, [pc, #280]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc06:	2208      	movs	r2, #8
 800dc08:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800dc0a:	4b45      	ldr	r3, [pc, #276]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc0c:	2210      	movs	r2, #16
 800dc0e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800dc10:	4b43      	ldr	r3, [pc, #268]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800dc16:	4b42      	ldr	r3, [pc, #264]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc18:	4a44      	ldr	r2, [pc, #272]	@ (800dd2c <Ble_Hci_Gap_Gatt_Init+0x510>)
 800dc1a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800dc1c:	4b40      	ldr	r3, [pc, #256]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc1e:	2200      	movs	r2, #0
 800dc20:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800dc22:	4b3f      	ldr	r3, [pc, #252]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc24:	789c      	ldrb	r4, [r3, #2]
 800dc26:	4b3e      	ldr	r3, [pc, #248]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc28:	785d      	ldrb	r5, [r3, #1]
 800dc2a:	4b3d      	ldr	r3, [pc, #244]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc2c:	791b      	ldrb	r3, [r3, #4]
 800dc2e:	4a3c      	ldr	r2, [pc, #240]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc30:	7952      	ldrb	r2, [r2, #5]
 800dc32:	493b      	ldr	r1, [pc, #236]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc34:	78c9      	ldrb	r1, [r1, #3]
 800dc36:	483a      	ldr	r0, [pc, #232]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc38:	6880      	ldr	r0, [r0, #8]
 800dc3a:	2600      	movs	r6, #0
 800dc3c:	9604      	str	r6, [sp, #16]
 800dc3e:	9003      	str	r0, [sp, #12]
 800dc40:	9102      	str	r1, [sp, #8]
 800dc42:	9201      	str	r2, [sp, #4]
 800dc44:	9300      	str	r3, [sp, #0]
 800dc46:	2300      	movs	r3, #0
 800dc48:	2201      	movs	r2, #1
 800dc4a:	4629      	mov	r1, r5
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7fc fdc5 	bl	800a7dc <aci_gap_set_authentication_requirement>
 800dc52:	4603      	mov	r3, r0
 800dc54:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800dc56:	7dfb      	ldrb	r3, [r7, #23]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d00f      	beq.n	800dc7c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800dc5c:	482a      	ldr	r0, [pc, #168]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dc5e:	f7fe fc29 	bl	800c4b4 <DbgTraceGetFileName>
 800dc62:	4601      	mov	r1, r0
 800dc64:	f240 33c2 	movw	r3, #962	@ 0x3c2
 800dc68:	4a28      	ldr	r2, [pc, #160]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dc6a:	4829      	ldr	r0, [pc, #164]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dc6c:	f001 fc32 	bl	800f4d4 <iprintf>
 800dc70:	7dfb      	ldrb	r3, [r7, #23]
 800dc72:	4619      	mov	r1, r3
 800dc74:	482e      	ldr	r0, [pc, #184]	@ (800dd30 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800dc76:	f001 fc2d 	bl	800f4d4 <iprintf>
 800dc7a:	e00c      	b.n	800dc96 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800dc7c:	4822      	ldr	r0, [pc, #136]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dc7e:	f7fe fc19 	bl	800c4b4 <DbgTraceGetFileName>
 800dc82:	4601      	mov	r1, r0
 800dc84:	f240 33c6 	movw	r3, #966	@ 0x3c6
 800dc88:	4a20      	ldr	r2, [pc, #128]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dc8a:	4821      	ldr	r0, [pc, #132]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dc8c:	f001 fc22 	bl	800f4d4 <iprintf>
 800dc90:	4828      	ldr	r0, [pc, #160]	@ (800dd34 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800dc92:	f001 fc8f 	bl	800f5b4 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800dc96:	4b22      	ldr	r3, [pc, #136]	@ (800dd20 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800dc98:	789b      	ldrb	r3, [r3, #2]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d023      	beq.n	800dce6 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800dc9e:	f7fc ffe7 	bl	800ac70 <aci_gap_configure_filter_accept_list>
 800dca2:	4603      	mov	r3, r0
 800dca4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800dca6:	7dfb      	ldrb	r3, [r7, #23]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00f      	beq.n	800dccc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800dcac:	4816      	ldr	r0, [pc, #88]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dcae:	f7fe fc01 	bl	800c4b4 <DbgTraceGetFileName>
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	f240 33d1 	movw	r3, #977	@ 0x3d1
 800dcb8:	4a14      	ldr	r2, [pc, #80]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dcba:	4815      	ldr	r0, [pc, #84]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dcbc:	f001 fc0a 	bl	800f4d4 <iprintf>
 800dcc0:	7dfb      	ldrb	r3, [r7, #23]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	481c      	ldr	r0, [pc, #112]	@ (800dd38 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800dcc6:	f001 fc05 	bl	800f4d4 <iprintf>
 800dcca:	e00c      	b.n	800dce6 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800dccc:	480e      	ldr	r0, [pc, #56]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dcce:	f7fe fbf1 	bl	800c4b4 <DbgTraceGetFileName>
 800dcd2:	4601      	mov	r1, r0
 800dcd4:	f240 33d5 	movw	r3, #981	@ 0x3d5
 800dcd8:	4a0c      	ldr	r2, [pc, #48]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dcda:	480d      	ldr	r0, [pc, #52]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dcdc:	f001 fbfa 	bl	800f4d4 <iprintf>
 800dce0:	4816      	ldr	r0, [pc, #88]	@ (800dd3c <Ble_Hci_Gap_Gatt_Init+0x520>)
 800dce2:	f001 fc67 	bl	800f5b4 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800dce6:	4808      	ldr	r0, [pc, #32]	@ (800dd08 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800dce8:	f7fe fbe4 	bl	800c4b4 <DbgTraceGetFileName>
 800dcec:	4601      	mov	r1, r0
 800dcee:	f44f 7376 	mov.w	r3, #984	@ 0x3d8
 800dcf2:	4a06      	ldr	r2, [pc, #24]	@ (800dd0c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800dcf4:	4806      	ldr	r0, [pc, #24]	@ (800dd10 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800dcf6:	f001 fbed 	bl	800f4d4 <iprintf>
 800dcfa:	4811      	ldr	r0, [pc, #68]	@ (800dd40 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800dcfc:	f001 fbea 	bl	800f4d4 <iprintf>
}
 800dd00:	bf00      	nop
 800dd02:	371c      	adds	r7, #28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd08:	08011d64 	.word	0x08011d64
 800dd0c:	08013074 	.word	0x08013074
 800dd10:	08011d80 	.word	0x08011d80
 800dd14:	080126ec 	.word	0x080126ec
 800dd18:	0801270c 	.word	0x0801270c
 800dd1c:	08012748 	.word	0x08012748
 800dd20:	200016d8 	.word	0x200016d8
 800dd24:	08012774 	.word	0x08012774
 800dd28:	080127b4 	.word	0x080127b4
 800dd2c:	0001b207 	.word	0x0001b207
 800dd30:	080127e4 	.word	0x080127e4
 800dd34:	08012830 	.word	0x08012830
 800dd38:	0801286c 	.word	0x0801286c
 800dd3c:	080128ac 	.word	0x080128ac
 800dd40:	080128dc 	.word	0x080128dc

0800dd44 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08c      	sub	sp, #48	@ 0x30
 800dd48:	af08      	add	r7, sp, #32
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800dd4e:	2392      	movs	r3, #146	@ 0x92
 800dd50:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800dd52:	4a32      	ldr	r2, [pc, #200]	@ (800de1c <Adv_Request+0xd8>)
 800dd54:	79fb      	ldrb	r3, [r7, #7]
 800dd56:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	9306      	str	r3, [sp, #24]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	9305      	str	r3, [sp, #20]
 800dd62:	2300      	movs	r3, #0
 800dd64:	9304      	str	r3, [sp, #16]
 800dd66:	2300      	movs	r3, #0
 800dd68:	9303      	str	r3, [sp, #12]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9302      	str	r3, [sp, #8]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	9301      	str	r3, [sp, #4]
 800dd72:	2300      	movs	r3, #0
 800dd74:	9300      	str	r3, [sp, #0]
 800dd76:	2300      	movs	r3, #0
 800dd78:	22a0      	movs	r2, #160	@ 0xa0
 800dd7a:	2180      	movs	r1, #128	@ 0x80
 800dd7c:	2000      	movs	r0, #0
 800dd7e:	f7fc fbdf 	bl	800a540 <aci_gap_set_discoverable>
 800dd82:	4603      	mov	r3, r0
 800dd84:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800dd86:	7bfb      	ldrb	r3, [r7, #15]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00f      	beq.n	800ddac <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800dd8c:	4824      	ldr	r0, [pc, #144]	@ (800de20 <Adv_Request+0xdc>)
 800dd8e:	f7fe fb91 	bl	800c4b4 <DbgTraceGetFileName>
 800dd92:	4601      	mov	r1, r0
 800dd94:	f240 33ee 	movw	r3, #1006	@ 0x3ee
 800dd98:	4a22      	ldr	r2, [pc, #136]	@ (800de24 <Adv_Request+0xe0>)
 800dd9a:	4823      	ldr	r0, [pc, #140]	@ (800de28 <Adv_Request+0xe4>)
 800dd9c:	f001 fb9a 	bl	800f4d4 <iprintf>
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
 800dda2:	4619      	mov	r1, r3
 800dda4:	4821      	ldr	r0, [pc, #132]	@ (800de2c <Adv_Request+0xe8>)
 800dda6:	f001 fb95 	bl	800f4d4 <iprintf>
 800ddaa:	e00c      	b.n	800ddc6 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800ddac:	481c      	ldr	r0, [pc, #112]	@ (800de20 <Adv_Request+0xdc>)
 800ddae:	f7fe fb81 	bl	800c4b4 <DbgTraceGetFileName>
 800ddb2:	4601      	mov	r1, r0
 800ddb4:	f240 33f2 	movw	r3, #1010	@ 0x3f2
 800ddb8:	4a1a      	ldr	r2, [pc, #104]	@ (800de24 <Adv_Request+0xe0>)
 800ddba:	481b      	ldr	r0, [pc, #108]	@ (800de28 <Adv_Request+0xe4>)
 800ddbc:	f001 fb8a 	bl	800f4d4 <iprintf>
 800ddc0:	481b      	ldr	r0, [pc, #108]	@ (800de30 <Adv_Request+0xec>)
 800ddc2:	f001 fbf7 	bl	800f5b4 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800ddc6:	491b      	ldr	r1, [pc, #108]	@ (800de34 <Adv_Request+0xf0>)
 800ddc8:	2003      	movs	r0, #3
 800ddca:	f7fc fedf 	bl	800ab8c <aci_gap_update_adv_data>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d00f      	beq.n	800ddf8 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800ddd8:	4811      	ldr	r0, [pc, #68]	@ (800de20 <Adv_Request+0xdc>)
 800ddda:	f7fe fb6b 	bl	800c4b4 <DbgTraceGetFileName>
 800ddde:	4601      	mov	r1, r0
 800dde0:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 800dde4:	4a0f      	ldr	r2, [pc, #60]	@ (800de24 <Adv_Request+0xe0>)
 800dde6:	4810      	ldr	r0, [pc, #64]	@ (800de28 <Adv_Request+0xe4>)
 800dde8:	f001 fb74 	bl	800f4d4 <iprintf>
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	4811      	ldr	r0, [pc, #68]	@ (800de38 <Adv_Request+0xf4>)
 800ddf2:	f001 fb6f 	bl	800f4d4 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800ddf6:	e00d      	b.n	800de14 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800ddf8:	4809      	ldr	r0, [pc, #36]	@ (800de20 <Adv_Request+0xdc>)
 800ddfa:	f7fe fb5b 	bl	800c4b4 <DbgTraceGetFileName>
 800ddfe:	4601      	mov	r1, r0
 800de00:	f240 4301 	movw	r3, #1025	@ 0x401
 800de04:	4a07      	ldr	r2, [pc, #28]	@ (800de24 <Adv_Request+0xe0>)
 800de06:	4808      	ldr	r0, [pc, #32]	@ (800de28 <Adv_Request+0xe4>)
 800de08:	f001 fb64 	bl	800f4d4 <iprintf>
 800de0c:	480b      	ldr	r0, [pc, #44]	@ (800de3c <Adv_Request+0xf8>)
 800de0e:	f001 fb61 	bl	800f4d4 <iprintf>
  return;
 800de12:	bf00      	nop
}
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}
 800de1a:	bf00      	nop
 800de1c:	200016d8 	.word	0x200016d8
 800de20:	08011d64 	.word	0x08011d64
 800de24:	0801308c 	.word	0x0801308c
 800de28:	08011d80 	.word	0x08011d80
 800de2c:	08012908 	.word	0x08012908
 800de30:	08012940 	.word	0x08012940
 800de34:	20000014 	.word	0x20000014
 800de38:	08012968 	.word	0x08012968
 800de3c:	0801299c 	.word	0x0801299c

0800de40 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800de46:	f7ff f8f5 	bl	800d034 <LL_FLASH_GetUDN>
 800de4a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de52:	d023      	beq.n	800de9c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800de54:	f7ff f906 	bl	800d064 <LL_FLASH_GetSTCompanyID>
 800de58:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800de5a:	f7ff f8f7 	bl	800d04c <LL_FLASH_GetDeviceID>
 800de5e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	b2da      	uxtb	r2, r3
 800de64:	4b16      	ldr	r3, [pc, #88]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de66:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	0a1b      	lsrs	r3, r3, #8
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	4b14      	ldr	r3, [pc, #80]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de70:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	b2da      	uxtb	r2, r3
 800de76:	4b12      	ldr	r3, [pc, #72]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de78:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	4b10      	ldr	r3, [pc, #64]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de80:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	0a1b      	lsrs	r3, r3, #8
 800de86:	b2da      	uxtb	r2, r3
 800de88:	4b0d      	ldr	r3, [pc, #52]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de8a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	0c1b      	lsrs	r3, r3, #16
 800de90:	b2da      	uxtb	r2, r3
 800de92:	4b0b      	ldr	r3, [pc, #44]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de94:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800de96:	4b0a      	ldr	r3, [pc, #40]	@ (800dec0 <BleGetBdAddress+0x80>)
 800de98:	617b      	str	r3, [r7, #20]
 800de9a:	e00b      	b.n	800deb4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800de9c:	2000      	movs	r0, #0
 800de9e:	f7fe fbe7 	bl	800c670 <OTP_Read>
 800dea2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	617b      	str	r3, [r7, #20]
 800deae:	e001      	b.n	800deb4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800deb0:	4b04      	ldr	r3, [pc, #16]	@ (800dec4 <BleGetBdAddress+0x84>)
 800deb2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800deb4:	697b      	ldr	r3, [r7, #20]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3718      	adds	r7, #24
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	200016d0 	.word	0x200016d0
 800dec4:	08013024 	.word	0x08013024

0800dec8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800dece:	4b1f      	ldr	r3, [pc, #124]	@ (800df4c <Adv_Cancel+0x84>)
 800ded0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ded4:	2b05      	cmp	r3, #5
 800ded6:	d035      	beq.n	800df44 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ded8:	2392      	movs	r3, #146	@ 0x92
 800deda:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800dedc:	f7fc fb0c 	bl	800a4f8 <aci_gap_set_non_discoverable>
 800dee0:	4603      	mov	r3, r0
 800dee2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800dee4:	4b19      	ldr	r3, [pc, #100]	@ (800df4c <Adv_Cancel+0x84>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800deec:	79fb      	ldrb	r3, [r7, #7]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00d      	beq.n	800df0e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800def2:	4817      	ldr	r0, [pc, #92]	@ (800df50 <Adv_Cancel+0x88>)
 800def4:	f7fe fade 	bl	800c4b4 <DbgTraceGetFileName>
 800def8:	4601      	mov	r1, r0
 800defa:	f240 434f 	movw	r3, #1103	@ 0x44f
 800defe:	4a15      	ldr	r2, [pc, #84]	@ (800df54 <Adv_Cancel+0x8c>)
 800df00:	4815      	ldr	r0, [pc, #84]	@ (800df58 <Adv_Cancel+0x90>)
 800df02:	f001 fae7 	bl	800f4d4 <iprintf>
 800df06:	4815      	ldr	r0, [pc, #84]	@ (800df5c <Adv_Cancel+0x94>)
 800df08:	f001 fae4 	bl	800f4d4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800df0c:	e01a      	b.n	800df44 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800df0e:	4810      	ldr	r0, [pc, #64]	@ (800df50 <Adv_Cancel+0x88>)
 800df10:	f7fe fad0 	bl	800c4b4 <DbgTraceGetFileName>
 800df14:	4601      	mov	r1, r0
 800df16:	f240 4353 	movw	r3, #1107	@ 0x453
 800df1a:	4a0e      	ldr	r2, [pc, #56]	@ (800df54 <Adv_Cancel+0x8c>)
 800df1c:	480e      	ldr	r0, [pc, #56]	@ (800df58 <Adv_Cancel+0x90>)
 800df1e:	f001 fad9 	bl	800f4d4 <iprintf>
 800df22:	480f      	ldr	r0, [pc, #60]	@ (800df60 <Adv_Cancel+0x98>)
 800df24:	f001 fad6 	bl	800f4d4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800df28:	4809      	ldr	r0, [pc, #36]	@ (800df50 <Adv_Cancel+0x88>)
 800df2a:	f7fe fac3 	bl	800c4b4 <DbgTraceGetFileName>
 800df2e:	4601      	mov	r1, r0
 800df30:	f240 4354 	movw	r3, #1108	@ 0x454
 800df34:	4a07      	ldr	r2, [pc, #28]	@ (800df54 <Adv_Cancel+0x8c>)
 800df36:	4808      	ldr	r0, [pc, #32]	@ (800df58 <Adv_Cancel+0x90>)
 800df38:	f001 facc 	bl	800f4d4 <iprintf>
 800df3c:	4809      	ldr	r0, [pc, #36]	@ (800df64 <Adv_Cancel+0x9c>)
 800df3e:	f001 fac9 	bl	800f4d4 <iprintf>
  return;
 800df42:	bf00      	nop
 800df44:	bf00      	nop
}
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	200016d8 	.word	0x200016d8
 800df50:	08011d64 	.word	0x08011d64
 800df54:	08013098 	.word	0x08013098
 800df58:	08011d80 	.word	0x08011d80
 800df5c:	080129c4 	.word	0x080129c4
 800df60:	080129e8 	.word	0x080129e8
 800df64:	080129f0 	.word	0x080129f0

0800df68 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800df70:	2100      	movs	r1, #0
 800df72:	2002      	movs	r0, #2
 800df74:	f000 fc98 	bl	800e8a8 <UTIL_SEQ_SetTask>

  return;
 800df78:	bf00      	nop
}
 800df7a:	3708      	adds	r7, #8
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800df88:	2001      	movs	r0, #1
 800df8a:	f000 fcf9 	bl	800e980 <UTIL_SEQ_SetEvt>

  return;
 800df8e:	bf00      	nop
}
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800df96:	b580      	push	{r7, lr}
 800df98:	b082      	sub	sp, #8
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800df9e:	2001      	movs	r0, #1
 800dfa0:	f000 fd0e 	bl	800e9c0 <UTIL_SEQ_WaitEvt>

  return;
 800dfa4:	bf00      	nop
}
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f7fd fcac 	bl	800b91c <SVCCTL_UserEvtRx>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800dfc8:	7afb      	ldrb	r3, [r7, #11]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800dfd4:	e003      	b.n	800dfde <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	701a      	strb	r2, [r3, #0]
  return;
 800dfdc:	bf00      	nop
}
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	4603      	mov	r3, r0
 800dfec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <BLE_StatusNot+0x16>
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d006      	beq.n	800e006 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800dff8:	e00b      	b.n	800e012 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800dffa:	2307      	movs	r3, #7
 800dffc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800dffe:	68f8      	ldr	r0, [r7, #12]
 800e000:	f000 fc7e 	bl	800e900 <UTIL_SEQ_PauseTask>
      break;
 800e004:	e005      	b.n	800e012 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e006:	2307      	movs	r3, #7
 800e008:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800e00a:	68f8      	ldr	r0, [r7, #12]
 800e00c:	f000 fc98 	bl	800e940 <UTIL_SEQ_ResumeTask>
      break;
 800e010:	bf00      	nop
  }

  return;
 800e012:	bf00      	nop
}
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <Custom_STM_App_Notification>:
//}
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800e01a:	b480      	push	{r7}
 800e01c:	b083      	sub	sp, #12
 800e01e:	af00      	add	r7, sp, #0
 800e020:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	2b02      	cmp	r3, #2
 800e028:	d006      	beq.n	800e038 <Custom_STM_App_Notification+0x1e>
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	dc06      	bgt.n	800e03c <Custom_STM_App_Notification+0x22>
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d006      	beq.n	800e040 <Custom_STM_App_Notification+0x26>
 800e032:	2b01      	cmp	r3, #1
 800e034:	d006      	beq.n	800e044 <Custom_STM_App_Notification+0x2a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800e036:	e001      	b.n	800e03c <Custom_STM_App_Notification+0x22>
      break;
 800e038:	bf00      	nop
 800e03a:	e004      	b.n	800e046 <Custom_STM_App_Notification+0x2c>
      break;
 800e03c:	bf00      	nop
 800e03e:	e002      	b.n	800e046 <Custom_STM_App_Notification+0x2c>
      break;
 800e040:	bf00      	nop
 800e042:	e000      	b.n	800e046 <Custom_STM_App_Notification+0x2c>
      break;
 800e044:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800e046:	bf00      	nop
}
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800e052:	b480      	push	{r7}
 800e054:	b083      	sub	sp, #12
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d002      	beq.n	800e068 <Custom_APP_Notification+0x16>
 800e062:	2b01      	cmp	r3, #1
 800e064:	d002      	beq.n	800e06c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800e066:	e002      	b.n	800e06e <Custom_APP_Notification+0x1c>
      break;
 800e068:	bf00      	nop
 800e06a:	e000      	b.n	800e06e <Custom_APP_Notification+0x1c>
      break;
 800e06c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800e06e:	bf00      	nop
}
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800e07a:	b480      	push	{r7}
 800e07c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800e07e:	bf00      	nop
}
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b08c      	sub	sp, #48	@ 0x30
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800e090:	2300      	movs	r3, #0
 800e092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3301      	adds	r3, #1
 800e09a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800e09c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2bff      	cmp	r3, #255	@ 0xff
 800e0a2:	d17d      	bne.n	800e1a0 <Custom_STM_Event_Handler+0x118>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800e0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a6:	3302      	adds	r3, #2
 800e0a8:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800e0b4:	2b1a      	cmp	r3, #26
 800e0b6:	d86f      	bhi.n	800e198 <Custom_STM_Event_Handler+0x110>
 800e0b8:	a201      	add	r2, pc, #4	@ (adr r2, 800e0c0 <Custom_STM_Event_Handler+0x38>)
 800e0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0be:	bf00      	nop
 800e0c0:	0800e12d 	.word	0x0800e12d
 800e0c4:	0800e199 	.word	0x0800e199
 800e0c8:	0800e199 	.word	0x0800e199
 800e0cc:	0800e199 	.word	0x0800e199
 800e0d0:	0800e199 	.word	0x0800e199
 800e0d4:	0800e199 	.word	0x0800e199
 800e0d8:	0800e199 	.word	0x0800e199
 800e0dc:	0800e199 	.word	0x0800e199
 800e0e0:	0800e199 	.word	0x0800e199
 800e0e4:	0800e199 	.word	0x0800e199
 800e0e8:	0800e199 	.word	0x0800e199
 800e0ec:	0800e199 	.word	0x0800e199
 800e0f0:	0800e199 	.word	0x0800e199
 800e0f4:	0800e199 	.word	0x0800e199
 800e0f8:	0800e199 	.word	0x0800e199
 800e0fc:	0800e199 	.word	0x0800e199
 800e100:	0800e199 	.word	0x0800e199
 800e104:	0800e199 	.word	0x0800e199
 800e108:	0800e199 	.word	0x0800e199
 800e10c:	0800e199 	.word	0x0800e199
 800e110:	0800e199 	.word	0x0800e199
 800e114:	0800e199 	.word	0x0800e199
 800e118:	0800e199 	.word	0x0800e199
 800e11c:	0800e199 	.word	0x0800e199
 800e120:	0800e199 	.word	0x0800e199
 800e124:	0800e199 	.word	0x0800e199
 800e128:	0800e17b 	.word	0x0800e17b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800e12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12e:	3302      	adds	r3, #2
 800e130:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomData_SendHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800e132:	69fb      	ldr	r3, [r7, #28]
 800e134:	885b      	ldrh	r3, [r3, #2]
 800e136:	b29b      	uxth	r3, r3
 800e138:	461a      	mov	r2, r3
 800e13a:	4b1d      	ldr	r3, [pc, #116]	@ (800e1b0 <Custom_STM_Event_Handler+0x128>)
 800e13c:	885b      	ldrh	r3, [r3, #2]
 800e13e:	3302      	adds	r3, #2
 800e140:	429a      	cmp	r2, r3
 800e142:	d12b      	bne.n	800e19c <Custom_STM_Event_Handler+0x114>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800e144:	2301      	movs	r3, #1
 800e146:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800e14a:	69fb      	ldr	r3, [r7, #28]
 800e14c:	7a1b      	ldrb	r3, [r3, #8]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d002      	beq.n	800e158 <Custom_STM_Event_Handler+0xd0>
 800e152:	2b01      	cmp	r3, #1
 800e154:	d008      	beq.n	800e168 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 800e156:	e00f      	b.n	800e178 <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATA_SEND_NOTIFY_DISABLED_EVT;
 800e158:	2301      	movs	r3, #1
 800e15a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e15c:	f107 0308 	add.w	r3, r7, #8
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff ff5a 	bl	800e01a <Custom_STM_App_Notification>
                break;
 800e166:	e007      	b.n	800e178 <Custom_STM_Event_Handler+0xf0>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DATA_SEND_NOTIFY_ENABLED_EVT;
 800e168:	2300      	movs	r3, #0
 800e16a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800e16c:	f107 0308 	add.w	r3, r7, #8
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff ff52 	bl	800e01a <Custom_STM_App_Notification>
                break;
 800e176:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomData_SendHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800e178:	e010      	b.n	800e19c <Custom_STM_Event_Handler+0x114>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800e17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17c:	3302      	adds	r3, #2
 800e17e:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800e180:	2302      	movs	r3, #2
 800e182:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800e18c:	f107 0308 	add.w	r3, r7, #8
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff ff42 	bl	800e01a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800e196:	e002      	b.n	800e19e <Custom_STM_Event_Handler+0x116>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800e198:	bf00      	nop
 800e19a:	e002      	b.n	800e1a2 <Custom_STM_Event_Handler+0x11a>
          break;
 800e19c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800e19e:	e000      	b.n	800e1a2 <Custom_STM_Event_Handler+0x11a>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800e1a0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800e1a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3730      	adds	r7, #48	@ 0x30
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20001760 	.word	0x20001760

0800e1b4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08c      	sub	sp, #48	@ 0x30
 800e1b8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e1ba:	2392      	movs	r3, #146	@ 0x92
 800e1bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800e1be:	4854      	ldr	r0, [pc, #336]	@ (800e310 <SVCCTL_InitCustomSvc+0x15c>)
 800e1c0:	f7fd fb92 	bl	800b8e8 <SVCCTL_RegisterSvcHandler>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800e1c4:	2304      	movs	r3, #4
 800e1c6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_PEDOMETER_UUID(uuid.Char_UUID_128);
 800e1c8:	238f      	movs	r3, #143	@ 0x8f
 800e1ca:	713b      	strb	r3, [r7, #4]
 800e1cc:	23e5      	movs	r3, #229	@ 0xe5
 800e1ce:	717b      	strb	r3, [r7, #5]
 800e1d0:	23b3      	movs	r3, #179	@ 0xb3
 800e1d2:	71bb      	strb	r3, [r7, #6]
 800e1d4:	23d5      	movs	r3, #213	@ 0xd5
 800e1d6:	71fb      	strb	r3, [r7, #7]
 800e1d8:	232e      	movs	r3, #46	@ 0x2e
 800e1da:	723b      	strb	r3, [r7, #8]
 800e1dc:	237f      	movs	r3, #127	@ 0x7f
 800e1de:	727b      	strb	r3, [r7, #9]
 800e1e0:	234a      	movs	r3, #74	@ 0x4a
 800e1e2:	72bb      	strb	r3, [r7, #10]
 800e1e4:	2398      	movs	r3, #152	@ 0x98
 800e1e6:	72fb      	strb	r3, [r7, #11]
 800e1e8:	232a      	movs	r3, #42	@ 0x2a
 800e1ea:	733b      	strb	r3, [r7, #12]
 800e1ec:	2348      	movs	r3, #72	@ 0x48
 800e1ee:	737b      	strb	r3, [r7, #13]
 800e1f0:	237a      	movs	r3, #122	@ 0x7a
 800e1f2:	73bb      	strb	r3, [r7, #14]
 800e1f4:	23cc      	movs	r3, #204	@ 0xcc
 800e1f6:	73fb      	strb	r3, [r7, #15]
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	743b      	strb	r3, [r7, #16]
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	747b      	strb	r3, [r7, #17]
 800e200:	2300      	movs	r3, #0
 800e202:	74bb      	strb	r3, [r7, #18]
 800e204:	2300      	movs	r3, #0
 800e206:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800e208:	7dbb      	ldrb	r3, [r7, #22]
 800e20a:	1d39      	adds	r1, r7, #4
 800e20c:	4a41      	ldr	r2, [pc, #260]	@ (800e314 <SVCCTL_InitCustomSvc+0x160>)
 800e20e:	9200      	str	r2, [sp, #0]
 800e210:	2201      	movs	r2, #1
 800e212:	2002      	movs	r0, #2
 800e214:	f7fc fddc 	bl	800add0 <aci_gatt_add_service>
 800e218:	4603      	mov	r3, r0
 800e21a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomPedometerHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e21c:	7dfb      	ldrb	r3, [r7, #23]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00f      	beq.n	800e242 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: PEDOMETER, error code: 0x%x \n\r", ret);
 800e222:	483d      	ldr	r0, [pc, #244]	@ (800e318 <SVCCTL_InitCustomSvc+0x164>)
 800e224:	f7fe f946 	bl	800c4b4 <DbgTraceGetFileName>
 800e228:	4601      	mov	r1, r0
 800e22a:	f44f 739a 	mov.w	r3, #308	@ 0x134
 800e22e:	4a3b      	ldr	r2, [pc, #236]	@ (800e31c <SVCCTL_InitCustomSvc+0x168>)
 800e230:	483b      	ldr	r0, [pc, #236]	@ (800e320 <SVCCTL_InitCustomSvc+0x16c>)
 800e232:	f001 f94f 	bl	800f4d4 <iprintf>
 800e236:	7dfb      	ldrb	r3, [r7, #23]
 800e238:	4619      	mov	r1, r3
 800e23a:	483a      	ldr	r0, [pc, #232]	@ (800e324 <SVCCTL_InitCustomSvc+0x170>)
 800e23c:	f001 f94a 	bl	800f4d4 <iprintf>
 800e240:	e00c      	b.n	800e25c <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: PEDOMETER \n\r");
 800e242:	4835      	ldr	r0, [pc, #212]	@ (800e318 <SVCCTL_InitCustomSvc+0x164>)
 800e244:	f7fe f936 	bl	800c4b4 <DbgTraceGetFileName>
 800e248:	4601      	mov	r1, r0
 800e24a:	f44f 739c 	mov.w	r3, #312	@ 0x138
 800e24e:	4a33      	ldr	r2, [pc, #204]	@ (800e31c <SVCCTL_InitCustomSvc+0x168>)
 800e250:	4833      	ldr	r0, [pc, #204]	@ (800e320 <SVCCTL_InitCustomSvc+0x16c>)
 800e252:	f001 f93f 	bl	800f4d4 <iprintf>
 800e256:	4834      	ldr	r0, [pc, #208]	@ (800e328 <SVCCTL_InitCustomSvc+0x174>)
 800e258:	f001 f93c 	bl	800f4d4 <iprintf>
  }

  /**
   *  DATA_SEND
   */
  COPY_DATA_SEND_UUID(uuid.Char_UUID_128);
 800e25c:	2319      	movs	r3, #25
 800e25e:	713b      	strb	r3, [r7, #4]
 800e260:	23ed      	movs	r3, #237	@ 0xed
 800e262:	717b      	strb	r3, [r7, #5]
 800e264:	2382      	movs	r3, #130	@ 0x82
 800e266:	71bb      	strb	r3, [r7, #6]
 800e268:	23ae      	movs	r3, #174	@ 0xae
 800e26a:	71fb      	strb	r3, [r7, #7]
 800e26c:	23ed      	movs	r3, #237	@ 0xed
 800e26e:	723b      	strb	r3, [r7, #8]
 800e270:	2321      	movs	r3, #33	@ 0x21
 800e272:	727b      	strb	r3, [r7, #9]
 800e274:	234c      	movs	r3, #76	@ 0x4c
 800e276:	72bb      	strb	r3, [r7, #10]
 800e278:	239d      	movs	r3, #157	@ 0x9d
 800e27a:	72fb      	strb	r3, [r7, #11]
 800e27c:	2341      	movs	r3, #65	@ 0x41
 800e27e:	733b      	strb	r3, [r7, #12]
 800e280:	2345      	movs	r3, #69	@ 0x45
 800e282:	737b      	strb	r3, [r7, #13]
 800e284:	2322      	movs	r3, #34	@ 0x22
 800e286:	73bb      	strb	r3, [r7, #14]
 800e288:	238e      	movs	r3, #142	@ 0x8e
 800e28a:	73fb      	strb	r3, [r7, #15]
 800e28c:	2300      	movs	r3, #0
 800e28e:	743b      	strb	r3, [r7, #16]
 800e290:	2300      	movs	r3, #0
 800e292:	747b      	strb	r3, [r7, #17]
 800e294:	2300      	movs	r3, #0
 800e296:	74bb      	strb	r3, [r7, #18]
 800e298:	2300      	movs	r3, #0
 800e29a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomPedometerHdle,
 800e29c:	4b1d      	ldr	r3, [pc, #116]	@ (800e314 <SVCCTL_InitCustomSvc+0x160>)
 800e29e:	8818      	ldrh	r0, [r3, #0]
 800e2a0:	4b22      	ldr	r3, [pc, #136]	@ (800e32c <SVCCTL_InitCustomSvc+0x178>)
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	1d3a      	adds	r2, r7, #4
 800e2a6:	4922      	ldr	r1, [pc, #136]	@ (800e330 <SVCCTL_InitCustomSvc+0x17c>)
 800e2a8:	9105      	str	r1, [sp, #20]
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	9104      	str	r1, [sp, #16]
 800e2ae:	2110      	movs	r1, #16
 800e2b0:	9103      	str	r1, [sp, #12]
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	9102      	str	r1, [sp, #8]
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	9101      	str	r1, [sp, #4]
 800e2ba:	2110      	movs	r1, #16
 800e2bc:	9100      	str	r1, [sp, #0]
 800e2be:	2102      	movs	r1, #2
 800e2c0:	f7fc fe5c 	bl	800af7c <aci_gatt_add_char>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomData_SendHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800e2c8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00f      	beq.n	800e2ee <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DATA_SEND, error code: 0x%x \n\r", ret);
 800e2ce:	4812      	ldr	r0, [pc, #72]	@ (800e318 <SVCCTL_InitCustomSvc+0x164>)
 800e2d0:	f7fe f8f0 	bl	800c4b4 <DbgTraceGetFileName>
 800e2d4:	4601      	mov	r1, r0
 800e2d6:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800e2da:	4a10      	ldr	r2, [pc, #64]	@ (800e31c <SVCCTL_InitCustomSvc+0x168>)
 800e2dc:	4810      	ldr	r0, [pc, #64]	@ (800e320 <SVCCTL_InitCustomSvc+0x16c>)
 800e2de:	f001 f8f9 	bl	800f4d4 <iprintf>
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4813      	ldr	r0, [pc, #76]	@ (800e334 <SVCCTL_InitCustomSvc+0x180>)
 800e2e8:	f001 f8f4 	bl	800f4d4 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800e2ec:	e00d      	b.n	800e30a <SVCCTL_InitCustomSvc+0x156>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DATA_SEND \n\r");
 800e2ee:	480a      	ldr	r0, [pc, #40]	@ (800e318 <SVCCTL_InitCustomSvc+0x164>)
 800e2f0:	f7fe f8e0 	bl	800c4b4 <DbgTraceGetFileName>
 800e2f4:	4601      	mov	r1, r0
 800e2f6:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800e2fa:	4a08      	ldr	r2, [pc, #32]	@ (800e31c <SVCCTL_InitCustomSvc+0x168>)
 800e2fc:	4808      	ldr	r0, [pc, #32]	@ (800e320 <SVCCTL_InitCustomSvc+0x16c>)
 800e2fe:	f001 f8e9 	bl	800f4d4 <iprintf>
 800e302:	480d      	ldr	r0, [pc, #52]	@ (800e338 <SVCCTL_InitCustomSvc+0x184>)
 800e304:	f001 f8e6 	bl	800f4d4 <iprintf>
  return;
 800e308:	bf00      	nop
}
 800e30a:	3718      	adds	r7, #24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	0800e089 	.word	0x0800e089
 800e314:	20001760 	.word	0x20001760
 800e318:	08012a0c 	.word	0x08012a0c
 800e31c:	080130a4 	.word	0x080130a4
 800e320:	08012a2c 	.word	0x08012a2c
 800e324:	08012a40 	.word	0x08012a40
 800e328:	08012a88 	.word	0x08012a88
 800e32c:	20000018 	.word	0x20000018
 800e330:	20001762 	.word	0x20001762
 800e334:	08012ac0 	.word	0x08012ac0
 800e338:	08012b08 	.word	0x08012b08

0800e33c <LL_PWR_EnableBootC2>:
{
 800e33c:	b480      	push	{r7}
 800e33e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e340:	4b05      	ldr	r3, [pc, #20]	@ (800e358 <LL_PWR_EnableBootC2+0x1c>)
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	4a04      	ldr	r2, [pc, #16]	@ (800e358 <LL_PWR_EnableBootC2+0x1c>)
 800e346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e34a:	60d3      	str	r3, [r2, #12]
}
 800e34c:	bf00      	nop
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	58000400 	.word	0x58000400

0800e35c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e364:	4b06      	ldr	r3, [pc, #24]	@ (800e380 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e366:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800e36a:	4905      	ldr	r1, [pc, #20]	@ (800e380 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	4313      	orrs	r3, r2
 800e370:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr
 800e380:	58000800 	.word	0x58000800

0800e384 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e38c:	4b05      	ldr	r3, [pc, #20]	@ (800e3a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e38e:	6a1a      	ldr	r2, [r3, #32]
 800e390:	4904      	ldr	r1, [pc, #16]	@ (800e3a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4313      	orrs	r3, r2
 800e396:	620b      	str	r3, [r1, #32]
}
 800e398:	bf00      	nop
 800e39a:	370c      	adds	r7, #12
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	58000800 	.word	0x58000800

0800e3a8 <LL_AHB3_GRP1_EnableClock>:
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b085      	sub	sp, #20
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e3b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e3b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e3c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
}
 800e3ce:	bf00      	nop
 800e3d0:	3714      	adds	r7, #20
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e3da:	b480      	push	{r7}
 800e3dc:	b085      	sub	sp, #20
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e3e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3e6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e3ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e3fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	4013      	ands	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e404:	68fb      	ldr	r3, [r7, #12]
}
 800e406:	bf00      	nop
 800e408:	3714      	adds	r7, #20
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800e412:	b480      	push	{r7}
 800e414:	b083      	sub	sp, #12
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	601a      	str	r2, [r3, #0]
}
 800e426:	bf00      	nop
 800e428:	370c      	adds	r7, #12
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800e432:	b480      	push	{r7}
 800e434:	b083      	sub	sp, #12
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f043 0201 	orr.w	r2, r3, #1
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	601a      	str	r2, [r3, #0]
}
 800e446:	bf00      	nop
 800e448:	370c      	adds	r7, #12
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr

0800e452 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e452:	b480      	push	{r7}
 800e454:	b083      	sub	sp, #12
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685a      	ldr	r2, [r3, #4]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	041b      	lsls	r3, r3, #16
 800e464:	43db      	mvns	r3, r3
 800e466:	401a      	ands	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	605a      	str	r2, [r3, #4]
}
 800e46c:	bf00      	nop
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr

0800e478 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e478:	b480      	push	{r7}
 800e47a:	b083      	sub	sp, #12
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	43db      	mvns	r3, r3
 800e48a:	401a      	ands	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	605a      	str	r2, [r3, #4]
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	041a      	lsls	r2, r3, #16
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	609a      	str	r2, [r3, #8]
}
 800e4ae:	bf00      	nop
 800e4b0:	370c      	adds	r7, #12
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e4ba:	b480      	push	{r7}
 800e4bc:	b083      	sub	sp, #12
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d101      	bne.n	800e4d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e000      	b.n	800e4d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	370c      	adds	r7, #12
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e2:	4770      	bx	lr

0800e4e4 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e4e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e4ec:	f7ff ff75 	bl	800e3da <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e4f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e4f4:	f7ff ff46 	bl	800e384 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e4f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e4fc:	f7ff ff2e 	bl	800e35c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e500:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e502:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e504:	f7ff ff1a 	bl	800e33c <LL_PWR_EnableBootC2>

  return;
 800e508:	bf00      	nop
}
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e510:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e514:	f7ff ff48 	bl	800e3a8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e518:	4806      	ldr	r0, [pc, #24]	@ (800e534 <HW_IPCC_Init+0x28>)
 800e51a:	f7ff ff8a 	bl	800e432 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e51e:	4805      	ldr	r0, [pc, #20]	@ (800e534 <HW_IPCC_Init+0x28>)
 800e520:	f7ff ff77 	bl	800e412 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e524:	202c      	movs	r0, #44	@ 0x2c
 800e526:	f7f6 fe36 	bl	8005196 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e52a:	202d      	movs	r0, #45	@ 0x2d
 800e52c:	f7f6 fe33 	bl	8005196 <HAL_NVIC_EnableIRQ>

  return;
 800e530:	bf00      	nop
}
 800e532:	bd80      	pop	{r7, pc}
 800e534:	58000c00 	.word	0x58000c00

0800e538 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e53c:	2101      	movs	r1, #1
 800e53e:	4802      	ldr	r0, [pc, #8]	@ (800e548 <HW_IPCC_BLE_Init+0x10>)
 800e540:	f7ff ff9a 	bl	800e478 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e544:	bf00      	nop
}
 800e546:	bd80      	pop	{r7, pc}
 800e548:	58000c00 	.word	0x58000c00

0800e54c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e550:	2101      	movs	r1, #1
 800e552:	4802      	ldr	r0, [pc, #8]	@ (800e55c <HW_IPCC_BLE_SendCmd+0x10>)
 800e554:	f7ff ffa2 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e558:	bf00      	nop
}
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	58000c00 	.word	0x58000c00

0800e560 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e560:	b580      	push	{r7, lr}
 800e562:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e564:	2102      	movs	r1, #2
 800e566:	4802      	ldr	r0, [pc, #8]	@ (800e570 <HW_IPCC_SYS_Init+0x10>)
 800e568:	f7ff ff86 	bl	800e478 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e56c:	bf00      	nop
}
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	58000c00 	.word	0x58000c00

0800e574 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e578:	2102      	movs	r1, #2
 800e57a:	4804      	ldr	r0, [pc, #16]	@ (800e58c <HW_IPCC_SYS_SendCmd+0x18>)
 800e57c:	f7ff ff8e 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e580:	2102      	movs	r1, #2
 800e582:	4802      	ldr	r0, [pc, #8]	@ (800e58c <HW_IPCC_SYS_SendCmd+0x18>)
 800e584:	f7ff ff65 	bl	800e452 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e588:	bf00      	nop
}
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	58000c00 	.word	0x58000c00

0800e590 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e598:	2108      	movs	r1, #8
 800e59a:	480c      	ldr	r0, [pc, #48]	@ (800e5cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e59c:	f7ff ff8d 	bl	800e4ba <LL_C1_IPCC_IsActiveFlag_CHx>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d007      	beq.n	800e5b6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e5a6:	4a0a      	ldr	r2, [pc, #40]	@ (800e5d0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e5ac:	2108      	movs	r1, #8
 800e5ae:	4807      	ldr	r0, [pc, #28]	@ (800e5cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e5b0:	f7ff ff4f 	bl	800e452 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e5b4:	e006      	b.n	800e5c4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e5ba:	2108      	movs	r1, #8
 800e5bc:	4803      	ldr	r0, [pc, #12]	@ (800e5cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e5be:	f7ff ff6d 	bl	800e49c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e5c2:	bf00      	nop
}
 800e5c4:	3708      	adds	r7, #8
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	58000c00 	.word	0x58000c00
 800e5d0:	20001764 	.word	0x20001764

0800e5d4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e5d8:	2108      	movs	r1, #8
 800e5da:	4802      	ldr	r0, [pc, #8]	@ (800e5e4 <HW_IPCC_TRACES_Init+0x10>)
 800e5dc:	f7ff ff4c 	bl	800e478 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e5e0:	bf00      	nop
}
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	58000c00 	.word	0x58000c00

0800e5e8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e5ec:	4b05      	ldr	r3, [pc, #20]	@ (800e604 <UTIL_LPM_Init+0x1c>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e5f2:	4b05      	ldr	r3, [pc, #20]	@ (800e608 <UTIL_LPM_Init+0x20>)
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e5f8:	bf00      	nop
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	20001768 	.word	0x20001768
 800e608:	2000176c 	.word	0x2000176c

0800e60c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e60c:	b480      	push	{r7}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	460b      	mov	r3, r1
 800e616:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e618:	f3ef 8310 	mrs	r3, PRIMASK
 800e61c:	613b      	str	r3, [r7, #16]
  return(result);
 800e61e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e620:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e622:	b672      	cpsid	i
}
 800e624:	bf00      	nop
  
  switch(state)
 800e626:	78fb      	ldrb	r3, [r7, #3]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d008      	beq.n	800e63e <UTIL_LPM_SetOffMode+0x32>
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d10e      	bne.n	800e64e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e630:	4b0d      	ldr	r3, [pc, #52]	@ (800e668 <UTIL_LPM_SetOffMode+0x5c>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4313      	orrs	r3, r2
 800e638:	4a0b      	ldr	r2, [pc, #44]	@ (800e668 <UTIL_LPM_SetOffMode+0x5c>)
 800e63a:	6013      	str	r3, [r2, #0]
      break;
 800e63c:	e008      	b.n	800e650 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	43da      	mvns	r2, r3
 800e642:	4b09      	ldr	r3, [pc, #36]	@ (800e668 <UTIL_LPM_SetOffMode+0x5c>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4013      	ands	r3, r2
 800e648:	4a07      	ldr	r2, [pc, #28]	@ (800e668 <UTIL_LPM_SetOffMode+0x5c>)
 800e64a:	6013      	str	r3, [r2, #0]
      break;
 800e64c:	e000      	b.n	800e650 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e64e:	bf00      	nop
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f383 8810 	msr	PRIMASK, r3
}
 800e65a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e65c:	bf00      	nop
 800e65e:	371c      	adds	r7, #28
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr
 800e668:	2000176c 	.word	0x2000176c

0800e66c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b090      	sub	sp, #64	@ 0x40
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e674:	4b73      	ldr	r3, [pc, #460]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800e67a:	4b72      	ldr	r3, [pc, #456]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4013      	ands	r3, r2
 800e682:	4a70      	ldr	r2, [pc, #448]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e684:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e686:	4b70      	ldr	r3, [pc, #448]	@ (800e848 <UTIL_SEQ_Run+0x1dc>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e68c:	4b6f      	ldr	r3, [pc, #444]	@ (800e84c <UTIL_SEQ_Run+0x1e0>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e692:	4b6f      	ldr	r3, [pc, #444]	@ (800e850 <UTIL_SEQ_Run+0x1e4>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800e698:	4b6e      	ldr	r3, [pc, #440]	@ (800e854 <UTIL_SEQ_Run+0x1e8>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e69e:	e08d      	b.n	800e7bc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e6a4:	e002      	b.n	800e6ac <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e6ac:	4a6a      	ldr	r2, [pc, #424]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b6:	401a      	ands	r2, r3
 800e6b8:	4b62      	ldr	r3, [pc, #392]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4013      	ands	r3, r2
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d0f1      	beq.n	800e6a6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e6c2:	4a65      	ldr	r2, [pc, #404]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6cc:	401a      	ands	r2, r3
 800e6ce:	4b5d      	ldr	r3, [pc, #372]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e6d6:	4a60      	ldr	r2, [pc, #384]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	4413      	add	r3, r2
 800e6de:	685a      	ldr	r2, [r3, #4]
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d106      	bne.n	800e6f6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e6e8:	4a5b      	ldr	r2, [pc, #364]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e6ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ec:	00db      	lsls	r3, r3, #3
 800e6ee:	4413      	add	r3, r2
 800e6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e6f6:	4a58      	ldr	r2, [pc, #352]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	4413      	add	r3, r2
 800e6fe:	685a      	ldr	r2, [r3, #4]
 800e700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e702:	4013      	ands	r3, r2
 800e704:	4618      	mov	r0, r3
 800e706:	f000 f9b3 	bl	800ea70 <SEQ_BitPosition>
 800e70a:	4603      	mov	r3, r0
 800e70c:	461a      	mov	r2, r3
 800e70e:	4b53      	ldr	r3, [pc, #332]	@ (800e85c <UTIL_SEQ_Run+0x1f0>)
 800e710:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e712:	4a51      	ldr	r2, [pc, #324]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e716:	00db      	lsls	r3, r3, #3
 800e718:	4413      	add	r3, r2
 800e71a:	685a      	ldr	r2, [r3, #4]
 800e71c:	4b4f      	ldr	r3, [pc, #316]	@ (800e85c <UTIL_SEQ_Run+0x1f0>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2101      	movs	r1, #1
 800e722:	fa01 f303 	lsl.w	r3, r1, r3
 800e726:	43db      	mvns	r3, r3
 800e728:	401a      	ands	r2, r3
 800e72a:	494b      	ldr	r1, [pc, #300]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e72e:	00db      	lsls	r3, r3, #3
 800e730:	440b      	add	r3, r1
 800e732:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e734:	f3ef 8310 	mrs	r3, PRIMASK
 800e738:	61bb      	str	r3, [r7, #24]
  return(result);
 800e73a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e73c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e73e:	b672      	cpsid	i
}
 800e740:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e742:	4b46      	ldr	r3, [pc, #280]	@ (800e85c <UTIL_SEQ_Run+0x1f0>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2201      	movs	r2, #1
 800e748:	fa02 f303 	lsl.w	r3, r2, r3
 800e74c:	43da      	mvns	r2, r3
 800e74e:	4b3e      	ldr	r3, [pc, #248]	@ (800e848 <UTIL_SEQ_Run+0x1dc>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4013      	ands	r3, r2
 800e754:	4a3c      	ldr	r2, [pc, #240]	@ (800e848 <UTIL_SEQ_Run+0x1dc>)
 800e756:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e758:	2301      	movs	r3, #1
 800e75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e75c:	e013      	b.n	800e786 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e760:	3b01      	subs	r3, #1
 800e762:	4a3d      	ldr	r2, [pc, #244]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e764:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e768:	4b3c      	ldr	r3, [pc, #240]	@ (800e85c <UTIL_SEQ_Run+0x1f0>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2201      	movs	r2, #1
 800e76e:	fa02 f303 	lsl.w	r3, r2, r3
 800e772:	43da      	mvns	r2, r3
 800e774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e776:	3b01      	subs	r3, #1
 800e778:	400a      	ands	r2, r1
 800e77a:	4937      	ldr	r1, [pc, #220]	@ (800e858 <UTIL_SEQ_Run+0x1ec>)
 800e77c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e782:	3b01      	subs	r3, #1
 800e784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1e8      	bne.n	800e75e <UTIL_SEQ_Run+0xf2>
 800e78c:	6a3b      	ldr	r3, [r7, #32]
 800e78e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	f383 8810 	msr	PRIMASK, r3
}
 800e796:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e798:	4b30      	ldr	r3, [pc, #192]	@ (800e85c <UTIL_SEQ_Run+0x1f0>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a30      	ldr	r2, [pc, #192]	@ (800e860 <UTIL_SEQ_Run+0x1f4>)
 800e79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a2:	4798      	blx	r3

    local_taskset = TaskSet;
 800e7a4:	4b28      	ldr	r3, [pc, #160]	@ (800e848 <UTIL_SEQ_Run+0x1dc>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800e7aa:	4b28      	ldr	r3, [pc, #160]	@ (800e84c <UTIL_SEQ_Run+0x1e0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800e7b0:	4b27      	ldr	r3, [pc, #156]	@ (800e850 <UTIL_SEQ_Run+0x1e4>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800e7b6:	4b27      	ldr	r3, [pc, #156]	@ (800e854 <UTIL_SEQ_Run+0x1e8>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e7bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7c0:	401a      	ands	r2, r3
 800e7c2:	4b20      	ldr	r3, [pc, #128]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <UTIL_SEQ_Run+0x16c>
 800e7cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	f43f af64 	beq.w	800e6a0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e7d8:	4b20      	ldr	r3, [pc, #128]	@ (800e85c <UTIL_SEQ_Run+0x1f0>)
 800e7da:	f04f 32ff 	mov.w	r2, #4294967295
 800e7de:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e7e0:	f000 f938 	bl	800ea54 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7e4:	f3ef 8310 	mrs	r3, PRIMASK
 800e7e8:	613b      	str	r3, [r7, #16]
  return(result);
 800e7ea:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e7ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7ee:	b672      	cpsid	i
}
 800e7f0:	bf00      	nop
  local_taskset = TaskSet;
 800e7f2:	4b15      	ldr	r3, [pc, #84]	@ (800e848 <UTIL_SEQ_Run+0x1dc>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800e7f8:	4b14      	ldr	r3, [pc, #80]	@ (800e84c <UTIL_SEQ_Run+0x1e0>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800e7fe:	4b14      	ldr	r3, [pc, #80]	@ (800e850 <UTIL_SEQ_Run+0x1e4>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e808:	401a      	ands	r2, r3
 800e80a:	4b0e      	ldr	r3, [pc, #56]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4013      	ands	r3, r2
 800e810:	2b00      	cmp	r3, #0
 800e812:	d107      	bne.n	800e824 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e814:	4b0f      	ldr	r3, [pc, #60]	@ (800e854 <UTIL_SEQ_Run+0x1e8>)
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e81a:	4013      	ands	r3, r2
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d101      	bne.n	800e824 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e820:	f7f3 fec7 	bl	80025b2 <UTIL_SEQ_Idle>
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f383 8810 	msr	PRIMASK, r3
}
 800e82e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e830:	f000 f917 	bl	800ea62 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e834:	4a03      	ldr	r2, [pc, #12]	@ (800e844 <UTIL_SEQ_Run+0x1d8>)
 800e836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e838:	6013      	str	r3, [r2, #0]

  return;
 800e83a:	bf00      	nop
}
 800e83c:	3740      	adds	r7, #64	@ 0x40
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20000020 	.word	0x20000020
 800e848:	20001770 	.word	0x20001770
 800e84c:	20001774 	.word	0x20001774
 800e850:	2000001c 	.word	0x2000001c
 800e854:	20001778 	.word	0x20001778
 800e858:	20001800 	.word	0x20001800
 800e85c:	2000177c 	.word	0x2000177c
 800e860:	20001780 	.word	0x20001780

0800e864 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b088      	sub	sp, #32
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e870:	f3ef 8310 	mrs	r3, PRIMASK
 800e874:	617b      	str	r3, [r7, #20]
  return(result);
 800e876:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e878:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e87a:	b672      	cpsid	i
}
 800e87c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f000 f8f6 	bl	800ea70 <SEQ_BitPosition>
 800e884:	4603      	mov	r3, r0
 800e886:	4619      	mov	r1, r3
 800e888:	4a06      	ldr	r2, [pc, #24]	@ (800e8a4 <UTIL_SEQ_RegTask+0x40>)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	f383 8810 	msr	PRIMASK, r3
}
 800e89a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e89c:	bf00      	nop
}
 800e89e:	3720      	adds	r7, #32
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	20001780 	.word	0x20001780

0800e8a8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b087      	sub	sp, #28
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8b2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e8ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8bc:	b672      	cpsid	i
}
 800e8be:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e8f8 <UTIL_SEQ_SetTask+0x50>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	4a0b      	ldr	r2, [pc, #44]	@ (800e8f8 <UTIL_SEQ_SetTask+0x50>)
 800e8ca:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e8cc:	4a0b      	ldr	r2, [pc, #44]	@ (800e8fc <UTIL_SEQ_SetTask+0x54>)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	431a      	orrs	r2, r3
 800e8d8:	4908      	ldr	r1, [pc, #32]	@ (800e8fc <UTIL_SEQ_SetTask+0x54>)
 800e8da:	683b      	ldr	r3, [r7, #0]
 800e8dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	f383 8810 	msr	PRIMASK, r3
}
 800e8ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e8ec:	bf00      	nop
}
 800e8ee:	371c      	adds	r7, #28
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr
 800e8f8:	20001770 	.word	0x20001770
 800e8fc:	20001800 	.word	0x20001800

0800e900 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e900:	b480      	push	{r7}
 800e902:	b087      	sub	sp, #28
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e908:	f3ef 8310 	mrs	r3, PRIMASK
 800e90c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e90e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e912:	b672      	cpsid	i
}
 800e914:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	43da      	mvns	r2, r3
 800e91a:	4b08      	ldr	r3, [pc, #32]	@ (800e93c <UTIL_SEQ_PauseTask+0x3c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4013      	ands	r3, r2
 800e920:	4a06      	ldr	r2, [pc, #24]	@ (800e93c <UTIL_SEQ_PauseTask+0x3c>)
 800e922:	6013      	str	r3, [r2, #0]
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	f383 8810 	msr	PRIMASK, r3
}
 800e92e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e930:	bf00      	nop
}
 800e932:	371c      	adds	r7, #28
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	2000001c 	.word	0x2000001c

0800e940 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e940:	b480      	push	{r7}
 800e942:	b087      	sub	sp, #28
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e948:	f3ef 8310 	mrs	r3, PRIMASK
 800e94c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e94e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e952:	b672      	cpsid	i
}
 800e954:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e956:	4b09      	ldr	r3, [pc, #36]	@ (800e97c <UTIL_SEQ_ResumeTask+0x3c>)
 800e958:	681a      	ldr	r2, [r3, #0]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4313      	orrs	r3, r2
 800e95e:	4a07      	ldr	r2, [pc, #28]	@ (800e97c <UTIL_SEQ_ResumeTask+0x3c>)
 800e960:	6013      	str	r3, [r2, #0]
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	f383 8810 	msr	PRIMASK, r3
}
 800e96c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e96e:	bf00      	nop
}
 800e970:	371c      	adds	r7, #28
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	2000001c 	.word	0x2000001c

0800e980 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e980:	b480      	push	{r7}
 800e982:	b087      	sub	sp, #28
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e988:	f3ef 8310 	mrs	r3, PRIMASK
 800e98c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e98e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e992:	b672      	cpsid	i
}
 800e994:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e996:	4b09      	ldr	r3, [pc, #36]	@ (800e9bc <UTIL_SEQ_SetEvt+0x3c>)
 800e998:	681a      	ldr	r2, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	4313      	orrs	r3, r2
 800e99e:	4a07      	ldr	r2, [pc, #28]	@ (800e9bc <UTIL_SEQ_SetEvt+0x3c>)
 800e9a0:	6013      	str	r3, [r2, #0]
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9a6:	693b      	ldr	r3, [r7, #16]
 800e9a8:	f383 8810 	msr	PRIMASK, r3
}
 800e9ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e9ae:	bf00      	nop
}
 800e9b0:	371c      	adds	r7, #28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop
 800e9bc:	20001774 	.word	0x20001774

0800e9c0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b088      	sub	sp, #32
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e9c8:	4b1f      	ldr	r3, [pc, #124]	@ (800ea48 <UTIL_SEQ_WaitEvt+0x88>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800ea48 <UTIL_SEQ_WaitEvt+0x88>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d6:	d102      	bne.n	800e9de <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	61fb      	str	r3, [r7, #28]
 800e9dc:	e005      	b.n	800e9ea <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ea48 <UTIL_SEQ_WaitEvt+0x88>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2201      	movs	r2, #1
 800e9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9e8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e9ea:	4b18      	ldr	r3, [pc, #96]	@ (800ea4c <UTIL_SEQ_WaitEvt+0x8c>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e9f0:	4a16      	ldr	r2, [pc, #88]	@ (800ea4c <UTIL_SEQ_WaitEvt+0x8c>)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e9f6:	e003      	b.n	800ea00 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e9f8:	6879      	ldr	r1, [r7, #4]
 800e9fa:	69f8      	ldr	r0, [r7, #28]
 800e9fc:	f7f3 fde0 	bl	80025c0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ea00:	4b13      	ldr	r3, [pc, #76]	@ (800ea50 <UTIL_SEQ_WaitEvt+0x90>)
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4013      	ands	r3, r2
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d0f5      	beq.n	800e9f8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ea0c:	4a0e      	ldr	r2, [pc, #56]	@ (800ea48 <UTIL_SEQ_WaitEvt+0x88>)
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea12:	f3ef 8310 	mrs	r3, PRIMASK
 800ea16:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea18:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ea1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea1c:	b672      	cpsid	i
}
 800ea1e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	43da      	mvns	r2, r3
 800ea24:	4b0a      	ldr	r3, [pc, #40]	@ (800ea50 <UTIL_SEQ_WaitEvt+0x90>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4013      	ands	r3, r2
 800ea2a:	4a09      	ldr	r2, [pc, #36]	@ (800ea50 <UTIL_SEQ_WaitEvt+0x90>)
 800ea2c:	6013      	str	r3, [r2, #0]
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f383 8810 	msr	PRIMASK, r3
}
 800ea38:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ea3a:	4a04      	ldr	r2, [pc, #16]	@ (800ea4c <UTIL_SEQ_WaitEvt+0x8c>)
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	6013      	str	r3, [r2, #0]
  return;
 800ea40:	bf00      	nop
}
 800ea42:	3720      	adds	r7, #32
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	2000177c 	.word	0x2000177c
 800ea4c:	20001778 	.word	0x20001778
 800ea50:	20001774 	.word	0x20001774

0800ea54 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ea54:	b480      	push	{r7}
 800ea56:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ea58:	bf00      	nop
}
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ea62:	b480      	push	{r7}
 800ea64:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ea66:	bf00      	nop
}
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6e:	4770      	bx	lr

0800ea70 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d101      	bne.n	800ea86 <SEQ_BitPosition+0x16>
    return 32U;
 800ea82:	2320      	movs	r3, #32
 800ea84:	e003      	b.n	800ea8e <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	fab3 f383 	clz	r3, r3
 800ea8c:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800ea8e:	f1c3 031f 	rsb	r3, r3, #31
 800ea92:	b2db      	uxtb	r3, r3
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3714      	adds	r7, #20
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <__cvt>:
 800eaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaa4:	ec57 6b10 	vmov	r6, r7, d0
 800eaa8:	2f00      	cmp	r7, #0
 800eaaa:	460c      	mov	r4, r1
 800eaac:	4619      	mov	r1, r3
 800eaae:	463b      	mov	r3, r7
 800eab0:	bfbb      	ittet	lt
 800eab2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800eab6:	461f      	movlt	r7, r3
 800eab8:	2300      	movge	r3, #0
 800eaba:	232d      	movlt	r3, #45	@ 0x2d
 800eabc:	700b      	strb	r3, [r1, #0]
 800eabe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eac0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eac4:	4691      	mov	r9, r2
 800eac6:	f023 0820 	bic.w	r8, r3, #32
 800eaca:	bfbc      	itt	lt
 800eacc:	4632      	movlt	r2, r6
 800eace:	4616      	movlt	r6, r2
 800ead0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ead4:	d005      	beq.n	800eae2 <__cvt+0x42>
 800ead6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eada:	d100      	bne.n	800eade <__cvt+0x3e>
 800eadc:	3401      	adds	r4, #1
 800eade:	2102      	movs	r1, #2
 800eae0:	e000      	b.n	800eae4 <__cvt+0x44>
 800eae2:	2103      	movs	r1, #3
 800eae4:	ab03      	add	r3, sp, #12
 800eae6:	9301      	str	r3, [sp, #4]
 800eae8:	ab02      	add	r3, sp, #8
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	ec47 6b10 	vmov	d0, r6, r7
 800eaf0:	4653      	mov	r3, sl
 800eaf2:	4622      	mov	r2, r4
 800eaf4:	f000 ffa0 	bl	800fa38 <_dtoa_r>
 800eaf8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800eafc:	4605      	mov	r5, r0
 800eafe:	d119      	bne.n	800eb34 <__cvt+0x94>
 800eb00:	f019 0f01 	tst.w	r9, #1
 800eb04:	d00e      	beq.n	800eb24 <__cvt+0x84>
 800eb06:	eb00 0904 	add.w	r9, r0, r4
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	4630      	mov	r0, r6
 800eb10:	4639      	mov	r1, r7
 800eb12:	f7f1 ffb1 	bl	8000a78 <__aeabi_dcmpeq>
 800eb16:	b108      	cbz	r0, 800eb1c <__cvt+0x7c>
 800eb18:	f8cd 900c 	str.w	r9, [sp, #12]
 800eb1c:	2230      	movs	r2, #48	@ 0x30
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	454b      	cmp	r3, r9
 800eb22:	d31e      	bcc.n	800eb62 <__cvt+0xc2>
 800eb24:	9b03      	ldr	r3, [sp, #12]
 800eb26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb28:	1b5b      	subs	r3, r3, r5
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	6013      	str	r3, [r2, #0]
 800eb2e:	b004      	add	sp, #16
 800eb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb38:	eb00 0904 	add.w	r9, r0, r4
 800eb3c:	d1e5      	bne.n	800eb0a <__cvt+0x6a>
 800eb3e:	7803      	ldrb	r3, [r0, #0]
 800eb40:	2b30      	cmp	r3, #48	@ 0x30
 800eb42:	d10a      	bne.n	800eb5a <__cvt+0xba>
 800eb44:	2200      	movs	r2, #0
 800eb46:	2300      	movs	r3, #0
 800eb48:	4630      	mov	r0, r6
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	f7f1 ff94 	bl	8000a78 <__aeabi_dcmpeq>
 800eb50:	b918      	cbnz	r0, 800eb5a <__cvt+0xba>
 800eb52:	f1c4 0401 	rsb	r4, r4, #1
 800eb56:	f8ca 4000 	str.w	r4, [sl]
 800eb5a:	f8da 3000 	ldr.w	r3, [sl]
 800eb5e:	4499      	add	r9, r3
 800eb60:	e7d3      	b.n	800eb0a <__cvt+0x6a>
 800eb62:	1c59      	adds	r1, r3, #1
 800eb64:	9103      	str	r1, [sp, #12]
 800eb66:	701a      	strb	r2, [r3, #0]
 800eb68:	e7d9      	b.n	800eb1e <__cvt+0x7e>

0800eb6a <__exponent>:
 800eb6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb6c:	2900      	cmp	r1, #0
 800eb6e:	bfba      	itte	lt
 800eb70:	4249      	neglt	r1, r1
 800eb72:	232d      	movlt	r3, #45	@ 0x2d
 800eb74:	232b      	movge	r3, #43	@ 0x2b
 800eb76:	2909      	cmp	r1, #9
 800eb78:	7002      	strb	r2, [r0, #0]
 800eb7a:	7043      	strb	r3, [r0, #1]
 800eb7c:	dd29      	ble.n	800ebd2 <__exponent+0x68>
 800eb7e:	f10d 0307 	add.w	r3, sp, #7
 800eb82:	461d      	mov	r5, r3
 800eb84:	270a      	movs	r7, #10
 800eb86:	461a      	mov	r2, r3
 800eb88:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb8c:	fb07 1416 	mls	r4, r7, r6, r1
 800eb90:	3430      	adds	r4, #48	@ 0x30
 800eb92:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb96:	460c      	mov	r4, r1
 800eb98:	2c63      	cmp	r4, #99	@ 0x63
 800eb9a:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb9e:	4631      	mov	r1, r6
 800eba0:	dcf1      	bgt.n	800eb86 <__exponent+0x1c>
 800eba2:	3130      	adds	r1, #48	@ 0x30
 800eba4:	1e94      	subs	r4, r2, #2
 800eba6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ebaa:	1c41      	adds	r1, r0, #1
 800ebac:	4623      	mov	r3, r4
 800ebae:	42ab      	cmp	r3, r5
 800ebb0:	d30a      	bcc.n	800ebc8 <__exponent+0x5e>
 800ebb2:	f10d 0309 	add.w	r3, sp, #9
 800ebb6:	1a9b      	subs	r3, r3, r2
 800ebb8:	42ac      	cmp	r4, r5
 800ebba:	bf88      	it	hi
 800ebbc:	2300      	movhi	r3, #0
 800ebbe:	3302      	adds	r3, #2
 800ebc0:	4403      	add	r3, r0
 800ebc2:	1a18      	subs	r0, r3, r0
 800ebc4:	b003      	add	sp, #12
 800ebc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ebcc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ebd0:	e7ed      	b.n	800ebae <__exponent+0x44>
 800ebd2:	2330      	movs	r3, #48	@ 0x30
 800ebd4:	3130      	adds	r1, #48	@ 0x30
 800ebd6:	7083      	strb	r3, [r0, #2]
 800ebd8:	70c1      	strb	r1, [r0, #3]
 800ebda:	1d03      	adds	r3, r0, #4
 800ebdc:	e7f1      	b.n	800ebc2 <__exponent+0x58>
	...

0800ebe0 <_printf_float>:
 800ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe4:	b08d      	sub	sp, #52	@ 0x34
 800ebe6:	460c      	mov	r4, r1
 800ebe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebec:	4616      	mov	r6, r2
 800ebee:	461f      	mov	r7, r3
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	f000 fe11 	bl	800f818 <_localeconv_r>
 800ebf6:	6803      	ldr	r3, [r0, #0]
 800ebf8:	9304      	str	r3, [sp, #16]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7f1 fb10 	bl	8000220 <strlen>
 800ec00:	2300      	movs	r3, #0
 800ec02:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec04:	f8d8 3000 	ldr.w	r3, [r8]
 800ec08:	9005      	str	r0, [sp, #20]
 800ec0a:	3307      	adds	r3, #7
 800ec0c:	f023 0307 	bic.w	r3, r3, #7
 800ec10:	f103 0208 	add.w	r2, r3, #8
 800ec14:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ec18:	f8d4 b000 	ldr.w	fp, [r4]
 800ec1c:	f8c8 2000 	str.w	r2, [r8]
 800ec20:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ec28:	9307      	str	r3, [sp, #28]
 800ec2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ec32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec36:	4b9c      	ldr	r3, [pc, #624]	@ (800eea8 <_printf_float+0x2c8>)
 800ec38:	f04f 32ff 	mov.w	r2, #4294967295
 800ec3c:	f7f1 ff4e 	bl	8000adc <__aeabi_dcmpun>
 800ec40:	bb70      	cbnz	r0, 800eca0 <_printf_float+0xc0>
 800ec42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec46:	4b98      	ldr	r3, [pc, #608]	@ (800eea8 <_printf_float+0x2c8>)
 800ec48:	f04f 32ff 	mov.w	r2, #4294967295
 800ec4c:	f7f1 ff28 	bl	8000aa0 <__aeabi_dcmple>
 800ec50:	bb30      	cbnz	r0, 800eca0 <_printf_float+0xc0>
 800ec52:	2200      	movs	r2, #0
 800ec54:	2300      	movs	r3, #0
 800ec56:	4640      	mov	r0, r8
 800ec58:	4649      	mov	r1, r9
 800ec5a:	f7f1 ff17 	bl	8000a8c <__aeabi_dcmplt>
 800ec5e:	b110      	cbz	r0, 800ec66 <_printf_float+0x86>
 800ec60:	232d      	movs	r3, #45	@ 0x2d
 800ec62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec66:	4a91      	ldr	r2, [pc, #580]	@ (800eeac <_printf_float+0x2cc>)
 800ec68:	4b91      	ldr	r3, [pc, #580]	@ (800eeb0 <_printf_float+0x2d0>)
 800ec6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec6e:	bf94      	ite	ls
 800ec70:	4690      	movls	r8, r2
 800ec72:	4698      	movhi	r8, r3
 800ec74:	2303      	movs	r3, #3
 800ec76:	6123      	str	r3, [r4, #16]
 800ec78:	f02b 0304 	bic.w	r3, fp, #4
 800ec7c:	6023      	str	r3, [r4, #0]
 800ec7e:	f04f 0900 	mov.w	r9, #0
 800ec82:	9700      	str	r7, [sp, #0]
 800ec84:	4633      	mov	r3, r6
 800ec86:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec88:	4621      	mov	r1, r4
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	f000 f9d2 	bl	800f034 <_printf_common>
 800ec90:	3001      	adds	r0, #1
 800ec92:	f040 808d 	bne.w	800edb0 <_printf_float+0x1d0>
 800ec96:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9a:	b00d      	add	sp, #52	@ 0x34
 800ec9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca0:	4642      	mov	r2, r8
 800eca2:	464b      	mov	r3, r9
 800eca4:	4640      	mov	r0, r8
 800eca6:	4649      	mov	r1, r9
 800eca8:	f7f1 ff18 	bl	8000adc <__aeabi_dcmpun>
 800ecac:	b140      	cbz	r0, 800ecc0 <_printf_float+0xe0>
 800ecae:	464b      	mov	r3, r9
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	bfbc      	itt	lt
 800ecb4:	232d      	movlt	r3, #45	@ 0x2d
 800ecb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ecba:	4a7e      	ldr	r2, [pc, #504]	@ (800eeb4 <_printf_float+0x2d4>)
 800ecbc:	4b7e      	ldr	r3, [pc, #504]	@ (800eeb8 <_printf_float+0x2d8>)
 800ecbe:	e7d4      	b.n	800ec6a <_printf_float+0x8a>
 800ecc0:	6863      	ldr	r3, [r4, #4]
 800ecc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ecc6:	9206      	str	r2, [sp, #24]
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	d13b      	bne.n	800ed44 <_printf_float+0x164>
 800eccc:	2306      	movs	r3, #6
 800ecce:	6063      	str	r3, [r4, #4]
 800ecd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	6022      	str	r2, [r4, #0]
 800ecd8:	9303      	str	r3, [sp, #12]
 800ecda:	ab0a      	add	r3, sp, #40	@ 0x28
 800ecdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ece0:	ab09      	add	r3, sp, #36	@ 0x24
 800ece2:	9300      	str	r3, [sp, #0]
 800ece4:	6861      	ldr	r1, [r4, #4]
 800ece6:	ec49 8b10 	vmov	d0, r8, r9
 800ecea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f7ff fed6 	bl	800eaa0 <__cvt>
 800ecf4:	9b06      	ldr	r3, [sp, #24]
 800ecf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecf8:	2b47      	cmp	r3, #71	@ 0x47
 800ecfa:	4680      	mov	r8, r0
 800ecfc:	d129      	bne.n	800ed52 <_printf_float+0x172>
 800ecfe:	1cc8      	adds	r0, r1, #3
 800ed00:	db02      	blt.n	800ed08 <_printf_float+0x128>
 800ed02:	6863      	ldr	r3, [r4, #4]
 800ed04:	4299      	cmp	r1, r3
 800ed06:	dd41      	ble.n	800ed8c <_printf_float+0x1ac>
 800ed08:	f1aa 0a02 	sub.w	sl, sl, #2
 800ed0c:	fa5f fa8a 	uxtb.w	sl, sl
 800ed10:	3901      	subs	r1, #1
 800ed12:	4652      	mov	r2, sl
 800ed14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ed18:	9109      	str	r1, [sp, #36]	@ 0x24
 800ed1a:	f7ff ff26 	bl	800eb6a <__exponent>
 800ed1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ed20:	1813      	adds	r3, r2, r0
 800ed22:	2a01      	cmp	r2, #1
 800ed24:	4681      	mov	r9, r0
 800ed26:	6123      	str	r3, [r4, #16]
 800ed28:	dc02      	bgt.n	800ed30 <_printf_float+0x150>
 800ed2a:	6822      	ldr	r2, [r4, #0]
 800ed2c:	07d2      	lsls	r2, r2, #31
 800ed2e:	d501      	bpl.n	800ed34 <_printf_float+0x154>
 800ed30:	3301      	adds	r3, #1
 800ed32:	6123      	str	r3, [r4, #16]
 800ed34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d0a2      	beq.n	800ec82 <_printf_float+0xa2>
 800ed3c:	232d      	movs	r3, #45	@ 0x2d
 800ed3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed42:	e79e      	b.n	800ec82 <_printf_float+0xa2>
 800ed44:	9a06      	ldr	r2, [sp, #24]
 800ed46:	2a47      	cmp	r2, #71	@ 0x47
 800ed48:	d1c2      	bne.n	800ecd0 <_printf_float+0xf0>
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1c0      	bne.n	800ecd0 <_printf_float+0xf0>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e7bd      	b.n	800ecce <_printf_float+0xee>
 800ed52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed56:	d9db      	bls.n	800ed10 <_printf_float+0x130>
 800ed58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ed5c:	d118      	bne.n	800ed90 <_printf_float+0x1b0>
 800ed5e:	2900      	cmp	r1, #0
 800ed60:	6863      	ldr	r3, [r4, #4]
 800ed62:	dd0b      	ble.n	800ed7c <_printf_float+0x19c>
 800ed64:	6121      	str	r1, [r4, #16]
 800ed66:	b913      	cbnz	r3, 800ed6e <_printf_float+0x18e>
 800ed68:	6822      	ldr	r2, [r4, #0]
 800ed6a:	07d0      	lsls	r0, r2, #31
 800ed6c:	d502      	bpl.n	800ed74 <_printf_float+0x194>
 800ed6e:	3301      	adds	r3, #1
 800ed70:	440b      	add	r3, r1
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed76:	f04f 0900 	mov.w	r9, #0
 800ed7a:	e7db      	b.n	800ed34 <_printf_float+0x154>
 800ed7c:	b913      	cbnz	r3, 800ed84 <_printf_float+0x1a4>
 800ed7e:	6822      	ldr	r2, [r4, #0]
 800ed80:	07d2      	lsls	r2, r2, #31
 800ed82:	d501      	bpl.n	800ed88 <_printf_float+0x1a8>
 800ed84:	3302      	adds	r3, #2
 800ed86:	e7f4      	b.n	800ed72 <_printf_float+0x192>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e7f2      	b.n	800ed72 <_printf_float+0x192>
 800ed8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ed90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed92:	4299      	cmp	r1, r3
 800ed94:	db05      	blt.n	800eda2 <_printf_float+0x1c2>
 800ed96:	6823      	ldr	r3, [r4, #0]
 800ed98:	6121      	str	r1, [r4, #16]
 800ed9a:	07d8      	lsls	r0, r3, #31
 800ed9c:	d5ea      	bpl.n	800ed74 <_printf_float+0x194>
 800ed9e:	1c4b      	adds	r3, r1, #1
 800eda0:	e7e7      	b.n	800ed72 <_printf_float+0x192>
 800eda2:	2900      	cmp	r1, #0
 800eda4:	bfd4      	ite	le
 800eda6:	f1c1 0202 	rsble	r2, r1, #2
 800edaa:	2201      	movgt	r2, #1
 800edac:	4413      	add	r3, r2
 800edae:	e7e0      	b.n	800ed72 <_printf_float+0x192>
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	055a      	lsls	r2, r3, #21
 800edb4:	d407      	bmi.n	800edc6 <_printf_float+0x1e6>
 800edb6:	6923      	ldr	r3, [r4, #16]
 800edb8:	4642      	mov	r2, r8
 800edba:	4631      	mov	r1, r6
 800edbc:	4628      	mov	r0, r5
 800edbe:	47b8      	blx	r7
 800edc0:	3001      	adds	r0, #1
 800edc2:	d12b      	bne.n	800ee1c <_printf_float+0x23c>
 800edc4:	e767      	b.n	800ec96 <_printf_float+0xb6>
 800edc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800edca:	f240 80dd 	bls.w	800ef88 <_printf_float+0x3a8>
 800edce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edd2:	2200      	movs	r2, #0
 800edd4:	2300      	movs	r3, #0
 800edd6:	f7f1 fe4f 	bl	8000a78 <__aeabi_dcmpeq>
 800edda:	2800      	cmp	r0, #0
 800eddc:	d033      	beq.n	800ee46 <_printf_float+0x266>
 800edde:	4a37      	ldr	r2, [pc, #220]	@ (800eebc <_printf_float+0x2dc>)
 800ede0:	2301      	movs	r3, #1
 800ede2:	4631      	mov	r1, r6
 800ede4:	4628      	mov	r0, r5
 800ede6:	47b8      	blx	r7
 800ede8:	3001      	adds	r0, #1
 800edea:	f43f af54 	beq.w	800ec96 <_printf_float+0xb6>
 800edee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800edf2:	4543      	cmp	r3, r8
 800edf4:	db02      	blt.n	800edfc <_printf_float+0x21c>
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	07d8      	lsls	r0, r3, #31
 800edfa:	d50f      	bpl.n	800ee1c <_printf_float+0x23c>
 800edfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee00:	4631      	mov	r1, r6
 800ee02:	4628      	mov	r0, r5
 800ee04:	47b8      	blx	r7
 800ee06:	3001      	adds	r0, #1
 800ee08:	f43f af45 	beq.w	800ec96 <_printf_float+0xb6>
 800ee0c:	f04f 0900 	mov.w	r9, #0
 800ee10:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee14:	f104 0a1a 	add.w	sl, r4, #26
 800ee18:	45c8      	cmp	r8, r9
 800ee1a:	dc09      	bgt.n	800ee30 <_printf_float+0x250>
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	079b      	lsls	r3, r3, #30
 800ee20:	f100 8103 	bmi.w	800f02a <_printf_float+0x44a>
 800ee24:	68e0      	ldr	r0, [r4, #12]
 800ee26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee28:	4298      	cmp	r0, r3
 800ee2a:	bfb8      	it	lt
 800ee2c:	4618      	movlt	r0, r3
 800ee2e:	e734      	b.n	800ec9a <_printf_float+0xba>
 800ee30:	2301      	movs	r3, #1
 800ee32:	4652      	mov	r2, sl
 800ee34:	4631      	mov	r1, r6
 800ee36:	4628      	mov	r0, r5
 800ee38:	47b8      	blx	r7
 800ee3a:	3001      	adds	r0, #1
 800ee3c:	f43f af2b 	beq.w	800ec96 <_printf_float+0xb6>
 800ee40:	f109 0901 	add.w	r9, r9, #1
 800ee44:	e7e8      	b.n	800ee18 <_printf_float+0x238>
 800ee46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	dc39      	bgt.n	800eec0 <_printf_float+0x2e0>
 800ee4c:	4a1b      	ldr	r2, [pc, #108]	@ (800eebc <_printf_float+0x2dc>)
 800ee4e:	2301      	movs	r3, #1
 800ee50:	4631      	mov	r1, r6
 800ee52:	4628      	mov	r0, r5
 800ee54:	47b8      	blx	r7
 800ee56:	3001      	adds	r0, #1
 800ee58:	f43f af1d 	beq.w	800ec96 <_printf_float+0xb6>
 800ee5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ee60:	ea59 0303 	orrs.w	r3, r9, r3
 800ee64:	d102      	bne.n	800ee6c <_printf_float+0x28c>
 800ee66:	6823      	ldr	r3, [r4, #0]
 800ee68:	07d9      	lsls	r1, r3, #31
 800ee6a:	d5d7      	bpl.n	800ee1c <_printf_float+0x23c>
 800ee6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee70:	4631      	mov	r1, r6
 800ee72:	4628      	mov	r0, r5
 800ee74:	47b8      	blx	r7
 800ee76:	3001      	adds	r0, #1
 800ee78:	f43f af0d 	beq.w	800ec96 <_printf_float+0xb6>
 800ee7c:	f04f 0a00 	mov.w	sl, #0
 800ee80:	f104 0b1a 	add.w	fp, r4, #26
 800ee84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee86:	425b      	negs	r3, r3
 800ee88:	4553      	cmp	r3, sl
 800ee8a:	dc01      	bgt.n	800ee90 <_printf_float+0x2b0>
 800ee8c:	464b      	mov	r3, r9
 800ee8e:	e793      	b.n	800edb8 <_printf_float+0x1d8>
 800ee90:	2301      	movs	r3, #1
 800ee92:	465a      	mov	r2, fp
 800ee94:	4631      	mov	r1, r6
 800ee96:	4628      	mov	r0, r5
 800ee98:	47b8      	blx	r7
 800ee9a:	3001      	adds	r0, #1
 800ee9c:	f43f aefb 	beq.w	800ec96 <_printf_float+0xb6>
 800eea0:	f10a 0a01 	add.w	sl, sl, #1
 800eea4:	e7ee      	b.n	800ee84 <_printf_float+0x2a4>
 800eea6:	bf00      	nop
 800eea8:	7fefffff 	.word	0x7fefffff
 800eeac:	080130b9 	.word	0x080130b9
 800eeb0:	080130bd 	.word	0x080130bd
 800eeb4:	080130c1 	.word	0x080130c1
 800eeb8:	080130c5 	.word	0x080130c5
 800eebc:	080130c9 	.word	0x080130c9
 800eec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eec2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eec6:	4553      	cmp	r3, sl
 800eec8:	bfa8      	it	ge
 800eeca:	4653      	movge	r3, sl
 800eecc:	2b00      	cmp	r3, #0
 800eece:	4699      	mov	r9, r3
 800eed0:	dc36      	bgt.n	800ef40 <_printf_float+0x360>
 800eed2:	f04f 0b00 	mov.w	fp, #0
 800eed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeda:	f104 021a 	add.w	r2, r4, #26
 800eede:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eee0:	9306      	str	r3, [sp, #24]
 800eee2:	eba3 0309 	sub.w	r3, r3, r9
 800eee6:	455b      	cmp	r3, fp
 800eee8:	dc31      	bgt.n	800ef4e <_printf_float+0x36e>
 800eeea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeec:	459a      	cmp	sl, r3
 800eeee:	dc3a      	bgt.n	800ef66 <_printf_float+0x386>
 800eef0:	6823      	ldr	r3, [r4, #0]
 800eef2:	07da      	lsls	r2, r3, #31
 800eef4:	d437      	bmi.n	800ef66 <_printf_float+0x386>
 800eef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef8:	ebaa 0903 	sub.w	r9, sl, r3
 800eefc:	9b06      	ldr	r3, [sp, #24]
 800eefe:	ebaa 0303 	sub.w	r3, sl, r3
 800ef02:	4599      	cmp	r9, r3
 800ef04:	bfa8      	it	ge
 800ef06:	4699      	movge	r9, r3
 800ef08:	f1b9 0f00 	cmp.w	r9, #0
 800ef0c:	dc33      	bgt.n	800ef76 <_printf_float+0x396>
 800ef0e:	f04f 0800 	mov.w	r8, #0
 800ef12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ef16:	f104 0b1a 	add.w	fp, r4, #26
 800ef1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef1c:	ebaa 0303 	sub.w	r3, sl, r3
 800ef20:	eba3 0309 	sub.w	r3, r3, r9
 800ef24:	4543      	cmp	r3, r8
 800ef26:	f77f af79 	ble.w	800ee1c <_printf_float+0x23c>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	465a      	mov	r2, fp
 800ef2e:	4631      	mov	r1, r6
 800ef30:	4628      	mov	r0, r5
 800ef32:	47b8      	blx	r7
 800ef34:	3001      	adds	r0, #1
 800ef36:	f43f aeae 	beq.w	800ec96 <_printf_float+0xb6>
 800ef3a:	f108 0801 	add.w	r8, r8, #1
 800ef3e:	e7ec      	b.n	800ef1a <_printf_float+0x33a>
 800ef40:	4642      	mov	r2, r8
 800ef42:	4631      	mov	r1, r6
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b8      	blx	r7
 800ef48:	3001      	adds	r0, #1
 800ef4a:	d1c2      	bne.n	800eed2 <_printf_float+0x2f2>
 800ef4c:	e6a3      	b.n	800ec96 <_printf_float+0xb6>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	4631      	mov	r1, r6
 800ef52:	4628      	mov	r0, r5
 800ef54:	9206      	str	r2, [sp, #24]
 800ef56:	47b8      	blx	r7
 800ef58:	3001      	adds	r0, #1
 800ef5a:	f43f ae9c 	beq.w	800ec96 <_printf_float+0xb6>
 800ef5e:	9a06      	ldr	r2, [sp, #24]
 800ef60:	f10b 0b01 	add.w	fp, fp, #1
 800ef64:	e7bb      	b.n	800eede <_printf_float+0x2fe>
 800ef66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef6a:	4631      	mov	r1, r6
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	47b8      	blx	r7
 800ef70:	3001      	adds	r0, #1
 800ef72:	d1c0      	bne.n	800eef6 <_printf_float+0x316>
 800ef74:	e68f      	b.n	800ec96 <_printf_float+0xb6>
 800ef76:	9a06      	ldr	r2, [sp, #24]
 800ef78:	464b      	mov	r3, r9
 800ef7a:	4442      	add	r2, r8
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	4628      	mov	r0, r5
 800ef80:	47b8      	blx	r7
 800ef82:	3001      	adds	r0, #1
 800ef84:	d1c3      	bne.n	800ef0e <_printf_float+0x32e>
 800ef86:	e686      	b.n	800ec96 <_printf_float+0xb6>
 800ef88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef8c:	f1ba 0f01 	cmp.w	sl, #1
 800ef90:	dc01      	bgt.n	800ef96 <_printf_float+0x3b6>
 800ef92:	07db      	lsls	r3, r3, #31
 800ef94:	d536      	bpl.n	800f004 <_printf_float+0x424>
 800ef96:	2301      	movs	r3, #1
 800ef98:	4642      	mov	r2, r8
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b8      	blx	r7
 800efa0:	3001      	adds	r0, #1
 800efa2:	f43f ae78 	beq.w	800ec96 <_printf_float+0xb6>
 800efa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800efaa:	4631      	mov	r1, r6
 800efac:	4628      	mov	r0, r5
 800efae:	47b8      	blx	r7
 800efb0:	3001      	adds	r0, #1
 800efb2:	f43f ae70 	beq.w	800ec96 <_printf_float+0xb6>
 800efb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800efba:	2200      	movs	r2, #0
 800efbc:	2300      	movs	r3, #0
 800efbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efc2:	f7f1 fd59 	bl	8000a78 <__aeabi_dcmpeq>
 800efc6:	b9c0      	cbnz	r0, 800effa <_printf_float+0x41a>
 800efc8:	4653      	mov	r3, sl
 800efca:	f108 0201 	add.w	r2, r8, #1
 800efce:	4631      	mov	r1, r6
 800efd0:	4628      	mov	r0, r5
 800efd2:	47b8      	blx	r7
 800efd4:	3001      	adds	r0, #1
 800efd6:	d10c      	bne.n	800eff2 <_printf_float+0x412>
 800efd8:	e65d      	b.n	800ec96 <_printf_float+0xb6>
 800efda:	2301      	movs	r3, #1
 800efdc:	465a      	mov	r2, fp
 800efde:	4631      	mov	r1, r6
 800efe0:	4628      	mov	r0, r5
 800efe2:	47b8      	blx	r7
 800efe4:	3001      	adds	r0, #1
 800efe6:	f43f ae56 	beq.w	800ec96 <_printf_float+0xb6>
 800efea:	f108 0801 	add.w	r8, r8, #1
 800efee:	45d0      	cmp	r8, sl
 800eff0:	dbf3      	blt.n	800efda <_printf_float+0x3fa>
 800eff2:	464b      	mov	r3, r9
 800eff4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eff8:	e6df      	b.n	800edba <_printf_float+0x1da>
 800effa:	f04f 0800 	mov.w	r8, #0
 800effe:	f104 0b1a 	add.w	fp, r4, #26
 800f002:	e7f4      	b.n	800efee <_printf_float+0x40e>
 800f004:	2301      	movs	r3, #1
 800f006:	4642      	mov	r2, r8
 800f008:	e7e1      	b.n	800efce <_printf_float+0x3ee>
 800f00a:	2301      	movs	r3, #1
 800f00c:	464a      	mov	r2, r9
 800f00e:	4631      	mov	r1, r6
 800f010:	4628      	mov	r0, r5
 800f012:	47b8      	blx	r7
 800f014:	3001      	adds	r0, #1
 800f016:	f43f ae3e 	beq.w	800ec96 <_printf_float+0xb6>
 800f01a:	f108 0801 	add.w	r8, r8, #1
 800f01e:	68e3      	ldr	r3, [r4, #12]
 800f020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f022:	1a5b      	subs	r3, r3, r1
 800f024:	4543      	cmp	r3, r8
 800f026:	dcf0      	bgt.n	800f00a <_printf_float+0x42a>
 800f028:	e6fc      	b.n	800ee24 <_printf_float+0x244>
 800f02a:	f04f 0800 	mov.w	r8, #0
 800f02e:	f104 0919 	add.w	r9, r4, #25
 800f032:	e7f4      	b.n	800f01e <_printf_float+0x43e>

0800f034 <_printf_common>:
 800f034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f038:	4616      	mov	r6, r2
 800f03a:	4698      	mov	r8, r3
 800f03c:	688a      	ldr	r2, [r1, #8]
 800f03e:	690b      	ldr	r3, [r1, #16]
 800f040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f044:	4293      	cmp	r3, r2
 800f046:	bfb8      	it	lt
 800f048:	4613      	movlt	r3, r2
 800f04a:	6033      	str	r3, [r6, #0]
 800f04c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f050:	4607      	mov	r7, r0
 800f052:	460c      	mov	r4, r1
 800f054:	b10a      	cbz	r2, 800f05a <_printf_common+0x26>
 800f056:	3301      	adds	r3, #1
 800f058:	6033      	str	r3, [r6, #0]
 800f05a:	6823      	ldr	r3, [r4, #0]
 800f05c:	0699      	lsls	r1, r3, #26
 800f05e:	bf42      	ittt	mi
 800f060:	6833      	ldrmi	r3, [r6, #0]
 800f062:	3302      	addmi	r3, #2
 800f064:	6033      	strmi	r3, [r6, #0]
 800f066:	6825      	ldr	r5, [r4, #0]
 800f068:	f015 0506 	ands.w	r5, r5, #6
 800f06c:	d106      	bne.n	800f07c <_printf_common+0x48>
 800f06e:	f104 0a19 	add.w	sl, r4, #25
 800f072:	68e3      	ldr	r3, [r4, #12]
 800f074:	6832      	ldr	r2, [r6, #0]
 800f076:	1a9b      	subs	r3, r3, r2
 800f078:	42ab      	cmp	r3, r5
 800f07a:	dc26      	bgt.n	800f0ca <_printf_common+0x96>
 800f07c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f080:	6822      	ldr	r2, [r4, #0]
 800f082:	3b00      	subs	r3, #0
 800f084:	bf18      	it	ne
 800f086:	2301      	movne	r3, #1
 800f088:	0692      	lsls	r2, r2, #26
 800f08a:	d42b      	bmi.n	800f0e4 <_printf_common+0xb0>
 800f08c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f090:	4641      	mov	r1, r8
 800f092:	4638      	mov	r0, r7
 800f094:	47c8      	blx	r9
 800f096:	3001      	adds	r0, #1
 800f098:	d01e      	beq.n	800f0d8 <_printf_common+0xa4>
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	6922      	ldr	r2, [r4, #16]
 800f09e:	f003 0306 	and.w	r3, r3, #6
 800f0a2:	2b04      	cmp	r3, #4
 800f0a4:	bf02      	ittt	eq
 800f0a6:	68e5      	ldreq	r5, [r4, #12]
 800f0a8:	6833      	ldreq	r3, [r6, #0]
 800f0aa:	1aed      	subeq	r5, r5, r3
 800f0ac:	68a3      	ldr	r3, [r4, #8]
 800f0ae:	bf0c      	ite	eq
 800f0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f0b4:	2500      	movne	r5, #0
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	bfc4      	itt	gt
 800f0ba:	1a9b      	subgt	r3, r3, r2
 800f0bc:	18ed      	addgt	r5, r5, r3
 800f0be:	2600      	movs	r6, #0
 800f0c0:	341a      	adds	r4, #26
 800f0c2:	42b5      	cmp	r5, r6
 800f0c4:	d11a      	bne.n	800f0fc <_printf_common+0xc8>
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	e008      	b.n	800f0dc <_printf_common+0xa8>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	4652      	mov	r2, sl
 800f0ce:	4641      	mov	r1, r8
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	47c8      	blx	r9
 800f0d4:	3001      	adds	r0, #1
 800f0d6:	d103      	bne.n	800f0e0 <_printf_common+0xac>
 800f0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e0:	3501      	adds	r5, #1
 800f0e2:	e7c6      	b.n	800f072 <_printf_common+0x3e>
 800f0e4:	18e1      	adds	r1, r4, r3
 800f0e6:	1c5a      	adds	r2, r3, #1
 800f0e8:	2030      	movs	r0, #48	@ 0x30
 800f0ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0ee:	4422      	add	r2, r4
 800f0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0f8:	3302      	adds	r3, #2
 800f0fa:	e7c7      	b.n	800f08c <_printf_common+0x58>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	4622      	mov	r2, r4
 800f100:	4641      	mov	r1, r8
 800f102:	4638      	mov	r0, r7
 800f104:	47c8      	blx	r9
 800f106:	3001      	adds	r0, #1
 800f108:	d0e6      	beq.n	800f0d8 <_printf_common+0xa4>
 800f10a:	3601      	adds	r6, #1
 800f10c:	e7d9      	b.n	800f0c2 <_printf_common+0x8e>
	...

0800f110 <_printf_i>:
 800f110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f114:	7e0f      	ldrb	r7, [r1, #24]
 800f116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f118:	2f78      	cmp	r7, #120	@ 0x78
 800f11a:	4691      	mov	r9, r2
 800f11c:	4680      	mov	r8, r0
 800f11e:	460c      	mov	r4, r1
 800f120:	469a      	mov	sl, r3
 800f122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f126:	d807      	bhi.n	800f138 <_printf_i+0x28>
 800f128:	2f62      	cmp	r7, #98	@ 0x62
 800f12a:	d80a      	bhi.n	800f142 <_printf_i+0x32>
 800f12c:	2f00      	cmp	r7, #0
 800f12e:	f000 80d2 	beq.w	800f2d6 <_printf_i+0x1c6>
 800f132:	2f58      	cmp	r7, #88	@ 0x58
 800f134:	f000 80b9 	beq.w	800f2aa <_printf_i+0x19a>
 800f138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f13c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f140:	e03a      	b.n	800f1b8 <_printf_i+0xa8>
 800f142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f146:	2b15      	cmp	r3, #21
 800f148:	d8f6      	bhi.n	800f138 <_printf_i+0x28>
 800f14a:	a101      	add	r1, pc, #4	@ (adr r1, 800f150 <_printf_i+0x40>)
 800f14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f150:	0800f1a9 	.word	0x0800f1a9
 800f154:	0800f1bd 	.word	0x0800f1bd
 800f158:	0800f139 	.word	0x0800f139
 800f15c:	0800f139 	.word	0x0800f139
 800f160:	0800f139 	.word	0x0800f139
 800f164:	0800f139 	.word	0x0800f139
 800f168:	0800f1bd 	.word	0x0800f1bd
 800f16c:	0800f139 	.word	0x0800f139
 800f170:	0800f139 	.word	0x0800f139
 800f174:	0800f139 	.word	0x0800f139
 800f178:	0800f139 	.word	0x0800f139
 800f17c:	0800f2bd 	.word	0x0800f2bd
 800f180:	0800f1e7 	.word	0x0800f1e7
 800f184:	0800f277 	.word	0x0800f277
 800f188:	0800f139 	.word	0x0800f139
 800f18c:	0800f139 	.word	0x0800f139
 800f190:	0800f2df 	.word	0x0800f2df
 800f194:	0800f139 	.word	0x0800f139
 800f198:	0800f1e7 	.word	0x0800f1e7
 800f19c:	0800f139 	.word	0x0800f139
 800f1a0:	0800f139 	.word	0x0800f139
 800f1a4:	0800f27f 	.word	0x0800f27f
 800f1a8:	6833      	ldr	r3, [r6, #0]
 800f1aa:	1d1a      	adds	r2, r3, #4
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	6032      	str	r2, [r6, #0]
 800f1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e09d      	b.n	800f2f8 <_printf_i+0x1e8>
 800f1bc:	6833      	ldr	r3, [r6, #0]
 800f1be:	6820      	ldr	r0, [r4, #0]
 800f1c0:	1d19      	adds	r1, r3, #4
 800f1c2:	6031      	str	r1, [r6, #0]
 800f1c4:	0606      	lsls	r6, r0, #24
 800f1c6:	d501      	bpl.n	800f1cc <_printf_i+0xbc>
 800f1c8:	681d      	ldr	r5, [r3, #0]
 800f1ca:	e003      	b.n	800f1d4 <_printf_i+0xc4>
 800f1cc:	0645      	lsls	r5, r0, #25
 800f1ce:	d5fb      	bpl.n	800f1c8 <_printf_i+0xb8>
 800f1d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1d4:	2d00      	cmp	r5, #0
 800f1d6:	da03      	bge.n	800f1e0 <_printf_i+0xd0>
 800f1d8:	232d      	movs	r3, #45	@ 0x2d
 800f1da:	426d      	negs	r5, r5
 800f1dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1e0:	4859      	ldr	r0, [pc, #356]	@ (800f348 <_printf_i+0x238>)
 800f1e2:	230a      	movs	r3, #10
 800f1e4:	e011      	b.n	800f20a <_printf_i+0xfa>
 800f1e6:	6821      	ldr	r1, [r4, #0]
 800f1e8:	6833      	ldr	r3, [r6, #0]
 800f1ea:	0608      	lsls	r0, r1, #24
 800f1ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1f0:	d402      	bmi.n	800f1f8 <_printf_i+0xe8>
 800f1f2:	0649      	lsls	r1, r1, #25
 800f1f4:	bf48      	it	mi
 800f1f6:	b2ad      	uxthmi	r5, r5
 800f1f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1fa:	4853      	ldr	r0, [pc, #332]	@ (800f348 <_printf_i+0x238>)
 800f1fc:	6033      	str	r3, [r6, #0]
 800f1fe:	bf14      	ite	ne
 800f200:	230a      	movne	r3, #10
 800f202:	2308      	moveq	r3, #8
 800f204:	2100      	movs	r1, #0
 800f206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f20a:	6866      	ldr	r6, [r4, #4]
 800f20c:	60a6      	str	r6, [r4, #8]
 800f20e:	2e00      	cmp	r6, #0
 800f210:	bfa2      	ittt	ge
 800f212:	6821      	ldrge	r1, [r4, #0]
 800f214:	f021 0104 	bicge.w	r1, r1, #4
 800f218:	6021      	strge	r1, [r4, #0]
 800f21a:	b90d      	cbnz	r5, 800f220 <_printf_i+0x110>
 800f21c:	2e00      	cmp	r6, #0
 800f21e:	d04b      	beq.n	800f2b8 <_printf_i+0x1a8>
 800f220:	4616      	mov	r6, r2
 800f222:	fbb5 f1f3 	udiv	r1, r5, r3
 800f226:	fb03 5711 	mls	r7, r3, r1, r5
 800f22a:	5dc7      	ldrb	r7, [r0, r7]
 800f22c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f230:	462f      	mov	r7, r5
 800f232:	42bb      	cmp	r3, r7
 800f234:	460d      	mov	r5, r1
 800f236:	d9f4      	bls.n	800f222 <_printf_i+0x112>
 800f238:	2b08      	cmp	r3, #8
 800f23a:	d10b      	bne.n	800f254 <_printf_i+0x144>
 800f23c:	6823      	ldr	r3, [r4, #0]
 800f23e:	07df      	lsls	r7, r3, #31
 800f240:	d508      	bpl.n	800f254 <_printf_i+0x144>
 800f242:	6923      	ldr	r3, [r4, #16]
 800f244:	6861      	ldr	r1, [r4, #4]
 800f246:	4299      	cmp	r1, r3
 800f248:	bfde      	ittt	le
 800f24a:	2330      	movle	r3, #48	@ 0x30
 800f24c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f250:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f254:	1b92      	subs	r2, r2, r6
 800f256:	6122      	str	r2, [r4, #16]
 800f258:	f8cd a000 	str.w	sl, [sp]
 800f25c:	464b      	mov	r3, r9
 800f25e:	aa03      	add	r2, sp, #12
 800f260:	4621      	mov	r1, r4
 800f262:	4640      	mov	r0, r8
 800f264:	f7ff fee6 	bl	800f034 <_printf_common>
 800f268:	3001      	adds	r0, #1
 800f26a:	d14a      	bne.n	800f302 <_printf_i+0x1f2>
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	b004      	add	sp, #16
 800f272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	f043 0320 	orr.w	r3, r3, #32
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	4833      	ldr	r0, [pc, #204]	@ (800f34c <_printf_i+0x23c>)
 800f280:	2778      	movs	r7, #120	@ 0x78
 800f282:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	6831      	ldr	r1, [r6, #0]
 800f28a:	061f      	lsls	r7, r3, #24
 800f28c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f290:	d402      	bmi.n	800f298 <_printf_i+0x188>
 800f292:	065f      	lsls	r7, r3, #25
 800f294:	bf48      	it	mi
 800f296:	b2ad      	uxthmi	r5, r5
 800f298:	6031      	str	r1, [r6, #0]
 800f29a:	07d9      	lsls	r1, r3, #31
 800f29c:	bf44      	itt	mi
 800f29e:	f043 0320 	orrmi.w	r3, r3, #32
 800f2a2:	6023      	strmi	r3, [r4, #0]
 800f2a4:	b11d      	cbz	r5, 800f2ae <_printf_i+0x19e>
 800f2a6:	2310      	movs	r3, #16
 800f2a8:	e7ac      	b.n	800f204 <_printf_i+0xf4>
 800f2aa:	4827      	ldr	r0, [pc, #156]	@ (800f348 <_printf_i+0x238>)
 800f2ac:	e7e9      	b.n	800f282 <_printf_i+0x172>
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	f023 0320 	bic.w	r3, r3, #32
 800f2b4:	6023      	str	r3, [r4, #0]
 800f2b6:	e7f6      	b.n	800f2a6 <_printf_i+0x196>
 800f2b8:	4616      	mov	r6, r2
 800f2ba:	e7bd      	b.n	800f238 <_printf_i+0x128>
 800f2bc:	6833      	ldr	r3, [r6, #0]
 800f2be:	6825      	ldr	r5, [r4, #0]
 800f2c0:	6961      	ldr	r1, [r4, #20]
 800f2c2:	1d18      	adds	r0, r3, #4
 800f2c4:	6030      	str	r0, [r6, #0]
 800f2c6:	062e      	lsls	r6, r5, #24
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	d501      	bpl.n	800f2d0 <_printf_i+0x1c0>
 800f2cc:	6019      	str	r1, [r3, #0]
 800f2ce:	e002      	b.n	800f2d6 <_printf_i+0x1c6>
 800f2d0:	0668      	lsls	r0, r5, #25
 800f2d2:	d5fb      	bpl.n	800f2cc <_printf_i+0x1bc>
 800f2d4:	8019      	strh	r1, [r3, #0]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	6123      	str	r3, [r4, #16]
 800f2da:	4616      	mov	r6, r2
 800f2dc:	e7bc      	b.n	800f258 <_printf_i+0x148>
 800f2de:	6833      	ldr	r3, [r6, #0]
 800f2e0:	1d1a      	adds	r2, r3, #4
 800f2e2:	6032      	str	r2, [r6, #0]
 800f2e4:	681e      	ldr	r6, [r3, #0]
 800f2e6:	6862      	ldr	r2, [r4, #4]
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7f0 ff48 	bl	8000180 <memchr>
 800f2f0:	b108      	cbz	r0, 800f2f6 <_printf_i+0x1e6>
 800f2f2:	1b80      	subs	r0, r0, r6
 800f2f4:	6060      	str	r0, [r4, #4]
 800f2f6:	6863      	ldr	r3, [r4, #4]
 800f2f8:	6123      	str	r3, [r4, #16]
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f300:	e7aa      	b.n	800f258 <_printf_i+0x148>
 800f302:	6923      	ldr	r3, [r4, #16]
 800f304:	4632      	mov	r2, r6
 800f306:	4649      	mov	r1, r9
 800f308:	4640      	mov	r0, r8
 800f30a:	47d0      	blx	sl
 800f30c:	3001      	adds	r0, #1
 800f30e:	d0ad      	beq.n	800f26c <_printf_i+0x15c>
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	079b      	lsls	r3, r3, #30
 800f314:	d413      	bmi.n	800f33e <_printf_i+0x22e>
 800f316:	68e0      	ldr	r0, [r4, #12]
 800f318:	9b03      	ldr	r3, [sp, #12]
 800f31a:	4298      	cmp	r0, r3
 800f31c:	bfb8      	it	lt
 800f31e:	4618      	movlt	r0, r3
 800f320:	e7a6      	b.n	800f270 <_printf_i+0x160>
 800f322:	2301      	movs	r3, #1
 800f324:	4632      	mov	r2, r6
 800f326:	4649      	mov	r1, r9
 800f328:	4640      	mov	r0, r8
 800f32a:	47d0      	blx	sl
 800f32c:	3001      	adds	r0, #1
 800f32e:	d09d      	beq.n	800f26c <_printf_i+0x15c>
 800f330:	3501      	adds	r5, #1
 800f332:	68e3      	ldr	r3, [r4, #12]
 800f334:	9903      	ldr	r1, [sp, #12]
 800f336:	1a5b      	subs	r3, r3, r1
 800f338:	42ab      	cmp	r3, r5
 800f33a:	dcf2      	bgt.n	800f322 <_printf_i+0x212>
 800f33c:	e7eb      	b.n	800f316 <_printf_i+0x206>
 800f33e:	2500      	movs	r5, #0
 800f340:	f104 0619 	add.w	r6, r4, #25
 800f344:	e7f5      	b.n	800f332 <_printf_i+0x222>
 800f346:	bf00      	nop
 800f348:	080130cb 	.word	0x080130cb
 800f34c:	080130dc 	.word	0x080130dc

0800f350 <std>:
 800f350:	2300      	movs	r3, #0
 800f352:	b510      	push	{r4, lr}
 800f354:	4604      	mov	r4, r0
 800f356:	e9c0 3300 	strd	r3, r3, [r0]
 800f35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f35e:	6083      	str	r3, [r0, #8]
 800f360:	8181      	strh	r1, [r0, #12]
 800f362:	6643      	str	r3, [r0, #100]	@ 0x64
 800f364:	81c2      	strh	r2, [r0, #14]
 800f366:	6183      	str	r3, [r0, #24]
 800f368:	4619      	mov	r1, r3
 800f36a:	2208      	movs	r2, #8
 800f36c:	305c      	adds	r0, #92	@ 0x5c
 800f36e:	f000 fa35 	bl	800f7dc <memset>
 800f372:	4b0d      	ldr	r3, [pc, #52]	@ (800f3a8 <std+0x58>)
 800f374:	6263      	str	r3, [r4, #36]	@ 0x24
 800f376:	4b0d      	ldr	r3, [pc, #52]	@ (800f3ac <std+0x5c>)
 800f378:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f37a:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b0 <std+0x60>)
 800f37c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f37e:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b4 <std+0x64>)
 800f380:	6323      	str	r3, [r4, #48]	@ 0x30
 800f382:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b8 <std+0x68>)
 800f384:	6224      	str	r4, [r4, #32]
 800f386:	429c      	cmp	r4, r3
 800f388:	d006      	beq.n	800f398 <std+0x48>
 800f38a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f38e:	4294      	cmp	r4, r2
 800f390:	d002      	beq.n	800f398 <std+0x48>
 800f392:	33d0      	adds	r3, #208	@ 0xd0
 800f394:	429c      	cmp	r4, r3
 800f396:	d105      	bne.n	800f3a4 <std+0x54>
 800f398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3a0:	f000 baae 	b.w	800f900 <__retarget_lock_init_recursive>
 800f3a4:	bd10      	pop	{r4, pc}
 800f3a6:	bf00      	nop
 800f3a8:	0800f62d 	.word	0x0800f62d
 800f3ac:	0800f64f 	.word	0x0800f64f
 800f3b0:	0800f687 	.word	0x0800f687
 800f3b4:	0800f6ab 	.word	0x0800f6ab
 800f3b8:	20001808 	.word	0x20001808

0800f3bc <stdio_exit_handler>:
 800f3bc:	4a02      	ldr	r2, [pc, #8]	@ (800f3c8 <stdio_exit_handler+0xc>)
 800f3be:	4903      	ldr	r1, [pc, #12]	@ (800f3cc <stdio_exit_handler+0x10>)
 800f3c0:	4803      	ldr	r0, [pc, #12]	@ (800f3d0 <stdio_exit_handler+0x14>)
 800f3c2:	f000 b869 	b.w	800f498 <_fwalk_sglue>
 800f3c6:	bf00      	nop
 800f3c8:	20000024 	.word	0x20000024
 800f3cc:	08011501 	.word	0x08011501
 800f3d0:	20000034 	.word	0x20000034

0800f3d4 <cleanup_stdio>:
 800f3d4:	6841      	ldr	r1, [r0, #4]
 800f3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800f408 <cleanup_stdio+0x34>)
 800f3d8:	4299      	cmp	r1, r3
 800f3da:	b510      	push	{r4, lr}
 800f3dc:	4604      	mov	r4, r0
 800f3de:	d001      	beq.n	800f3e4 <cleanup_stdio+0x10>
 800f3e0:	f002 f88e 	bl	8011500 <_fflush_r>
 800f3e4:	68a1      	ldr	r1, [r4, #8]
 800f3e6:	4b09      	ldr	r3, [pc, #36]	@ (800f40c <cleanup_stdio+0x38>)
 800f3e8:	4299      	cmp	r1, r3
 800f3ea:	d002      	beq.n	800f3f2 <cleanup_stdio+0x1e>
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f002 f887 	bl	8011500 <_fflush_r>
 800f3f2:	68e1      	ldr	r1, [r4, #12]
 800f3f4:	4b06      	ldr	r3, [pc, #24]	@ (800f410 <cleanup_stdio+0x3c>)
 800f3f6:	4299      	cmp	r1, r3
 800f3f8:	d004      	beq.n	800f404 <cleanup_stdio+0x30>
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f400:	f002 b87e 	b.w	8011500 <_fflush_r>
 800f404:	bd10      	pop	{r4, pc}
 800f406:	bf00      	nop
 800f408:	20001808 	.word	0x20001808
 800f40c:	20001870 	.word	0x20001870
 800f410:	200018d8 	.word	0x200018d8

0800f414 <global_stdio_init.part.0>:
 800f414:	b510      	push	{r4, lr}
 800f416:	4b0b      	ldr	r3, [pc, #44]	@ (800f444 <global_stdio_init.part.0+0x30>)
 800f418:	4c0b      	ldr	r4, [pc, #44]	@ (800f448 <global_stdio_init.part.0+0x34>)
 800f41a:	4a0c      	ldr	r2, [pc, #48]	@ (800f44c <global_stdio_init.part.0+0x38>)
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	4620      	mov	r0, r4
 800f420:	2200      	movs	r2, #0
 800f422:	2104      	movs	r1, #4
 800f424:	f7ff ff94 	bl	800f350 <std>
 800f428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f42c:	2201      	movs	r2, #1
 800f42e:	2109      	movs	r1, #9
 800f430:	f7ff ff8e 	bl	800f350 <std>
 800f434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f438:	2202      	movs	r2, #2
 800f43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f43e:	2112      	movs	r1, #18
 800f440:	f7ff bf86 	b.w	800f350 <std>
 800f444:	20001940 	.word	0x20001940
 800f448:	20001808 	.word	0x20001808
 800f44c:	0800f3bd 	.word	0x0800f3bd

0800f450 <__sfp_lock_acquire>:
 800f450:	4801      	ldr	r0, [pc, #4]	@ (800f458 <__sfp_lock_acquire+0x8>)
 800f452:	f000 ba56 	b.w	800f902 <__retarget_lock_acquire_recursive>
 800f456:	bf00      	nop
 800f458:	20001949 	.word	0x20001949

0800f45c <__sfp_lock_release>:
 800f45c:	4801      	ldr	r0, [pc, #4]	@ (800f464 <__sfp_lock_release+0x8>)
 800f45e:	f000 ba51 	b.w	800f904 <__retarget_lock_release_recursive>
 800f462:	bf00      	nop
 800f464:	20001949 	.word	0x20001949

0800f468 <__sinit>:
 800f468:	b510      	push	{r4, lr}
 800f46a:	4604      	mov	r4, r0
 800f46c:	f7ff fff0 	bl	800f450 <__sfp_lock_acquire>
 800f470:	6a23      	ldr	r3, [r4, #32]
 800f472:	b11b      	cbz	r3, 800f47c <__sinit+0x14>
 800f474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f478:	f7ff bff0 	b.w	800f45c <__sfp_lock_release>
 800f47c:	4b04      	ldr	r3, [pc, #16]	@ (800f490 <__sinit+0x28>)
 800f47e:	6223      	str	r3, [r4, #32]
 800f480:	4b04      	ldr	r3, [pc, #16]	@ (800f494 <__sinit+0x2c>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1f5      	bne.n	800f474 <__sinit+0xc>
 800f488:	f7ff ffc4 	bl	800f414 <global_stdio_init.part.0>
 800f48c:	e7f2      	b.n	800f474 <__sinit+0xc>
 800f48e:	bf00      	nop
 800f490:	0800f3d5 	.word	0x0800f3d5
 800f494:	20001940 	.word	0x20001940

0800f498 <_fwalk_sglue>:
 800f498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f49c:	4607      	mov	r7, r0
 800f49e:	4688      	mov	r8, r1
 800f4a0:	4614      	mov	r4, r2
 800f4a2:	2600      	movs	r6, #0
 800f4a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f4a8:	f1b9 0901 	subs.w	r9, r9, #1
 800f4ac:	d505      	bpl.n	800f4ba <_fwalk_sglue+0x22>
 800f4ae:	6824      	ldr	r4, [r4, #0]
 800f4b0:	2c00      	cmp	r4, #0
 800f4b2:	d1f7      	bne.n	800f4a4 <_fwalk_sglue+0xc>
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ba:	89ab      	ldrh	r3, [r5, #12]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d907      	bls.n	800f4d0 <_fwalk_sglue+0x38>
 800f4c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	d003      	beq.n	800f4d0 <_fwalk_sglue+0x38>
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	4638      	mov	r0, r7
 800f4cc:	47c0      	blx	r8
 800f4ce:	4306      	orrs	r6, r0
 800f4d0:	3568      	adds	r5, #104	@ 0x68
 800f4d2:	e7e9      	b.n	800f4a8 <_fwalk_sglue+0x10>

0800f4d4 <iprintf>:
 800f4d4:	b40f      	push	{r0, r1, r2, r3}
 800f4d6:	b507      	push	{r0, r1, r2, lr}
 800f4d8:	4906      	ldr	r1, [pc, #24]	@ (800f4f4 <iprintf+0x20>)
 800f4da:	ab04      	add	r3, sp, #16
 800f4dc:	6808      	ldr	r0, [r1, #0]
 800f4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4e2:	6881      	ldr	r1, [r0, #8]
 800f4e4:	9301      	str	r3, [sp, #4]
 800f4e6:	f001 fe6f 	bl	80111c8 <_vfiprintf_r>
 800f4ea:	b003      	add	sp, #12
 800f4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4f0:	b004      	add	sp, #16
 800f4f2:	4770      	bx	lr
 800f4f4:	20000030 	.word	0x20000030

0800f4f8 <putchar>:
 800f4f8:	4b02      	ldr	r3, [pc, #8]	@ (800f504 <putchar+0xc>)
 800f4fa:	4601      	mov	r1, r0
 800f4fc:	6818      	ldr	r0, [r3, #0]
 800f4fe:	6882      	ldr	r2, [r0, #8]
 800f500:	f002 b888 	b.w	8011614 <_putc_r>
 800f504:	20000030 	.word	0x20000030

0800f508 <_puts_r>:
 800f508:	6a03      	ldr	r3, [r0, #32]
 800f50a:	b570      	push	{r4, r5, r6, lr}
 800f50c:	6884      	ldr	r4, [r0, #8]
 800f50e:	4605      	mov	r5, r0
 800f510:	460e      	mov	r6, r1
 800f512:	b90b      	cbnz	r3, 800f518 <_puts_r+0x10>
 800f514:	f7ff ffa8 	bl	800f468 <__sinit>
 800f518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f51a:	07db      	lsls	r3, r3, #31
 800f51c:	d405      	bmi.n	800f52a <_puts_r+0x22>
 800f51e:	89a3      	ldrh	r3, [r4, #12]
 800f520:	0598      	lsls	r0, r3, #22
 800f522:	d402      	bmi.n	800f52a <_puts_r+0x22>
 800f524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f526:	f000 f9ec 	bl	800f902 <__retarget_lock_acquire_recursive>
 800f52a:	89a3      	ldrh	r3, [r4, #12]
 800f52c:	0719      	lsls	r1, r3, #28
 800f52e:	d502      	bpl.n	800f536 <_puts_r+0x2e>
 800f530:	6923      	ldr	r3, [r4, #16]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d135      	bne.n	800f5a2 <_puts_r+0x9a>
 800f536:	4621      	mov	r1, r4
 800f538:	4628      	mov	r0, r5
 800f53a:	f000 f8f9 	bl	800f730 <__swsetup_r>
 800f53e:	b380      	cbz	r0, 800f5a2 <_puts_r+0x9a>
 800f540:	f04f 35ff 	mov.w	r5, #4294967295
 800f544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f546:	07da      	lsls	r2, r3, #31
 800f548:	d405      	bmi.n	800f556 <_puts_r+0x4e>
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	059b      	lsls	r3, r3, #22
 800f54e:	d402      	bmi.n	800f556 <_puts_r+0x4e>
 800f550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f552:	f000 f9d7 	bl	800f904 <__retarget_lock_release_recursive>
 800f556:	4628      	mov	r0, r5
 800f558:	bd70      	pop	{r4, r5, r6, pc}
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	da04      	bge.n	800f568 <_puts_r+0x60>
 800f55e:	69a2      	ldr	r2, [r4, #24]
 800f560:	429a      	cmp	r2, r3
 800f562:	dc17      	bgt.n	800f594 <_puts_r+0x8c>
 800f564:	290a      	cmp	r1, #10
 800f566:	d015      	beq.n	800f594 <_puts_r+0x8c>
 800f568:	6823      	ldr	r3, [r4, #0]
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	6022      	str	r2, [r4, #0]
 800f56e:	7019      	strb	r1, [r3, #0]
 800f570:	68a3      	ldr	r3, [r4, #8]
 800f572:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f576:	3b01      	subs	r3, #1
 800f578:	60a3      	str	r3, [r4, #8]
 800f57a:	2900      	cmp	r1, #0
 800f57c:	d1ed      	bne.n	800f55a <_puts_r+0x52>
 800f57e:	2b00      	cmp	r3, #0
 800f580:	da11      	bge.n	800f5a6 <_puts_r+0x9e>
 800f582:	4622      	mov	r2, r4
 800f584:	210a      	movs	r1, #10
 800f586:	4628      	mov	r0, r5
 800f588:	f000 f893 	bl	800f6b2 <__swbuf_r>
 800f58c:	3001      	adds	r0, #1
 800f58e:	d0d7      	beq.n	800f540 <_puts_r+0x38>
 800f590:	250a      	movs	r5, #10
 800f592:	e7d7      	b.n	800f544 <_puts_r+0x3c>
 800f594:	4622      	mov	r2, r4
 800f596:	4628      	mov	r0, r5
 800f598:	f000 f88b 	bl	800f6b2 <__swbuf_r>
 800f59c:	3001      	adds	r0, #1
 800f59e:	d1e7      	bne.n	800f570 <_puts_r+0x68>
 800f5a0:	e7ce      	b.n	800f540 <_puts_r+0x38>
 800f5a2:	3e01      	subs	r6, #1
 800f5a4:	e7e4      	b.n	800f570 <_puts_r+0x68>
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	6022      	str	r2, [r4, #0]
 800f5ac:	220a      	movs	r2, #10
 800f5ae:	701a      	strb	r2, [r3, #0]
 800f5b0:	e7ee      	b.n	800f590 <_puts_r+0x88>
	...

0800f5b4 <puts>:
 800f5b4:	4b02      	ldr	r3, [pc, #8]	@ (800f5c0 <puts+0xc>)
 800f5b6:	4601      	mov	r1, r0
 800f5b8:	6818      	ldr	r0, [r3, #0]
 800f5ba:	f7ff bfa5 	b.w	800f508 <_puts_r>
 800f5be:	bf00      	nop
 800f5c0:	20000030 	.word	0x20000030

0800f5c4 <sniprintf>:
 800f5c4:	b40c      	push	{r2, r3}
 800f5c6:	b530      	push	{r4, r5, lr}
 800f5c8:	4b17      	ldr	r3, [pc, #92]	@ (800f628 <sniprintf+0x64>)
 800f5ca:	1e0c      	subs	r4, r1, #0
 800f5cc:	681d      	ldr	r5, [r3, #0]
 800f5ce:	b09d      	sub	sp, #116	@ 0x74
 800f5d0:	da08      	bge.n	800f5e4 <sniprintf+0x20>
 800f5d2:	238b      	movs	r3, #139	@ 0x8b
 800f5d4:	602b      	str	r3, [r5, #0]
 800f5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5da:	b01d      	add	sp, #116	@ 0x74
 800f5dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5e0:	b002      	add	sp, #8
 800f5e2:	4770      	bx	lr
 800f5e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f5e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f5ec:	bf14      	ite	ne
 800f5ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f5f2:	4623      	moveq	r3, r4
 800f5f4:	9304      	str	r3, [sp, #16]
 800f5f6:	9307      	str	r3, [sp, #28]
 800f5f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5fc:	9002      	str	r0, [sp, #8]
 800f5fe:	9006      	str	r0, [sp, #24]
 800f600:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f604:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f606:	ab21      	add	r3, sp, #132	@ 0x84
 800f608:	a902      	add	r1, sp, #8
 800f60a:	4628      	mov	r0, r5
 800f60c:	9301      	str	r3, [sp, #4]
 800f60e:	f001 fcb5 	bl	8010f7c <_svfiprintf_r>
 800f612:	1c43      	adds	r3, r0, #1
 800f614:	bfbc      	itt	lt
 800f616:	238b      	movlt	r3, #139	@ 0x8b
 800f618:	602b      	strlt	r3, [r5, #0]
 800f61a:	2c00      	cmp	r4, #0
 800f61c:	d0dd      	beq.n	800f5da <sniprintf+0x16>
 800f61e:	9b02      	ldr	r3, [sp, #8]
 800f620:	2200      	movs	r2, #0
 800f622:	701a      	strb	r2, [r3, #0]
 800f624:	e7d9      	b.n	800f5da <sniprintf+0x16>
 800f626:	bf00      	nop
 800f628:	20000030 	.word	0x20000030

0800f62c <__sread>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	460c      	mov	r4, r1
 800f630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f634:	f000 f916 	bl	800f864 <_read_r>
 800f638:	2800      	cmp	r0, #0
 800f63a:	bfab      	itete	ge
 800f63c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f63e:	89a3      	ldrhlt	r3, [r4, #12]
 800f640:	181b      	addge	r3, r3, r0
 800f642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f646:	bfac      	ite	ge
 800f648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f64a:	81a3      	strhlt	r3, [r4, #12]
 800f64c:	bd10      	pop	{r4, pc}

0800f64e <__swrite>:
 800f64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f652:	461f      	mov	r7, r3
 800f654:	898b      	ldrh	r3, [r1, #12]
 800f656:	05db      	lsls	r3, r3, #23
 800f658:	4605      	mov	r5, r0
 800f65a:	460c      	mov	r4, r1
 800f65c:	4616      	mov	r6, r2
 800f65e:	d505      	bpl.n	800f66c <__swrite+0x1e>
 800f660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f664:	2302      	movs	r3, #2
 800f666:	2200      	movs	r2, #0
 800f668:	f000 f8ea 	bl	800f840 <_lseek_r>
 800f66c:	89a3      	ldrh	r3, [r4, #12]
 800f66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f676:	81a3      	strh	r3, [r4, #12]
 800f678:	4632      	mov	r2, r6
 800f67a:	463b      	mov	r3, r7
 800f67c:	4628      	mov	r0, r5
 800f67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f682:	f000 b901 	b.w	800f888 <_write_r>

0800f686 <__sseek>:
 800f686:	b510      	push	{r4, lr}
 800f688:	460c      	mov	r4, r1
 800f68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68e:	f000 f8d7 	bl	800f840 <_lseek_r>
 800f692:	1c43      	adds	r3, r0, #1
 800f694:	89a3      	ldrh	r3, [r4, #12]
 800f696:	bf15      	itete	ne
 800f698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f69a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f69e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f6a2:	81a3      	strheq	r3, [r4, #12]
 800f6a4:	bf18      	it	ne
 800f6a6:	81a3      	strhne	r3, [r4, #12]
 800f6a8:	bd10      	pop	{r4, pc}

0800f6aa <__sclose>:
 800f6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ae:	f000 b8b7 	b.w	800f820 <_close_r>

0800f6b2 <__swbuf_r>:
 800f6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b4:	460e      	mov	r6, r1
 800f6b6:	4614      	mov	r4, r2
 800f6b8:	4605      	mov	r5, r0
 800f6ba:	b118      	cbz	r0, 800f6c4 <__swbuf_r+0x12>
 800f6bc:	6a03      	ldr	r3, [r0, #32]
 800f6be:	b90b      	cbnz	r3, 800f6c4 <__swbuf_r+0x12>
 800f6c0:	f7ff fed2 	bl	800f468 <__sinit>
 800f6c4:	69a3      	ldr	r3, [r4, #24]
 800f6c6:	60a3      	str	r3, [r4, #8]
 800f6c8:	89a3      	ldrh	r3, [r4, #12]
 800f6ca:	071a      	lsls	r2, r3, #28
 800f6cc:	d501      	bpl.n	800f6d2 <__swbuf_r+0x20>
 800f6ce:	6923      	ldr	r3, [r4, #16]
 800f6d0:	b943      	cbnz	r3, 800f6e4 <__swbuf_r+0x32>
 800f6d2:	4621      	mov	r1, r4
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	f000 f82b 	bl	800f730 <__swsetup_r>
 800f6da:	b118      	cbz	r0, 800f6e4 <__swbuf_r+0x32>
 800f6dc:	f04f 37ff 	mov.w	r7, #4294967295
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	6922      	ldr	r2, [r4, #16]
 800f6e8:	1a98      	subs	r0, r3, r2
 800f6ea:	6963      	ldr	r3, [r4, #20]
 800f6ec:	b2f6      	uxtb	r6, r6
 800f6ee:	4283      	cmp	r3, r0
 800f6f0:	4637      	mov	r7, r6
 800f6f2:	dc05      	bgt.n	800f700 <__swbuf_r+0x4e>
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f001 ff02 	bl	8011500 <_fflush_r>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d1ed      	bne.n	800f6dc <__swbuf_r+0x2a>
 800f700:	68a3      	ldr	r3, [r4, #8]
 800f702:	3b01      	subs	r3, #1
 800f704:	60a3      	str	r3, [r4, #8]
 800f706:	6823      	ldr	r3, [r4, #0]
 800f708:	1c5a      	adds	r2, r3, #1
 800f70a:	6022      	str	r2, [r4, #0]
 800f70c:	701e      	strb	r6, [r3, #0]
 800f70e:	6962      	ldr	r2, [r4, #20]
 800f710:	1c43      	adds	r3, r0, #1
 800f712:	429a      	cmp	r2, r3
 800f714:	d004      	beq.n	800f720 <__swbuf_r+0x6e>
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	07db      	lsls	r3, r3, #31
 800f71a:	d5e1      	bpl.n	800f6e0 <__swbuf_r+0x2e>
 800f71c:	2e0a      	cmp	r6, #10
 800f71e:	d1df      	bne.n	800f6e0 <__swbuf_r+0x2e>
 800f720:	4621      	mov	r1, r4
 800f722:	4628      	mov	r0, r5
 800f724:	f001 feec 	bl	8011500 <_fflush_r>
 800f728:	2800      	cmp	r0, #0
 800f72a:	d0d9      	beq.n	800f6e0 <__swbuf_r+0x2e>
 800f72c:	e7d6      	b.n	800f6dc <__swbuf_r+0x2a>
	...

0800f730 <__swsetup_r>:
 800f730:	b538      	push	{r3, r4, r5, lr}
 800f732:	4b29      	ldr	r3, [pc, #164]	@ (800f7d8 <__swsetup_r+0xa8>)
 800f734:	4605      	mov	r5, r0
 800f736:	6818      	ldr	r0, [r3, #0]
 800f738:	460c      	mov	r4, r1
 800f73a:	b118      	cbz	r0, 800f744 <__swsetup_r+0x14>
 800f73c:	6a03      	ldr	r3, [r0, #32]
 800f73e:	b90b      	cbnz	r3, 800f744 <__swsetup_r+0x14>
 800f740:	f7ff fe92 	bl	800f468 <__sinit>
 800f744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f748:	0719      	lsls	r1, r3, #28
 800f74a:	d422      	bmi.n	800f792 <__swsetup_r+0x62>
 800f74c:	06da      	lsls	r2, r3, #27
 800f74e:	d407      	bmi.n	800f760 <__swsetup_r+0x30>
 800f750:	2209      	movs	r2, #9
 800f752:	602a      	str	r2, [r5, #0]
 800f754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f758:	81a3      	strh	r3, [r4, #12]
 800f75a:	f04f 30ff 	mov.w	r0, #4294967295
 800f75e:	e033      	b.n	800f7c8 <__swsetup_r+0x98>
 800f760:	0758      	lsls	r0, r3, #29
 800f762:	d512      	bpl.n	800f78a <__swsetup_r+0x5a>
 800f764:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f766:	b141      	cbz	r1, 800f77a <__swsetup_r+0x4a>
 800f768:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f76c:	4299      	cmp	r1, r3
 800f76e:	d002      	beq.n	800f776 <__swsetup_r+0x46>
 800f770:	4628      	mov	r0, r5
 800f772:	f000 ff25 	bl	80105c0 <_free_r>
 800f776:	2300      	movs	r3, #0
 800f778:	6363      	str	r3, [r4, #52]	@ 0x34
 800f77a:	89a3      	ldrh	r3, [r4, #12]
 800f77c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f780:	81a3      	strh	r3, [r4, #12]
 800f782:	2300      	movs	r3, #0
 800f784:	6063      	str	r3, [r4, #4]
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	89a3      	ldrh	r3, [r4, #12]
 800f78c:	f043 0308 	orr.w	r3, r3, #8
 800f790:	81a3      	strh	r3, [r4, #12]
 800f792:	6923      	ldr	r3, [r4, #16]
 800f794:	b94b      	cbnz	r3, 800f7aa <__swsetup_r+0x7a>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f79c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7a0:	d003      	beq.n	800f7aa <__swsetup_r+0x7a>
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f001 fef9 	bl	801159c <__smakebuf_r>
 800f7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ae:	f013 0201 	ands.w	r2, r3, #1
 800f7b2:	d00a      	beq.n	800f7ca <__swsetup_r+0x9a>
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	60a2      	str	r2, [r4, #8]
 800f7b8:	6962      	ldr	r2, [r4, #20]
 800f7ba:	4252      	negs	r2, r2
 800f7bc:	61a2      	str	r2, [r4, #24]
 800f7be:	6922      	ldr	r2, [r4, #16]
 800f7c0:	b942      	cbnz	r2, 800f7d4 <__swsetup_r+0xa4>
 800f7c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f7c6:	d1c5      	bne.n	800f754 <__swsetup_r+0x24>
 800f7c8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ca:	0799      	lsls	r1, r3, #30
 800f7cc:	bf58      	it	pl
 800f7ce:	6962      	ldrpl	r2, [r4, #20]
 800f7d0:	60a2      	str	r2, [r4, #8]
 800f7d2:	e7f4      	b.n	800f7be <__swsetup_r+0x8e>
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	e7f7      	b.n	800f7c8 <__swsetup_r+0x98>
 800f7d8:	20000030 	.word	0x20000030

0800f7dc <memset>:
 800f7dc:	4402      	add	r2, r0
 800f7de:	4603      	mov	r3, r0
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d100      	bne.n	800f7e6 <memset+0xa>
 800f7e4:	4770      	bx	lr
 800f7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800f7ea:	e7f9      	b.n	800f7e0 <memset+0x4>

0800f7ec <strrchr>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	d10e      	bne.n	800f814 <strrchr+0x28>
 800f7f6:	4621      	mov	r1, r4
 800f7f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7fc:	f001 bf58 	b.w	80116b0 <strchr>
 800f800:	1c43      	adds	r3, r0, #1
 800f802:	4605      	mov	r5, r0
 800f804:	4621      	mov	r1, r4
 800f806:	4618      	mov	r0, r3
 800f808:	f001 ff52 	bl	80116b0 <strchr>
 800f80c:	2800      	cmp	r0, #0
 800f80e:	d1f7      	bne.n	800f800 <strrchr+0x14>
 800f810:	4628      	mov	r0, r5
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	2500      	movs	r5, #0
 800f816:	e7f5      	b.n	800f804 <strrchr+0x18>

0800f818 <_localeconv_r>:
 800f818:	4800      	ldr	r0, [pc, #0]	@ (800f81c <_localeconv_r+0x4>)
 800f81a:	4770      	bx	lr
 800f81c:	20000170 	.word	0x20000170

0800f820 <_close_r>:
 800f820:	b538      	push	{r3, r4, r5, lr}
 800f822:	4d06      	ldr	r5, [pc, #24]	@ (800f83c <_close_r+0x1c>)
 800f824:	2300      	movs	r3, #0
 800f826:	4604      	mov	r4, r0
 800f828:	4608      	mov	r0, r1
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	f7f4 f9ce 	bl	8003bcc <_close>
 800f830:	1c43      	adds	r3, r0, #1
 800f832:	d102      	bne.n	800f83a <_close_r+0x1a>
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	b103      	cbz	r3, 800f83a <_close_r+0x1a>
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	20001944 	.word	0x20001944

0800f840 <_lseek_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4d07      	ldr	r5, [pc, #28]	@ (800f860 <_lseek_r+0x20>)
 800f844:	4604      	mov	r4, r0
 800f846:	4608      	mov	r0, r1
 800f848:	4611      	mov	r1, r2
 800f84a:	2200      	movs	r2, #0
 800f84c:	602a      	str	r2, [r5, #0]
 800f84e:	461a      	mov	r2, r3
 800f850:	f7f4 f9e3 	bl	8003c1a <_lseek>
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	d102      	bne.n	800f85e <_lseek_r+0x1e>
 800f858:	682b      	ldr	r3, [r5, #0]
 800f85a:	b103      	cbz	r3, 800f85e <_lseek_r+0x1e>
 800f85c:	6023      	str	r3, [r4, #0]
 800f85e:	bd38      	pop	{r3, r4, r5, pc}
 800f860:	20001944 	.word	0x20001944

0800f864 <_read_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	4d07      	ldr	r5, [pc, #28]	@ (800f884 <_read_r+0x20>)
 800f868:	4604      	mov	r4, r0
 800f86a:	4608      	mov	r0, r1
 800f86c:	4611      	mov	r1, r2
 800f86e:	2200      	movs	r2, #0
 800f870:	602a      	str	r2, [r5, #0]
 800f872:	461a      	mov	r2, r3
 800f874:	f7f4 f98d 	bl	8003b92 <_read>
 800f878:	1c43      	adds	r3, r0, #1
 800f87a:	d102      	bne.n	800f882 <_read_r+0x1e>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	b103      	cbz	r3, 800f882 <_read_r+0x1e>
 800f880:	6023      	str	r3, [r4, #0]
 800f882:	bd38      	pop	{r3, r4, r5, pc}
 800f884:	20001944 	.word	0x20001944

0800f888 <_write_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d07      	ldr	r5, [pc, #28]	@ (800f8a8 <_write_r+0x20>)
 800f88c:	4604      	mov	r4, r0
 800f88e:	4608      	mov	r0, r1
 800f890:	4611      	mov	r1, r2
 800f892:	2200      	movs	r2, #0
 800f894:	602a      	str	r2, [r5, #0]
 800f896:	461a      	mov	r2, r3
 800f898:	f7fc fe82 	bl	800c5a0 <_write>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d102      	bne.n	800f8a6 <_write_r+0x1e>
 800f8a0:	682b      	ldr	r3, [r5, #0]
 800f8a2:	b103      	cbz	r3, 800f8a6 <_write_r+0x1e>
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	bd38      	pop	{r3, r4, r5, pc}
 800f8a8:	20001944 	.word	0x20001944

0800f8ac <__errno>:
 800f8ac:	4b01      	ldr	r3, [pc, #4]	@ (800f8b4 <__errno+0x8>)
 800f8ae:	6818      	ldr	r0, [r3, #0]
 800f8b0:	4770      	bx	lr
 800f8b2:	bf00      	nop
 800f8b4:	20000030 	.word	0x20000030

0800f8b8 <__libc_init_array>:
 800f8b8:	b570      	push	{r4, r5, r6, lr}
 800f8ba:	4d0d      	ldr	r5, [pc, #52]	@ (800f8f0 <__libc_init_array+0x38>)
 800f8bc:	4c0d      	ldr	r4, [pc, #52]	@ (800f8f4 <__libc_init_array+0x3c>)
 800f8be:	1b64      	subs	r4, r4, r5
 800f8c0:	10a4      	asrs	r4, r4, #2
 800f8c2:	2600      	movs	r6, #0
 800f8c4:	42a6      	cmp	r6, r4
 800f8c6:	d109      	bne.n	800f8dc <__libc_init_array+0x24>
 800f8c8:	4d0b      	ldr	r5, [pc, #44]	@ (800f8f8 <__libc_init_array+0x40>)
 800f8ca:	4c0c      	ldr	r4, [pc, #48]	@ (800f8fc <__libc_init_array+0x44>)
 800f8cc:	f002 f816 	bl	80118fc <_init>
 800f8d0:	1b64      	subs	r4, r4, r5
 800f8d2:	10a4      	asrs	r4, r4, #2
 800f8d4:	2600      	movs	r6, #0
 800f8d6:	42a6      	cmp	r6, r4
 800f8d8:	d105      	bne.n	800f8e6 <__libc_init_array+0x2e>
 800f8da:	bd70      	pop	{r4, r5, r6, pc}
 800f8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8e0:	4798      	blx	r3
 800f8e2:	3601      	adds	r6, #1
 800f8e4:	e7ee      	b.n	800f8c4 <__libc_init_array+0xc>
 800f8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8ea:	4798      	blx	r3
 800f8ec:	3601      	adds	r6, #1
 800f8ee:	e7f2      	b.n	800f8d6 <__libc_init_array+0x1e>
 800f8f0:	08013430 	.word	0x08013430
 800f8f4:	08013430 	.word	0x08013430
 800f8f8:	08013430 	.word	0x08013430
 800f8fc:	08013434 	.word	0x08013434

0800f900 <__retarget_lock_init_recursive>:
 800f900:	4770      	bx	lr

0800f902 <__retarget_lock_acquire_recursive>:
 800f902:	4770      	bx	lr

0800f904 <__retarget_lock_release_recursive>:
 800f904:	4770      	bx	lr

0800f906 <memcpy>:
 800f906:	440a      	add	r2, r1
 800f908:	4291      	cmp	r1, r2
 800f90a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f90e:	d100      	bne.n	800f912 <memcpy+0xc>
 800f910:	4770      	bx	lr
 800f912:	b510      	push	{r4, lr}
 800f914:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f918:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f91c:	4291      	cmp	r1, r2
 800f91e:	d1f9      	bne.n	800f914 <memcpy+0xe>
 800f920:	bd10      	pop	{r4, pc}

0800f922 <quorem>:
 800f922:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f926:	6903      	ldr	r3, [r0, #16]
 800f928:	690c      	ldr	r4, [r1, #16]
 800f92a:	42a3      	cmp	r3, r4
 800f92c:	4607      	mov	r7, r0
 800f92e:	db7e      	blt.n	800fa2e <quorem+0x10c>
 800f930:	3c01      	subs	r4, #1
 800f932:	f101 0814 	add.w	r8, r1, #20
 800f936:	00a3      	lsls	r3, r4, #2
 800f938:	f100 0514 	add.w	r5, r0, #20
 800f93c:	9300      	str	r3, [sp, #0]
 800f93e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f942:	9301      	str	r3, [sp, #4]
 800f944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f94c:	3301      	adds	r3, #1
 800f94e:	429a      	cmp	r2, r3
 800f950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f954:	fbb2 f6f3 	udiv	r6, r2, r3
 800f958:	d32e      	bcc.n	800f9b8 <quorem+0x96>
 800f95a:	f04f 0a00 	mov.w	sl, #0
 800f95e:	46c4      	mov	ip, r8
 800f960:	46ae      	mov	lr, r5
 800f962:	46d3      	mov	fp, sl
 800f964:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f968:	b298      	uxth	r0, r3
 800f96a:	fb06 a000 	mla	r0, r6, r0, sl
 800f96e:	0c02      	lsrs	r2, r0, #16
 800f970:	0c1b      	lsrs	r3, r3, #16
 800f972:	fb06 2303 	mla	r3, r6, r3, r2
 800f976:	f8de 2000 	ldr.w	r2, [lr]
 800f97a:	b280      	uxth	r0, r0
 800f97c:	b292      	uxth	r2, r2
 800f97e:	1a12      	subs	r2, r2, r0
 800f980:	445a      	add	r2, fp
 800f982:	f8de 0000 	ldr.w	r0, [lr]
 800f986:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f990:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f994:	b292      	uxth	r2, r2
 800f996:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f99a:	45e1      	cmp	r9, ip
 800f99c:	f84e 2b04 	str.w	r2, [lr], #4
 800f9a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f9a4:	d2de      	bcs.n	800f964 <quorem+0x42>
 800f9a6:	9b00      	ldr	r3, [sp, #0]
 800f9a8:	58eb      	ldr	r3, [r5, r3]
 800f9aa:	b92b      	cbnz	r3, 800f9b8 <quorem+0x96>
 800f9ac:	9b01      	ldr	r3, [sp, #4]
 800f9ae:	3b04      	subs	r3, #4
 800f9b0:	429d      	cmp	r5, r3
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	d32f      	bcc.n	800fa16 <quorem+0xf4>
 800f9b6:	613c      	str	r4, [r7, #16]
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f001 f97b 	bl	8010cb4 <__mcmp>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	db25      	blt.n	800fa0e <quorem+0xec>
 800f9c2:	4629      	mov	r1, r5
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9ca:	f8d1 c000 	ldr.w	ip, [r1]
 800f9ce:	fa1f fe82 	uxth.w	lr, r2
 800f9d2:	fa1f f38c 	uxth.w	r3, ip
 800f9d6:	eba3 030e 	sub.w	r3, r3, lr
 800f9da:	4403      	add	r3, r0
 800f9dc:	0c12      	lsrs	r2, r2, #16
 800f9de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f9e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9ec:	45c1      	cmp	r9, r8
 800f9ee:	f841 3b04 	str.w	r3, [r1], #4
 800f9f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f9f6:	d2e6      	bcs.n	800f9c6 <quorem+0xa4>
 800f9f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa00:	b922      	cbnz	r2, 800fa0c <quorem+0xea>
 800fa02:	3b04      	subs	r3, #4
 800fa04:	429d      	cmp	r5, r3
 800fa06:	461a      	mov	r2, r3
 800fa08:	d30b      	bcc.n	800fa22 <quorem+0x100>
 800fa0a:	613c      	str	r4, [r7, #16]
 800fa0c:	3601      	adds	r6, #1
 800fa0e:	4630      	mov	r0, r6
 800fa10:	b003      	add	sp, #12
 800fa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa16:	6812      	ldr	r2, [r2, #0]
 800fa18:	3b04      	subs	r3, #4
 800fa1a:	2a00      	cmp	r2, #0
 800fa1c:	d1cb      	bne.n	800f9b6 <quorem+0x94>
 800fa1e:	3c01      	subs	r4, #1
 800fa20:	e7c6      	b.n	800f9b0 <quorem+0x8e>
 800fa22:	6812      	ldr	r2, [r2, #0]
 800fa24:	3b04      	subs	r3, #4
 800fa26:	2a00      	cmp	r2, #0
 800fa28:	d1ef      	bne.n	800fa0a <quorem+0xe8>
 800fa2a:	3c01      	subs	r4, #1
 800fa2c:	e7ea      	b.n	800fa04 <quorem+0xe2>
 800fa2e:	2000      	movs	r0, #0
 800fa30:	e7ee      	b.n	800fa10 <quorem+0xee>
 800fa32:	0000      	movs	r0, r0
 800fa34:	0000      	movs	r0, r0
	...

0800fa38 <_dtoa_r>:
 800fa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3c:	69c7      	ldr	r7, [r0, #28]
 800fa3e:	b099      	sub	sp, #100	@ 0x64
 800fa40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fa44:	ec55 4b10 	vmov	r4, r5, d0
 800fa48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fa4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa4c:	4683      	mov	fp, r0
 800fa4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa52:	b97f      	cbnz	r7, 800fa74 <_dtoa_r+0x3c>
 800fa54:	2010      	movs	r0, #16
 800fa56:	f000 fdfd 	bl	8010654 <malloc>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800fa60:	b920      	cbnz	r0, 800fa6c <_dtoa_r+0x34>
 800fa62:	4ba7      	ldr	r3, [pc, #668]	@ (800fd00 <_dtoa_r+0x2c8>)
 800fa64:	21ef      	movs	r1, #239	@ 0xef
 800fa66:	48a7      	ldr	r0, [pc, #668]	@ (800fd04 <_dtoa_r+0x2cc>)
 800fa68:	f001 fe62 	bl	8011730 <__assert_func>
 800fa6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa70:	6007      	str	r7, [r0, #0]
 800fa72:	60c7      	str	r7, [r0, #12]
 800fa74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa78:	6819      	ldr	r1, [r3, #0]
 800fa7a:	b159      	cbz	r1, 800fa94 <_dtoa_r+0x5c>
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	604a      	str	r2, [r1, #4]
 800fa80:	2301      	movs	r3, #1
 800fa82:	4093      	lsls	r3, r2
 800fa84:	608b      	str	r3, [r1, #8]
 800fa86:	4658      	mov	r0, fp
 800fa88:	f000 feda 	bl	8010840 <_Bfree>
 800fa8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa90:	2200      	movs	r2, #0
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	1e2b      	subs	r3, r5, #0
 800fa96:	bfb9      	ittee	lt
 800fa98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa9c:	9303      	strlt	r3, [sp, #12]
 800fa9e:	2300      	movge	r3, #0
 800faa0:	6033      	strge	r3, [r6, #0]
 800faa2:	9f03      	ldr	r7, [sp, #12]
 800faa4:	4b98      	ldr	r3, [pc, #608]	@ (800fd08 <_dtoa_r+0x2d0>)
 800faa6:	bfbc      	itt	lt
 800faa8:	2201      	movlt	r2, #1
 800faaa:	6032      	strlt	r2, [r6, #0]
 800faac:	43bb      	bics	r3, r7
 800faae:	d112      	bne.n	800fad6 <_dtoa_r+0x9e>
 800fab0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fab6:	6013      	str	r3, [r2, #0]
 800fab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fabc:	4323      	orrs	r3, r4
 800fabe:	f000 854d 	beq.w	801055c <_dtoa_r+0xb24>
 800fac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fac4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fd1c <_dtoa_r+0x2e4>
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 854f 	beq.w	801056c <_dtoa_r+0xb34>
 800face:	f10a 0303 	add.w	r3, sl, #3
 800fad2:	f000 bd49 	b.w	8010568 <_dtoa_r+0xb30>
 800fad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fada:	2200      	movs	r2, #0
 800fadc:	ec51 0b17 	vmov	r0, r1, d7
 800fae0:	2300      	movs	r3, #0
 800fae2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fae6:	f7f0 ffc7 	bl	8000a78 <__aeabi_dcmpeq>
 800faea:	4680      	mov	r8, r0
 800faec:	b158      	cbz	r0, 800fb06 <_dtoa_r+0xce>
 800faee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800faf0:	2301      	movs	r3, #1
 800faf2:	6013      	str	r3, [r2, #0]
 800faf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800faf6:	b113      	cbz	r3, 800fafe <_dtoa_r+0xc6>
 800faf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fafa:	4b84      	ldr	r3, [pc, #528]	@ (800fd0c <_dtoa_r+0x2d4>)
 800fafc:	6013      	str	r3, [r2, #0]
 800fafe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fd20 <_dtoa_r+0x2e8>
 800fb02:	f000 bd33 	b.w	801056c <_dtoa_r+0xb34>
 800fb06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fb0a:	aa16      	add	r2, sp, #88	@ 0x58
 800fb0c:	a917      	add	r1, sp, #92	@ 0x5c
 800fb0e:	4658      	mov	r0, fp
 800fb10:	f001 f980 	bl	8010e14 <__d2b>
 800fb14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fb18:	4681      	mov	r9, r0
 800fb1a:	2e00      	cmp	r6, #0
 800fb1c:	d077      	beq.n	800fc0e <_dtoa_r+0x1d6>
 800fb1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fb24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fb34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fb38:	4619      	mov	r1, r3
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	4b74      	ldr	r3, [pc, #464]	@ (800fd10 <_dtoa_r+0x2d8>)
 800fb3e:	f7f0 fb7b 	bl	8000238 <__aeabi_dsub>
 800fb42:	a369      	add	r3, pc, #420	@ (adr r3, 800fce8 <_dtoa_r+0x2b0>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 fd2e 	bl	80005a8 <__aeabi_dmul>
 800fb4c:	a368      	add	r3, pc, #416	@ (adr r3, 800fcf0 <_dtoa_r+0x2b8>)
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	f7f0 fb73 	bl	800023c <__adddf3>
 800fb56:	4604      	mov	r4, r0
 800fb58:	4630      	mov	r0, r6
 800fb5a:	460d      	mov	r5, r1
 800fb5c:	f7f0 fcba 	bl	80004d4 <__aeabi_i2d>
 800fb60:	a365      	add	r3, pc, #404	@ (adr r3, 800fcf8 <_dtoa_r+0x2c0>)
 800fb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb66:	f7f0 fd1f 	bl	80005a8 <__aeabi_dmul>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	4620      	mov	r0, r4
 800fb70:	4629      	mov	r1, r5
 800fb72:	f7f0 fb63 	bl	800023c <__adddf3>
 800fb76:	4604      	mov	r4, r0
 800fb78:	460d      	mov	r5, r1
 800fb7a:	f7f0 ffc5 	bl	8000b08 <__aeabi_d2iz>
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4607      	mov	r7, r0
 800fb82:	2300      	movs	r3, #0
 800fb84:	4620      	mov	r0, r4
 800fb86:	4629      	mov	r1, r5
 800fb88:	f7f0 ff80 	bl	8000a8c <__aeabi_dcmplt>
 800fb8c:	b140      	cbz	r0, 800fba0 <_dtoa_r+0x168>
 800fb8e:	4638      	mov	r0, r7
 800fb90:	f7f0 fca0 	bl	80004d4 <__aeabi_i2d>
 800fb94:	4622      	mov	r2, r4
 800fb96:	462b      	mov	r3, r5
 800fb98:	f7f0 ff6e 	bl	8000a78 <__aeabi_dcmpeq>
 800fb9c:	b900      	cbnz	r0, 800fba0 <_dtoa_r+0x168>
 800fb9e:	3f01      	subs	r7, #1
 800fba0:	2f16      	cmp	r7, #22
 800fba2:	d851      	bhi.n	800fc48 <_dtoa_r+0x210>
 800fba4:	4b5b      	ldr	r3, [pc, #364]	@ (800fd14 <_dtoa_r+0x2dc>)
 800fba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fbb2:	f7f0 ff6b 	bl	8000a8c <__aeabi_dcmplt>
 800fbb6:	2800      	cmp	r0, #0
 800fbb8:	d048      	beq.n	800fc4c <_dtoa_r+0x214>
 800fbba:	3f01      	subs	r7, #1
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800fbc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fbc2:	1b9b      	subs	r3, r3, r6
 800fbc4:	1e5a      	subs	r2, r3, #1
 800fbc6:	bf44      	itt	mi
 800fbc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800fbcc:	2300      	movmi	r3, #0
 800fbce:	9208      	str	r2, [sp, #32]
 800fbd0:	bf54      	ite	pl
 800fbd2:	f04f 0800 	movpl.w	r8, #0
 800fbd6:	9308      	strmi	r3, [sp, #32]
 800fbd8:	2f00      	cmp	r7, #0
 800fbda:	db39      	blt.n	800fc50 <_dtoa_r+0x218>
 800fbdc:	9b08      	ldr	r3, [sp, #32]
 800fbde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fbe0:	443b      	add	r3, r7
 800fbe2:	9308      	str	r3, [sp, #32]
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbea:	2b09      	cmp	r3, #9
 800fbec:	d864      	bhi.n	800fcb8 <_dtoa_r+0x280>
 800fbee:	2b05      	cmp	r3, #5
 800fbf0:	bfc4      	itt	gt
 800fbf2:	3b04      	subgt	r3, #4
 800fbf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf8:	f1a3 0302 	sub.w	r3, r3, #2
 800fbfc:	bfcc      	ite	gt
 800fbfe:	2400      	movgt	r4, #0
 800fc00:	2401      	movle	r4, #1
 800fc02:	2b03      	cmp	r3, #3
 800fc04:	d863      	bhi.n	800fcce <_dtoa_r+0x296>
 800fc06:	e8df f003 	tbb	[pc, r3]
 800fc0a:	372a      	.short	0x372a
 800fc0c:	5535      	.short	0x5535
 800fc0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fc12:	441e      	add	r6, r3
 800fc14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fc18:	2b20      	cmp	r3, #32
 800fc1a:	bfc1      	itttt	gt
 800fc1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fc20:	409f      	lslgt	r7, r3
 800fc22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fc26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fc2a:	bfd6      	itet	le
 800fc2c:	f1c3 0320 	rsble	r3, r3, #32
 800fc30:	ea47 0003 	orrgt.w	r0, r7, r3
 800fc34:	fa04 f003 	lslle.w	r0, r4, r3
 800fc38:	f7f0 fc3c 	bl	80004b4 <__aeabi_ui2d>
 800fc3c:	2201      	movs	r2, #1
 800fc3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fc42:	3e01      	subs	r6, #1
 800fc44:	9214      	str	r2, [sp, #80]	@ 0x50
 800fc46:	e777      	b.n	800fb38 <_dtoa_r+0x100>
 800fc48:	2301      	movs	r3, #1
 800fc4a:	e7b8      	b.n	800fbbe <_dtoa_r+0x186>
 800fc4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800fc4e:	e7b7      	b.n	800fbc0 <_dtoa_r+0x188>
 800fc50:	427b      	negs	r3, r7
 800fc52:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc54:	2300      	movs	r3, #0
 800fc56:	eba8 0807 	sub.w	r8, r8, r7
 800fc5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc5c:	e7c4      	b.n	800fbe8 <_dtoa_r+0x1b0>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dc35      	bgt.n	800fcd4 <_dtoa_r+0x29c>
 800fc68:	2301      	movs	r3, #1
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	9307      	str	r3, [sp, #28]
 800fc6e:	461a      	mov	r2, r3
 800fc70:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc72:	e00b      	b.n	800fc8c <_dtoa_r+0x254>
 800fc74:	2301      	movs	r3, #1
 800fc76:	e7f3      	b.n	800fc60 <_dtoa_r+0x228>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc7e:	18fb      	adds	r3, r7, r3
 800fc80:	9300      	str	r3, [sp, #0]
 800fc82:	3301      	adds	r3, #1
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	9307      	str	r3, [sp, #28]
 800fc88:	bfb8      	it	lt
 800fc8a:	2301      	movlt	r3, #1
 800fc8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fc90:	2100      	movs	r1, #0
 800fc92:	2204      	movs	r2, #4
 800fc94:	f102 0514 	add.w	r5, r2, #20
 800fc98:	429d      	cmp	r5, r3
 800fc9a:	d91f      	bls.n	800fcdc <_dtoa_r+0x2a4>
 800fc9c:	6041      	str	r1, [r0, #4]
 800fc9e:	4658      	mov	r0, fp
 800fca0:	f000 fd8e 	bl	80107c0 <_Balloc>
 800fca4:	4682      	mov	sl, r0
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d13c      	bne.n	800fd24 <_dtoa_r+0x2ec>
 800fcaa:	4b1b      	ldr	r3, [pc, #108]	@ (800fd18 <_dtoa_r+0x2e0>)
 800fcac:	4602      	mov	r2, r0
 800fcae:	f240 11af 	movw	r1, #431	@ 0x1af
 800fcb2:	e6d8      	b.n	800fa66 <_dtoa_r+0x2e>
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	e7e0      	b.n	800fc7a <_dtoa_r+0x242>
 800fcb8:	2401      	movs	r4, #1
 800fcba:	2300      	movs	r3, #0
 800fcbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fcc0:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	2312      	movs	r3, #18
 800fccc:	e7d0      	b.n	800fc70 <_dtoa_r+0x238>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcd2:	e7f5      	b.n	800fcc0 <_dtoa_r+0x288>
 800fcd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcd6:	9300      	str	r3, [sp, #0]
 800fcd8:	9307      	str	r3, [sp, #28]
 800fcda:	e7d7      	b.n	800fc8c <_dtoa_r+0x254>
 800fcdc:	3101      	adds	r1, #1
 800fcde:	0052      	lsls	r2, r2, #1
 800fce0:	e7d8      	b.n	800fc94 <_dtoa_r+0x25c>
 800fce2:	bf00      	nop
 800fce4:	f3af 8000 	nop.w
 800fce8:	636f4361 	.word	0x636f4361
 800fcec:	3fd287a7 	.word	0x3fd287a7
 800fcf0:	8b60c8b3 	.word	0x8b60c8b3
 800fcf4:	3fc68a28 	.word	0x3fc68a28
 800fcf8:	509f79fb 	.word	0x509f79fb
 800fcfc:	3fd34413 	.word	0x3fd34413
 800fd00:	080130fa 	.word	0x080130fa
 800fd04:	08013111 	.word	0x08013111
 800fd08:	7ff00000 	.word	0x7ff00000
 800fd0c:	080130ca 	.word	0x080130ca
 800fd10:	3ff80000 	.word	0x3ff80000
 800fd14:	08013208 	.word	0x08013208
 800fd18:	08013169 	.word	0x08013169
 800fd1c:	080130f6 	.word	0x080130f6
 800fd20:	080130c9 	.word	0x080130c9
 800fd24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd28:	6018      	str	r0, [r3, #0]
 800fd2a:	9b07      	ldr	r3, [sp, #28]
 800fd2c:	2b0e      	cmp	r3, #14
 800fd2e:	f200 80a4 	bhi.w	800fe7a <_dtoa_r+0x442>
 800fd32:	2c00      	cmp	r4, #0
 800fd34:	f000 80a1 	beq.w	800fe7a <_dtoa_r+0x442>
 800fd38:	2f00      	cmp	r7, #0
 800fd3a:	dd33      	ble.n	800fda4 <_dtoa_r+0x36c>
 800fd3c:	4bad      	ldr	r3, [pc, #692]	@ (800fff4 <_dtoa_r+0x5bc>)
 800fd3e:	f007 020f 	and.w	r2, r7, #15
 800fd42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd46:	ed93 7b00 	vldr	d7, [r3]
 800fd4a:	05f8      	lsls	r0, r7, #23
 800fd4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd54:	d516      	bpl.n	800fd84 <_dtoa_r+0x34c>
 800fd56:	4ba8      	ldr	r3, [pc, #672]	@ (800fff8 <_dtoa_r+0x5c0>)
 800fd58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd60:	f7f0 fd4c 	bl	80007fc <__aeabi_ddiv>
 800fd64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd68:	f004 040f 	and.w	r4, r4, #15
 800fd6c:	2603      	movs	r6, #3
 800fd6e:	4da2      	ldr	r5, [pc, #648]	@ (800fff8 <_dtoa_r+0x5c0>)
 800fd70:	b954      	cbnz	r4, 800fd88 <_dtoa_r+0x350>
 800fd72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd7a:	f7f0 fd3f 	bl	80007fc <__aeabi_ddiv>
 800fd7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd82:	e028      	b.n	800fdd6 <_dtoa_r+0x39e>
 800fd84:	2602      	movs	r6, #2
 800fd86:	e7f2      	b.n	800fd6e <_dtoa_r+0x336>
 800fd88:	07e1      	lsls	r1, r4, #31
 800fd8a:	d508      	bpl.n	800fd9e <_dtoa_r+0x366>
 800fd8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd94:	f7f0 fc08 	bl	80005a8 <__aeabi_dmul>
 800fd98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd9c:	3601      	adds	r6, #1
 800fd9e:	1064      	asrs	r4, r4, #1
 800fda0:	3508      	adds	r5, #8
 800fda2:	e7e5      	b.n	800fd70 <_dtoa_r+0x338>
 800fda4:	f000 80d2 	beq.w	800ff4c <_dtoa_r+0x514>
 800fda8:	427c      	negs	r4, r7
 800fdaa:	4b92      	ldr	r3, [pc, #584]	@ (800fff4 <_dtoa_r+0x5bc>)
 800fdac:	4d92      	ldr	r5, [pc, #584]	@ (800fff8 <_dtoa_r+0x5c0>)
 800fdae:	f004 020f 	and.w	r2, r4, #15
 800fdb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fdbe:	f7f0 fbf3 	bl	80005a8 <__aeabi_dmul>
 800fdc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdc6:	1124      	asrs	r4, r4, #4
 800fdc8:	2300      	movs	r3, #0
 800fdca:	2602      	movs	r6, #2
 800fdcc:	2c00      	cmp	r4, #0
 800fdce:	f040 80b2 	bne.w	800ff36 <_dtoa_r+0x4fe>
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1d3      	bne.n	800fd7e <_dtoa_r+0x346>
 800fdd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fdd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 80b7 	beq.w	800ff50 <_dtoa_r+0x518>
 800fde2:	4b86      	ldr	r3, [pc, #536]	@ (800fffc <_dtoa_r+0x5c4>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	4620      	mov	r0, r4
 800fde8:	4629      	mov	r1, r5
 800fdea:	f7f0 fe4f 	bl	8000a8c <__aeabi_dcmplt>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	f000 80ae 	beq.w	800ff50 <_dtoa_r+0x518>
 800fdf4:	9b07      	ldr	r3, [sp, #28]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 80aa 	beq.w	800ff50 <_dtoa_r+0x518>
 800fdfc:	9b00      	ldr	r3, [sp, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	dd37      	ble.n	800fe72 <_dtoa_r+0x43a>
 800fe02:	1e7b      	subs	r3, r7, #1
 800fe04:	9304      	str	r3, [sp, #16]
 800fe06:	4620      	mov	r0, r4
 800fe08:	4b7d      	ldr	r3, [pc, #500]	@ (8010000 <_dtoa_r+0x5c8>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	f7f0 fbcb 	bl	80005a8 <__aeabi_dmul>
 800fe12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe16:	9c00      	ldr	r4, [sp, #0]
 800fe18:	3601      	adds	r6, #1
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f7f0 fb5a 	bl	80004d4 <__aeabi_i2d>
 800fe20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe24:	f7f0 fbc0 	bl	80005a8 <__aeabi_dmul>
 800fe28:	4b76      	ldr	r3, [pc, #472]	@ (8010004 <_dtoa_r+0x5cc>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f7f0 fa06 	bl	800023c <__adddf3>
 800fe30:	4605      	mov	r5, r0
 800fe32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fe36:	2c00      	cmp	r4, #0
 800fe38:	f040 808d 	bne.w	800ff56 <_dtoa_r+0x51e>
 800fe3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe40:	4b71      	ldr	r3, [pc, #452]	@ (8010008 <_dtoa_r+0x5d0>)
 800fe42:	2200      	movs	r2, #0
 800fe44:	f7f0 f9f8 	bl	8000238 <__aeabi_dsub>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe50:	462a      	mov	r2, r5
 800fe52:	4633      	mov	r3, r6
 800fe54:	f7f0 fe38 	bl	8000ac8 <__aeabi_dcmpgt>
 800fe58:	2800      	cmp	r0, #0
 800fe5a:	f040 828b 	bne.w	8010374 <_dtoa_r+0x93c>
 800fe5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe62:	462a      	mov	r2, r5
 800fe64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe68:	f7f0 fe10 	bl	8000a8c <__aeabi_dcmplt>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	f040 8128 	bne.w	80100c2 <_dtoa_r+0x68a>
 800fe72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fe76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fe7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f2c0 815a 	blt.w	8010136 <_dtoa_r+0x6fe>
 800fe82:	2f0e      	cmp	r7, #14
 800fe84:	f300 8157 	bgt.w	8010136 <_dtoa_r+0x6fe>
 800fe88:	4b5a      	ldr	r3, [pc, #360]	@ (800fff4 <_dtoa_r+0x5bc>)
 800fe8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe8e:	ed93 7b00 	vldr	d7, [r3]
 800fe92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	ed8d 7b00 	vstr	d7, [sp]
 800fe9a:	da03      	bge.n	800fea4 <_dtoa_r+0x46c>
 800fe9c:	9b07      	ldr	r3, [sp, #28]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	f340 8101 	ble.w	80100a6 <_dtoa_r+0x66e>
 800fea4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fea8:	4656      	mov	r6, sl
 800feaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feae:	4620      	mov	r0, r4
 800feb0:	4629      	mov	r1, r5
 800feb2:	f7f0 fca3 	bl	80007fc <__aeabi_ddiv>
 800feb6:	f7f0 fe27 	bl	8000b08 <__aeabi_d2iz>
 800feba:	4680      	mov	r8, r0
 800febc:	f7f0 fb0a 	bl	80004d4 <__aeabi_i2d>
 800fec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fec4:	f7f0 fb70 	bl	80005a8 <__aeabi_dmul>
 800fec8:	4602      	mov	r2, r0
 800feca:	460b      	mov	r3, r1
 800fecc:	4620      	mov	r0, r4
 800fece:	4629      	mov	r1, r5
 800fed0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fed4:	f7f0 f9b0 	bl	8000238 <__aeabi_dsub>
 800fed8:	f806 4b01 	strb.w	r4, [r6], #1
 800fedc:	9d07      	ldr	r5, [sp, #28]
 800fede:	eba6 040a 	sub.w	r4, r6, sl
 800fee2:	42a5      	cmp	r5, r4
 800fee4:	4602      	mov	r2, r0
 800fee6:	460b      	mov	r3, r1
 800fee8:	f040 8117 	bne.w	801011a <_dtoa_r+0x6e2>
 800feec:	f7f0 f9a6 	bl	800023c <__adddf3>
 800fef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fef4:	4604      	mov	r4, r0
 800fef6:	460d      	mov	r5, r1
 800fef8:	f7f0 fde6 	bl	8000ac8 <__aeabi_dcmpgt>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	f040 80f9 	bne.w	80100f4 <_dtoa_r+0x6bc>
 800ff02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff06:	4620      	mov	r0, r4
 800ff08:	4629      	mov	r1, r5
 800ff0a:	f7f0 fdb5 	bl	8000a78 <__aeabi_dcmpeq>
 800ff0e:	b118      	cbz	r0, 800ff18 <_dtoa_r+0x4e0>
 800ff10:	f018 0f01 	tst.w	r8, #1
 800ff14:	f040 80ee 	bne.w	80100f4 <_dtoa_r+0x6bc>
 800ff18:	4649      	mov	r1, r9
 800ff1a:	4658      	mov	r0, fp
 800ff1c:	f000 fc90 	bl	8010840 <_Bfree>
 800ff20:	2300      	movs	r3, #0
 800ff22:	7033      	strb	r3, [r6, #0]
 800ff24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff26:	3701      	adds	r7, #1
 800ff28:	601f      	str	r7, [r3, #0]
 800ff2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 831d 	beq.w	801056c <_dtoa_r+0xb34>
 800ff32:	601e      	str	r6, [r3, #0]
 800ff34:	e31a      	b.n	801056c <_dtoa_r+0xb34>
 800ff36:	07e2      	lsls	r2, r4, #31
 800ff38:	d505      	bpl.n	800ff46 <_dtoa_r+0x50e>
 800ff3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff3e:	f7f0 fb33 	bl	80005a8 <__aeabi_dmul>
 800ff42:	3601      	adds	r6, #1
 800ff44:	2301      	movs	r3, #1
 800ff46:	1064      	asrs	r4, r4, #1
 800ff48:	3508      	adds	r5, #8
 800ff4a:	e73f      	b.n	800fdcc <_dtoa_r+0x394>
 800ff4c:	2602      	movs	r6, #2
 800ff4e:	e742      	b.n	800fdd6 <_dtoa_r+0x39e>
 800ff50:	9c07      	ldr	r4, [sp, #28]
 800ff52:	9704      	str	r7, [sp, #16]
 800ff54:	e761      	b.n	800fe1a <_dtoa_r+0x3e2>
 800ff56:	4b27      	ldr	r3, [pc, #156]	@ (800fff4 <_dtoa_r+0x5bc>)
 800ff58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff62:	4454      	add	r4, sl
 800ff64:	2900      	cmp	r1, #0
 800ff66:	d053      	beq.n	8010010 <_dtoa_r+0x5d8>
 800ff68:	4928      	ldr	r1, [pc, #160]	@ (801000c <_dtoa_r+0x5d4>)
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	f7f0 fc46 	bl	80007fc <__aeabi_ddiv>
 800ff70:	4633      	mov	r3, r6
 800ff72:	462a      	mov	r2, r5
 800ff74:	f7f0 f960 	bl	8000238 <__aeabi_dsub>
 800ff78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff7c:	4656      	mov	r6, sl
 800ff7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff82:	f7f0 fdc1 	bl	8000b08 <__aeabi_d2iz>
 800ff86:	4605      	mov	r5, r0
 800ff88:	f7f0 faa4 	bl	80004d4 <__aeabi_i2d>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	460b      	mov	r3, r1
 800ff90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff94:	f7f0 f950 	bl	8000238 <__aeabi_dsub>
 800ff98:	3530      	adds	r5, #48	@ 0x30
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ffa2:	f806 5b01 	strb.w	r5, [r6], #1
 800ffa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffaa:	f7f0 fd6f 	bl	8000a8c <__aeabi_dcmplt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d171      	bne.n	8010096 <_dtoa_r+0x65e>
 800ffb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffb6:	4911      	ldr	r1, [pc, #68]	@ (800fffc <_dtoa_r+0x5c4>)
 800ffb8:	2000      	movs	r0, #0
 800ffba:	f7f0 f93d 	bl	8000238 <__aeabi_dsub>
 800ffbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffc2:	f7f0 fd63 	bl	8000a8c <__aeabi_dcmplt>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	f040 8095 	bne.w	80100f6 <_dtoa_r+0x6be>
 800ffcc:	42a6      	cmp	r6, r4
 800ffce:	f43f af50 	beq.w	800fe72 <_dtoa_r+0x43a>
 800ffd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ffd6:	4b0a      	ldr	r3, [pc, #40]	@ (8010000 <_dtoa_r+0x5c8>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f7f0 fae5 	bl	80005a8 <__aeabi_dmul>
 800ffde:	4b08      	ldr	r3, [pc, #32]	@ (8010000 <_dtoa_r+0x5c8>)
 800ffe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffea:	f7f0 fadd 	bl	80005a8 <__aeabi_dmul>
 800ffee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fff2:	e7c4      	b.n	800ff7e <_dtoa_r+0x546>
 800fff4:	08013208 	.word	0x08013208
 800fff8:	080131e0 	.word	0x080131e0
 800fffc:	3ff00000 	.word	0x3ff00000
 8010000:	40240000 	.word	0x40240000
 8010004:	401c0000 	.word	0x401c0000
 8010008:	40140000 	.word	0x40140000
 801000c:	3fe00000 	.word	0x3fe00000
 8010010:	4631      	mov	r1, r6
 8010012:	4628      	mov	r0, r5
 8010014:	f7f0 fac8 	bl	80005a8 <__aeabi_dmul>
 8010018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801001c:	9415      	str	r4, [sp, #84]	@ 0x54
 801001e:	4656      	mov	r6, sl
 8010020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010024:	f7f0 fd70 	bl	8000b08 <__aeabi_d2iz>
 8010028:	4605      	mov	r5, r0
 801002a:	f7f0 fa53 	bl	80004d4 <__aeabi_i2d>
 801002e:	4602      	mov	r2, r0
 8010030:	460b      	mov	r3, r1
 8010032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010036:	f7f0 f8ff 	bl	8000238 <__aeabi_dsub>
 801003a:	3530      	adds	r5, #48	@ 0x30
 801003c:	f806 5b01 	strb.w	r5, [r6], #1
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	42a6      	cmp	r6, r4
 8010046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801004a:	f04f 0200 	mov.w	r2, #0
 801004e:	d124      	bne.n	801009a <_dtoa_r+0x662>
 8010050:	4bac      	ldr	r3, [pc, #688]	@ (8010304 <_dtoa_r+0x8cc>)
 8010052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010056:	f7f0 f8f1 	bl	800023c <__adddf3>
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010062:	f7f0 fd31 	bl	8000ac8 <__aeabi_dcmpgt>
 8010066:	2800      	cmp	r0, #0
 8010068:	d145      	bne.n	80100f6 <_dtoa_r+0x6be>
 801006a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801006e:	49a5      	ldr	r1, [pc, #660]	@ (8010304 <_dtoa_r+0x8cc>)
 8010070:	2000      	movs	r0, #0
 8010072:	f7f0 f8e1 	bl	8000238 <__aeabi_dsub>
 8010076:	4602      	mov	r2, r0
 8010078:	460b      	mov	r3, r1
 801007a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801007e:	f7f0 fd05 	bl	8000a8c <__aeabi_dcmplt>
 8010082:	2800      	cmp	r0, #0
 8010084:	f43f aef5 	beq.w	800fe72 <_dtoa_r+0x43a>
 8010088:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801008a:	1e73      	subs	r3, r6, #1
 801008c:	9315      	str	r3, [sp, #84]	@ 0x54
 801008e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010092:	2b30      	cmp	r3, #48	@ 0x30
 8010094:	d0f8      	beq.n	8010088 <_dtoa_r+0x650>
 8010096:	9f04      	ldr	r7, [sp, #16]
 8010098:	e73e      	b.n	800ff18 <_dtoa_r+0x4e0>
 801009a:	4b9b      	ldr	r3, [pc, #620]	@ (8010308 <_dtoa_r+0x8d0>)
 801009c:	f7f0 fa84 	bl	80005a8 <__aeabi_dmul>
 80100a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100a4:	e7bc      	b.n	8010020 <_dtoa_r+0x5e8>
 80100a6:	d10c      	bne.n	80100c2 <_dtoa_r+0x68a>
 80100a8:	4b98      	ldr	r3, [pc, #608]	@ (801030c <_dtoa_r+0x8d4>)
 80100aa:	2200      	movs	r2, #0
 80100ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100b0:	f7f0 fa7a 	bl	80005a8 <__aeabi_dmul>
 80100b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100b8:	f7f0 fcfc 	bl	8000ab4 <__aeabi_dcmpge>
 80100bc:	2800      	cmp	r0, #0
 80100be:	f000 8157 	beq.w	8010370 <_dtoa_r+0x938>
 80100c2:	2400      	movs	r4, #0
 80100c4:	4625      	mov	r5, r4
 80100c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100c8:	43db      	mvns	r3, r3
 80100ca:	9304      	str	r3, [sp, #16]
 80100cc:	4656      	mov	r6, sl
 80100ce:	2700      	movs	r7, #0
 80100d0:	4621      	mov	r1, r4
 80100d2:	4658      	mov	r0, fp
 80100d4:	f000 fbb4 	bl	8010840 <_Bfree>
 80100d8:	2d00      	cmp	r5, #0
 80100da:	d0dc      	beq.n	8010096 <_dtoa_r+0x65e>
 80100dc:	b12f      	cbz	r7, 80100ea <_dtoa_r+0x6b2>
 80100de:	42af      	cmp	r7, r5
 80100e0:	d003      	beq.n	80100ea <_dtoa_r+0x6b2>
 80100e2:	4639      	mov	r1, r7
 80100e4:	4658      	mov	r0, fp
 80100e6:	f000 fbab 	bl	8010840 <_Bfree>
 80100ea:	4629      	mov	r1, r5
 80100ec:	4658      	mov	r0, fp
 80100ee:	f000 fba7 	bl	8010840 <_Bfree>
 80100f2:	e7d0      	b.n	8010096 <_dtoa_r+0x65e>
 80100f4:	9704      	str	r7, [sp, #16]
 80100f6:	4633      	mov	r3, r6
 80100f8:	461e      	mov	r6, r3
 80100fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100fe:	2a39      	cmp	r2, #57	@ 0x39
 8010100:	d107      	bne.n	8010112 <_dtoa_r+0x6da>
 8010102:	459a      	cmp	sl, r3
 8010104:	d1f8      	bne.n	80100f8 <_dtoa_r+0x6c0>
 8010106:	9a04      	ldr	r2, [sp, #16]
 8010108:	3201      	adds	r2, #1
 801010a:	9204      	str	r2, [sp, #16]
 801010c:	2230      	movs	r2, #48	@ 0x30
 801010e:	f88a 2000 	strb.w	r2, [sl]
 8010112:	781a      	ldrb	r2, [r3, #0]
 8010114:	3201      	adds	r2, #1
 8010116:	701a      	strb	r2, [r3, #0]
 8010118:	e7bd      	b.n	8010096 <_dtoa_r+0x65e>
 801011a:	4b7b      	ldr	r3, [pc, #492]	@ (8010308 <_dtoa_r+0x8d0>)
 801011c:	2200      	movs	r2, #0
 801011e:	f7f0 fa43 	bl	80005a8 <__aeabi_dmul>
 8010122:	2200      	movs	r2, #0
 8010124:	2300      	movs	r3, #0
 8010126:	4604      	mov	r4, r0
 8010128:	460d      	mov	r5, r1
 801012a:	f7f0 fca5 	bl	8000a78 <__aeabi_dcmpeq>
 801012e:	2800      	cmp	r0, #0
 8010130:	f43f aebb 	beq.w	800feaa <_dtoa_r+0x472>
 8010134:	e6f0      	b.n	800ff18 <_dtoa_r+0x4e0>
 8010136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010138:	2a00      	cmp	r2, #0
 801013a:	f000 80db 	beq.w	80102f4 <_dtoa_r+0x8bc>
 801013e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010140:	2a01      	cmp	r2, #1
 8010142:	f300 80bf 	bgt.w	80102c4 <_dtoa_r+0x88c>
 8010146:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010148:	2a00      	cmp	r2, #0
 801014a:	f000 80b7 	beq.w	80102bc <_dtoa_r+0x884>
 801014e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010152:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010154:	4646      	mov	r6, r8
 8010156:	9a08      	ldr	r2, [sp, #32]
 8010158:	2101      	movs	r1, #1
 801015a:	441a      	add	r2, r3
 801015c:	4658      	mov	r0, fp
 801015e:	4498      	add	r8, r3
 8010160:	9208      	str	r2, [sp, #32]
 8010162:	f000 fc21 	bl	80109a8 <__i2b>
 8010166:	4605      	mov	r5, r0
 8010168:	b15e      	cbz	r6, 8010182 <_dtoa_r+0x74a>
 801016a:	9b08      	ldr	r3, [sp, #32]
 801016c:	2b00      	cmp	r3, #0
 801016e:	dd08      	ble.n	8010182 <_dtoa_r+0x74a>
 8010170:	42b3      	cmp	r3, r6
 8010172:	9a08      	ldr	r2, [sp, #32]
 8010174:	bfa8      	it	ge
 8010176:	4633      	movge	r3, r6
 8010178:	eba8 0803 	sub.w	r8, r8, r3
 801017c:	1af6      	subs	r6, r6, r3
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	9308      	str	r3, [sp, #32]
 8010182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010184:	b1f3      	cbz	r3, 80101c4 <_dtoa_r+0x78c>
 8010186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 80b7 	beq.w	80102fc <_dtoa_r+0x8c4>
 801018e:	b18c      	cbz	r4, 80101b4 <_dtoa_r+0x77c>
 8010190:	4629      	mov	r1, r5
 8010192:	4622      	mov	r2, r4
 8010194:	4658      	mov	r0, fp
 8010196:	f000 fcc7 	bl	8010b28 <__pow5mult>
 801019a:	464a      	mov	r2, r9
 801019c:	4601      	mov	r1, r0
 801019e:	4605      	mov	r5, r0
 80101a0:	4658      	mov	r0, fp
 80101a2:	f000 fc17 	bl	80109d4 <__multiply>
 80101a6:	4649      	mov	r1, r9
 80101a8:	9004      	str	r0, [sp, #16]
 80101aa:	4658      	mov	r0, fp
 80101ac:	f000 fb48 	bl	8010840 <_Bfree>
 80101b0:	9b04      	ldr	r3, [sp, #16]
 80101b2:	4699      	mov	r9, r3
 80101b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101b6:	1b1a      	subs	r2, r3, r4
 80101b8:	d004      	beq.n	80101c4 <_dtoa_r+0x78c>
 80101ba:	4649      	mov	r1, r9
 80101bc:	4658      	mov	r0, fp
 80101be:	f000 fcb3 	bl	8010b28 <__pow5mult>
 80101c2:	4681      	mov	r9, r0
 80101c4:	2101      	movs	r1, #1
 80101c6:	4658      	mov	r0, fp
 80101c8:	f000 fbee 	bl	80109a8 <__i2b>
 80101cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101ce:	4604      	mov	r4, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 81cf 	beq.w	8010574 <_dtoa_r+0xb3c>
 80101d6:	461a      	mov	r2, r3
 80101d8:	4601      	mov	r1, r0
 80101da:	4658      	mov	r0, fp
 80101dc:	f000 fca4 	bl	8010b28 <__pow5mult>
 80101e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	4604      	mov	r4, r0
 80101e6:	f300 8095 	bgt.w	8010314 <_dtoa_r+0x8dc>
 80101ea:	9b02      	ldr	r3, [sp, #8]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f040 8087 	bne.w	8010300 <_dtoa_r+0x8c8>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f040 8089 	bne.w	8010310 <_dtoa_r+0x8d8>
 80101fe:	9b03      	ldr	r3, [sp, #12]
 8010200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010204:	0d1b      	lsrs	r3, r3, #20
 8010206:	051b      	lsls	r3, r3, #20
 8010208:	b12b      	cbz	r3, 8010216 <_dtoa_r+0x7de>
 801020a:	9b08      	ldr	r3, [sp, #32]
 801020c:	3301      	adds	r3, #1
 801020e:	9308      	str	r3, [sp, #32]
 8010210:	f108 0801 	add.w	r8, r8, #1
 8010214:	2301      	movs	r3, #1
 8010216:	930a      	str	r3, [sp, #40]	@ 0x28
 8010218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 81b0 	beq.w	8010580 <_dtoa_r+0xb48>
 8010220:	6923      	ldr	r3, [r4, #16]
 8010222:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010226:	6918      	ldr	r0, [r3, #16]
 8010228:	f000 fb72 	bl	8010910 <__hi0bits>
 801022c:	f1c0 0020 	rsb	r0, r0, #32
 8010230:	9b08      	ldr	r3, [sp, #32]
 8010232:	4418      	add	r0, r3
 8010234:	f010 001f 	ands.w	r0, r0, #31
 8010238:	d077      	beq.n	801032a <_dtoa_r+0x8f2>
 801023a:	f1c0 0320 	rsb	r3, r0, #32
 801023e:	2b04      	cmp	r3, #4
 8010240:	dd6b      	ble.n	801031a <_dtoa_r+0x8e2>
 8010242:	9b08      	ldr	r3, [sp, #32]
 8010244:	f1c0 001c 	rsb	r0, r0, #28
 8010248:	4403      	add	r3, r0
 801024a:	4480      	add	r8, r0
 801024c:	4406      	add	r6, r0
 801024e:	9308      	str	r3, [sp, #32]
 8010250:	f1b8 0f00 	cmp.w	r8, #0
 8010254:	dd05      	ble.n	8010262 <_dtoa_r+0x82a>
 8010256:	4649      	mov	r1, r9
 8010258:	4642      	mov	r2, r8
 801025a:	4658      	mov	r0, fp
 801025c:	f000 fcbe 	bl	8010bdc <__lshift>
 8010260:	4681      	mov	r9, r0
 8010262:	9b08      	ldr	r3, [sp, #32]
 8010264:	2b00      	cmp	r3, #0
 8010266:	dd05      	ble.n	8010274 <_dtoa_r+0x83c>
 8010268:	4621      	mov	r1, r4
 801026a:	461a      	mov	r2, r3
 801026c:	4658      	mov	r0, fp
 801026e:	f000 fcb5 	bl	8010bdc <__lshift>
 8010272:	4604      	mov	r4, r0
 8010274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010276:	2b00      	cmp	r3, #0
 8010278:	d059      	beq.n	801032e <_dtoa_r+0x8f6>
 801027a:	4621      	mov	r1, r4
 801027c:	4648      	mov	r0, r9
 801027e:	f000 fd19 	bl	8010cb4 <__mcmp>
 8010282:	2800      	cmp	r0, #0
 8010284:	da53      	bge.n	801032e <_dtoa_r+0x8f6>
 8010286:	1e7b      	subs	r3, r7, #1
 8010288:	9304      	str	r3, [sp, #16]
 801028a:	4649      	mov	r1, r9
 801028c:	2300      	movs	r3, #0
 801028e:	220a      	movs	r2, #10
 8010290:	4658      	mov	r0, fp
 8010292:	f000 faf7 	bl	8010884 <__multadd>
 8010296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010298:	4681      	mov	r9, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	f000 8172 	beq.w	8010584 <_dtoa_r+0xb4c>
 80102a0:	2300      	movs	r3, #0
 80102a2:	4629      	mov	r1, r5
 80102a4:	220a      	movs	r2, #10
 80102a6:	4658      	mov	r0, fp
 80102a8:	f000 faec 	bl	8010884 <__multadd>
 80102ac:	9b00      	ldr	r3, [sp, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	4605      	mov	r5, r0
 80102b2:	dc67      	bgt.n	8010384 <_dtoa_r+0x94c>
 80102b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102b6:	2b02      	cmp	r3, #2
 80102b8:	dc41      	bgt.n	801033e <_dtoa_r+0x906>
 80102ba:	e063      	b.n	8010384 <_dtoa_r+0x94c>
 80102bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80102be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80102c2:	e746      	b.n	8010152 <_dtoa_r+0x71a>
 80102c4:	9b07      	ldr	r3, [sp, #28]
 80102c6:	1e5c      	subs	r4, r3, #1
 80102c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102ca:	42a3      	cmp	r3, r4
 80102cc:	bfbf      	itttt	lt
 80102ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80102d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80102d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80102d4:	1ae3      	sublt	r3, r4, r3
 80102d6:	bfb4      	ite	lt
 80102d8:	18d2      	addlt	r2, r2, r3
 80102da:	1b1c      	subge	r4, r3, r4
 80102dc:	9b07      	ldr	r3, [sp, #28]
 80102de:	bfbc      	itt	lt
 80102e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80102e2:	2400      	movlt	r4, #0
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	bfb5      	itete	lt
 80102e8:	eba8 0603 	sublt.w	r6, r8, r3
 80102ec:	9b07      	ldrge	r3, [sp, #28]
 80102ee:	2300      	movlt	r3, #0
 80102f0:	4646      	movge	r6, r8
 80102f2:	e730      	b.n	8010156 <_dtoa_r+0x71e>
 80102f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80102f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80102f8:	4646      	mov	r6, r8
 80102fa:	e735      	b.n	8010168 <_dtoa_r+0x730>
 80102fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102fe:	e75c      	b.n	80101ba <_dtoa_r+0x782>
 8010300:	2300      	movs	r3, #0
 8010302:	e788      	b.n	8010216 <_dtoa_r+0x7de>
 8010304:	3fe00000 	.word	0x3fe00000
 8010308:	40240000 	.word	0x40240000
 801030c:	40140000 	.word	0x40140000
 8010310:	9b02      	ldr	r3, [sp, #8]
 8010312:	e780      	b.n	8010216 <_dtoa_r+0x7de>
 8010314:	2300      	movs	r3, #0
 8010316:	930a      	str	r3, [sp, #40]	@ 0x28
 8010318:	e782      	b.n	8010220 <_dtoa_r+0x7e8>
 801031a:	d099      	beq.n	8010250 <_dtoa_r+0x818>
 801031c:	9a08      	ldr	r2, [sp, #32]
 801031e:	331c      	adds	r3, #28
 8010320:	441a      	add	r2, r3
 8010322:	4498      	add	r8, r3
 8010324:	441e      	add	r6, r3
 8010326:	9208      	str	r2, [sp, #32]
 8010328:	e792      	b.n	8010250 <_dtoa_r+0x818>
 801032a:	4603      	mov	r3, r0
 801032c:	e7f6      	b.n	801031c <_dtoa_r+0x8e4>
 801032e:	9b07      	ldr	r3, [sp, #28]
 8010330:	9704      	str	r7, [sp, #16]
 8010332:	2b00      	cmp	r3, #0
 8010334:	dc20      	bgt.n	8010378 <_dtoa_r+0x940>
 8010336:	9300      	str	r3, [sp, #0]
 8010338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801033a:	2b02      	cmp	r3, #2
 801033c:	dd1e      	ble.n	801037c <_dtoa_r+0x944>
 801033e:	9b00      	ldr	r3, [sp, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	f47f aec0 	bne.w	80100c6 <_dtoa_r+0x68e>
 8010346:	4621      	mov	r1, r4
 8010348:	2205      	movs	r2, #5
 801034a:	4658      	mov	r0, fp
 801034c:	f000 fa9a 	bl	8010884 <__multadd>
 8010350:	4601      	mov	r1, r0
 8010352:	4604      	mov	r4, r0
 8010354:	4648      	mov	r0, r9
 8010356:	f000 fcad 	bl	8010cb4 <__mcmp>
 801035a:	2800      	cmp	r0, #0
 801035c:	f77f aeb3 	ble.w	80100c6 <_dtoa_r+0x68e>
 8010360:	4656      	mov	r6, sl
 8010362:	2331      	movs	r3, #49	@ 0x31
 8010364:	f806 3b01 	strb.w	r3, [r6], #1
 8010368:	9b04      	ldr	r3, [sp, #16]
 801036a:	3301      	adds	r3, #1
 801036c:	9304      	str	r3, [sp, #16]
 801036e:	e6ae      	b.n	80100ce <_dtoa_r+0x696>
 8010370:	9c07      	ldr	r4, [sp, #28]
 8010372:	9704      	str	r7, [sp, #16]
 8010374:	4625      	mov	r5, r4
 8010376:	e7f3      	b.n	8010360 <_dtoa_r+0x928>
 8010378:	9b07      	ldr	r3, [sp, #28]
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801037e:	2b00      	cmp	r3, #0
 8010380:	f000 8104 	beq.w	801058c <_dtoa_r+0xb54>
 8010384:	2e00      	cmp	r6, #0
 8010386:	dd05      	ble.n	8010394 <_dtoa_r+0x95c>
 8010388:	4629      	mov	r1, r5
 801038a:	4632      	mov	r2, r6
 801038c:	4658      	mov	r0, fp
 801038e:	f000 fc25 	bl	8010bdc <__lshift>
 8010392:	4605      	mov	r5, r0
 8010394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010396:	2b00      	cmp	r3, #0
 8010398:	d05a      	beq.n	8010450 <_dtoa_r+0xa18>
 801039a:	6869      	ldr	r1, [r5, #4]
 801039c:	4658      	mov	r0, fp
 801039e:	f000 fa0f 	bl	80107c0 <_Balloc>
 80103a2:	4606      	mov	r6, r0
 80103a4:	b928      	cbnz	r0, 80103b2 <_dtoa_r+0x97a>
 80103a6:	4b84      	ldr	r3, [pc, #528]	@ (80105b8 <_dtoa_r+0xb80>)
 80103a8:	4602      	mov	r2, r0
 80103aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80103ae:	f7ff bb5a 	b.w	800fa66 <_dtoa_r+0x2e>
 80103b2:	692a      	ldr	r2, [r5, #16]
 80103b4:	3202      	adds	r2, #2
 80103b6:	0092      	lsls	r2, r2, #2
 80103b8:	f105 010c 	add.w	r1, r5, #12
 80103bc:	300c      	adds	r0, #12
 80103be:	f7ff faa2 	bl	800f906 <memcpy>
 80103c2:	2201      	movs	r2, #1
 80103c4:	4631      	mov	r1, r6
 80103c6:	4658      	mov	r0, fp
 80103c8:	f000 fc08 	bl	8010bdc <__lshift>
 80103cc:	f10a 0301 	add.w	r3, sl, #1
 80103d0:	9307      	str	r3, [sp, #28]
 80103d2:	9b00      	ldr	r3, [sp, #0]
 80103d4:	4453      	add	r3, sl
 80103d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103d8:	9b02      	ldr	r3, [sp, #8]
 80103da:	f003 0301 	and.w	r3, r3, #1
 80103de:	462f      	mov	r7, r5
 80103e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80103e2:	4605      	mov	r5, r0
 80103e4:	9b07      	ldr	r3, [sp, #28]
 80103e6:	4621      	mov	r1, r4
 80103e8:	3b01      	subs	r3, #1
 80103ea:	4648      	mov	r0, r9
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	f7ff fa98 	bl	800f922 <quorem>
 80103f2:	4639      	mov	r1, r7
 80103f4:	9002      	str	r0, [sp, #8]
 80103f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80103fa:	4648      	mov	r0, r9
 80103fc:	f000 fc5a 	bl	8010cb4 <__mcmp>
 8010400:	462a      	mov	r2, r5
 8010402:	9008      	str	r0, [sp, #32]
 8010404:	4621      	mov	r1, r4
 8010406:	4658      	mov	r0, fp
 8010408:	f000 fc70 	bl	8010cec <__mdiff>
 801040c:	68c2      	ldr	r2, [r0, #12]
 801040e:	4606      	mov	r6, r0
 8010410:	bb02      	cbnz	r2, 8010454 <_dtoa_r+0xa1c>
 8010412:	4601      	mov	r1, r0
 8010414:	4648      	mov	r0, r9
 8010416:	f000 fc4d 	bl	8010cb4 <__mcmp>
 801041a:	4602      	mov	r2, r0
 801041c:	4631      	mov	r1, r6
 801041e:	4658      	mov	r0, fp
 8010420:	920e      	str	r2, [sp, #56]	@ 0x38
 8010422:	f000 fa0d 	bl	8010840 <_Bfree>
 8010426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801042a:	9e07      	ldr	r6, [sp, #28]
 801042c:	ea43 0102 	orr.w	r1, r3, r2
 8010430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010432:	4319      	orrs	r1, r3
 8010434:	d110      	bne.n	8010458 <_dtoa_r+0xa20>
 8010436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801043a:	d029      	beq.n	8010490 <_dtoa_r+0xa58>
 801043c:	9b08      	ldr	r3, [sp, #32]
 801043e:	2b00      	cmp	r3, #0
 8010440:	dd02      	ble.n	8010448 <_dtoa_r+0xa10>
 8010442:	9b02      	ldr	r3, [sp, #8]
 8010444:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010448:	9b00      	ldr	r3, [sp, #0]
 801044a:	f883 8000 	strb.w	r8, [r3]
 801044e:	e63f      	b.n	80100d0 <_dtoa_r+0x698>
 8010450:	4628      	mov	r0, r5
 8010452:	e7bb      	b.n	80103cc <_dtoa_r+0x994>
 8010454:	2201      	movs	r2, #1
 8010456:	e7e1      	b.n	801041c <_dtoa_r+0x9e4>
 8010458:	9b08      	ldr	r3, [sp, #32]
 801045a:	2b00      	cmp	r3, #0
 801045c:	db04      	blt.n	8010468 <_dtoa_r+0xa30>
 801045e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010460:	430b      	orrs	r3, r1
 8010462:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010464:	430b      	orrs	r3, r1
 8010466:	d120      	bne.n	80104aa <_dtoa_r+0xa72>
 8010468:	2a00      	cmp	r2, #0
 801046a:	dded      	ble.n	8010448 <_dtoa_r+0xa10>
 801046c:	4649      	mov	r1, r9
 801046e:	2201      	movs	r2, #1
 8010470:	4658      	mov	r0, fp
 8010472:	f000 fbb3 	bl	8010bdc <__lshift>
 8010476:	4621      	mov	r1, r4
 8010478:	4681      	mov	r9, r0
 801047a:	f000 fc1b 	bl	8010cb4 <__mcmp>
 801047e:	2800      	cmp	r0, #0
 8010480:	dc03      	bgt.n	801048a <_dtoa_r+0xa52>
 8010482:	d1e1      	bne.n	8010448 <_dtoa_r+0xa10>
 8010484:	f018 0f01 	tst.w	r8, #1
 8010488:	d0de      	beq.n	8010448 <_dtoa_r+0xa10>
 801048a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801048e:	d1d8      	bne.n	8010442 <_dtoa_r+0xa0a>
 8010490:	9a00      	ldr	r2, [sp, #0]
 8010492:	2339      	movs	r3, #57	@ 0x39
 8010494:	7013      	strb	r3, [r2, #0]
 8010496:	4633      	mov	r3, r6
 8010498:	461e      	mov	r6, r3
 801049a:	3b01      	subs	r3, #1
 801049c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80104a0:	2a39      	cmp	r2, #57	@ 0x39
 80104a2:	d052      	beq.n	801054a <_dtoa_r+0xb12>
 80104a4:	3201      	adds	r2, #1
 80104a6:	701a      	strb	r2, [r3, #0]
 80104a8:	e612      	b.n	80100d0 <_dtoa_r+0x698>
 80104aa:	2a00      	cmp	r2, #0
 80104ac:	dd07      	ble.n	80104be <_dtoa_r+0xa86>
 80104ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80104b2:	d0ed      	beq.n	8010490 <_dtoa_r+0xa58>
 80104b4:	9a00      	ldr	r2, [sp, #0]
 80104b6:	f108 0301 	add.w	r3, r8, #1
 80104ba:	7013      	strb	r3, [r2, #0]
 80104bc:	e608      	b.n	80100d0 <_dtoa_r+0x698>
 80104be:	9b07      	ldr	r3, [sp, #28]
 80104c0:	9a07      	ldr	r2, [sp, #28]
 80104c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80104c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d028      	beq.n	801051e <_dtoa_r+0xae6>
 80104cc:	4649      	mov	r1, r9
 80104ce:	2300      	movs	r3, #0
 80104d0:	220a      	movs	r2, #10
 80104d2:	4658      	mov	r0, fp
 80104d4:	f000 f9d6 	bl	8010884 <__multadd>
 80104d8:	42af      	cmp	r7, r5
 80104da:	4681      	mov	r9, r0
 80104dc:	f04f 0300 	mov.w	r3, #0
 80104e0:	f04f 020a 	mov.w	r2, #10
 80104e4:	4639      	mov	r1, r7
 80104e6:	4658      	mov	r0, fp
 80104e8:	d107      	bne.n	80104fa <_dtoa_r+0xac2>
 80104ea:	f000 f9cb 	bl	8010884 <__multadd>
 80104ee:	4607      	mov	r7, r0
 80104f0:	4605      	mov	r5, r0
 80104f2:	9b07      	ldr	r3, [sp, #28]
 80104f4:	3301      	adds	r3, #1
 80104f6:	9307      	str	r3, [sp, #28]
 80104f8:	e774      	b.n	80103e4 <_dtoa_r+0x9ac>
 80104fa:	f000 f9c3 	bl	8010884 <__multadd>
 80104fe:	4629      	mov	r1, r5
 8010500:	4607      	mov	r7, r0
 8010502:	2300      	movs	r3, #0
 8010504:	220a      	movs	r2, #10
 8010506:	4658      	mov	r0, fp
 8010508:	f000 f9bc 	bl	8010884 <__multadd>
 801050c:	4605      	mov	r5, r0
 801050e:	e7f0      	b.n	80104f2 <_dtoa_r+0xaba>
 8010510:	9b00      	ldr	r3, [sp, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	bfcc      	ite	gt
 8010516:	461e      	movgt	r6, r3
 8010518:	2601      	movle	r6, #1
 801051a:	4456      	add	r6, sl
 801051c:	2700      	movs	r7, #0
 801051e:	4649      	mov	r1, r9
 8010520:	2201      	movs	r2, #1
 8010522:	4658      	mov	r0, fp
 8010524:	f000 fb5a 	bl	8010bdc <__lshift>
 8010528:	4621      	mov	r1, r4
 801052a:	4681      	mov	r9, r0
 801052c:	f000 fbc2 	bl	8010cb4 <__mcmp>
 8010530:	2800      	cmp	r0, #0
 8010532:	dcb0      	bgt.n	8010496 <_dtoa_r+0xa5e>
 8010534:	d102      	bne.n	801053c <_dtoa_r+0xb04>
 8010536:	f018 0f01 	tst.w	r8, #1
 801053a:	d1ac      	bne.n	8010496 <_dtoa_r+0xa5e>
 801053c:	4633      	mov	r3, r6
 801053e:	461e      	mov	r6, r3
 8010540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010544:	2a30      	cmp	r2, #48	@ 0x30
 8010546:	d0fa      	beq.n	801053e <_dtoa_r+0xb06>
 8010548:	e5c2      	b.n	80100d0 <_dtoa_r+0x698>
 801054a:	459a      	cmp	sl, r3
 801054c:	d1a4      	bne.n	8010498 <_dtoa_r+0xa60>
 801054e:	9b04      	ldr	r3, [sp, #16]
 8010550:	3301      	adds	r3, #1
 8010552:	9304      	str	r3, [sp, #16]
 8010554:	2331      	movs	r3, #49	@ 0x31
 8010556:	f88a 3000 	strb.w	r3, [sl]
 801055a:	e5b9      	b.n	80100d0 <_dtoa_r+0x698>
 801055c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801055e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80105bc <_dtoa_r+0xb84>
 8010562:	b11b      	cbz	r3, 801056c <_dtoa_r+0xb34>
 8010564:	f10a 0308 	add.w	r3, sl, #8
 8010568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	4650      	mov	r0, sl
 801056e:	b019      	add	sp, #100	@ 0x64
 8010570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010576:	2b01      	cmp	r3, #1
 8010578:	f77f ae37 	ble.w	80101ea <_dtoa_r+0x7b2>
 801057c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801057e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010580:	2001      	movs	r0, #1
 8010582:	e655      	b.n	8010230 <_dtoa_r+0x7f8>
 8010584:	9b00      	ldr	r3, [sp, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f77f aed6 	ble.w	8010338 <_dtoa_r+0x900>
 801058c:	4656      	mov	r6, sl
 801058e:	4621      	mov	r1, r4
 8010590:	4648      	mov	r0, r9
 8010592:	f7ff f9c6 	bl	800f922 <quorem>
 8010596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801059a:	f806 8b01 	strb.w	r8, [r6], #1
 801059e:	9b00      	ldr	r3, [sp, #0]
 80105a0:	eba6 020a 	sub.w	r2, r6, sl
 80105a4:	4293      	cmp	r3, r2
 80105a6:	ddb3      	ble.n	8010510 <_dtoa_r+0xad8>
 80105a8:	4649      	mov	r1, r9
 80105aa:	2300      	movs	r3, #0
 80105ac:	220a      	movs	r2, #10
 80105ae:	4658      	mov	r0, fp
 80105b0:	f000 f968 	bl	8010884 <__multadd>
 80105b4:	4681      	mov	r9, r0
 80105b6:	e7ea      	b.n	801058e <_dtoa_r+0xb56>
 80105b8:	08013169 	.word	0x08013169
 80105bc:	080130ed 	.word	0x080130ed

080105c0 <_free_r>:
 80105c0:	b538      	push	{r3, r4, r5, lr}
 80105c2:	4605      	mov	r5, r0
 80105c4:	2900      	cmp	r1, #0
 80105c6:	d041      	beq.n	801064c <_free_r+0x8c>
 80105c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105cc:	1f0c      	subs	r4, r1, #4
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	bfb8      	it	lt
 80105d2:	18e4      	addlt	r4, r4, r3
 80105d4:	f000 f8e8 	bl	80107a8 <__malloc_lock>
 80105d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010650 <_free_r+0x90>)
 80105da:	6813      	ldr	r3, [r2, #0]
 80105dc:	b933      	cbnz	r3, 80105ec <_free_r+0x2c>
 80105de:	6063      	str	r3, [r4, #4]
 80105e0:	6014      	str	r4, [r2, #0]
 80105e2:	4628      	mov	r0, r5
 80105e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105e8:	f000 b8e4 	b.w	80107b4 <__malloc_unlock>
 80105ec:	42a3      	cmp	r3, r4
 80105ee:	d908      	bls.n	8010602 <_free_r+0x42>
 80105f0:	6820      	ldr	r0, [r4, #0]
 80105f2:	1821      	adds	r1, r4, r0
 80105f4:	428b      	cmp	r3, r1
 80105f6:	bf01      	itttt	eq
 80105f8:	6819      	ldreq	r1, [r3, #0]
 80105fa:	685b      	ldreq	r3, [r3, #4]
 80105fc:	1809      	addeq	r1, r1, r0
 80105fe:	6021      	streq	r1, [r4, #0]
 8010600:	e7ed      	b.n	80105de <_free_r+0x1e>
 8010602:	461a      	mov	r2, r3
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	b10b      	cbz	r3, 801060c <_free_r+0x4c>
 8010608:	42a3      	cmp	r3, r4
 801060a:	d9fa      	bls.n	8010602 <_free_r+0x42>
 801060c:	6811      	ldr	r1, [r2, #0]
 801060e:	1850      	adds	r0, r2, r1
 8010610:	42a0      	cmp	r0, r4
 8010612:	d10b      	bne.n	801062c <_free_r+0x6c>
 8010614:	6820      	ldr	r0, [r4, #0]
 8010616:	4401      	add	r1, r0
 8010618:	1850      	adds	r0, r2, r1
 801061a:	4283      	cmp	r3, r0
 801061c:	6011      	str	r1, [r2, #0]
 801061e:	d1e0      	bne.n	80105e2 <_free_r+0x22>
 8010620:	6818      	ldr	r0, [r3, #0]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	6053      	str	r3, [r2, #4]
 8010626:	4408      	add	r0, r1
 8010628:	6010      	str	r0, [r2, #0]
 801062a:	e7da      	b.n	80105e2 <_free_r+0x22>
 801062c:	d902      	bls.n	8010634 <_free_r+0x74>
 801062e:	230c      	movs	r3, #12
 8010630:	602b      	str	r3, [r5, #0]
 8010632:	e7d6      	b.n	80105e2 <_free_r+0x22>
 8010634:	6820      	ldr	r0, [r4, #0]
 8010636:	1821      	adds	r1, r4, r0
 8010638:	428b      	cmp	r3, r1
 801063a:	bf04      	itt	eq
 801063c:	6819      	ldreq	r1, [r3, #0]
 801063e:	685b      	ldreq	r3, [r3, #4]
 8010640:	6063      	str	r3, [r4, #4]
 8010642:	bf04      	itt	eq
 8010644:	1809      	addeq	r1, r1, r0
 8010646:	6021      	streq	r1, [r4, #0]
 8010648:	6054      	str	r4, [r2, #4]
 801064a:	e7ca      	b.n	80105e2 <_free_r+0x22>
 801064c:	bd38      	pop	{r3, r4, r5, pc}
 801064e:	bf00      	nop
 8010650:	20001950 	.word	0x20001950

08010654 <malloc>:
 8010654:	4b02      	ldr	r3, [pc, #8]	@ (8010660 <malloc+0xc>)
 8010656:	4601      	mov	r1, r0
 8010658:	6818      	ldr	r0, [r3, #0]
 801065a:	f000 b825 	b.w	80106a8 <_malloc_r>
 801065e:	bf00      	nop
 8010660:	20000030 	.word	0x20000030

08010664 <sbrk_aligned>:
 8010664:	b570      	push	{r4, r5, r6, lr}
 8010666:	4e0f      	ldr	r6, [pc, #60]	@ (80106a4 <sbrk_aligned+0x40>)
 8010668:	460c      	mov	r4, r1
 801066a:	6831      	ldr	r1, [r6, #0]
 801066c:	4605      	mov	r5, r0
 801066e:	b911      	cbnz	r1, 8010676 <sbrk_aligned+0x12>
 8010670:	f001 f84e 	bl	8011710 <_sbrk_r>
 8010674:	6030      	str	r0, [r6, #0]
 8010676:	4621      	mov	r1, r4
 8010678:	4628      	mov	r0, r5
 801067a:	f001 f849 	bl	8011710 <_sbrk_r>
 801067e:	1c43      	adds	r3, r0, #1
 8010680:	d103      	bne.n	801068a <sbrk_aligned+0x26>
 8010682:	f04f 34ff 	mov.w	r4, #4294967295
 8010686:	4620      	mov	r0, r4
 8010688:	bd70      	pop	{r4, r5, r6, pc}
 801068a:	1cc4      	adds	r4, r0, #3
 801068c:	f024 0403 	bic.w	r4, r4, #3
 8010690:	42a0      	cmp	r0, r4
 8010692:	d0f8      	beq.n	8010686 <sbrk_aligned+0x22>
 8010694:	1a21      	subs	r1, r4, r0
 8010696:	4628      	mov	r0, r5
 8010698:	f001 f83a 	bl	8011710 <_sbrk_r>
 801069c:	3001      	adds	r0, #1
 801069e:	d1f2      	bne.n	8010686 <sbrk_aligned+0x22>
 80106a0:	e7ef      	b.n	8010682 <sbrk_aligned+0x1e>
 80106a2:	bf00      	nop
 80106a4:	2000194c 	.word	0x2000194c

080106a8 <_malloc_r>:
 80106a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106ac:	1ccd      	adds	r5, r1, #3
 80106ae:	f025 0503 	bic.w	r5, r5, #3
 80106b2:	3508      	adds	r5, #8
 80106b4:	2d0c      	cmp	r5, #12
 80106b6:	bf38      	it	cc
 80106b8:	250c      	movcc	r5, #12
 80106ba:	2d00      	cmp	r5, #0
 80106bc:	4606      	mov	r6, r0
 80106be:	db01      	blt.n	80106c4 <_malloc_r+0x1c>
 80106c0:	42a9      	cmp	r1, r5
 80106c2:	d904      	bls.n	80106ce <_malloc_r+0x26>
 80106c4:	230c      	movs	r3, #12
 80106c6:	6033      	str	r3, [r6, #0]
 80106c8:	2000      	movs	r0, #0
 80106ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80107a4 <_malloc_r+0xfc>
 80106d2:	f000 f869 	bl	80107a8 <__malloc_lock>
 80106d6:	f8d8 3000 	ldr.w	r3, [r8]
 80106da:	461c      	mov	r4, r3
 80106dc:	bb44      	cbnz	r4, 8010730 <_malloc_r+0x88>
 80106de:	4629      	mov	r1, r5
 80106e0:	4630      	mov	r0, r6
 80106e2:	f7ff ffbf 	bl	8010664 <sbrk_aligned>
 80106e6:	1c43      	adds	r3, r0, #1
 80106e8:	4604      	mov	r4, r0
 80106ea:	d158      	bne.n	801079e <_malloc_r+0xf6>
 80106ec:	f8d8 4000 	ldr.w	r4, [r8]
 80106f0:	4627      	mov	r7, r4
 80106f2:	2f00      	cmp	r7, #0
 80106f4:	d143      	bne.n	801077e <_malloc_r+0xd6>
 80106f6:	2c00      	cmp	r4, #0
 80106f8:	d04b      	beq.n	8010792 <_malloc_r+0xea>
 80106fa:	6823      	ldr	r3, [r4, #0]
 80106fc:	4639      	mov	r1, r7
 80106fe:	4630      	mov	r0, r6
 8010700:	eb04 0903 	add.w	r9, r4, r3
 8010704:	f001 f804 	bl	8011710 <_sbrk_r>
 8010708:	4581      	cmp	r9, r0
 801070a:	d142      	bne.n	8010792 <_malloc_r+0xea>
 801070c:	6821      	ldr	r1, [r4, #0]
 801070e:	1a6d      	subs	r5, r5, r1
 8010710:	4629      	mov	r1, r5
 8010712:	4630      	mov	r0, r6
 8010714:	f7ff ffa6 	bl	8010664 <sbrk_aligned>
 8010718:	3001      	adds	r0, #1
 801071a:	d03a      	beq.n	8010792 <_malloc_r+0xea>
 801071c:	6823      	ldr	r3, [r4, #0]
 801071e:	442b      	add	r3, r5
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	f8d8 3000 	ldr.w	r3, [r8]
 8010726:	685a      	ldr	r2, [r3, #4]
 8010728:	bb62      	cbnz	r2, 8010784 <_malloc_r+0xdc>
 801072a:	f8c8 7000 	str.w	r7, [r8]
 801072e:	e00f      	b.n	8010750 <_malloc_r+0xa8>
 8010730:	6822      	ldr	r2, [r4, #0]
 8010732:	1b52      	subs	r2, r2, r5
 8010734:	d420      	bmi.n	8010778 <_malloc_r+0xd0>
 8010736:	2a0b      	cmp	r2, #11
 8010738:	d917      	bls.n	801076a <_malloc_r+0xc2>
 801073a:	1961      	adds	r1, r4, r5
 801073c:	42a3      	cmp	r3, r4
 801073e:	6025      	str	r5, [r4, #0]
 8010740:	bf18      	it	ne
 8010742:	6059      	strne	r1, [r3, #4]
 8010744:	6863      	ldr	r3, [r4, #4]
 8010746:	bf08      	it	eq
 8010748:	f8c8 1000 	streq.w	r1, [r8]
 801074c:	5162      	str	r2, [r4, r5]
 801074e:	604b      	str	r3, [r1, #4]
 8010750:	4630      	mov	r0, r6
 8010752:	f000 f82f 	bl	80107b4 <__malloc_unlock>
 8010756:	f104 000b 	add.w	r0, r4, #11
 801075a:	1d23      	adds	r3, r4, #4
 801075c:	f020 0007 	bic.w	r0, r0, #7
 8010760:	1ac2      	subs	r2, r0, r3
 8010762:	bf1c      	itt	ne
 8010764:	1a1b      	subne	r3, r3, r0
 8010766:	50a3      	strne	r3, [r4, r2]
 8010768:	e7af      	b.n	80106ca <_malloc_r+0x22>
 801076a:	6862      	ldr	r2, [r4, #4]
 801076c:	42a3      	cmp	r3, r4
 801076e:	bf0c      	ite	eq
 8010770:	f8c8 2000 	streq.w	r2, [r8]
 8010774:	605a      	strne	r2, [r3, #4]
 8010776:	e7eb      	b.n	8010750 <_malloc_r+0xa8>
 8010778:	4623      	mov	r3, r4
 801077a:	6864      	ldr	r4, [r4, #4]
 801077c:	e7ae      	b.n	80106dc <_malloc_r+0x34>
 801077e:	463c      	mov	r4, r7
 8010780:	687f      	ldr	r7, [r7, #4]
 8010782:	e7b6      	b.n	80106f2 <_malloc_r+0x4a>
 8010784:	461a      	mov	r2, r3
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	42a3      	cmp	r3, r4
 801078a:	d1fb      	bne.n	8010784 <_malloc_r+0xdc>
 801078c:	2300      	movs	r3, #0
 801078e:	6053      	str	r3, [r2, #4]
 8010790:	e7de      	b.n	8010750 <_malloc_r+0xa8>
 8010792:	230c      	movs	r3, #12
 8010794:	6033      	str	r3, [r6, #0]
 8010796:	4630      	mov	r0, r6
 8010798:	f000 f80c 	bl	80107b4 <__malloc_unlock>
 801079c:	e794      	b.n	80106c8 <_malloc_r+0x20>
 801079e:	6005      	str	r5, [r0, #0]
 80107a0:	e7d6      	b.n	8010750 <_malloc_r+0xa8>
 80107a2:	bf00      	nop
 80107a4:	20001950 	.word	0x20001950

080107a8 <__malloc_lock>:
 80107a8:	4801      	ldr	r0, [pc, #4]	@ (80107b0 <__malloc_lock+0x8>)
 80107aa:	f7ff b8aa 	b.w	800f902 <__retarget_lock_acquire_recursive>
 80107ae:	bf00      	nop
 80107b0:	20001948 	.word	0x20001948

080107b4 <__malloc_unlock>:
 80107b4:	4801      	ldr	r0, [pc, #4]	@ (80107bc <__malloc_unlock+0x8>)
 80107b6:	f7ff b8a5 	b.w	800f904 <__retarget_lock_release_recursive>
 80107ba:	bf00      	nop
 80107bc:	20001948 	.word	0x20001948

080107c0 <_Balloc>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	69c6      	ldr	r6, [r0, #28]
 80107c4:	4604      	mov	r4, r0
 80107c6:	460d      	mov	r5, r1
 80107c8:	b976      	cbnz	r6, 80107e8 <_Balloc+0x28>
 80107ca:	2010      	movs	r0, #16
 80107cc:	f7ff ff42 	bl	8010654 <malloc>
 80107d0:	4602      	mov	r2, r0
 80107d2:	61e0      	str	r0, [r4, #28]
 80107d4:	b920      	cbnz	r0, 80107e0 <_Balloc+0x20>
 80107d6:	4b18      	ldr	r3, [pc, #96]	@ (8010838 <_Balloc+0x78>)
 80107d8:	4818      	ldr	r0, [pc, #96]	@ (801083c <_Balloc+0x7c>)
 80107da:	216b      	movs	r1, #107	@ 0x6b
 80107dc:	f000 ffa8 	bl	8011730 <__assert_func>
 80107e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107e4:	6006      	str	r6, [r0, #0]
 80107e6:	60c6      	str	r6, [r0, #12]
 80107e8:	69e6      	ldr	r6, [r4, #28]
 80107ea:	68f3      	ldr	r3, [r6, #12]
 80107ec:	b183      	cbz	r3, 8010810 <_Balloc+0x50>
 80107ee:	69e3      	ldr	r3, [r4, #28]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80107f6:	b9b8      	cbnz	r0, 8010828 <_Balloc+0x68>
 80107f8:	2101      	movs	r1, #1
 80107fa:	fa01 f605 	lsl.w	r6, r1, r5
 80107fe:	1d72      	adds	r2, r6, #5
 8010800:	0092      	lsls	r2, r2, #2
 8010802:	4620      	mov	r0, r4
 8010804:	f000 ffb2 	bl	801176c <_calloc_r>
 8010808:	b160      	cbz	r0, 8010824 <_Balloc+0x64>
 801080a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801080e:	e00e      	b.n	801082e <_Balloc+0x6e>
 8010810:	2221      	movs	r2, #33	@ 0x21
 8010812:	2104      	movs	r1, #4
 8010814:	4620      	mov	r0, r4
 8010816:	f000 ffa9 	bl	801176c <_calloc_r>
 801081a:	69e3      	ldr	r3, [r4, #28]
 801081c:	60f0      	str	r0, [r6, #12]
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e4      	bne.n	80107ee <_Balloc+0x2e>
 8010824:	2000      	movs	r0, #0
 8010826:	bd70      	pop	{r4, r5, r6, pc}
 8010828:	6802      	ldr	r2, [r0, #0]
 801082a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801082e:	2300      	movs	r3, #0
 8010830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010834:	e7f7      	b.n	8010826 <_Balloc+0x66>
 8010836:	bf00      	nop
 8010838:	080130fa 	.word	0x080130fa
 801083c:	0801317a 	.word	0x0801317a

08010840 <_Bfree>:
 8010840:	b570      	push	{r4, r5, r6, lr}
 8010842:	69c6      	ldr	r6, [r0, #28]
 8010844:	4605      	mov	r5, r0
 8010846:	460c      	mov	r4, r1
 8010848:	b976      	cbnz	r6, 8010868 <_Bfree+0x28>
 801084a:	2010      	movs	r0, #16
 801084c:	f7ff ff02 	bl	8010654 <malloc>
 8010850:	4602      	mov	r2, r0
 8010852:	61e8      	str	r0, [r5, #28]
 8010854:	b920      	cbnz	r0, 8010860 <_Bfree+0x20>
 8010856:	4b09      	ldr	r3, [pc, #36]	@ (801087c <_Bfree+0x3c>)
 8010858:	4809      	ldr	r0, [pc, #36]	@ (8010880 <_Bfree+0x40>)
 801085a:	218f      	movs	r1, #143	@ 0x8f
 801085c:	f000 ff68 	bl	8011730 <__assert_func>
 8010860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010864:	6006      	str	r6, [r0, #0]
 8010866:	60c6      	str	r6, [r0, #12]
 8010868:	b13c      	cbz	r4, 801087a <_Bfree+0x3a>
 801086a:	69eb      	ldr	r3, [r5, #28]
 801086c:	6862      	ldr	r2, [r4, #4]
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010874:	6021      	str	r1, [r4, #0]
 8010876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801087a:	bd70      	pop	{r4, r5, r6, pc}
 801087c:	080130fa 	.word	0x080130fa
 8010880:	0801317a 	.word	0x0801317a

08010884 <__multadd>:
 8010884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010888:	690d      	ldr	r5, [r1, #16]
 801088a:	4607      	mov	r7, r0
 801088c:	460c      	mov	r4, r1
 801088e:	461e      	mov	r6, r3
 8010890:	f101 0c14 	add.w	ip, r1, #20
 8010894:	2000      	movs	r0, #0
 8010896:	f8dc 3000 	ldr.w	r3, [ip]
 801089a:	b299      	uxth	r1, r3
 801089c:	fb02 6101 	mla	r1, r2, r1, r6
 80108a0:	0c1e      	lsrs	r6, r3, #16
 80108a2:	0c0b      	lsrs	r3, r1, #16
 80108a4:	fb02 3306 	mla	r3, r2, r6, r3
 80108a8:	b289      	uxth	r1, r1
 80108aa:	3001      	adds	r0, #1
 80108ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80108b0:	4285      	cmp	r5, r0
 80108b2:	f84c 1b04 	str.w	r1, [ip], #4
 80108b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80108ba:	dcec      	bgt.n	8010896 <__multadd+0x12>
 80108bc:	b30e      	cbz	r6, 8010902 <__multadd+0x7e>
 80108be:	68a3      	ldr	r3, [r4, #8]
 80108c0:	42ab      	cmp	r3, r5
 80108c2:	dc19      	bgt.n	80108f8 <__multadd+0x74>
 80108c4:	6861      	ldr	r1, [r4, #4]
 80108c6:	4638      	mov	r0, r7
 80108c8:	3101      	adds	r1, #1
 80108ca:	f7ff ff79 	bl	80107c0 <_Balloc>
 80108ce:	4680      	mov	r8, r0
 80108d0:	b928      	cbnz	r0, 80108de <__multadd+0x5a>
 80108d2:	4602      	mov	r2, r0
 80108d4:	4b0c      	ldr	r3, [pc, #48]	@ (8010908 <__multadd+0x84>)
 80108d6:	480d      	ldr	r0, [pc, #52]	@ (801090c <__multadd+0x88>)
 80108d8:	21ba      	movs	r1, #186	@ 0xba
 80108da:	f000 ff29 	bl	8011730 <__assert_func>
 80108de:	6922      	ldr	r2, [r4, #16]
 80108e0:	3202      	adds	r2, #2
 80108e2:	f104 010c 	add.w	r1, r4, #12
 80108e6:	0092      	lsls	r2, r2, #2
 80108e8:	300c      	adds	r0, #12
 80108ea:	f7ff f80c 	bl	800f906 <memcpy>
 80108ee:	4621      	mov	r1, r4
 80108f0:	4638      	mov	r0, r7
 80108f2:	f7ff ffa5 	bl	8010840 <_Bfree>
 80108f6:	4644      	mov	r4, r8
 80108f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80108fc:	3501      	adds	r5, #1
 80108fe:	615e      	str	r6, [r3, #20]
 8010900:	6125      	str	r5, [r4, #16]
 8010902:	4620      	mov	r0, r4
 8010904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010908:	08013169 	.word	0x08013169
 801090c:	0801317a 	.word	0x0801317a

08010910 <__hi0bits>:
 8010910:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010914:	4603      	mov	r3, r0
 8010916:	bf36      	itet	cc
 8010918:	0403      	lslcc	r3, r0, #16
 801091a:	2000      	movcs	r0, #0
 801091c:	2010      	movcc	r0, #16
 801091e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010922:	bf3c      	itt	cc
 8010924:	021b      	lslcc	r3, r3, #8
 8010926:	3008      	addcc	r0, #8
 8010928:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801092c:	bf3c      	itt	cc
 801092e:	011b      	lslcc	r3, r3, #4
 8010930:	3004      	addcc	r0, #4
 8010932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010936:	bf3c      	itt	cc
 8010938:	009b      	lslcc	r3, r3, #2
 801093a:	3002      	addcc	r0, #2
 801093c:	2b00      	cmp	r3, #0
 801093e:	db05      	blt.n	801094c <__hi0bits+0x3c>
 8010940:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010944:	f100 0001 	add.w	r0, r0, #1
 8010948:	bf08      	it	eq
 801094a:	2020      	moveq	r0, #32
 801094c:	4770      	bx	lr

0801094e <__lo0bits>:
 801094e:	6803      	ldr	r3, [r0, #0]
 8010950:	4602      	mov	r2, r0
 8010952:	f013 0007 	ands.w	r0, r3, #7
 8010956:	d00b      	beq.n	8010970 <__lo0bits+0x22>
 8010958:	07d9      	lsls	r1, r3, #31
 801095a:	d421      	bmi.n	80109a0 <__lo0bits+0x52>
 801095c:	0798      	lsls	r0, r3, #30
 801095e:	bf49      	itett	mi
 8010960:	085b      	lsrmi	r3, r3, #1
 8010962:	089b      	lsrpl	r3, r3, #2
 8010964:	2001      	movmi	r0, #1
 8010966:	6013      	strmi	r3, [r2, #0]
 8010968:	bf5c      	itt	pl
 801096a:	6013      	strpl	r3, [r2, #0]
 801096c:	2002      	movpl	r0, #2
 801096e:	4770      	bx	lr
 8010970:	b299      	uxth	r1, r3
 8010972:	b909      	cbnz	r1, 8010978 <__lo0bits+0x2a>
 8010974:	0c1b      	lsrs	r3, r3, #16
 8010976:	2010      	movs	r0, #16
 8010978:	b2d9      	uxtb	r1, r3
 801097a:	b909      	cbnz	r1, 8010980 <__lo0bits+0x32>
 801097c:	3008      	adds	r0, #8
 801097e:	0a1b      	lsrs	r3, r3, #8
 8010980:	0719      	lsls	r1, r3, #28
 8010982:	bf04      	itt	eq
 8010984:	091b      	lsreq	r3, r3, #4
 8010986:	3004      	addeq	r0, #4
 8010988:	0799      	lsls	r1, r3, #30
 801098a:	bf04      	itt	eq
 801098c:	089b      	lsreq	r3, r3, #2
 801098e:	3002      	addeq	r0, #2
 8010990:	07d9      	lsls	r1, r3, #31
 8010992:	d403      	bmi.n	801099c <__lo0bits+0x4e>
 8010994:	085b      	lsrs	r3, r3, #1
 8010996:	f100 0001 	add.w	r0, r0, #1
 801099a:	d003      	beq.n	80109a4 <__lo0bits+0x56>
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	4770      	bx	lr
 80109a0:	2000      	movs	r0, #0
 80109a2:	4770      	bx	lr
 80109a4:	2020      	movs	r0, #32
 80109a6:	4770      	bx	lr

080109a8 <__i2b>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	460c      	mov	r4, r1
 80109ac:	2101      	movs	r1, #1
 80109ae:	f7ff ff07 	bl	80107c0 <_Balloc>
 80109b2:	4602      	mov	r2, r0
 80109b4:	b928      	cbnz	r0, 80109c2 <__i2b+0x1a>
 80109b6:	4b05      	ldr	r3, [pc, #20]	@ (80109cc <__i2b+0x24>)
 80109b8:	4805      	ldr	r0, [pc, #20]	@ (80109d0 <__i2b+0x28>)
 80109ba:	f240 1145 	movw	r1, #325	@ 0x145
 80109be:	f000 feb7 	bl	8011730 <__assert_func>
 80109c2:	2301      	movs	r3, #1
 80109c4:	6144      	str	r4, [r0, #20]
 80109c6:	6103      	str	r3, [r0, #16]
 80109c8:	bd10      	pop	{r4, pc}
 80109ca:	bf00      	nop
 80109cc:	08013169 	.word	0x08013169
 80109d0:	0801317a 	.word	0x0801317a

080109d4 <__multiply>:
 80109d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d8:	4614      	mov	r4, r2
 80109da:	690a      	ldr	r2, [r1, #16]
 80109dc:	6923      	ldr	r3, [r4, #16]
 80109de:	429a      	cmp	r2, r3
 80109e0:	bfa8      	it	ge
 80109e2:	4623      	movge	r3, r4
 80109e4:	460f      	mov	r7, r1
 80109e6:	bfa4      	itt	ge
 80109e8:	460c      	movge	r4, r1
 80109ea:	461f      	movge	r7, r3
 80109ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80109f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80109f4:	68a3      	ldr	r3, [r4, #8]
 80109f6:	6861      	ldr	r1, [r4, #4]
 80109f8:	eb0a 0609 	add.w	r6, sl, r9
 80109fc:	42b3      	cmp	r3, r6
 80109fe:	b085      	sub	sp, #20
 8010a00:	bfb8      	it	lt
 8010a02:	3101      	addlt	r1, #1
 8010a04:	f7ff fedc 	bl	80107c0 <_Balloc>
 8010a08:	b930      	cbnz	r0, 8010a18 <__multiply+0x44>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	4b44      	ldr	r3, [pc, #272]	@ (8010b20 <__multiply+0x14c>)
 8010a0e:	4845      	ldr	r0, [pc, #276]	@ (8010b24 <__multiply+0x150>)
 8010a10:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010a14:	f000 fe8c 	bl	8011730 <__assert_func>
 8010a18:	f100 0514 	add.w	r5, r0, #20
 8010a1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010a20:	462b      	mov	r3, r5
 8010a22:	2200      	movs	r2, #0
 8010a24:	4543      	cmp	r3, r8
 8010a26:	d321      	bcc.n	8010a6c <__multiply+0x98>
 8010a28:	f107 0114 	add.w	r1, r7, #20
 8010a2c:	f104 0214 	add.w	r2, r4, #20
 8010a30:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010a34:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010a38:	9302      	str	r3, [sp, #8]
 8010a3a:	1b13      	subs	r3, r2, r4
 8010a3c:	3b15      	subs	r3, #21
 8010a3e:	f023 0303 	bic.w	r3, r3, #3
 8010a42:	3304      	adds	r3, #4
 8010a44:	f104 0715 	add.w	r7, r4, #21
 8010a48:	42ba      	cmp	r2, r7
 8010a4a:	bf38      	it	cc
 8010a4c:	2304      	movcc	r3, #4
 8010a4e:	9301      	str	r3, [sp, #4]
 8010a50:	9b02      	ldr	r3, [sp, #8]
 8010a52:	9103      	str	r1, [sp, #12]
 8010a54:	428b      	cmp	r3, r1
 8010a56:	d80c      	bhi.n	8010a72 <__multiply+0x9e>
 8010a58:	2e00      	cmp	r6, #0
 8010a5a:	dd03      	ble.n	8010a64 <__multiply+0x90>
 8010a5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d05b      	beq.n	8010b1c <__multiply+0x148>
 8010a64:	6106      	str	r6, [r0, #16]
 8010a66:	b005      	add	sp, #20
 8010a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a6c:	f843 2b04 	str.w	r2, [r3], #4
 8010a70:	e7d8      	b.n	8010a24 <__multiply+0x50>
 8010a72:	f8b1 a000 	ldrh.w	sl, [r1]
 8010a76:	f1ba 0f00 	cmp.w	sl, #0
 8010a7a:	d024      	beq.n	8010ac6 <__multiply+0xf2>
 8010a7c:	f104 0e14 	add.w	lr, r4, #20
 8010a80:	46a9      	mov	r9, r5
 8010a82:	f04f 0c00 	mov.w	ip, #0
 8010a86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a8a:	f8d9 3000 	ldr.w	r3, [r9]
 8010a8e:	fa1f fb87 	uxth.w	fp, r7
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	fb0a 330b 	mla	r3, sl, fp, r3
 8010a98:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010a9c:	f8d9 7000 	ldr.w	r7, [r9]
 8010aa0:	4463      	add	r3, ip
 8010aa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010aa6:	fb0a c70b 	mla	r7, sl, fp, ip
 8010aaa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010ab4:	4572      	cmp	r2, lr
 8010ab6:	f849 3b04 	str.w	r3, [r9], #4
 8010aba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010abe:	d8e2      	bhi.n	8010a86 <__multiply+0xb2>
 8010ac0:	9b01      	ldr	r3, [sp, #4]
 8010ac2:	f845 c003 	str.w	ip, [r5, r3]
 8010ac6:	9b03      	ldr	r3, [sp, #12]
 8010ac8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010acc:	3104      	adds	r1, #4
 8010ace:	f1b9 0f00 	cmp.w	r9, #0
 8010ad2:	d021      	beq.n	8010b18 <__multiply+0x144>
 8010ad4:	682b      	ldr	r3, [r5, #0]
 8010ad6:	f104 0c14 	add.w	ip, r4, #20
 8010ada:	46ae      	mov	lr, r5
 8010adc:	f04f 0a00 	mov.w	sl, #0
 8010ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8010ae4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010ae8:	fb09 770b 	mla	r7, r9, fp, r7
 8010aec:	4457      	add	r7, sl
 8010aee:	b29b      	uxth	r3, r3
 8010af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010af4:	f84e 3b04 	str.w	r3, [lr], #4
 8010af8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b00:	f8be 3000 	ldrh.w	r3, [lr]
 8010b04:	fb09 330a 	mla	r3, r9, sl, r3
 8010b08:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010b0c:	4562      	cmp	r2, ip
 8010b0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010b12:	d8e5      	bhi.n	8010ae0 <__multiply+0x10c>
 8010b14:	9f01      	ldr	r7, [sp, #4]
 8010b16:	51eb      	str	r3, [r5, r7]
 8010b18:	3504      	adds	r5, #4
 8010b1a:	e799      	b.n	8010a50 <__multiply+0x7c>
 8010b1c:	3e01      	subs	r6, #1
 8010b1e:	e79b      	b.n	8010a58 <__multiply+0x84>
 8010b20:	08013169 	.word	0x08013169
 8010b24:	0801317a 	.word	0x0801317a

08010b28 <__pow5mult>:
 8010b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b2c:	4615      	mov	r5, r2
 8010b2e:	f012 0203 	ands.w	r2, r2, #3
 8010b32:	4607      	mov	r7, r0
 8010b34:	460e      	mov	r6, r1
 8010b36:	d007      	beq.n	8010b48 <__pow5mult+0x20>
 8010b38:	4c25      	ldr	r4, [pc, #148]	@ (8010bd0 <__pow5mult+0xa8>)
 8010b3a:	3a01      	subs	r2, #1
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010b42:	f7ff fe9f 	bl	8010884 <__multadd>
 8010b46:	4606      	mov	r6, r0
 8010b48:	10ad      	asrs	r5, r5, #2
 8010b4a:	d03d      	beq.n	8010bc8 <__pow5mult+0xa0>
 8010b4c:	69fc      	ldr	r4, [r7, #28]
 8010b4e:	b97c      	cbnz	r4, 8010b70 <__pow5mult+0x48>
 8010b50:	2010      	movs	r0, #16
 8010b52:	f7ff fd7f 	bl	8010654 <malloc>
 8010b56:	4602      	mov	r2, r0
 8010b58:	61f8      	str	r0, [r7, #28]
 8010b5a:	b928      	cbnz	r0, 8010b68 <__pow5mult+0x40>
 8010b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8010bd4 <__pow5mult+0xac>)
 8010b5e:	481e      	ldr	r0, [pc, #120]	@ (8010bd8 <__pow5mult+0xb0>)
 8010b60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010b64:	f000 fde4 	bl	8011730 <__assert_func>
 8010b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010b6c:	6004      	str	r4, [r0, #0]
 8010b6e:	60c4      	str	r4, [r0, #12]
 8010b70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010b78:	b94c      	cbnz	r4, 8010b8e <__pow5mult+0x66>
 8010b7a:	f240 2171 	movw	r1, #625	@ 0x271
 8010b7e:	4638      	mov	r0, r7
 8010b80:	f7ff ff12 	bl	80109a8 <__i2b>
 8010b84:	2300      	movs	r3, #0
 8010b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	6003      	str	r3, [r0, #0]
 8010b8e:	f04f 0900 	mov.w	r9, #0
 8010b92:	07eb      	lsls	r3, r5, #31
 8010b94:	d50a      	bpl.n	8010bac <__pow5mult+0x84>
 8010b96:	4631      	mov	r1, r6
 8010b98:	4622      	mov	r2, r4
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	f7ff ff1a 	bl	80109d4 <__multiply>
 8010ba0:	4631      	mov	r1, r6
 8010ba2:	4680      	mov	r8, r0
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	f7ff fe4b 	bl	8010840 <_Bfree>
 8010baa:	4646      	mov	r6, r8
 8010bac:	106d      	asrs	r5, r5, #1
 8010bae:	d00b      	beq.n	8010bc8 <__pow5mult+0xa0>
 8010bb0:	6820      	ldr	r0, [r4, #0]
 8010bb2:	b938      	cbnz	r0, 8010bc4 <__pow5mult+0x9c>
 8010bb4:	4622      	mov	r2, r4
 8010bb6:	4621      	mov	r1, r4
 8010bb8:	4638      	mov	r0, r7
 8010bba:	f7ff ff0b 	bl	80109d4 <__multiply>
 8010bbe:	6020      	str	r0, [r4, #0]
 8010bc0:	f8c0 9000 	str.w	r9, [r0]
 8010bc4:	4604      	mov	r4, r0
 8010bc6:	e7e4      	b.n	8010b92 <__pow5mult+0x6a>
 8010bc8:	4630      	mov	r0, r6
 8010bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bce:	bf00      	nop
 8010bd0:	080131d4 	.word	0x080131d4
 8010bd4:	080130fa 	.word	0x080130fa
 8010bd8:	0801317a 	.word	0x0801317a

08010bdc <__lshift>:
 8010bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010be0:	460c      	mov	r4, r1
 8010be2:	6849      	ldr	r1, [r1, #4]
 8010be4:	6923      	ldr	r3, [r4, #16]
 8010be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010bea:	68a3      	ldr	r3, [r4, #8]
 8010bec:	4607      	mov	r7, r0
 8010bee:	4691      	mov	r9, r2
 8010bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010bf4:	f108 0601 	add.w	r6, r8, #1
 8010bf8:	42b3      	cmp	r3, r6
 8010bfa:	db0b      	blt.n	8010c14 <__lshift+0x38>
 8010bfc:	4638      	mov	r0, r7
 8010bfe:	f7ff fddf 	bl	80107c0 <_Balloc>
 8010c02:	4605      	mov	r5, r0
 8010c04:	b948      	cbnz	r0, 8010c1a <__lshift+0x3e>
 8010c06:	4602      	mov	r2, r0
 8010c08:	4b28      	ldr	r3, [pc, #160]	@ (8010cac <__lshift+0xd0>)
 8010c0a:	4829      	ldr	r0, [pc, #164]	@ (8010cb0 <__lshift+0xd4>)
 8010c0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010c10:	f000 fd8e 	bl	8011730 <__assert_func>
 8010c14:	3101      	adds	r1, #1
 8010c16:	005b      	lsls	r3, r3, #1
 8010c18:	e7ee      	b.n	8010bf8 <__lshift+0x1c>
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	f100 0114 	add.w	r1, r0, #20
 8010c20:	f100 0210 	add.w	r2, r0, #16
 8010c24:	4618      	mov	r0, r3
 8010c26:	4553      	cmp	r3, sl
 8010c28:	db33      	blt.n	8010c92 <__lshift+0xb6>
 8010c2a:	6920      	ldr	r0, [r4, #16]
 8010c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010c30:	f104 0314 	add.w	r3, r4, #20
 8010c34:	f019 091f 	ands.w	r9, r9, #31
 8010c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010c40:	d02b      	beq.n	8010c9a <__lshift+0xbe>
 8010c42:	f1c9 0e20 	rsb	lr, r9, #32
 8010c46:	468a      	mov	sl, r1
 8010c48:	2200      	movs	r2, #0
 8010c4a:	6818      	ldr	r0, [r3, #0]
 8010c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8010c50:	4310      	orrs	r0, r2
 8010c52:	f84a 0b04 	str.w	r0, [sl], #4
 8010c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c5a:	459c      	cmp	ip, r3
 8010c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010c60:	d8f3      	bhi.n	8010c4a <__lshift+0x6e>
 8010c62:	ebac 0304 	sub.w	r3, ip, r4
 8010c66:	3b15      	subs	r3, #21
 8010c68:	f023 0303 	bic.w	r3, r3, #3
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	f104 0015 	add.w	r0, r4, #21
 8010c72:	4584      	cmp	ip, r0
 8010c74:	bf38      	it	cc
 8010c76:	2304      	movcc	r3, #4
 8010c78:	50ca      	str	r2, [r1, r3]
 8010c7a:	b10a      	cbz	r2, 8010c80 <__lshift+0xa4>
 8010c7c:	f108 0602 	add.w	r6, r8, #2
 8010c80:	3e01      	subs	r6, #1
 8010c82:	4638      	mov	r0, r7
 8010c84:	612e      	str	r6, [r5, #16]
 8010c86:	4621      	mov	r1, r4
 8010c88:	f7ff fdda 	bl	8010840 <_Bfree>
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c96:	3301      	adds	r3, #1
 8010c98:	e7c5      	b.n	8010c26 <__lshift+0x4a>
 8010c9a:	3904      	subs	r1, #4
 8010c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ca0:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ca4:	459c      	cmp	ip, r3
 8010ca6:	d8f9      	bhi.n	8010c9c <__lshift+0xc0>
 8010ca8:	e7ea      	b.n	8010c80 <__lshift+0xa4>
 8010caa:	bf00      	nop
 8010cac:	08013169 	.word	0x08013169
 8010cb0:	0801317a 	.word	0x0801317a

08010cb4 <__mcmp>:
 8010cb4:	690a      	ldr	r2, [r1, #16]
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	6900      	ldr	r0, [r0, #16]
 8010cba:	1a80      	subs	r0, r0, r2
 8010cbc:	b530      	push	{r4, r5, lr}
 8010cbe:	d10e      	bne.n	8010cde <__mcmp+0x2a>
 8010cc0:	3314      	adds	r3, #20
 8010cc2:	3114      	adds	r1, #20
 8010cc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010cc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010cd4:	4295      	cmp	r5, r2
 8010cd6:	d003      	beq.n	8010ce0 <__mcmp+0x2c>
 8010cd8:	d205      	bcs.n	8010ce6 <__mcmp+0x32>
 8010cda:	f04f 30ff 	mov.w	r0, #4294967295
 8010cde:	bd30      	pop	{r4, r5, pc}
 8010ce0:	42a3      	cmp	r3, r4
 8010ce2:	d3f3      	bcc.n	8010ccc <__mcmp+0x18>
 8010ce4:	e7fb      	b.n	8010cde <__mcmp+0x2a>
 8010ce6:	2001      	movs	r0, #1
 8010ce8:	e7f9      	b.n	8010cde <__mcmp+0x2a>
	...

08010cec <__mdiff>:
 8010cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf0:	4689      	mov	r9, r1
 8010cf2:	4606      	mov	r6, r0
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	4648      	mov	r0, r9
 8010cf8:	4614      	mov	r4, r2
 8010cfa:	f7ff ffdb 	bl	8010cb4 <__mcmp>
 8010cfe:	1e05      	subs	r5, r0, #0
 8010d00:	d112      	bne.n	8010d28 <__mdiff+0x3c>
 8010d02:	4629      	mov	r1, r5
 8010d04:	4630      	mov	r0, r6
 8010d06:	f7ff fd5b 	bl	80107c0 <_Balloc>
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	b928      	cbnz	r0, 8010d1a <__mdiff+0x2e>
 8010d0e:	4b3f      	ldr	r3, [pc, #252]	@ (8010e0c <__mdiff+0x120>)
 8010d10:	f240 2137 	movw	r1, #567	@ 0x237
 8010d14:	483e      	ldr	r0, [pc, #248]	@ (8010e10 <__mdiff+0x124>)
 8010d16:	f000 fd0b 	bl	8011730 <__assert_func>
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010d20:	4610      	mov	r0, r2
 8010d22:	b003      	add	sp, #12
 8010d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d28:	bfbc      	itt	lt
 8010d2a:	464b      	movlt	r3, r9
 8010d2c:	46a1      	movlt	r9, r4
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010d34:	bfba      	itte	lt
 8010d36:	461c      	movlt	r4, r3
 8010d38:	2501      	movlt	r5, #1
 8010d3a:	2500      	movge	r5, #0
 8010d3c:	f7ff fd40 	bl	80107c0 <_Balloc>
 8010d40:	4602      	mov	r2, r0
 8010d42:	b918      	cbnz	r0, 8010d4c <__mdiff+0x60>
 8010d44:	4b31      	ldr	r3, [pc, #196]	@ (8010e0c <__mdiff+0x120>)
 8010d46:	f240 2145 	movw	r1, #581	@ 0x245
 8010d4a:	e7e3      	b.n	8010d14 <__mdiff+0x28>
 8010d4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010d50:	6926      	ldr	r6, [r4, #16]
 8010d52:	60c5      	str	r5, [r0, #12]
 8010d54:	f109 0310 	add.w	r3, r9, #16
 8010d58:	f109 0514 	add.w	r5, r9, #20
 8010d5c:	f104 0e14 	add.w	lr, r4, #20
 8010d60:	f100 0b14 	add.w	fp, r0, #20
 8010d64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010d68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010d6c:	9301      	str	r3, [sp, #4]
 8010d6e:	46d9      	mov	r9, fp
 8010d70:	f04f 0c00 	mov.w	ip, #0
 8010d74:	9b01      	ldr	r3, [sp, #4]
 8010d76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010d7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010d7e:	9301      	str	r3, [sp, #4]
 8010d80:	fa1f f38a 	uxth.w	r3, sl
 8010d84:	4619      	mov	r1, r3
 8010d86:	b283      	uxth	r3, r0
 8010d88:	1acb      	subs	r3, r1, r3
 8010d8a:	0c00      	lsrs	r0, r0, #16
 8010d8c:	4463      	add	r3, ip
 8010d8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010d92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010d9c:	4576      	cmp	r6, lr
 8010d9e:	f849 3b04 	str.w	r3, [r9], #4
 8010da2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010da6:	d8e5      	bhi.n	8010d74 <__mdiff+0x88>
 8010da8:	1b33      	subs	r3, r6, r4
 8010daa:	3b15      	subs	r3, #21
 8010dac:	f023 0303 	bic.w	r3, r3, #3
 8010db0:	3415      	adds	r4, #21
 8010db2:	3304      	adds	r3, #4
 8010db4:	42a6      	cmp	r6, r4
 8010db6:	bf38      	it	cc
 8010db8:	2304      	movcc	r3, #4
 8010dba:	441d      	add	r5, r3
 8010dbc:	445b      	add	r3, fp
 8010dbe:	461e      	mov	r6, r3
 8010dc0:	462c      	mov	r4, r5
 8010dc2:	4544      	cmp	r4, r8
 8010dc4:	d30e      	bcc.n	8010de4 <__mdiff+0xf8>
 8010dc6:	f108 0103 	add.w	r1, r8, #3
 8010dca:	1b49      	subs	r1, r1, r5
 8010dcc:	f021 0103 	bic.w	r1, r1, #3
 8010dd0:	3d03      	subs	r5, #3
 8010dd2:	45a8      	cmp	r8, r5
 8010dd4:	bf38      	it	cc
 8010dd6:	2100      	movcc	r1, #0
 8010dd8:	440b      	add	r3, r1
 8010dda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010dde:	b191      	cbz	r1, 8010e06 <__mdiff+0x11a>
 8010de0:	6117      	str	r7, [r2, #16]
 8010de2:	e79d      	b.n	8010d20 <__mdiff+0x34>
 8010de4:	f854 1b04 	ldr.w	r1, [r4], #4
 8010de8:	46e6      	mov	lr, ip
 8010dea:	0c08      	lsrs	r0, r1, #16
 8010dec:	fa1c fc81 	uxtah	ip, ip, r1
 8010df0:	4471      	add	r1, lr
 8010df2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010df6:	b289      	uxth	r1, r1
 8010df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010dfc:	f846 1b04 	str.w	r1, [r6], #4
 8010e00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010e04:	e7dd      	b.n	8010dc2 <__mdiff+0xd6>
 8010e06:	3f01      	subs	r7, #1
 8010e08:	e7e7      	b.n	8010dda <__mdiff+0xee>
 8010e0a:	bf00      	nop
 8010e0c:	08013169 	.word	0x08013169
 8010e10:	0801317a 	.word	0x0801317a

08010e14 <__d2b>:
 8010e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e18:	460f      	mov	r7, r1
 8010e1a:	2101      	movs	r1, #1
 8010e1c:	ec59 8b10 	vmov	r8, r9, d0
 8010e20:	4616      	mov	r6, r2
 8010e22:	f7ff fccd 	bl	80107c0 <_Balloc>
 8010e26:	4604      	mov	r4, r0
 8010e28:	b930      	cbnz	r0, 8010e38 <__d2b+0x24>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	4b23      	ldr	r3, [pc, #140]	@ (8010ebc <__d2b+0xa8>)
 8010e2e:	4824      	ldr	r0, [pc, #144]	@ (8010ec0 <__d2b+0xac>)
 8010e30:	f240 310f 	movw	r1, #783	@ 0x30f
 8010e34:	f000 fc7c 	bl	8011730 <__assert_func>
 8010e38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010e3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010e40:	b10d      	cbz	r5, 8010e46 <__d2b+0x32>
 8010e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010e46:	9301      	str	r3, [sp, #4]
 8010e48:	f1b8 0300 	subs.w	r3, r8, #0
 8010e4c:	d023      	beq.n	8010e96 <__d2b+0x82>
 8010e4e:	4668      	mov	r0, sp
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	f7ff fd7c 	bl	801094e <__lo0bits>
 8010e56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010e5a:	b1d0      	cbz	r0, 8010e92 <__d2b+0x7e>
 8010e5c:	f1c0 0320 	rsb	r3, r0, #32
 8010e60:	fa02 f303 	lsl.w	r3, r2, r3
 8010e64:	430b      	orrs	r3, r1
 8010e66:	40c2      	lsrs	r2, r0
 8010e68:	6163      	str	r3, [r4, #20]
 8010e6a:	9201      	str	r2, [sp, #4]
 8010e6c:	9b01      	ldr	r3, [sp, #4]
 8010e6e:	61a3      	str	r3, [r4, #24]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	bf0c      	ite	eq
 8010e74:	2201      	moveq	r2, #1
 8010e76:	2202      	movne	r2, #2
 8010e78:	6122      	str	r2, [r4, #16]
 8010e7a:	b1a5      	cbz	r5, 8010ea6 <__d2b+0x92>
 8010e7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010e80:	4405      	add	r5, r0
 8010e82:	603d      	str	r5, [r7, #0]
 8010e84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010e88:	6030      	str	r0, [r6, #0]
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	b003      	add	sp, #12
 8010e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e92:	6161      	str	r1, [r4, #20]
 8010e94:	e7ea      	b.n	8010e6c <__d2b+0x58>
 8010e96:	a801      	add	r0, sp, #4
 8010e98:	f7ff fd59 	bl	801094e <__lo0bits>
 8010e9c:	9b01      	ldr	r3, [sp, #4]
 8010e9e:	6163      	str	r3, [r4, #20]
 8010ea0:	3020      	adds	r0, #32
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	e7e8      	b.n	8010e78 <__d2b+0x64>
 8010ea6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010eaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010eae:	6038      	str	r0, [r7, #0]
 8010eb0:	6918      	ldr	r0, [r3, #16]
 8010eb2:	f7ff fd2d 	bl	8010910 <__hi0bits>
 8010eb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010eba:	e7e5      	b.n	8010e88 <__d2b+0x74>
 8010ebc:	08013169 	.word	0x08013169
 8010ec0:	0801317a 	.word	0x0801317a

08010ec4 <__ssputs_r>:
 8010ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ec8:	688e      	ldr	r6, [r1, #8]
 8010eca:	461f      	mov	r7, r3
 8010ecc:	42be      	cmp	r6, r7
 8010ece:	680b      	ldr	r3, [r1, #0]
 8010ed0:	4682      	mov	sl, r0
 8010ed2:	460c      	mov	r4, r1
 8010ed4:	4690      	mov	r8, r2
 8010ed6:	d82d      	bhi.n	8010f34 <__ssputs_r+0x70>
 8010ed8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010edc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010ee0:	d026      	beq.n	8010f30 <__ssputs_r+0x6c>
 8010ee2:	6965      	ldr	r5, [r4, #20]
 8010ee4:	6909      	ldr	r1, [r1, #16]
 8010ee6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010eea:	eba3 0901 	sub.w	r9, r3, r1
 8010eee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ef2:	1c7b      	adds	r3, r7, #1
 8010ef4:	444b      	add	r3, r9
 8010ef6:	106d      	asrs	r5, r5, #1
 8010ef8:	429d      	cmp	r5, r3
 8010efa:	bf38      	it	cc
 8010efc:	461d      	movcc	r5, r3
 8010efe:	0553      	lsls	r3, r2, #21
 8010f00:	d527      	bpl.n	8010f52 <__ssputs_r+0x8e>
 8010f02:	4629      	mov	r1, r5
 8010f04:	f7ff fbd0 	bl	80106a8 <_malloc_r>
 8010f08:	4606      	mov	r6, r0
 8010f0a:	b360      	cbz	r0, 8010f66 <__ssputs_r+0xa2>
 8010f0c:	6921      	ldr	r1, [r4, #16]
 8010f0e:	464a      	mov	r2, r9
 8010f10:	f7fe fcf9 	bl	800f906 <memcpy>
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f1e:	81a3      	strh	r3, [r4, #12]
 8010f20:	6126      	str	r6, [r4, #16]
 8010f22:	6165      	str	r5, [r4, #20]
 8010f24:	444e      	add	r6, r9
 8010f26:	eba5 0509 	sub.w	r5, r5, r9
 8010f2a:	6026      	str	r6, [r4, #0]
 8010f2c:	60a5      	str	r5, [r4, #8]
 8010f2e:	463e      	mov	r6, r7
 8010f30:	42be      	cmp	r6, r7
 8010f32:	d900      	bls.n	8010f36 <__ssputs_r+0x72>
 8010f34:	463e      	mov	r6, r7
 8010f36:	6820      	ldr	r0, [r4, #0]
 8010f38:	4632      	mov	r2, r6
 8010f3a:	4641      	mov	r1, r8
 8010f3c:	f000 fb9e 	bl	801167c <memmove>
 8010f40:	68a3      	ldr	r3, [r4, #8]
 8010f42:	1b9b      	subs	r3, r3, r6
 8010f44:	60a3      	str	r3, [r4, #8]
 8010f46:	6823      	ldr	r3, [r4, #0]
 8010f48:	4433      	add	r3, r6
 8010f4a:	6023      	str	r3, [r4, #0]
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f52:	462a      	mov	r2, r5
 8010f54:	f000 fc30 	bl	80117b8 <_realloc_r>
 8010f58:	4606      	mov	r6, r0
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d1e0      	bne.n	8010f20 <__ssputs_r+0x5c>
 8010f5e:	6921      	ldr	r1, [r4, #16]
 8010f60:	4650      	mov	r0, sl
 8010f62:	f7ff fb2d 	bl	80105c0 <_free_r>
 8010f66:	230c      	movs	r3, #12
 8010f68:	f8ca 3000 	str.w	r3, [sl]
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f72:	81a3      	strh	r3, [r4, #12]
 8010f74:	f04f 30ff 	mov.w	r0, #4294967295
 8010f78:	e7e9      	b.n	8010f4e <__ssputs_r+0x8a>
	...

08010f7c <_svfiprintf_r>:
 8010f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f80:	4698      	mov	r8, r3
 8010f82:	898b      	ldrh	r3, [r1, #12]
 8010f84:	061b      	lsls	r3, r3, #24
 8010f86:	b09d      	sub	sp, #116	@ 0x74
 8010f88:	4607      	mov	r7, r0
 8010f8a:	460d      	mov	r5, r1
 8010f8c:	4614      	mov	r4, r2
 8010f8e:	d510      	bpl.n	8010fb2 <_svfiprintf_r+0x36>
 8010f90:	690b      	ldr	r3, [r1, #16]
 8010f92:	b973      	cbnz	r3, 8010fb2 <_svfiprintf_r+0x36>
 8010f94:	2140      	movs	r1, #64	@ 0x40
 8010f96:	f7ff fb87 	bl	80106a8 <_malloc_r>
 8010f9a:	6028      	str	r0, [r5, #0]
 8010f9c:	6128      	str	r0, [r5, #16]
 8010f9e:	b930      	cbnz	r0, 8010fae <_svfiprintf_r+0x32>
 8010fa0:	230c      	movs	r3, #12
 8010fa2:	603b      	str	r3, [r7, #0]
 8010fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fa8:	b01d      	add	sp, #116	@ 0x74
 8010faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	2340      	movs	r3, #64	@ 0x40
 8010fb0:	616b      	str	r3, [r5, #20]
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fb6:	2320      	movs	r3, #32
 8010fb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fc0:	2330      	movs	r3, #48	@ 0x30
 8010fc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011160 <_svfiprintf_r+0x1e4>
 8010fc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010fca:	f04f 0901 	mov.w	r9, #1
 8010fce:	4623      	mov	r3, r4
 8010fd0:	469a      	mov	sl, r3
 8010fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fd6:	b10a      	cbz	r2, 8010fdc <_svfiprintf_r+0x60>
 8010fd8:	2a25      	cmp	r2, #37	@ 0x25
 8010fda:	d1f9      	bne.n	8010fd0 <_svfiprintf_r+0x54>
 8010fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8010fe0:	d00b      	beq.n	8010ffa <_svfiprintf_r+0x7e>
 8010fe2:	465b      	mov	r3, fp
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	4638      	mov	r0, r7
 8010fea:	f7ff ff6b 	bl	8010ec4 <__ssputs_r>
 8010fee:	3001      	adds	r0, #1
 8010ff0:	f000 80a7 	beq.w	8011142 <_svfiprintf_r+0x1c6>
 8010ff4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010ff6:	445a      	add	r2, fp
 8010ff8:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 809f 	beq.w	8011142 <_svfiprintf_r+0x1c6>
 8011004:	2300      	movs	r3, #0
 8011006:	f04f 32ff 	mov.w	r2, #4294967295
 801100a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801100e:	f10a 0a01 	add.w	sl, sl, #1
 8011012:	9304      	str	r3, [sp, #16]
 8011014:	9307      	str	r3, [sp, #28]
 8011016:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801101a:	931a      	str	r3, [sp, #104]	@ 0x68
 801101c:	4654      	mov	r4, sl
 801101e:	2205      	movs	r2, #5
 8011020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011024:	484e      	ldr	r0, [pc, #312]	@ (8011160 <_svfiprintf_r+0x1e4>)
 8011026:	f7ef f8ab 	bl	8000180 <memchr>
 801102a:	9a04      	ldr	r2, [sp, #16]
 801102c:	b9d8      	cbnz	r0, 8011066 <_svfiprintf_r+0xea>
 801102e:	06d0      	lsls	r0, r2, #27
 8011030:	bf44      	itt	mi
 8011032:	2320      	movmi	r3, #32
 8011034:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011038:	0711      	lsls	r1, r2, #28
 801103a:	bf44      	itt	mi
 801103c:	232b      	movmi	r3, #43	@ 0x2b
 801103e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011042:	f89a 3000 	ldrb.w	r3, [sl]
 8011046:	2b2a      	cmp	r3, #42	@ 0x2a
 8011048:	d015      	beq.n	8011076 <_svfiprintf_r+0xfa>
 801104a:	9a07      	ldr	r2, [sp, #28]
 801104c:	4654      	mov	r4, sl
 801104e:	2000      	movs	r0, #0
 8011050:	f04f 0c0a 	mov.w	ip, #10
 8011054:	4621      	mov	r1, r4
 8011056:	f811 3b01 	ldrb.w	r3, [r1], #1
 801105a:	3b30      	subs	r3, #48	@ 0x30
 801105c:	2b09      	cmp	r3, #9
 801105e:	d94b      	bls.n	80110f8 <_svfiprintf_r+0x17c>
 8011060:	b1b0      	cbz	r0, 8011090 <_svfiprintf_r+0x114>
 8011062:	9207      	str	r2, [sp, #28]
 8011064:	e014      	b.n	8011090 <_svfiprintf_r+0x114>
 8011066:	eba0 0308 	sub.w	r3, r0, r8
 801106a:	fa09 f303 	lsl.w	r3, r9, r3
 801106e:	4313      	orrs	r3, r2
 8011070:	9304      	str	r3, [sp, #16]
 8011072:	46a2      	mov	sl, r4
 8011074:	e7d2      	b.n	801101c <_svfiprintf_r+0xa0>
 8011076:	9b03      	ldr	r3, [sp, #12]
 8011078:	1d19      	adds	r1, r3, #4
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	9103      	str	r1, [sp, #12]
 801107e:	2b00      	cmp	r3, #0
 8011080:	bfbb      	ittet	lt
 8011082:	425b      	neglt	r3, r3
 8011084:	f042 0202 	orrlt.w	r2, r2, #2
 8011088:	9307      	strge	r3, [sp, #28]
 801108a:	9307      	strlt	r3, [sp, #28]
 801108c:	bfb8      	it	lt
 801108e:	9204      	strlt	r2, [sp, #16]
 8011090:	7823      	ldrb	r3, [r4, #0]
 8011092:	2b2e      	cmp	r3, #46	@ 0x2e
 8011094:	d10a      	bne.n	80110ac <_svfiprintf_r+0x130>
 8011096:	7863      	ldrb	r3, [r4, #1]
 8011098:	2b2a      	cmp	r3, #42	@ 0x2a
 801109a:	d132      	bne.n	8011102 <_svfiprintf_r+0x186>
 801109c:	9b03      	ldr	r3, [sp, #12]
 801109e:	1d1a      	adds	r2, r3, #4
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	9203      	str	r2, [sp, #12]
 80110a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110a8:	3402      	adds	r4, #2
 80110aa:	9305      	str	r3, [sp, #20]
 80110ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011170 <_svfiprintf_r+0x1f4>
 80110b0:	7821      	ldrb	r1, [r4, #0]
 80110b2:	2203      	movs	r2, #3
 80110b4:	4650      	mov	r0, sl
 80110b6:	f7ef f863 	bl	8000180 <memchr>
 80110ba:	b138      	cbz	r0, 80110cc <_svfiprintf_r+0x150>
 80110bc:	9b04      	ldr	r3, [sp, #16]
 80110be:	eba0 000a 	sub.w	r0, r0, sl
 80110c2:	2240      	movs	r2, #64	@ 0x40
 80110c4:	4082      	lsls	r2, r0
 80110c6:	4313      	orrs	r3, r2
 80110c8:	3401      	adds	r4, #1
 80110ca:	9304      	str	r3, [sp, #16]
 80110cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110d0:	4824      	ldr	r0, [pc, #144]	@ (8011164 <_svfiprintf_r+0x1e8>)
 80110d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80110d6:	2206      	movs	r2, #6
 80110d8:	f7ef f852 	bl	8000180 <memchr>
 80110dc:	2800      	cmp	r0, #0
 80110de:	d036      	beq.n	801114e <_svfiprintf_r+0x1d2>
 80110e0:	4b21      	ldr	r3, [pc, #132]	@ (8011168 <_svfiprintf_r+0x1ec>)
 80110e2:	bb1b      	cbnz	r3, 801112c <_svfiprintf_r+0x1b0>
 80110e4:	9b03      	ldr	r3, [sp, #12]
 80110e6:	3307      	adds	r3, #7
 80110e8:	f023 0307 	bic.w	r3, r3, #7
 80110ec:	3308      	adds	r3, #8
 80110ee:	9303      	str	r3, [sp, #12]
 80110f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110f2:	4433      	add	r3, r6
 80110f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80110f6:	e76a      	b.n	8010fce <_svfiprintf_r+0x52>
 80110f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80110fc:	460c      	mov	r4, r1
 80110fe:	2001      	movs	r0, #1
 8011100:	e7a8      	b.n	8011054 <_svfiprintf_r+0xd8>
 8011102:	2300      	movs	r3, #0
 8011104:	3401      	adds	r4, #1
 8011106:	9305      	str	r3, [sp, #20]
 8011108:	4619      	mov	r1, r3
 801110a:	f04f 0c0a 	mov.w	ip, #10
 801110e:	4620      	mov	r0, r4
 8011110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011114:	3a30      	subs	r2, #48	@ 0x30
 8011116:	2a09      	cmp	r2, #9
 8011118:	d903      	bls.n	8011122 <_svfiprintf_r+0x1a6>
 801111a:	2b00      	cmp	r3, #0
 801111c:	d0c6      	beq.n	80110ac <_svfiprintf_r+0x130>
 801111e:	9105      	str	r1, [sp, #20]
 8011120:	e7c4      	b.n	80110ac <_svfiprintf_r+0x130>
 8011122:	fb0c 2101 	mla	r1, ip, r1, r2
 8011126:	4604      	mov	r4, r0
 8011128:	2301      	movs	r3, #1
 801112a:	e7f0      	b.n	801110e <_svfiprintf_r+0x192>
 801112c:	ab03      	add	r3, sp, #12
 801112e:	9300      	str	r3, [sp, #0]
 8011130:	462a      	mov	r2, r5
 8011132:	4b0e      	ldr	r3, [pc, #56]	@ (801116c <_svfiprintf_r+0x1f0>)
 8011134:	a904      	add	r1, sp, #16
 8011136:	4638      	mov	r0, r7
 8011138:	f7fd fd52 	bl	800ebe0 <_printf_float>
 801113c:	1c42      	adds	r2, r0, #1
 801113e:	4606      	mov	r6, r0
 8011140:	d1d6      	bne.n	80110f0 <_svfiprintf_r+0x174>
 8011142:	89ab      	ldrh	r3, [r5, #12]
 8011144:	065b      	lsls	r3, r3, #25
 8011146:	f53f af2d 	bmi.w	8010fa4 <_svfiprintf_r+0x28>
 801114a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801114c:	e72c      	b.n	8010fa8 <_svfiprintf_r+0x2c>
 801114e:	ab03      	add	r3, sp, #12
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	462a      	mov	r2, r5
 8011154:	4b05      	ldr	r3, [pc, #20]	@ (801116c <_svfiprintf_r+0x1f0>)
 8011156:	a904      	add	r1, sp, #16
 8011158:	4638      	mov	r0, r7
 801115a:	f7fd ffd9 	bl	800f110 <_printf_i>
 801115e:	e7ed      	b.n	801113c <_svfiprintf_r+0x1c0>
 8011160:	080132d0 	.word	0x080132d0
 8011164:	080132da 	.word	0x080132da
 8011168:	0800ebe1 	.word	0x0800ebe1
 801116c:	08010ec5 	.word	0x08010ec5
 8011170:	080132d6 	.word	0x080132d6

08011174 <__sfputc_r>:
 8011174:	6893      	ldr	r3, [r2, #8]
 8011176:	3b01      	subs	r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	b410      	push	{r4}
 801117c:	6093      	str	r3, [r2, #8]
 801117e:	da08      	bge.n	8011192 <__sfputc_r+0x1e>
 8011180:	6994      	ldr	r4, [r2, #24]
 8011182:	42a3      	cmp	r3, r4
 8011184:	db01      	blt.n	801118a <__sfputc_r+0x16>
 8011186:	290a      	cmp	r1, #10
 8011188:	d103      	bne.n	8011192 <__sfputc_r+0x1e>
 801118a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801118e:	f7fe ba90 	b.w	800f6b2 <__swbuf_r>
 8011192:	6813      	ldr	r3, [r2, #0]
 8011194:	1c58      	adds	r0, r3, #1
 8011196:	6010      	str	r0, [r2, #0]
 8011198:	7019      	strb	r1, [r3, #0]
 801119a:	4608      	mov	r0, r1
 801119c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80111a0:	4770      	bx	lr

080111a2 <__sfputs_r>:
 80111a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111a4:	4606      	mov	r6, r0
 80111a6:	460f      	mov	r7, r1
 80111a8:	4614      	mov	r4, r2
 80111aa:	18d5      	adds	r5, r2, r3
 80111ac:	42ac      	cmp	r4, r5
 80111ae:	d101      	bne.n	80111b4 <__sfputs_r+0x12>
 80111b0:	2000      	movs	r0, #0
 80111b2:	e007      	b.n	80111c4 <__sfputs_r+0x22>
 80111b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111b8:	463a      	mov	r2, r7
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ff ffda 	bl	8011174 <__sfputc_r>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d1f3      	bne.n	80111ac <__sfputs_r+0xa>
 80111c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080111c8 <_vfiprintf_r>:
 80111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111cc:	460d      	mov	r5, r1
 80111ce:	b09d      	sub	sp, #116	@ 0x74
 80111d0:	4614      	mov	r4, r2
 80111d2:	4698      	mov	r8, r3
 80111d4:	4606      	mov	r6, r0
 80111d6:	b118      	cbz	r0, 80111e0 <_vfiprintf_r+0x18>
 80111d8:	6a03      	ldr	r3, [r0, #32]
 80111da:	b90b      	cbnz	r3, 80111e0 <_vfiprintf_r+0x18>
 80111dc:	f7fe f944 	bl	800f468 <__sinit>
 80111e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80111e2:	07d9      	lsls	r1, r3, #31
 80111e4:	d405      	bmi.n	80111f2 <_vfiprintf_r+0x2a>
 80111e6:	89ab      	ldrh	r3, [r5, #12]
 80111e8:	059a      	lsls	r2, r3, #22
 80111ea:	d402      	bmi.n	80111f2 <_vfiprintf_r+0x2a>
 80111ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80111ee:	f7fe fb88 	bl	800f902 <__retarget_lock_acquire_recursive>
 80111f2:	89ab      	ldrh	r3, [r5, #12]
 80111f4:	071b      	lsls	r3, r3, #28
 80111f6:	d501      	bpl.n	80111fc <_vfiprintf_r+0x34>
 80111f8:	692b      	ldr	r3, [r5, #16]
 80111fa:	b99b      	cbnz	r3, 8011224 <_vfiprintf_r+0x5c>
 80111fc:	4629      	mov	r1, r5
 80111fe:	4630      	mov	r0, r6
 8011200:	f7fe fa96 	bl	800f730 <__swsetup_r>
 8011204:	b170      	cbz	r0, 8011224 <_vfiprintf_r+0x5c>
 8011206:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011208:	07dc      	lsls	r4, r3, #31
 801120a:	d504      	bpl.n	8011216 <_vfiprintf_r+0x4e>
 801120c:	f04f 30ff 	mov.w	r0, #4294967295
 8011210:	b01d      	add	sp, #116	@ 0x74
 8011212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011216:	89ab      	ldrh	r3, [r5, #12]
 8011218:	0598      	lsls	r0, r3, #22
 801121a:	d4f7      	bmi.n	801120c <_vfiprintf_r+0x44>
 801121c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801121e:	f7fe fb71 	bl	800f904 <__retarget_lock_release_recursive>
 8011222:	e7f3      	b.n	801120c <_vfiprintf_r+0x44>
 8011224:	2300      	movs	r3, #0
 8011226:	9309      	str	r3, [sp, #36]	@ 0x24
 8011228:	2320      	movs	r3, #32
 801122a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801122e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011232:	2330      	movs	r3, #48	@ 0x30
 8011234:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80113e4 <_vfiprintf_r+0x21c>
 8011238:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801123c:	f04f 0901 	mov.w	r9, #1
 8011240:	4623      	mov	r3, r4
 8011242:	469a      	mov	sl, r3
 8011244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011248:	b10a      	cbz	r2, 801124e <_vfiprintf_r+0x86>
 801124a:	2a25      	cmp	r2, #37	@ 0x25
 801124c:	d1f9      	bne.n	8011242 <_vfiprintf_r+0x7a>
 801124e:	ebba 0b04 	subs.w	fp, sl, r4
 8011252:	d00b      	beq.n	801126c <_vfiprintf_r+0xa4>
 8011254:	465b      	mov	r3, fp
 8011256:	4622      	mov	r2, r4
 8011258:	4629      	mov	r1, r5
 801125a:	4630      	mov	r0, r6
 801125c:	f7ff ffa1 	bl	80111a2 <__sfputs_r>
 8011260:	3001      	adds	r0, #1
 8011262:	f000 80a7 	beq.w	80113b4 <_vfiprintf_r+0x1ec>
 8011266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011268:	445a      	add	r2, fp
 801126a:	9209      	str	r2, [sp, #36]	@ 0x24
 801126c:	f89a 3000 	ldrb.w	r3, [sl]
 8011270:	2b00      	cmp	r3, #0
 8011272:	f000 809f 	beq.w	80113b4 <_vfiprintf_r+0x1ec>
 8011276:	2300      	movs	r3, #0
 8011278:	f04f 32ff 	mov.w	r2, #4294967295
 801127c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011280:	f10a 0a01 	add.w	sl, sl, #1
 8011284:	9304      	str	r3, [sp, #16]
 8011286:	9307      	str	r3, [sp, #28]
 8011288:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801128c:	931a      	str	r3, [sp, #104]	@ 0x68
 801128e:	4654      	mov	r4, sl
 8011290:	2205      	movs	r2, #5
 8011292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011296:	4853      	ldr	r0, [pc, #332]	@ (80113e4 <_vfiprintf_r+0x21c>)
 8011298:	f7ee ff72 	bl	8000180 <memchr>
 801129c:	9a04      	ldr	r2, [sp, #16]
 801129e:	b9d8      	cbnz	r0, 80112d8 <_vfiprintf_r+0x110>
 80112a0:	06d1      	lsls	r1, r2, #27
 80112a2:	bf44      	itt	mi
 80112a4:	2320      	movmi	r3, #32
 80112a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112aa:	0713      	lsls	r3, r2, #28
 80112ac:	bf44      	itt	mi
 80112ae:	232b      	movmi	r3, #43	@ 0x2b
 80112b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112b4:	f89a 3000 	ldrb.w	r3, [sl]
 80112b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80112ba:	d015      	beq.n	80112e8 <_vfiprintf_r+0x120>
 80112bc:	9a07      	ldr	r2, [sp, #28]
 80112be:	4654      	mov	r4, sl
 80112c0:	2000      	movs	r0, #0
 80112c2:	f04f 0c0a 	mov.w	ip, #10
 80112c6:	4621      	mov	r1, r4
 80112c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112cc:	3b30      	subs	r3, #48	@ 0x30
 80112ce:	2b09      	cmp	r3, #9
 80112d0:	d94b      	bls.n	801136a <_vfiprintf_r+0x1a2>
 80112d2:	b1b0      	cbz	r0, 8011302 <_vfiprintf_r+0x13a>
 80112d4:	9207      	str	r2, [sp, #28]
 80112d6:	e014      	b.n	8011302 <_vfiprintf_r+0x13a>
 80112d8:	eba0 0308 	sub.w	r3, r0, r8
 80112dc:	fa09 f303 	lsl.w	r3, r9, r3
 80112e0:	4313      	orrs	r3, r2
 80112e2:	9304      	str	r3, [sp, #16]
 80112e4:	46a2      	mov	sl, r4
 80112e6:	e7d2      	b.n	801128e <_vfiprintf_r+0xc6>
 80112e8:	9b03      	ldr	r3, [sp, #12]
 80112ea:	1d19      	adds	r1, r3, #4
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	9103      	str	r1, [sp, #12]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	bfbb      	ittet	lt
 80112f4:	425b      	neglt	r3, r3
 80112f6:	f042 0202 	orrlt.w	r2, r2, #2
 80112fa:	9307      	strge	r3, [sp, #28]
 80112fc:	9307      	strlt	r3, [sp, #28]
 80112fe:	bfb8      	it	lt
 8011300:	9204      	strlt	r2, [sp, #16]
 8011302:	7823      	ldrb	r3, [r4, #0]
 8011304:	2b2e      	cmp	r3, #46	@ 0x2e
 8011306:	d10a      	bne.n	801131e <_vfiprintf_r+0x156>
 8011308:	7863      	ldrb	r3, [r4, #1]
 801130a:	2b2a      	cmp	r3, #42	@ 0x2a
 801130c:	d132      	bne.n	8011374 <_vfiprintf_r+0x1ac>
 801130e:	9b03      	ldr	r3, [sp, #12]
 8011310:	1d1a      	adds	r2, r3, #4
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	9203      	str	r2, [sp, #12]
 8011316:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801131a:	3402      	adds	r4, #2
 801131c:	9305      	str	r3, [sp, #20]
 801131e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80113f4 <_vfiprintf_r+0x22c>
 8011322:	7821      	ldrb	r1, [r4, #0]
 8011324:	2203      	movs	r2, #3
 8011326:	4650      	mov	r0, sl
 8011328:	f7ee ff2a 	bl	8000180 <memchr>
 801132c:	b138      	cbz	r0, 801133e <_vfiprintf_r+0x176>
 801132e:	9b04      	ldr	r3, [sp, #16]
 8011330:	eba0 000a 	sub.w	r0, r0, sl
 8011334:	2240      	movs	r2, #64	@ 0x40
 8011336:	4082      	lsls	r2, r0
 8011338:	4313      	orrs	r3, r2
 801133a:	3401      	adds	r4, #1
 801133c:	9304      	str	r3, [sp, #16]
 801133e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011342:	4829      	ldr	r0, [pc, #164]	@ (80113e8 <_vfiprintf_r+0x220>)
 8011344:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011348:	2206      	movs	r2, #6
 801134a:	f7ee ff19 	bl	8000180 <memchr>
 801134e:	2800      	cmp	r0, #0
 8011350:	d03f      	beq.n	80113d2 <_vfiprintf_r+0x20a>
 8011352:	4b26      	ldr	r3, [pc, #152]	@ (80113ec <_vfiprintf_r+0x224>)
 8011354:	bb1b      	cbnz	r3, 801139e <_vfiprintf_r+0x1d6>
 8011356:	9b03      	ldr	r3, [sp, #12]
 8011358:	3307      	adds	r3, #7
 801135a:	f023 0307 	bic.w	r3, r3, #7
 801135e:	3308      	adds	r3, #8
 8011360:	9303      	str	r3, [sp, #12]
 8011362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011364:	443b      	add	r3, r7
 8011366:	9309      	str	r3, [sp, #36]	@ 0x24
 8011368:	e76a      	b.n	8011240 <_vfiprintf_r+0x78>
 801136a:	fb0c 3202 	mla	r2, ip, r2, r3
 801136e:	460c      	mov	r4, r1
 8011370:	2001      	movs	r0, #1
 8011372:	e7a8      	b.n	80112c6 <_vfiprintf_r+0xfe>
 8011374:	2300      	movs	r3, #0
 8011376:	3401      	adds	r4, #1
 8011378:	9305      	str	r3, [sp, #20]
 801137a:	4619      	mov	r1, r3
 801137c:	f04f 0c0a 	mov.w	ip, #10
 8011380:	4620      	mov	r0, r4
 8011382:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011386:	3a30      	subs	r2, #48	@ 0x30
 8011388:	2a09      	cmp	r2, #9
 801138a:	d903      	bls.n	8011394 <_vfiprintf_r+0x1cc>
 801138c:	2b00      	cmp	r3, #0
 801138e:	d0c6      	beq.n	801131e <_vfiprintf_r+0x156>
 8011390:	9105      	str	r1, [sp, #20]
 8011392:	e7c4      	b.n	801131e <_vfiprintf_r+0x156>
 8011394:	fb0c 2101 	mla	r1, ip, r1, r2
 8011398:	4604      	mov	r4, r0
 801139a:	2301      	movs	r3, #1
 801139c:	e7f0      	b.n	8011380 <_vfiprintf_r+0x1b8>
 801139e:	ab03      	add	r3, sp, #12
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	462a      	mov	r2, r5
 80113a4:	4b12      	ldr	r3, [pc, #72]	@ (80113f0 <_vfiprintf_r+0x228>)
 80113a6:	a904      	add	r1, sp, #16
 80113a8:	4630      	mov	r0, r6
 80113aa:	f7fd fc19 	bl	800ebe0 <_printf_float>
 80113ae:	4607      	mov	r7, r0
 80113b0:	1c78      	adds	r0, r7, #1
 80113b2:	d1d6      	bne.n	8011362 <_vfiprintf_r+0x19a>
 80113b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80113b6:	07d9      	lsls	r1, r3, #31
 80113b8:	d405      	bmi.n	80113c6 <_vfiprintf_r+0x1fe>
 80113ba:	89ab      	ldrh	r3, [r5, #12]
 80113bc:	059a      	lsls	r2, r3, #22
 80113be:	d402      	bmi.n	80113c6 <_vfiprintf_r+0x1fe>
 80113c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80113c2:	f7fe fa9f 	bl	800f904 <__retarget_lock_release_recursive>
 80113c6:	89ab      	ldrh	r3, [r5, #12]
 80113c8:	065b      	lsls	r3, r3, #25
 80113ca:	f53f af1f 	bmi.w	801120c <_vfiprintf_r+0x44>
 80113ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80113d0:	e71e      	b.n	8011210 <_vfiprintf_r+0x48>
 80113d2:	ab03      	add	r3, sp, #12
 80113d4:	9300      	str	r3, [sp, #0]
 80113d6:	462a      	mov	r2, r5
 80113d8:	4b05      	ldr	r3, [pc, #20]	@ (80113f0 <_vfiprintf_r+0x228>)
 80113da:	a904      	add	r1, sp, #16
 80113dc:	4630      	mov	r0, r6
 80113de:	f7fd fe97 	bl	800f110 <_printf_i>
 80113e2:	e7e4      	b.n	80113ae <_vfiprintf_r+0x1e6>
 80113e4:	080132d0 	.word	0x080132d0
 80113e8:	080132da 	.word	0x080132da
 80113ec:	0800ebe1 	.word	0x0800ebe1
 80113f0:	080111a3 	.word	0x080111a3
 80113f4:	080132d6 	.word	0x080132d6

080113f8 <__sflush_r>:
 80113f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80113fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011400:	0716      	lsls	r6, r2, #28
 8011402:	4605      	mov	r5, r0
 8011404:	460c      	mov	r4, r1
 8011406:	d454      	bmi.n	80114b2 <__sflush_r+0xba>
 8011408:	684b      	ldr	r3, [r1, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	dc02      	bgt.n	8011414 <__sflush_r+0x1c>
 801140e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011410:	2b00      	cmp	r3, #0
 8011412:	dd48      	ble.n	80114a6 <__sflush_r+0xae>
 8011414:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011416:	2e00      	cmp	r6, #0
 8011418:	d045      	beq.n	80114a6 <__sflush_r+0xae>
 801141a:	2300      	movs	r3, #0
 801141c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011420:	682f      	ldr	r7, [r5, #0]
 8011422:	6a21      	ldr	r1, [r4, #32]
 8011424:	602b      	str	r3, [r5, #0]
 8011426:	d030      	beq.n	801148a <__sflush_r+0x92>
 8011428:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801142a:	89a3      	ldrh	r3, [r4, #12]
 801142c:	0759      	lsls	r1, r3, #29
 801142e:	d505      	bpl.n	801143c <__sflush_r+0x44>
 8011430:	6863      	ldr	r3, [r4, #4]
 8011432:	1ad2      	subs	r2, r2, r3
 8011434:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011436:	b10b      	cbz	r3, 801143c <__sflush_r+0x44>
 8011438:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801143a:	1ad2      	subs	r2, r2, r3
 801143c:	2300      	movs	r3, #0
 801143e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011440:	6a21      	ldr	r1, [r4, #32]
 8011442:	4628      	mov	r0, r5
 8011444:	47b0      	blx	r6
 8011446:	1c43      	adds	r3, r0, #1
 8011448:	89a3      	ldrh	r3, [r4, #12]
 801144a:	d106      	bne.n	801145a <__sflush_r+0x62>
 801144c:	6829      	ldr	r1, [r5, #0]
 801144e:	291d      	cmp	r1, #29
 8011450:	d82b      	bhi.n	80114aa <__sflush_r+0xb2>
 8011452:	4a2a      	ldr	r2, [pc, #168]	@ (80114fc <__sflush_r+0x104>)
 8011454:	410a      	asrs	r2, r1
 8011456:	07d6      	lsls	r6, r2, #31
 8011458:	d427      	bmi.n	80114aa <__sflush_r+0xb2>
 801145a:	2200      	movs	r2, #0
 801145c:	6062      	str	r2, [r4, #4]
 801145e:	04d9      	lsls	r1, r3, #19
 8011460:	6922      	ldr	r2, [r4, #16]
 8011462:	6022      	str	r2, [r4, #0]
 8011464:	d504      	bpl.n	8011470 <__sflush_r+0x78>
 8011466:	1c42      	adds	r2, r0, #1
 8011468:	d101      	bne.n	801146e <__sflush_r+0x76>
 801146a:	682b      	ldr	r3, [r5, #0]
 801146c:	b903      	cbnz	r3, 8011470 <__sflush_r+0x78>
 801146e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011472:	602f      	str	r7, [r5, #0]
 8011474:	b1b9      	cbz	r1, 80114a6 <__sflush_r+0xae>
 8011476:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801147a:	4299      	cmp	r1, r3
 801147c:	d002      	beq.n	8011484 <__sflush_r+0x8c>
 801147e:	4628      	mov	r0, r5
 8011480:	f7ff f89e 	bl	80105c0 <_free_r>
 8011484:	2300      	movs	r3, #0
 8011486:	6363      	str	r3, [r4, #52]	@ 0x34
 8011488:	e00d      	b.n	80114a6 <__sflush_r+0xae>
 801148a:	2301      	movs	r3, #1
 801148c:	4628      	mov	r0, r5
 801148e:	47b0      	blx	r6
 8011490:	4602      	mov	r2, r0
 8011492:	1c50      	adds	r0, r2, #1
 8011494:	d1c9      	bne.n	801142a <__sflush_r+0x32>
 8011496:	682b      	ldr	r3, [r5, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d0c6      	beq.n	801142a <__sflush_r+0x32>
 801149c:	2b1d      	cmp	r3, #29
 801149e:	d001      	beq.n	80114a4 <__sflush_r+0xac>
 80114a0:	2b16      	cmp	r3, #22
 80114a2:	d11e      	bne.n	80114e2 <__sflush_r+0xea>
 80114a4:	602f      	str	r7, [r5, #0]
 80114a6:	2000      	movs	r0, #0
 80114a8:	e022      	b.n	80114f0 <__sflush_r+0xf8>
 80114aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114ae:	b21b      	sxth	r3, r3
 80114b0:	e01b      	b.n	80114ea <__sflush_r+0xf2>
 80114b2:	690f      	ldr	r7, [r1, #16]
 80114b4:	2f00      	cmp	r7, #0
 80114b6:	d0f6      	beq.n	80114a6 <__sflush_r+0xae>
 80114b8:	0793      	lsls	r3, r2, #30
 80114ba:	680e      	ldr	r6, [r1, #0]
 80114bc:	bf08      	it	eq
 80114be:	694b      	ldreq	r3, [r1, #20]
 80114c0:	600f      	str	r7, [r1, #0]
 80114c2:	bf18      	it	ne
 80114c4:	2300      	movne	r3, #0
 80114c6:	eba6 0807 	sub.w	r8, r6, r7
 80114ca:	608b      	str	r3, [r1, #8]
 80114cc:	f1b8 0f00 	cmp.w	r8, #0
 80114d0:	dde9      	ble.n	80114a6 <__sflush_r+0xae>
 80114d2:	6a21      	ldr	r1, [r4, #32]
 80114d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80114d6:	4643      	mov	r3, r8
 80114d8:	463a      	mov	r2, r7
 80114da:	4628      	mov	r0, r5
 80114dc:	47b0      	blx	r6
 80114de:	2800      	cmp	r0, #0
 80114e0:	dc08      	bgt.n	80114f4 <__sflush_r+0xfc>
 80114e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114ea:	81a3      	strh	r3, [r4, #12]
 80114ec:	f04f 30ff 	mov.w	r0, #4294967295
 80114f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114f4:	4407      	add	r7, r0
 80114f6:	eba8 0800 	sub.w	r8, r8, r0
 80114fa:	e7e7      	b.n	80114cc <__sflush_r+0xd4>
 80114fc:	dfbffffe 	.word	0xdfbffffe

08011500 <_fflush_r>:
 8011500:	b538      	push	{r3, r4, r5, lr}
 8011502:	690b      	ldr	r3, [r1, #16]
 8011504:	4605      	mov	r5, r0
 8011506:	460c      	mov	r4, r1
 8011508:	b913      	cbnz	r3, 8011510 <_fflush_r+0x10>
 801150a:	2500      	movs	r5, #0
 801150c:	4628      	mov	r0, r5
 801150e:	bd38      	pop	{r3, r4, r5, pc}
 8011510:	b118      	cbz	r0, 801151a <_fflush_r+0x1a>
 8011512:	6a03      	ldr	r3, [r0, #32]
 8011514:	b90b      	cbnz	r3, 801151a <_fflush_r+0x1a>
 8011516:	f7fd ffa7 	bl	800f468 <__sinit>
 801151a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d0f3      	beq.n	801150a <_fflush_r+0xa>
 8011522:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011524:	07d0      	lsls	r0, r2, #31
 8011526:	d404      	bmi.n	8011532 <_fflush_r+0x32>
 8011528:	0599      	lsls	r1, r3, #22
 801152a:	d402      	bmi.n	8011532 <_fflush_r+0x32>
 801152c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801152e:	f7fe f9e8 	bl	800f902 <__retarget_lock_acquire_recursive>
 8011532:	4628      	mov	r0, r5
 8011534:	4621      	mov	r1, r4
 8011536:	f7ff ff5f 	bl	80113f8 <__sflush_r>
 801153a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801153c:	07da      	lsls	r2, r3, #31
 801153e:	4605      	mov	r5, r0
 8011540:	d4e4      	bmi.n	801150c <_fflush_r+0xc>
 8011542:	89a3      	ldrh	r3, [r4, #12]
 8011544:	059b      	lsls	r3, r3, #22
 8011546:	d4e1      	bmi.n	801150c <_fflush_r+0xc>
 8011548:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801154a:	f7fe f9db 	bl	800f904 <__retarget_lock_release_recursive>
 801154e:	e7dd      	b.n	801150c <_fflush_r+0xc>

08011550 <__swhatbuf_r>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	460c      	mov	r4, r1
 8011554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011558:	2900      	cmp	r1, #0
 801155a:	b096      	sub	sp, #88	@ 0x58
 801155c:	4615      	mov	r5, r2
 801155e:	461e      	mov	r6, r3
 8011560:	da0d      	bge.n	801157e <__swhatbuf_r+0x2e>
 8011562:	89a3      	ldrh	r3, [r4, #12]
 8011564:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011568:	f04f 0100 	mov.w	r1, #0
 801156c:	bf14      	ite	ne
 801156e:	2340      	movne	r3, #64	@ 0x40
 8011570:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011574:	2000      	movs	r0, #0
 8011576:	6031      	str	r1, [r6, #0]
 8011578:	602b      	str	r3, [r5, #0]
 801157a:	b016      	add	sp, #88	@ 0x58
 801157c:	bd70      	pop	{r4, r5, r6, pc}
 801157e:	466a      	mov	r2, sp
 8011580:	f000 f8a4 	bl	80116cc <_fstat_r>
 8011584:	2800      	cmp	r0, #0
 8011586:	dbec      	blt.n	8011562 <__swhatbuf_r+0x12>
 8011588:	9901      	ldr	r1, [sp, #4]
 801158a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801158e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011592:	4259      	negs	r1, r3
 8011594:	4159      	adcs	r1, r3
 8011596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801159a:	e7eb      	b.n	8011574 <__swhatbuf_r+0x24>

0801159c <__smakebuf_r>:
 801159c:	898b      	ldrh	r3, [r1, #12]
 801159e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115a0:	079d      	lsls	r5, r3, #30
 80115a2:	4606      	mov	r6, r0
 80115a4:	460c      	mov	r4, r1
 80115a6:	d507      	bpl.n	80115b8 <__smakebuf_r+0x1c>
 80115a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80115ac:	6023      	str	r3, [r4, #0]
 80115ae:	6123      	str	r3, [r4, #16]
 80115b0:	2301      	movs	r3, #1
 80115b2:	6163      	str	r3, [r4, #20]
 80115b4:	b003      	add	sp, #12
 80115b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115b8:	ab01      	add	r3, sp, #4
 80115ba:	466a      	mov	r2, sp
 80115bc:	f7ff ffc8 	bl	8011550 <__swhatbuf_r>
 80115c0:	9f00      	ldr	r7, [sp, #0]
 80115c2:	4605      	mov	r5, r0
 80115c4:	4639      	mov	r1, r7
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff f86e 	bl	80106a8 <_malloc_r>
 80115cc:	b948      	cbnz	r0, 80115e2 <__smakebuf_r+0x46>
 80115ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115d2:	059a      	lsls	r2, r3, #22
 80115d4:	d4ee      	bmi.n	80115b4 <__smakebuf_r+0x18>
 80115d6:	f023 0303 	bic.w	r3, r3, #3
 80115da:	f043 0302 	orr.w	r3, r3, #2
 80115de:	81a3      	strh	r3, [r4, #12]
 80115e0:	e7e2      	b.n	80115a8 <__smakebuf_r+0xc>
 80115e2:	89a3      	ldrh	r3, [r4, #12]
 80115e4:	6020      	str	r0, [r4, #0]
 80115e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115ea:	81a3      	strh	r3, [r4, #12]
 80115ec:	9b01      	ldr	r3, [sp, #4]
 80115ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80115f2:	b15b      	cbz	r3, 801160c <__smakebuf_r+0x70>
 80115f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115f8:	4630      	mov	r0, r6
 80115fa:	f000 f879 	bl	80116f0 <_isatty_r>
 80115fe:	b128      	cbz	r0, 801160c <__smakebuf_r+0x70>
 8011600:	89a3      	ldrh	r3, [r4, #12]
 8011602:	f023 0303 	bic.w	r3, r3, #3
 8011606:	f043 0301 	orr.w	r3, r3, #1
 801160a:	81a3      	strh	r3, [r4, #12]
 801160c:	89a3      	ldrh	r3, [r4, #12]
 801160e:	431d      	orrs	r5, r3
 8011610:	81a5      	strh	r5, [r4, #12]
 8011612:	e7cf      	b.n	80115b4 <__smakebuf_r+0x18>

08011614 <_putc_r>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	460d      	mov	r5, r1
 8011618:	4614      	mov	r4, r2
 801161a:	4606      	mov	r6, r0
 801161c:	b118      	cbz	r0, 8011626 <_putc_r+0x12>
 801161e:	6a03      	ldr	r3, [r0, #32]
 8011620:	b90b      	cbnz	r3, 8011626 <_putc_r+0x12>
 8011622:	f7fd ff21 	bl	800f468 <__sinit>
 8011626:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011628:	07d8      	lsls	r0, r3, #31
 801162a:	d405      	bmi.n	8011638 <_putc_r+0x24>
 801162c:	89a3      	ldrh	r3, [r4, #12]
 801162e:	0599      	lsls	r1, r3, #22
 8011630:	d402      	bmi.n	8011638 <_putc_r+0x24>
 8011632:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011634:	f7fe f965 	bl	800f902 <__retarget_lock_acquire_recursive>
 8011638:	68a3      	ldr	r3, [r4, #8]
 801163a:	3b01      	subs	r3, #1
 801163c:	2b00      	cmp	r3, #0
 801163e:	60a3      	str	r3, [r4, #8]
 8011640:	da05      	bge.n	801164e <_putc_r+0x3a>
 8011642:	69a2      	ldr	r2, [r4, #24]
 8011644:	4293      	cmp	r3, r2
 8011646:	db12      	blt.n	801166e <_putc_r+0x5a>
 8011648:	b2eb      	uxtb	r3, r5
 801164a:	2b0a      	cmp	r3, #10
 801164c:	d00f      	beq.n	801166e <_putc_r+0x5a>
 801164e:	6823      	ldr	r3, [r4, #0]
 8011650:	1c5a      	adds	r2, r3, #1
 8011652:	6022      	str	r2, [r4, #0]
 8011654:	701d      	strb	r5, [r3, #0]
 8011656:	b2ed      	uxtb	r5, r5
 8011658:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801165a:	07da      	lsls	r2, r3, #31
 801165c:	d405      	bmi.n	801166a <_putc_r+0x56>
 801165e:	89a3      	ldrh	r3, [r4, #12]
 8011660:	059b      	lsls	r3, r3, #22
 8011662:	d402      	bmi.n	801166a <_putc_r+0x56>
 8011664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011666:	f7fe f94d 	bl	800f904 <__retarget_lock_release_recursive>
 801166a:	4628      	mov	r0, r5
 801166c:	bd70      	pop	{r4, r5, r6, pc}
 801166e:	4629      	mov	r1, r5
 8011670:	4622      	mov	r2, r4
 8011672:	4630      	mov	r0, r6
 8011674:	f7fe f81d 	bl	800f6b2 <__swbuf_r>
 8011678:	4605      	mov	r5, r0
 801167a:	e7ed      	b.n	8011658 <_putc_r+0x44>

0801167c <memmove>:
 801167c:	4288      	cmp	r0, r1
 801167e:	b510      	push	{r4, lr}
 8011680:	eb01 0402 	add.w	r4, r1, r2
 8011684:	d902      	bls.n	801168c <memmove+0x10>
 8011686:	4284      	cmp	r4, r0
 8011688:	4623      	mov	r3, r4
 801168a:	d807      	bhi.n	801169c <memmove+0x20>
 801168c:	1e43      	subs	r3, r0, #1
 801168e:	42a1      	cmp	r1, r4
 8011690:	d008      	beq.n	80116a4 <memmove+0x28>
 8011692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011696:	f803 2f01 	strb.w	r2, [r3, #1]!
 801169a:	e7f8      	b.n	801168e <memmove+0x12>
 801169c:	4402      	add	r2, r0
 801169e:	4601      	mov	r1, r0
 80116a0:	428a      	cmp	r2, r1
 80116a2:	d100      	bne.n	80116a6 <memmove+0x2a>
 80116a4:	bd10      	pop	{r4, pc}
 80116a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80116aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80116ae:	e7f7      	b.n	80116a0 <memmove+0x24>

080116b0 <strchr>:
 80116b0:	b2c9      	uxtb	r1, r1
 80116b2:	4603      	mov	r3, r0
 80116b4:	4618      	mov	r0, r3
 80116b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116ba:	b112      	cbz	r2, 80116c2 <strchr+0x12>
 80116bc:	428a      	cmp	r2, r1
 80116be:	d1f9      	bne.n	80116b4 <strchr+0x4>
 80116c0:	4770      	bx	lr
 80116c2:	2900      	cmp	r1, #0
 80116c4:	bf18      	it	ne
 80116c6:	2000      	movne	r0, #0
 80116c8:	4770      	bx	lr
	...

080116cc <_fstat_r>:
 80116cc:	b538      	push	{r3, r4, r5, lr}
 80116ce:	4d07      	ldr	r5, [pc, #28]	@ (80116ec <_fstat_r+0x20>)
 80116d0:	2300      	movs	r3, #0
 80116d2:	4604      	mov	r4, r0
 80116d4:	4608      	mov	r0, r1
 80116d6:	4611      	mov	r1, r2
 80116d8:	602b      	str	r3, [r5, #0]
 80116da:	f7f2 fa83 	bl	8003be4 <_fstat>
 80116de:	1c43      	adds	r3, r0, #1
 80116e0:	d102      	bne.n	80116e8 <_fstat_r+0x1c>
 80116e2:	682b      	ldr	r3, [r5, #0]
 80116e4:	b103      	cbz	r3, 80116e8 <_fstat_r+0x1c>
 80116e6:	6023      	str	r3, [r4, #0]
 80116e8:	bd38      	pop	{r3, r4, r5, pc}
 80116ea:	bf00      	nop
 80116ec:	20001944 	.word	0x20001944

080116f0 <_isatty_r>:
 80116f0:	b538      	push	{r3, r4, r5, lr}
 80116f2:	4d06      	ldr	r5, [pc, #24]	@ (801170c <_isatty_r+0x1c>)
 80116f4:	2300      	movs	r3, #0
 80116f6:	4604      	mov	r4, r0
 80116f8:	4608      	mov	r0, r1
 80116fa:	602b      	str	r3, [r5, #0]
 80116fc:	f7f2 fa82 	bl	8003c04 <_isatty>
 8011700:	1c43      	adds	r3, r0, #1
 8011702:	d102      	bne.n	801170a <_isatty_r+0x1a>
 8011704:	682b      	ldr	r3, [r5, #0]
 8011706:	b103      	cbz	r3, 801170a <_isatty_r+0x1a>
 8011708:	6023      	str	r3, [r4, #0]
 801170a:	bd38      	pop	{r3, r4, r5, pc}
 801170c:	20001944 	.word	0x20001944

08011710 <_sbrk_r>:
 8011710:	b538      	push	{r3, r4, r5, lr}
 8011712:	4d06      	ldr	r5, [pc, #24]	@ (801172c <_sbrk_r+0x1c>)
 8011714:	2300      	movs	r3, #0
 8011716:	4604      	mov	r4, r0
 8011718:	4608      	mov	r0, r1
 801171a:	602b      	str	r3, [r5, #0]
 801171c:	f7f2 fa8a 	bl	8003c34 <_sbrk>
 8011720:	1c43      	adds	r3, r0, #1
 8011722:	d102      	bne.n	801172a <_sbrk_r+0x1a>
 8011724:	682b      	ldr	r3, [r5, #0]
 8011726:	b103      	cbz	r3, 801172a <_sbrk_r+0x1a>
 8011728:	6023      	str	r3, [r4, #0]
 801172a:	bd38      	pop	{r3, r4, r5, pc}
 801172c:	20001944 	.word	0x20001944

08011730 <__assert_func>:
 8011730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011732:	4614      	mov	r4, r2
 8011734:	461a      	mov	r2, r3
 8011736:	4b09      	ldr	r3, [pc, #36]	@ (801175c <__assert_func+0x2c>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4605      	mov	r5, r0
 801173c:	68d8      	ldr	r0, [r3, #12]
 801173e:	b954      	cbnz	r4, 8011756 <__assert_func+0x26>
 8011740:	4b07      	ldr	r3, [pc, #28]	@ (8011760 <__assert_func+0x30>)
 8011742:	461c      	mov	r4, r3
 8011744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011748:	9100      	str	r1, [sp, #0]
 801174a:	462b      	mov	r3, r5
 801174c:	4905      	ldr	r1, [pc, #20]	@ (8011764 <__assert_func+0x34>)
 801174e:	f000 f86f 	bl	8011830 <fiprintf>
 8011752:	f000 f87f 	bl	8011854 <abort>
 8011756:	4b04      	ldr	r3, [pc, #16]	@ (8011768 <__assert_func+0x38>)
 8011758:	e7f4      	b.n	8011744 <__assert_func+0x14>
 801175a:	bf00      	nop
 801175c:	20000030 	.word	0x20000030
 8011760:	08013326 	.word	0x08013326
 8011764:	080132f8 	.word	0x080132f8
 8011768:	080132eb 	.word	0x080132eb

0801176c <_calloc_r>:
 801176c:	b570      	push	{r4, r5, r6, lr}
 801176e:	fba1 5402 	umull	r5, r4, r1, r2
 8011772:	b93c      	cbnz	r4, 8011784 <_calloc_r+0x18>
 8011774:	4629      	mov	r1, r5
 8011776:	f7fe ff97 	bl	80106a8 <_malloc_r>
 801177a:	4606      	mov	r6, r0
 801177c:	b928      	cbnz	r0, 801178a <_calloc_r+0x1e>
 801177e:	2600      	movs	r6, #0
 8011780:	4630      	mov	r0, r6
 8011782:	bd70      	pop	{r4, r5, r6, pc}
 8011784:	220c      	movs	r2, #12
 8011786:	6002      	str	r2, [r0, #0]
 8011788:	e7f9      	b.n	801177e <_calloc_r+0x12>
 801178a:	462a      	mov	r2, r5
 801178c:	4621      	mov	r1, r4
 801178e:	f7fe f825 	bl	800f7dc <memset>
 8011792:	e7f5      	b.n	8011780 <_calloc_r+0x14>

08011794 <__ascii_mbtowc>:
 8011794:	b082      	sub	sp, #8
 8011796:	b901      	cbnz	r1, 801179a <__ascii_mbtowc+0x6>
 8011798:	a901      	add	r1, sp, #4
 801179a:	b142      	cbz	r2, 80117ae <__ascii_mbtowc+0x1a>
 801179c:	b14b      	cbz	r3, 80117b2 <__ascii_mbtowc+0x1e>
 801179e:	7813      	ldrb	r3, [r2, #0]
 80117a0:	600b      	str	r3, [r1, #0]
 80117a2:	7812      	ldrb	r2, [r2, #0]
 80117a4:	1e10      	subs	r0, r2, #0
 80117a6:	bf18      	it	ne
 80117a8:	2001      	movne	r0, #1
 80117aa:	b002      	add	sp, #8
 80117ac:	4770      	bx	lr
 80117ae:	4610      	mov	r0, r2
 80117b0:	e7fb      	b.n	80117aa <__ascii_mbtowc+0x16>
 80117b2:	f06f 0001 	mvn.w	r0, #1
 80117b6:	e7f8      	b.n	80117aa <__ascii_mbtowc+0x16>

080117b8 <_realloc_r>:
 80117b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117bc:	4680      	mov	r8, r0
 80117be:	4615      	mov	r5, r2
 80117c0:	460c      	mov	r4, r1
 80117c2:	b921      	cbnz	r1, 80117ce <_realloc_r+0x16>
 80117c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117c8:	4611      	mov	r1, r2
 80117ca:	f7fe bf6d 	b.w	80106a8 <_malloc_r>
 80117ce:	b92a      	cbnz	r2, 80117dc <_realloc_r+0x24>
 80117d0:	f7fe fef6 	bl	80105c0 <_free_r>
 80117d4:	2400      	movs	r4, #0
 80117d6:	4620      	mov	r0, r4
 80117d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117dc:	f000 f841 	bl	8011862 <_malloc_usable_size_r>
 80117e0:	4285      	cmp	r5, r0
 80117e2:	4606      	mov	r6, r0
 80117e4:	d802      	bhi.n	80117ec <_realloc_r+0x34>
 80117e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80117ea:	d8f4      	bhi.n	80117d6 <_realloc_r+0x1e>
 80117ec:	4629      	mov	r1, r5
 80117ee:	4640      	mov	r0, r8
 80117f0:	f7fe ff5a 	bl	80106a8 <_malloc_r>
 80117f4:	4607      	mov	r7, r0
 80117f6:	2800      	cmp	r0, #0
 80117f8:	d0ec      	beq.n	80117d4 <_realloc_r+0x1c>
 80117fa:	42b5      	cmp	r5, r6
 80117fc:	462a      	mov	r2, r5
 80117fe:	4621      	mov	r1, r4
 8011800:	bf28      	it	cs
 8011802:	4632      	movcs	r2, r6
 8011804:	f7fe f87f 	bl	800f906 <memcpy>
 8011808:	4621      	mov	r1, r4
 801180a:	4640      	mov	r0, r8
 801180c:	f7fe fed8 	bl	80105c0 <_free_r>
 8011810:	463c      	mov	r4, r7
 8011812:	e7e0      	b.n	80117d6 <_realloc_r+0x1e>

08011814 <__ascii_wctomb>:
 8011814:	4603      	mov	r3, r0
 8011816:	4608      	mov	r0, r1
 8011818:	b141      	cbz	r1, 801182c <__ascii_wctomb+0x18>
 801181a:	2aff      	cmp	r2, #255	@ 0xff
 801181c:	d904      	bls.n	8011828 <__ascii_wctomb+0x14>
 801181e:	228a      	movs	r2, #138	@ 0x8a
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	f04f 30ff 	mov.w	r0, #4294967295
 8011826:	4770      	bx	lr
 8011828:	700a      	strb	r2, [r1, #0]
 801182a:	2001      	movs	r0, #1
 801182c:	4770      	bx	lr
	...

08011830 <fiprintf>:
 8011830:	b40e      	push	{r1, r2, r3}
 8011832:	b503      	push	{r0, r1, lr}
 8011834:	4601      	mov	r1, r0
 8011836:	ab03      	add	r3, sp, #12
 8011838:	4805      	ldr	r0, [pc, #20]	@ (8011850 <fiprintf+0x20>)
 801183a:	f853 2b04 	ldr.w	r2, [r3], #4
 801183e:	6800      	ldr	r0, [r0, #0]
 8011840:	9301      	str	r3, [sp, #4]
 8011842:	f7ff fcc1 	bl	80111c8 <_vfiprintf_r>
 8011846:	b002      	add	sp, #8
 8011848:	f85d eb04 	ldr.w	lr, [sp], #4
 801184c:	b003      	add	sp, #12
 801184e:	4770      	bx	lr
 8011850:	20000030 	.word	0x20000030

08011854 <abort>:
 8011854:	b508      	push	{r3, lr}
 8011856:	2006      	movs	r0, #6
 8011858:	f000 f834 	bl	80118c4 <raise>
 801185c:	2001      	movs	r0, #1
 801185e:	f7f2 f98d 	bl	8003b7c <_exit>

08011862 <_malloc_usable_size_r>:
 8011862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011866:	1f18      	subs	r0, r3, #4
 8011868:	2b00      	cmp	r3, #0
 801186a:	bfbc      	itt	lt
 801186c:	580b      	ldrlt	r3, [r1, r0]
 801186e:	18c0      	addlt	r0, r0, r3
 8011870:	4770      	bx	lr

08011872 <_raise_r>:
 8011872:	291f      	cmp	r1, #31
 8011874:	b538      	push	{r3, r4, r5, lr}
 8011876:	4605      	mov	r5, r0
 8011878:	460c      	mov	r4, r1
 801187a:	d904      	bls.n	8011886 <_raise_r+0x14>
 801187c:	2316      	movs	r3, #22
 801187e:	6003      	str	r3, [r0, #0]
 8011880:	f04f 30ff 	mov.w	r0, #4294967295
 8011884:	bd38      	pop	{r3, r4, r5, pc}
 8011886:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011888:	b112      	cbz	r2, 8011890 <_raise_r+0x1e>
 801188a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801188e:	b94b      	cbnz	r3, 80118a4 <_raise_r+0x32>
 8011890:	4628      	mov	r0, r5
 8011892:	f000 f831 	bl	80118f8 <_getpid_r>
 8011896:	4622      	mov	r2, r4
 8011898:	4601      	mov	r1, r0
 801189a:	4628      	mov	r0, r5
 801189c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118a0:	f000 b818 	b.w	80118d4 <_kill_r>
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d00a      	beq.n	80118be <_raise_r+0x4c>
 80118a8:	1c59      	adds	r1, r3, #1
 80118aa:	d103      	bne.n	80118b4 <_raise_r+0x42>
 80118ac:	2316      	movs	r3, #22
 80118ae:	6003      	str	r3, [r0, #0]
 80118b0:	2001      	movs	r0, #1
 80118b2:	e7e7      	b.n	8011884 <_raise_r+0x12>
 80118b4:	2100      	movs	r1, #0
 80118b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80118ba:	4620      	mov	r0, r4
 80118bc:	4798      	blx	r3
 80118be:	2000      	movs	r0, #0
 80118c0:	e7e0      	b.n	8011884 <_raise_r+0x12>
	...

080118c4 <raise>:
 80118c4:	4b02      	ldr	r3, [pc, #8]	@ (80118d0 <raise+0xc>)
 80118c6:	4601      	mov	r1, r0
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	f7ff bfd2 	b.w	8011872 <_raise_r>
 80118ce:	bf00      	nop
 80118d0:	20000030 	.word	0x20000030

080118d4 <_kill_r>:
 80118d4:	b538      	push	{r3, r4, r5, lr}
 80118d6:	4d07      	ldr	r5, [pc, #28]	@ (80118f4 <_kill_r+0x20>)
 80118d8:	2300      	movs	r3, #0
 80118da:	4604      	mov	r4, r0
 80118dc:	4608      	mov	r0, r1
 80118de:	4611      	mov	r1, r2
 80118e0:	602b      	str	r3, [r5, #0]
 80118e2:	f7f2 f93b 	bl	8003b5c <_kill>
 80118e6:	1c43      	adds	r3, r0, #1
 80118e8:	d102      	bne.n	80118f0 <_kill_r+0x1c>
 80118ea:	682b      	ldr	r3, [r5, #0]
 80118ec:	b103      	cbz	r3, 80118f0 <_kill_r+0x1c>
 80118ee:	6023      	str	r3, [r4, #0]
 80118f0:	bd38      	pop	{r3, r4, r5, pc}
 80118f2:	bf00      	nop
 80118f4:	20001944 	.word	0x20001944

080118f8 <_getpid_r>:
 80118f8:	f7f2 b928 	b.w	8003b4c <_getpid>

080118fc <_init>:
 80118fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118fe:	bf00      	nop
 8011900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011902:	bc08      	pop	{r3}
 8011904:	469e      	mov	lr, r3
 8011906:	4770      	bx	lr

08011908 <_fini>:
 8011908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190a:	bf00      	nop
 801190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801190e:	bc08      	pop	{r3}
 8011910:	469e      	mov	lr, r3
 8011912:	4770      	bx	lr
