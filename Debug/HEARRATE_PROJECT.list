
HEARRATE_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bbc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a68  08011d00  08011d00  00012d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013768  08013768  00014768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013770  08013770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013774  08013774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000008  08013778  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000041  200001f4  08013964  000151f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000238  080139a5  00015238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  2000024c  080139b6  0001524c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001974  080139b6  00015974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080139b6  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003d766  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000803f  00000000  00000000  000541fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003560  00000000  00000000  0005c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000028b0  00000000  00000000  0005f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003351a  00000000  00000000  00062050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004067b  00000000  00000000  0009556a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00110fdd  00000000  00000000  000d5be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001e6bc2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f0a4  00000000  00000000  001e6c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000059  00000000  00000000  001f5cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000024c 	.word	0x2000024c
 800015c:	00000000 	.word	0x00000000
 8000160:	08011ce4 	.word	0x08011ce4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000250 	.word	0x20000250
 800017c:	08011ce4 	.word	0x08011ce4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <IMU_get_ctx>:
                             uint16_t len);
void tx_com( uint8_t *tx_buffer, uint16_t len );
static void platform_delay(uint32_t ms);

stmdev_ctx_t IMU_get_ctx(void)
{
 8000e48:	b490      	push	{r4, r7}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx;
	dev_ctx.write_reg = platform_write;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <IMU_get_ctx+0x30>)
 8000e52:	60bb      	str	r3, [r7, #8]
	dev_ctx.read_reg = platform_read;
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <IMU_get_ctx+0x34>)
 8000e56:	60fb      	str	r3, [r7, #12]
	dev_ctx.mdelay = platform_delay;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <IMU_get_ctx+0x38>)
 8000e5a:	613b      	str	r3, [r7, #16]
	dev_ctx.handle = &SENSOR_BUS;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <IMU_get_ctx+0x3c>)
 8000e5e:	617b      	str	r3, [r7, #20]
	return dev_ctx;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	461c      	mov	r4, r3
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc90      	pop	{r4, r7}
 8000e76:	4770      	bx	lr
 8000e78:	08000ef9 	.word	0x08000ef9
 8000e7c:	08000f51 	.word	0x08000f51
 8000e80:	08000fdd 	.word	0x08000fdd
 8000e84:	200003d0 	.word	0x200003d0

08000e88 <IMU_init>:

void IMU_init(void)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	@ 0x2c
 8000e8c:	af00      	add	r7, sp, #0
	stmdev_ctx_t dev_ctx;
	lsm6dsv16b_reset_t rst;
	uint8_t whoamI;
	dev_ctx=IMU_get_ctx();
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ffd9 	bl	8000e48 <IMU_get_ctx>
 8000e96:	f107 0418 	add.w	r4, r7, #24
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f000 f89a 	bl	8000fdc <platform_delay>

	  /* Check device ID */
	lsm6dsv16b_device_id_get(&dev_ctx, &whoamI);
 8000ea8:	f107 0216 	add.w	r2, r7, #22
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 fa04 	bl	80012c0 <lsm6dsv16b_device_id_get>

	if (whoamI != LSM6DSV16B_ID)
 8000eb8:	7dbb      	ldrb	r3, [r7, #22]
 8000eba:	2b71      	cmp	r3, #113	@ 0x71
 8000ebc:	d003      	beq.n	8000ec6 <IMU_init+0x3e>
	while (1)
	  {
	    printf("who am i is error!");
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <IMU_init+0x6c>)
 8000ec0:	f00e fd38 	bl	800f934 <iprintf>
 8000ec4:	e7fb      	b.n	8000ebe <IMU_init+0x36>
	  }

	  /* Restore default configuration */
	lsm6dsv16b_reset_set(&dev_ctx, LSM6DSV16B_RESTORE_CTRL_REGS);
 8000ec6:	f107 0318 	add.w	r3, r7, #24
 8000eca:	2104      	movs	r1, #4
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 f931 	bl	8001134 <lsm6dsv16b_reset_set>
	do {
	    lsm6dsv16b_reset_get(&dev_ctx, &rst);
 8000ed2:	f107 0217 	add.w	r2, r7, #23
 8000ed6:	f107 0318 	add.w	r3, r7, #24
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f977 	bl	80011d0 <lsm6dsv16b_reset_get>
	    } while (rst != LSM6DSV16B_READY);
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <IMU_init+0x4a>
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	@ 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08011d00 	.word	0x08011d00

08000ef8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	461a      	mov	r2, r3
 8000f04:	460b      	mov	r3, r1
 8000f06:	72fb      	strb	r3, [r7, #11]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f12:	480e      	ldr	r0, [pc, #56]	@ (8000f4c <platform_write+0x54>)
 8000f14:	f004 fe4c 	bl	8005bb0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000f18:	f107 010b 	add.w	r1, r7, #11
 8000f1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f20:	2201      	movs	r2, #1
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f007 f80f 	bl	8007f46 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8000f28:	893a      	ldrh	r2, [r7, #8]
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	68f8      	ldr	r0, [r7, #12]
 8000f32:	f007 f808 	bl	8007f46 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <platform_write+0x54>)
 8000f3e:	f004 fe37 	bl	8005bb0 <HAL_GPIO_WritePin>

  return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48000400 	.word	0x48000400

08000f50 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	72fb      	strb	r3, [r7, #11]
 8000f60:	4613      	mov	r3, r2
 8000f62:	813b      	strh	r3, [r7, #8]

  reg |= 0x80;
 8000f64:	7afb      	ldrb	r3, [r7, #11]
 8000f66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f74:	480e      	ldr	r0, [pc, #56]	@ (8000fb0 <platform_read+0x60>)
 8000f76:	f004 fe1b 	bl	8005bb0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000f7a:	f107 010b 	add.w	r1, r7, #11
 8000f7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f82:	2201      	movs	r2, #1
 8000f84:	68f8      	ldr	r0, [r7, #12]
 8000f86:	f006 ffde 	bl	8007f46 <HAL_SPI_Transmit>

  HAL_SPI_Receive(handle, bufp, len, 1000);
 8000f8a:	893a      	ldrh	r2, [r7, #8]
 8000f8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f007 f94d 	bl	8008232 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <platform_read+0x60>)
 8000fa0:	f004 fe06 	bl	8005bb0 <HAL_GPIO_WritePin>

  return 0;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	48000400 	.word	0x48000400

08000fb4 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]

  HAL_UART_Transmit(&huart1, tx_buffer, len, 1000);
 8000fc0:	887a      	ldrh	r2, [r7, #2]
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <tx_com+0x24>)
 8000fca:	f007 ffc9 	bl	8008f60 <HAL_UART_Transmit>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200004f8 	.word	0x200004f8

08000fdc <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f001 fa63 	bl	80024b0 <HAL_Delay>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <lsm6dsv16b_pedometer>:
#include"lsm6dsv16b_reg.h"
#include"IMU.h"
#include"string.h"
#include"stdio.h"
void lsm6dsv16b_pedometer(void)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b0a5      	sub	sp, #148	@ 0x94
 8000ff8:	af00      	add	r7, sp, #0
		uint32_t  step_count=0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		stmdev_ctx_t dev_ctx;
		IMU_init();
 8001000:	f7ff ff42 	bl	8000e88 <IMU_init>
		dev_ctx=IMU_get_ctx();
 8001004:	463b      	mov	r3, r7
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff1e 	bl	8000e48 <IMU_get_ctx>
 800100c:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001010:	463b      	mov	r3, r7
 8001012:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001014:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    lsm6dsv16b_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001018:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f989 	bl	8001336 <lsm6dsv16b_block_data_update_set>
	    lsm6dsv16b_xl_full_scale_set(&dev_ctx, LSM6DSV16B_2g);
 8001024:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f9a9 	bl	8001382 <lsm6dsv16b_xl_full_scale_set>
	    lsm6dsv16b_xl_data_rate_set(&dev_ctx, LSM6DSV16B_XL_ODR_AT_30Hz);
 8001030:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001034:	2104      	movs	r1, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f957 	bl	80012ea <lsm6dsv16b_xl_data_rate_set>

	    lsm6dsv16b_stpcnt_mode_t pedometer_mode = {
 800103c:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <lsm6dsv16b_pedometer+0xbc>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
	        .false_step_rej = 1,
	        .step_counter_enable = 1
	    };
	    lsm6dsv16b_stpcnt_mode_set(&dev_ctx, pedometer_mode);
 8001044:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001048:	f897 1078 	ldrb.w	r1, [r7, #120]	@ 0x78
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fbb2 	bl	80017b6 <lsm6dsv16b_stpcnt_mode_set>

	    lsm6dsv16b_stpcnt_rst_step_set(&dev_ctx, 1);
 8001052:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001056:	2101      	movs	r1, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fc3b 	bl	80018d4 <lsm6dsv16b_stpcnt_rst_step_set>


	    while (1) {

	       if(lsm6dsv16b_stpcnt_steps_get(&dev_ctx, &step_count)!=0)
 800105e:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001062:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fc04 	bl	8001876 <lsm6dsv16b_stpcnt_steps_get>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <lsm6dsv16b_pedometer+0x86>
	       {
	    	   printf("get steps error");
 8001074:	480f      	ldr	r0, [pc, #60]	@ (80010b4 <lsm6dsv16b_pedometer+0xc0>)
 8001076:	f00e fc5d 	bl	800f934 <iprintf>
	       }
	        uint8_t tx_buffer[100];
	        snprintf((char *)tx_buffer, sizeof(tx_buffer), "Steps: %u\r\n", step_count);
 800107a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800107e:	f107 0014 	add.w	r0, r7, #20
 8001082:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <lsm6dsv16b_pedometer+0xc4>)
 8001084:	2164      	movs	r1, #100	@ 0x64
 8001086:	f00e fcc5 	bl	800fa14 <sniprintf>
	        tx_com(tx_buffer, strlen((char const *)tx_buffer));
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8c6 	bl	8000220 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4611      	mov	r1, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff ff88 	bl	8000fb4 <tx_com>


	        dev_ctx.mdelay(1000);
 80010a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80010a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ac:	4798      	blx	r3
	    while (1) {
 80010ae:	e7d6      	b.n	800105e <lsm6dsv16b_pedometer+0x6a>
 80010b0:	08011d90 	.word	0x08011d90
 80010b4:	08011d74 	.word	0x08011d74
 80010b8:	08011d84 	.word	0x08011d84

080010bc <lsm6dsv16b_read_reg>:
  *
  */
int32_t __weak lsm6dsv16b_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	461a      	mov	r2, r3
 80010c8:	460b      	mov	r3, r1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4613      	mov	r3, r2
 80010ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <lsm6dsv16b_read_reg+0x20>
  {
    return -1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <lsm6dsv16b_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685c      	ldr	r4, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68d8      	ldr	r0, [r3, #12]
 80010e4:	893b      	ldrh	r3, [r7, #8]
 80010e6:	7af9      	ldrb	r1, [r7, #11]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	47a0      	blx	r4
 80010ec:	6178      	str	r0, [r7, #20]

  return ret;
 80010ee:	697b      	ldr	r3, [r7, #20]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <lsm6dsv16b_write_reg>:
  *
  */
int32_t __weak lsm6dsv16b_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	461a      	mov	r2, r3
 8001104:	460b      	mov	r3, r1
 8001106:	72fb      	strb	r3, [r7, #11]
 8001108:	4613      	mov	r3, r2
 800110a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <lsm6dsv16b_write_reg+0x20>
  {
    return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	e009      	b.n	800112c <lsm6dsv16b_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	68d8      	ldr	r0, [r3, #12]
 8001120:	893b      	ldrh	r3, [r7, #8]
 8001122:	7af9      	ldrb	r1, [r7, #11]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	47a0      	blx	r4
 8001128:	6178      	str	r0, [r7, #20]

  return ret;
 800112a:	697b      	ldr	r3, [r7, #20]
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <lsm6dsv16b_reset_set>:
  * @param  val      Reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_reset_set(const stmdev_ctx_t *ctx, lsm6dsv16b_reset_t val)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_func_cfg_access_t func_cfg_access;
  lsm6dsv16b_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 8001140:	f107 020c 	add.w	r2, r7, #12
 8001144:	2301      	movs	r3, #1
 8001146:	2112      	movs	r1, #18
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffb7 	bl	80010bc <lsm6dsv16b_read_reg>
 800114e:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d107      	bne.n	8001166 <lsm6dsv16b_reset_set+0x32>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001156:	f107 0210 	add.w	r2, r7, #16
 800115a:	2301      	movs	r3, #1
 800115c:	2101      	movs	r1, #1
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffac 	bl	80010bc <lsm6dsv16b_read_reg>
 8001164:	6178      	str	r0, [r7, #20]
  }

  ctrl3.boot = ((uint8_t)val & 0x04U) >> 2;
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2da      	uxtb	r2, r3
 8001170:	7b3b      	ldrb	r3, [r7, #12]
 8001172:	f362 13c7 	bfi	r3, r2, #7, #1
 8001176:	733b      	strb	r3, [r7, #12]
  ctrl3.sw_reset = ((uint8_t)val & 0x02U) >> 1;
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	7b3b      	ldrb	r3, [r7, #12]
 8001184:	f362 0300 	bfi	r3, r2, #0, #1
 8001188:	733b      	strb	r3, [r7, #12]
  func_cfg_access.sw_por = (uint8_t)val & 0x01U;
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	7c3b      	ldrb	r3, [r7, #16]
 8001194:	f362 0382 	bfi	r3, r2, #2, #1
 8001198:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d107      	bne.n	80011b0 <lsm6dsv16b_reset_set+0x7c>
  {
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 80011a0:	f107 020c 	add.w	r2, r7, #12
 80011a4:	2301      	movs	r3, #1
 80011a6:	2112      	movs	r1, #18
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ffa5 	bl	80010f8 <lsm6dsv16b_write_reg>
 80011ae:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d107      	bne.n	80011c6 <lsm6dsv16b_reset_set+0x92>
  {
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80011b6:	f107 0210 	add.w	r2, r7, #16
 80011ba:	2301      	movs	r3, #1
 80011bc:	2101      	movs	r1, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff9a 	bl	80010f8 <lsm6dsv16b_write_reg>
 80011c4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80011c6:	697b      	ldr	r3, [r7, #20]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <lsm6dsv16b_reset_get>:
  * @param  val      Global reset of the device.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_reset_get(const stmdev_ctx_t *ctx, lsm6dsv16b_reset_t *val)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  lsm6dsv16b_func_cfg_access_t func_cfg_access;
  lsm6dsv16b_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	2301      	movs	r3, #1
 80011e0:	2112      	movs	r1, #18
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff6a 	bl	80010bc <lsm6dsv16b_read_reg>
 80011e8:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <lsm6dsv16b_reset_get+0x30>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80011f0:	f107 0210 	add.w	r2, r7, #16
 80011f4:	2301      	movs	r3, #1
 80011f6:	2101      	movs	r1, #1
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff5f 	bl	80010bc <lsm6dsv16b_read_reg>
 80011fe:	6178      	str	r0, [r7, #20]
  }

  switch ((ctrl3.sw_reset << 2) + (ctrl3.boot << 1) + func_cfg_access.sw_por)
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	009a      	lsls	r2, r3, #2
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	7c3a      	ldrb	r2, [r7, #16]
 8001218:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	4413      	add	r3, r2
 8001220:	2b04      	cmp	r3, #4
 8001222:	d81d      	bhi.n	8001260 <lsm6dsv16b_reset_get+0x90>
 8001224:	a201      	add	r2, pc, #4	@ (adr r2, 800122c <lsm6dsv16b_reset_get+0x5c>)
 8001226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122a:	bf00      	nop
 800122c:	08001241 	.word	0x08001241
 8001230:	08001249 	.word	0x08001249
 8001234:	08001251 	.word	0x08001251
 8001238:	08001261 	.word	0x08001261
 800123c:	08001259 	.word	0x08001259
  {
    case LSM6DSV16B_READY:
      *val = LSM6DSV16B_READY;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
      break;
 8001246:	e00f      	b.n	8001268 <lsm6dsv16b_reset_get+0x98>

    case LSM6DSV16B_GLOBAL_RST:
      *val = LSM6DSV16B_GLOBAL_RST;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
      break;
 800124e:	e00b      	b.n	8001268 <lsm6dsv16b_reset_get+0x98>

    case LSM6DSV16B_RESTORE_CAL_PARAM:
      *val = LSM6DSV16B_RESTORE_CAL_PARAM;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2202      	movs	r2, #2
 8001254:	701a      	strb	r2, [r3, #0]
      break;
 8001256:	e007      	b.n	8001268 <lsm6dsv16b_reset_get+0x98>

    case LSM6DSV16B_RESTORE_CTRL_REGS:
      *val = LSM6DSV16B_RESTORE_CTRL_REGS;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2204      	movs	r2, #4
 800125c:	701a      	strb	r2, [r3, #0]
      break;
 800125e:	e003      	b.n	8001268 <lsm6dsv16b_reset_get+0x98>

    default:
      *val = LSM6DSV16B_GLOBAL_RST;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
      break;
 8001266:	bf00      	nop
  }
  return ret;
 8001268:	697b      	ldr	r3, [r7, #20]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop

08001274 <lsm6dsv16b_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16b_mem_bank_t val)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8001280:	f107 0208 	add.w	r2, r7, #8
 8001284:	2301      	movs	r3, #1
 8001286:	2101      	movs	r1, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff17 	bl	80010bc <lsm6dsv16b_read_reg>
 800128e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <lsm6dsv16b_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	7a3b      	ldrb	r3, [r7, #8]
 80012a0:	f362 13c7 	bfi	r3, r2, #7, #1
 80012a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80012a6:	f107 0208 	add.w	r2, r7, #8
 80012aa:	2301      	movs	r3, #1
 80012ac:	2101      	movs	r1, #1
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ff22 	bl	80010f8 <lsm6dsv16b_write_reg>
 80012b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <lsm6dsv16b_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  lsm6dsv16b_who_am_i_t who_am_i;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_WHO_AM_I, (uint8_t *)&who_am_i, 1);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	2301      	movs	r3, #1
 80012d0:	210f      	movs	r1, #15
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fef2 	bl	80010bc <lsm6dsv16b_read_reg>
 80012d8:	60f8      	str	r0, [r7, #12]
  *val = who_am_i.id;
 80012da:	7a3a      	ldrb	r2, [r7, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	701a      	strb	r2, [r3, #0]

  return ret;
 80012e0:	68fb      	ldr	r3, [r7, #12]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <lsm6dsv16b_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16b_xl_data_rate_t val)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b084      	sub	sp, #16
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	460b      	mov	r3, r1
 80012f4:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_ctrl1_t ctrl1;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL1, (uint8_t *)&ctrl1, 1);
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	2301      	movs	r3, #1
 80012fc:	2110      	movs	r1, #16
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fedc 	bl	80010bc <lsm6dsv16b_read_reg>
 8001304:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10f      	bne.n	800132c <lsm6dsv16b_xl_data_rate_set+0x42>
  {
    ctrl1.odr_xl = (uint8_t)val & 0xFU;
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	b2da      	uxtb	r2, r3
 8001314:	7a3b      	ldrb	r3, [r7, #8]
 8001316:	f362 0303 	bfi	r3, r2, #0, #4
 800131a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL1, (uint8_t *)&ctrl1, 1);
 800131c:	f107 0208 	add.w	r2, r7, #8
 8001320:	2301      	movs	r3, #1
 8001322:	2110      	movs	r1, #16
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff fee7 	bl	80010f8 <lsm6dsv16b_write_reg>
 800132a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <lsm6dsv16b_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	460b      	mov	r3, r1
 8001340:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 8001342:	f107 0208 	add.w	r2, r7, #8
 8001346:	2301      	movs	r3, #1
 8001348:	2112      	movs	r1, #18
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff feb6 	bl	80010bc <lsm6dsv16b_read_reg>
 8001350:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10f      	bne.n	8001378 <lsm6dsv16b_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2da      	uxtb	r2, r3
 8001360:	7a3b      	ldrb	r3, [r7, #8]
 8001362:	f362 1386 	bfi	r3, r2, #6, #1
 8001366:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL3, (uint8_t *)&ctrl3, 1);
 8001368:	f107 0208 	add.w	r2, r7, #8
 800136c:	2301      	movs	r3, #1
 800136e:	2112      	movs	r1, #18
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fec1 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001376:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <lsm6dsv16b_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16b_xl_full_scale_t val)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b084      	sub	sp, #16
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	460b      	mov	r3, r1
 800138c:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_CTRL8, (uint8_t *)&ctrl8, 1);
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	2301      	movs	r3, #1
 8001394:	2117      	movs	r1, #23
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fe90 	bl	80010bc <lsm6dsv16b_read_reg>
 800139c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d10f      	bne.n	80013c4 <lsm6dsv16b_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	7a3b      	ldrb	r3, [r7, #8]
 80013ae:	f362 0301 	bfi	r3, r2, #0, #2
 80013b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_CTRL8, (uint8_t *)&ctrl8, 1);
 80013b4:	f107 0208 	add.w	r2, r7, #8
 80013b8:	2301      	movs	r3, #1
 80013ba:	2117      	movs	r1, #23
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fe9b 	bl	80010f8 <lsm6dsv16b_write_reg>
 80013c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <lsm6dsv16b_ln_pg_write>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_ln_pg_write(const stmdev_ctx_t *ctx, uint16_t address,
                               uint8_t *buf, uint8_t len)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b08a      	sub	sp, #40	@ 0x28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	461a      	mov	r2, r3
 80013da:	460b      	mov	r3, r1
 80013dc:	817b      	strh	r3, [r7, #10]
 80013de:	4613      	mov	r3, r2
 80013e0:	727b      	strb	r3, [r7, #9]
  uint8_t msb;
  uint8_t lsb;
  int32_t ret;
  uint8_t i ;

  msb = ((uint8_t)(address >> 8) & 0x0FU);
 80013e2:	897b      	ldrh	r3, [r7, #10]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  lsb = (uint8_t)address & 0xFFU;
 80013f2:	897b      	ldrh	r3, [r7, #10]
 80013f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 80013f8:	2101      	movs	r1, #1
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff ff3a 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 8001400:	6238      	str	r0, [r7, #32]

  /* set page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001402:	f107 0214 	add.w	r2, r7, #20
 8001406:	2301      	movs	r3, #1
 8001408:	2117      	movs	r1, #23
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff fe56 	bl	80010bc <lsm6dsv16b_read_reg>
 8001410:	4602      	mov	r2, r0
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	4413      	add	r3, r2
 8001416:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_DISABLE;
 8001418:	7d3b      	ldrb	r3, [r7, #20]
 800141a:	f36f 1345 	bfc	r3, #5, #1
 800141e:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_ENABLE;
 8001420:	7d3b      	ldrb	r3, [r7, #20]
 8001422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001426:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001428:	f107 0214 	add.w	r2, r7, #20
 800142c:	2301      	movs	r3, #1
 800142e:	2117      	movs	r1, #23
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fe61 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001436:	4602      	mov	r2, r0
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	4413      	add	r3, r2
 800143c:	623b      	str	r3, [r7, #32]

  /* select page */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 800143e:	f107 0218 	add.w	r2, r7, #24
 8001442:	2301      	movs	r3, #1
 8001444:	2102      	movs	r1, #2
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fe38 	bl	80010bc <lsm6dsv16b_read_reg>
 800144c:	4602      	mov	r2, r0
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	4413      	add	r3, r2
 8001452:	623b      	str	r3, [r7, #32]
  page_sel.page_sel = msb;
 8001454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b2da      	uxtb	r2, r3
 800145e:	7e3b      	ldrb	r3, [r7, #24]
 8001460:	f362 1307 	bfi	r3, r2, #4, #4
 8001464:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1; // Default value
 8001466:	7e3b      	ldrb	r3, [r7, #24]
 8001468:	2201      	movs	r2, #1
 800146a:	f362 0303 	bfi	r3, r2, #0, #4
 800146e:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001470:	f107 0218 	add.w	r2, r7, #24
 8001474:	2301      	movs	r3, #1
 8001476:	2102      	movs	r1, #2
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f7ff fe3d 	bl	80010f8 <lsm6dsv16b_write_reg>
 800147e:	4602      	mov	r2, r0
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	4413      	add	r3, r2
 8001484:	623b      	str	r3, [r7, #32]
                              1);

  /* set page addr */
  page_address.page_addr = lsb;
 8001486:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800148a:	773b      	strb	r3, [r7, #28]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_ADDRESS,
 800148c:	f107 021c 	add.w	r2, r7, #28
 8001490:	2301      	movs	r3, #1
 8001492:	2108      	movs	r1, #8
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fe2f 	bl	80010f8 <lsm6dsv16b_write_reg>
 800149a:	4602      	mov	r2, r0
 800149c:	6a3b      	ldr	r3, [r7, #32]
 800149e:	4413      	add	r3, r2
 80014a0:	623b      	str	r3, [r7, #32]
                              (uint8_t *)&page_address, 1);

  for (i = 0; ((i < len) && (ret == 0)); i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	77fb      	strb	r3, [r7, #31]
 80014a6:	e046      	b.n	8001536 <lsm6dsv16b_ln_pg_write+0x168>
  {
    ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_VALUE, &buf[i], 1);
 80014a8:	7ffb      	ldrb	r3, [r7, #31]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	441a      	add	r2, r3
 80014ae:	2301      	movs	r3, #1
 80014b0:	2109      	movs	r1, #9
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fe20 	bl	80010f8 <lsm6dsv16b_write_reg>
 80014b8:	4602      	mov	r2, r0
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	4413      	add	r3, r2
 80014be:	623b      	str	r3, [r7, #32]
    lsb++;
 80014c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Check if page wrap */
    if (((lsb & 0xFFU) == 0x00U) && (ret == 0))
 80014ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d12e      	bne.n	8001530 <lsm6dsv16b_ln_pg_write+0x162>
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d12b      	bne.n	8001530 <lsm6dsv16b_ln_pg_write+0x162>
    {
      msb++;
 80014d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014dc:	3301      	adds	r3, #1
 80014de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 80014e2:	f107 0218 	add.w	r2, r7, #24
 80014e6:	2301      	movs	r3, #1
 80014e8:	2102      	movs	r1, #2
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f7ff fde6 	bl	80010bc <lsm6dsv16b_read_reg>
 80014f0:	4602      	mov	r2, r0
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	4413      	add	r3, r2
 80014f6:	623b      	str	r3, [r7, #32]

      if (ret == 0)
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <lsm6dsv16b_ln_pg_write+0x162>
      {
        page_sel.page_sel = msb;
 80014fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	b2da      	uxtb	r2, r3
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	f362 1307 	bfi	r3, r2, #4, #4
 800150e:	763b      	strb	r3, [r7, #24]
        page_sel.not_used0 = 1; // Default value
 8001510:	7e3b      	ldrb	r3, [r7, #24]
 8001512:	2201      	movs	r2, #1
 8001514:	f362 0303 	bfi	r3, r2, #0, #4
 8001518:	763b      	strb	r3, [r7, #24]
        ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 800151a:	f107 0218 	add.w	r2, r7, #24
 800151e:	2301      	movs	r3, #1
 8001520:	2102      	movs	r1, #2
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f7ff fde8 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001528:	4602      	mov	r2, r0
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	4413      	add	r3, r2
 800152e:	623b      	str	r3, [r7, #32]
  for (i = 0; ((i < len) && (ret == 0)); i++)
 8001530:	7ffb      	ldrb	r3, [r7, #31]
 8001532:	3301      	adds	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
 8001536:	7ffa      	ldrb	r2, [r7, #31]
 8001538:	7a7b      	ldrb	r3, [r7, #9]
 800153a:	429a      	cmp	r2, r3
 800153c:	d202      	bcs.n	8001544 <lsm6dsv16b_ln_pg_write+0x176>
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0b1      	beq.n	80014a8 <lsm6dsv16b_ln_pg_write+0xda>
                                    1);
      }
    }
  }

  page_sel.page_sel = 0;
 8001544:	7e3b      	ldrb	r3, [r7, #24]
 8001546:	f36f 1307 	bfc	r3, #4, #4
 800154a:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1;// Default value
 800154c:	7e3b      	ldrb	r3, [r7, #24]
 800154e:	2201      	movs	r2, #1
 8001550:	f362 0303 	bfi	r3, r2, #0, #4
 8001554:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001556:	f107 0218 	add.w	r2, r7, #24
 800155a:	2301      	movs	r3, #1
 800155c:	2102      	movs	r1, #2
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff fdca 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001564:	4602      	mov	r2, r0
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	4413      	add	r3, r2
 800156a:	623b      	str	r3, [r7, #32]
                              1);

  /* unset page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 800156c:	f107 0214 	add.w	r2, r7, #20
 8001570:	2301      	movs	r3, #1
 8001572:	2117      	movs	r1, #23
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff fda1 	bl	80010bc <lsm6dsv16b_read_reg>
 800157a:	4602      	mov	r2, r0
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	4413      	add	r3, r2
 8001580:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_DISABLE;
 8001582:	7d3b      	ldrb	r3, [r7, #20]
 8001584:	f36f 1345 	bfc	r3, #5, #1
 8001588:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_DISABLE;
 800158a:	7d3b      	ldrb	r3, [r7, #20]
 800158c:	f36f 1386 	bfc	r3, #6, #1
 8001590:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001592:	f107 0214 	add.w	r2, r7, #20
 8001596:	2301      	movs	r3, #1
 8001598:	2117      	movs	r1, #23
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fdac 	bl	80010f8 <lsm6dsv16b_write_reg>
 80015a0:	4602      	mov	r2, r0
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	4413      	add	r3, r2
 80015a6:	623b      	str	r3, [r7, #32]

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 80015a8:	2100      	movs	r1, #0
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff fe62 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 80015b0:	4602      	mov	r2, r0
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	4413      	add	r3, r2
 80015b6:	623b      	str	r3, [r7, #32]

  return ret;
 80015b8:	6a3b      	ldr	r3, [r7, #32]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <lsm6dsv16b_ln_pg_read>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_ln_pg_read(const stmdev_ctx_t *ctx, uint16_t address,
                              uint8_t *buf, uint8_t len)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b08a      	sub	sp, #40	@ 0x28
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	461a      	mov	r2, r3
 80015ce:	460b      	mov	r3, r1
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	4613      	mov	r3, r2
 80015d4:	727b      	strb	r3, [r7, #9]
  uint8_t msb;
  uint8_t lsb;
  int32_t ret;
  uint8_t i ;

  msb = ((uint8_t)(address >> 8) & 0x0FU);
 80015d6:	897b      	ldrh	r3, [r7, #10]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  lsb = (uint8_t)address & 0xFFU;
 80015e6:	897b      	ldrh	r3, [r7, #10]
 80015e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 80015ec:	2101      	movs	r1, #1
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff fe40 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 80015f4:	6238      	str	r0, [r7, #32]

  /* set page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 80015f6:	f107 0214 	add.w	r2, r7, #20
 80015fa:	2301      	movs	r3, #1
 80015fc:	2117      	movs	r1, #23
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff fd5c 	bl	80010bc <lsm6dsv16b_read_reg>
 8001604:	4602      	mov	r2, r0
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	4413      	add	r3, r2
 800160a:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_ENABLE;
 800160c:	7d3b      	ldrb	r3, [r7, #20]
 800160e:	f043 0320 	orr.w	r3, r3, #32
 8001612:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_DISABLE;
 8001614:	7d3b      	ldrb	r3, [r7, #20]
 8001616:	f36f 1386 	bfc	r3, #6, #1
 800161a:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 800161c:	f107 0214 	add.w	r2, r7, #20
 8001620:	2301      	movs	r3, #1
 8001622:	2117      	movs	r1, #23
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff fd67 	bl	80010f8 <lsm6dsv16b_write_reg>
 800162a:	4602      	mov	r2, r0
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	4413      	add	r3, r2
 8001630:	623b      	str	r3, [r7, #32]

  /* select page */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 8001632:	f107 0218 	add.w	r2, r7, #24
 8001636:	2301      	movs	r3, #1
 8001638:	2102      	movs	r1, #2
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fd3e 	bl	80010bc <lsm6dsv16b_read_reg>
 8001640:	4602      	mov	r2, r0
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	4413      	add	r3, r2
 8001646:	623b      	str	r3, [r7, #32]
  page_sel.page_sel = msb;
 8001648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	b2da      	uxtb	r2, r3
 8001652:	7e3b      	ldrb	r3, [r7, #24]
 8001654:	f362 1307 	bfi	r3, r2, #4, #4
 8001658:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1; // Default value
 800165a:	7e3b      	ldrb	r3, [r7, #24]
 800165c:	2201      	movs	r2, #1
 800165e:	f362 0303 	bfi	r3, r2, #0, #4
 8001662:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 8001664:	f107 0218 	add.w	r2, r7, #24
 8001668:	2301      	movs	r3, #1
 800166a:	2102      	movs	r1, #2
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff fd43 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001672:	4602      	mov	r2, r0
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	4413      	add	r3, r2
 8001678:	623b      	str	r3, [r7, #32]
                              1);

  /* set page addr */
  page_address.page_addr = lsb;
 800167a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800167e:	773b      	strb	r3, [r7, #28]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_ADDRESS,
 8001680:	f107 021c 	add.w	r2, r7, #28
 8001684:	2301      	movs	r3, #1
 8001686:	2108      	movs	r1, #8
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f7ff fd35 	bl	80010f8 <lsm6dsv16b_write_reg>
 800168e:	4602      	mov	r2, r0
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	4413      	add	r3, r2
 8001694:	623b      	str	r3, [r7, #32]
                              (uint8_t *)&page_address, 1);

  for (i = 0; ((i < len) && (ret == 0)); i++)
 8001696:	2300      	movs	r3, #0
 8001698:	77fb      	strb	r3, [r7, #31]
 800169a:	e046      	b.n	800172a <lsm6dsv16b_ln_pg_read+0x168>
  {
    ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_VALUE, &buf[i], 1);
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	441a      	add	r2, r3
 80016a2:	2301      	movs	r3, #1
 80016a4:	2109      	movs	r1, #9
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f7ff fd08 	bl	80010bc <lsm6dsv16b_read_reg>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	4413      	add	r3, r2
 80016b2:	623b      	str	r3, [r7, #32]
    lsb++;
 80016b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016b8:	3301      	adds	r3, #1
 80016ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    /* Check if page wrap */
    if (((lsb & 0xFFU) == 0x00U) && (ret == 0))
 80016be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d12e      	bne.n	8001724 <lsm6dsv16b_ln_pg_read+0x162>
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d12b      	bne.n	8001724 <lsm6dsv16b_ln_pg_read+0x162>
    {
      msb++;
 80016cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016d0:	3301      	adds	r3, #1
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel, 1);
 80016d6:	f107 0218 	add.w	r2, r7, #24
 80016da:	2301      	movs	r3, #1
 80016dc:	2102      	movs	r1, #2
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f7ff fcec 	bl	80010bc <lsm6dsv16b_read_reg>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	4413      	add	r3, r2
 80016ea:	623b      	str	r3, [r7, #32]

      if (ret == 0)
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <lsm6dsv16b_ln_pg_read+0x162>
      {
        page_sel.page_sel = msb;
 80016f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	7e3b      	ldrb	r3, [r7, #24]
 80016fe:	f362 1307 	bfi	r3, r2, #4, #4
 8001702:	763b      	strb	r3, [r7, #24]
        page_sel.not_used0 = 1; // Default value
 8001704:	7e3b      	ldrb	r3, [r7, #24]
 8001706:	2201      	movs	r2, #1
 8001708:	f362 0303 	bfi	r3, r2, #0, #4
 800170c:	763b      	strb	r3, [r7, #24]
        ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 800170e:	f107 0218 	add.w	r2, r7, #24
 8001712:	2301      	movs	r3, #1
 8001714:	2102      	movs	r1, #2
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff fcee 	bl	80010f8 <lsm6dsv16b_write_reg>
 800171c:	4602      	mov	r2, r0
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	4413      	add	r3, r2
 8001722:	623b      	str	r3, [r7, #32]
  for (i = 0; ((i < len) && (ret == 0)); i++)
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	3301      	adds	r3, #1
 8001728:	77fb      	strb	r3, [r7, #31]
 800172a:	7ffa      	ldrb	r2, [r7, #31]
 800172c:	7a7b      	ldrb	r3, [r7, #9]
 800172e:	429a      	cmp	r2, r3
 8001730:	d202      	bcs.n	8001738 <lsm6dsv16b_ln_pg_read+0x176>
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0b1      	beq.n	800169c <lsm6dsv16b_ln_pg_read+0xda>
                                    1);
      }
    }
  }

  page_sel.page_sel = 0;
 8001738:	7e3b      	ldrb	r3, [r7, #24]
 800173a:	f36f 1307 	bfc	r3, #4, #4
 800173e:	763b      	strb	r3, [r7, #24]
  page_sel.not_used0 = 1;// Default value
 8001740:	7e3b      	ldrb	r3, [r7, #24]
 8001742:	2201      	movs	r2, #1
 8001744:	f362 0303 	bfi	r3, r2, #0, #4
 8001748:	763b      	strb	r3, [r7, #24]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_SEL, (uint8_t *)&page_sel,
 800174a:	f107 0218 	add.w	r2, r7, #24
 800174e:	2301      	movs	r3, #1
 8001750:	2102      	movs	r1, #2
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	f7ff fcd0 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001758:	4602      	mov	r2, r0
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	4413      	add	r3, r2
 800175e:	623b      	str	r3, [r7, #32]
                              1);

  /* unset page write */
  ret += lsm6dsv16b_read_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001760:	f107 0214 	add.w	r2, r7, #20
 8001764:	2301      	movs	r3, #1
 8001766:	2117      	movs	r1, #23
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fca7 	bl	80010bc <lsm6dsv16b_read_reg>
 800176e:	4602      	mov	r2, r0
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	4413      	add	r3, r2
 8001774:	623b      	str	r3, [r7, #32]
  page_rw.page_read = PROPERTY_DISABLE;
 8001776:	7d3b      	ldrb	r3, [r7, #20]
 8001778:	f36f 1345 	bfc	r3, #5, #1
 800177c:	753b      	strb	r3, [r7, #20]
  page_rw.page_write = PROPERTY_DISABLE;
 800177e:	7d3b      	ldrb	r3, [r7, #20]
 8001780:	f36f 1386 	bfc	r3, #6, #1
 8001784:	753b      	strb	r3, [r7, #20]
  ret += lsm6dsv16b_write_reg(ctx, LSM6DSV16B_PAGE_RW, (uint8_t *)&page_rw, 1);
 8001786:	f107 0214 	add.w	r2, r7, #20
 800178a:	2301      	movs	r3, #1
 800178c:	2117      	movs	r1, #23
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff fcb2 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001794:	4602      	mov	r2, r0
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	4413      	add	r3, r2
 800179a:	623b      	str	r3, [r7, #32]

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 800179c:	2100      	movs	r1, #0
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff fd68 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	4413      	add	r3, r2
 80017aa:	623b      	str	r3, [r7, #32]

  return ret;
 80017ac:	6a3b      	ldr	r3, [r7, #32]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3728      	adds	r7, #40	@ 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <lsm6dsv16b_stpcnt_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_mode_set(const stmdev_ctx_t *ctx,
                                   lsm6dsv16b_stpcnt_mode_t val)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b086      	sub	sp, #24
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	7039      	strb	r1, [r7, #0]
  lsm6dsv16b_emb_func_en_a_t emb_func_en_a;
  lsm6dsv16b_emb_func_en_b_t emb_func_en_b;
  lsm6dsv16b_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 80017c0:	2101      	movs	r1, #1
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff fd56 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 80017c8:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d107      	bne.n	80017e0 <lsm6dsv16b_stpcnt_mode_set+0x2a>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_EMB_FUNC_EN_A, (uint8_t *)&emb_func_en_a, 1);
 80017d0:	f107 0210 	add.w	r2, r7, #16
 80017d4:	2301      	movs	r3, #1
 80017d6:	2104      	movs	r1, #4
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fc6f 	bl	80010bc <lsm6dsv16b_read_reg>
 80017de:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <lsm6dsv16b_stpcnt_mode_set+0x40>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_EMB_FUNC_EN_B, (uint8_t *)&emb_func_en_b, 1);
 80017e6:	f107 020c 	add.w	r2, r7, #12
 80017ea:	2301      	movs	r3, #1
 80017ec:	2105      	movs	r1, #5
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fc64 	bl	80010bc <lsm6dsv16b_read_reg>
 80017f4:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10f      	bne.n	800181c <lsm6dsv16b_stpcnt_mode_set+0x66>
  {
    emb_func_en_a.pedo_en = val.step_counter_enable;
 80017fc:	783b      	ldrb	r3, [r7, #0]
 80017fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001802:	b2da      	uxtb	r2, r3
 8001804:	7c3b      	ldrb	r3, [r7, #16]
 8001806:	f362 03c3 	bfi	r3, r2, #3, #1
 800180a:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_EMB_FUNC_EN_A, (uint8_t *)&emb_func_en_a, 1);
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	2301      	movs	r3, #1
 8001812:	2104      	movs	r1, #4
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fc6f 	bl	80010f8 <lsm6dsv16b_write_reg>
 800181a:	6178      	str	r0, [r7, #20]
  }

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 800181c:	2100      	movs	r1, #0
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fd28 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 8001824:	4602      	mov	r2, r0
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4413      	add	r3, r2
 800182a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <lsm6dsv16b_stpcnt_mode_set+0x8e>
  {
    ret = lsm6dsv16b_ln_pg_read(ctx, LSM6DSV16B_PEDO_CMD_REG, (uint8_t *)&pedo_cmd_reg, 1);
 8001832:	f107 0208 	add.w	r2, r7, #8
 8001836:	2301      	movs	r3, #1
 8001838:	f240 1183 	movw	r1, #387	@ 0x183
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fec0 	bl	80015c2 <lsm6dsv16b_ln_pg_read>
 8001842:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d110      	bne.n	800186c <lsm6dsv16b_stpcnt_mode_set+0xb6>
  {
    pedo_cmd_reg.fp_rejection_en = val.false_step_rej;
 800184a:	783b      	ldrb	r3, [r7, #0]
 800184c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	7a3b      	ldrb	r3, [r7, #8]
 8001854:	f362 0382 	bfi	r3, r2, #2, #1
 8001858:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_ln_pg_write(ctx, LSM6DSV16B_PEDO_CMD_REG, (uint8_t *)&pedo_cmd_reg, 1);
 800185a:	f107 0208 	add.w	r2, r7, #8
 800185e:	2301      	movs	r3, #1
 8001860:	f240 1183 	movw	r1, #387	@ 0x183
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fdb2 	bl	80013ce <lsm6dsv16b_ln_pg_write>
 800186a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800186c:	697b      	ldr	r3, [r7, #20]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <lsm6dsv16b_stpcnt_steps_get>:
  * @param  val      Step counter output, number of detected steps.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_steps_get(const stmdev_ctx_t *ctx, uint16_t *val)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 8001880:	2101      	movs	r1, #1
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fcf6 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 8001888:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <lsm6dsv16b_stpcnt_steps_get+0x2a>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_STEP_COUNTER_L, &buff[0], 2);
 8001890:	f107 0208 	add.w	r2, r7, #8
 8001894:	2302      	movs	r3, #2
 8001896:	2162      	movs	r1, #98	@ 0x62
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fc0f 	bl	80010bc <lsm6dsv16b_read_reg>
 800189e:	60f8      	str	r0, [r7, #12]
  }

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 80018a0:	2100      	movs	r1, #0
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fce6 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

  *val = buff[1];
 80018b0:	7a7b      	ldrb	r3, [r7, #9]
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256U) + buff[0];
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b29b      	uxth	r3, r3
 80018c0:	7a3a      	ldrb	r2, [r7, #8]
 80018c2:	4413      	add	r3, r2
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	801a      	strh	r2, [r3, #0]

  return ret;
 80018ca:	68fb      	ldr	r3, [r7, #12]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <lsm6dsv16b_stpcnt_rst_step_set>:
  * @param  val      Reset step counter.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16b_stpcnt_rst_step_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16b_emb_func_src_t emb_func_src;
  int32_t ret;

  ret = lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_EMBED_FUNC_MEM_BANK);
 80018e0:	2101      	movs	r1, #1
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fcc6 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 80018e8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <lsm6dsv16b_stpcnt_rst_step_set+0x2c>
  {
    ret = lsm6dsv16b_read_reg(ctx, LSM6DSV16B_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	2301      	movs	r3, #1
 80018f6:	2164      	movs	r1, #100	@ 0x64
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fbdf 	bl	80010bc <lsm6dsv16b_read_reg>
 80018fe:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <lsm6dsv16b_stpcnt_rst_step_set+0x52>
  {
    emb_func_src.pedo_rst_step = val;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	b2da      	uxtb	r2, r3
 800190e:	7a3b      	ldrb	r3, [r7, #8]
 8001910:	f362 13c7 	bfi	r3, r2, #7, #1
 8001914:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16b_write_reg(ctx, LSM6DSV16B_EMB_FUNC_SRC, (uint8_t *)&emb_func_src, 1);
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	2301      	movs	r3, #1
 800191c:	2164      	movs	r1, #100	@ 0x64
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fbea 	bl	80010f8 <lsm6dsv16b_write_reg>
 8001924:	60f8      	str	r0, [r7, #12]
  }

  ret += lsm6dsv16b_mem_bank_set(ctx, LSM6DSV16B_MAIN_MEM_BANK);
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fca3 	bl	8001274 <lsm6dsv16b_mem_bank_set>
 800192e:	4602      	mov	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  return ret;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800194e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4313      	orrs	r3, r2
 8001956:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800198a:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 800198c:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <MX_ADC1_Init+0xc0>)
 800198e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001990:	4b27      	ldr	r3, [pc, #156]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800199c:	4b24      	ldr	r3, [pc, #144]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019a2:	4b23      	ldr	r3, [pc, #140]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019a8:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019aa:	2204      	movs	r2, #4
 80019ac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019bc:	2201      	movs	r2, #1
 80019be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019d4:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019dc:	4b14      	ldr	r3, [pc, #80]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019e2:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ea:	4811      	ldr	r0, [pc, #68]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 80019ec:	f002 fd92 	bl	8004514 <HAL_ADC_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019f6:	f001 fe63 	bl	80036c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <MX_ADC1_Init+0xc4>)
 80019fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019fe:	2306      	movs	r3, #6
 8001a00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a06:	237f      	movs	r3, #127	@ 0x7f
 8001a08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	4619      	mov	r1, r3
 8001a16:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <MX_ADC1_Init+0xbc>)
 8001a18:	f002 fec8 	bl	80047ac <HAL_ADC_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a22:	f001 fe4d 	bl	80036c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000268 	.word	0x20000268
 8001a34:	50040000 	.word	0x50040000
 8001a38:	3ac04000 	.word	0x3ac04000

08001a3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b09c      	sub	sp, #112	@ 0x70
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	2250      	movs	r2, #80	@ 0x50
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00e f8e5 	bl	800fc2c <memset>
  if(adcHandle->Instance==ADC1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <HAL_ADC_MspInit+0x9c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d130      	bne.n	8001ace <HAL_ADC_MspInit+0x92>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a70:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 8001a72:	2308      	movs	r3, #8
 8001a74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001a76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001a7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001a82:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a86:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 8001a88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a8c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001a92:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fd6e 	bl	800757a <HAL_RCCEx_PeriphCLKConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001aa4:	f001 fe0c 	bl	80036c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001aa8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001aac:	f7ff ff48 	bl	8001940 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	2004      	movs	r0, #4
 8001ab2:	f7ff ff45 	bl	8001940 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aba:	2303      	movs	r3, #3
 8001abc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4804      	ldr	r0, [pc, #16]	@ (8001adc <HAL_ADC_MspInit+0xa0>)
 8001aca:	f003 ff01 	bl	80058d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001ace:	bf00      	nop
 8001ad0:	3770      	adds	r7, #112	@ 0x70
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	50040000 	.word	0x50040000
 8001adc:	48000800 	.word	0x48000800

08001ae0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <LL_EXTI_EnableIT_32_63+0x24>)
 8001aea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001aee:	4905      	ldr	r1, [pc, #20]	@ (8001b04 <LL_EXTI_EnableIT_32_63+0x24>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	58000800 	.word	0x58000800

08001b08 <LL_AHB2_GRP1_EnableClock>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b46:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8001b4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b5a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001b76:	f002 fb35 	bl	80041e4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001b7a:	f002 fb39 	bl	80041f0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001b7e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001b82:	f7ff ffad 	bl	8001ae0 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001b86:	f00b f865 	bl	800cc54 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001b8a:	f000 f821 	bl	8001bd0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001b8e:	f000 f8c1 	bl	8001d14 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001b92:	bf00      	nop
}
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <APPD_EnableCPU2+0x34>)
 8001ba0:	1d3c      	adds	r4, r7, #4
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bac:	c403      	stmia	r4!, {r0, r1}
 8001bae:	8022      	strh	r2, [r4, #0]
 8001bb0:	3402      	adds	r4, #2
 8001bb2:	0c13      	lsrs	r3, r2, #16
 8001bb4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001bb6:	f00a ff85 	bl	800cac4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00a fa88 	bl	800c0d2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001bc2:	bf00      	nop
}
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08011d94 	.word	0x08011d94

08001bd0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	77fb      	strb	r3, [r7, #31]
 8001bf4:	e036      	b.n	8001c64 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	4a43      	ldr	r2, [pc, #268]	@ (8001d08 <APPD_SetCPU2GpioConfig+0x138>)
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	799b      	ldrb	r3, [r3, #6]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d02c      	beq.n	8001c5e <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	4a40      	ldr	r2, [pc, #256]	@ (8001d08 <APPD_SetCPU2GpioConfig+0x138>)
 8001c08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d0c <APPD_SetCPU2GpioConfig+0x13c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01b      	beq.n	8001c4a <APPD_SetCPU2GpioConfig+0x7a>
 8001c12:	4a3e      	ldr	r2, [pc, #248]	@ (8001d0c <APPD_SetCPU2GpioConfig+0x13c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d821      	bhi.n	8001c5c <APPD_SetCPU2GpioConfig+0x8c>
 8001c18:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c1c:	d003      	beq.n	8001c26 <APPD_SetCPU2GpioConfig+0x56>
 8001c1e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d10 <APPD_SetCPU2GpioConfig+0x140>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d009      	beq.n	8001c38 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8001c24:	e01a      	b.n	8001c5c <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001c26:	7ffb      	ldrb	r3, [r7, #31]
 8001c28:	4a37      	ldr	r2, [pc, #220]	@ (8001d08 <APPD_SetCPU2GpioConfig+0x138>)
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	889a      	ldrh	r2, [r3, #4]
 8001c30:	8bbb      	ldrh	r3, [r7, #28]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	83bb      	strh	r3, [r7, #28]
          break;
 8001c36:	e012      	b.n	8001c5e <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	4a33      	ldr	r2, [pc, #204]	@ (8001d08 <APPD_SetCPU2GpioConfig+0x138>)
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	889a      	ldrh	r2, [r3, #4]
 8001c42:	8b7b      	ldrh	r3, [r7, #26]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	837b      	strh	r3, [r7, #26]
          break;
 8001c48:	e009      	b.n	8001c5e <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d08 <APPD_SetCPU2GpioConfig+0x138>)
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	889a      	ldrh	r2, [r3, #4]
 8001c54:	8b3b      	ldrh	r3, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	833b      	strh	r3, [r7, #24]
          break;
 8001c5a:	e000      	b.n	8001c5e <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001c5c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c5e:	7ffb      	ldrb	r3, [r7, #31]
 8001c60:	3301      	adds	r3, #1
 8001c62:	77fb      	strb	r3, [r7, #31]
 8001c64:	7ffb      	ldrb	r3, [r7, #31]
 8001c66:	2b25      	cmp	r3, #37	@ 0x25
 8001c68:	d9c5      	bls.n	8001bf6 <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d014      	beq.n	8001ca6 <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001c7c:	8bbb      	ldrh	r3, [r7, #28]
 8001c7e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff ff41 	bl	8001b08 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001c86:	2001      	movs	r0, #1
 8001c88:	f7ff ff57 	bl	8001b3a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c94:	f003 fe1c 	bl	80058d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001c98:	8bbb      	ldrh	r3, [r7, #28]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca2:	f003 ff85 	bl	8005bb0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001ca6:	8b7b      	ldrh	r3, [r7, #26]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d012      	beq.n	8001cd2 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001cac:	8b7b      	ldrh	r3, [r7, #26]
 8001cae:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	f7ff ff29 	bl	8001b08 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff ff3f 	bl	8001b3a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4813      	ldr	r0, [pc, #76]	@ (8001d10 <APPD_SetCPU2GpioConfig+0x140>)
 8001cc2:	f003 fe05 	bl	80058d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001cc6:	8b7b      	ldrh	r3, [r7, #26]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4810      	ldr	r0, [pc, #64]	@ (8001d10 <APPD_SetCPU2GpioConfig+0x140>)
 8001cce:	f003 ff6f 	bl	8005bb0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001cd2:	8b3b      	ldrh	r3, [r7, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d013      	beq.n	8001d00 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001cd8:	8b3b      	ldrh	r3, [r7, #24]
 8001cda:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	2004      	movs	r0, #4
 8001cde:	f7ff ff13 	bl	8001b08 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001ce2:	2004      	movs	r0, #4
 8001ce4:	f7ff ff29 	bl	8001b3a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4807      	ldr	r0, [pc, #28]	@ (8001d0c <APPD_SetCPU2GpioConfig+0x13c>)
 8001cee:	f003 fdef 	bl	80058d0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001cf2:	8b3b      	ldrh	r3, [r7, #24]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <APPD_SetCPU2GpioConfig+0x13c>)
 8001cfa:	f003 ff59 	bl	8005bb0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
}
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	08013110 	.word	0x08013110
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000400 	.word	0x48000400

08001d14 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001d18:	bf00      	nop
}
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8001d26:	f002 f865 	bl	8003df4 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001d2a:	bf00      	nop
}
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	460b      	mov	r3, r1
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001d3c:	897a      	ldrh	r2, [r7, #10]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68f9      	ldr	r1, [r7, #12]
 8001d42:	2000      	movs	r0, #0
 8001d44:	f001 fb42 	bl	80033cc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001d48:	bf00      	nop
}
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <LL_PWR_SMPS_Enable+0x1c>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <LL_PWR_SMPS_Enable+0x1c>)
 8001d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d5e:	61d3      	str	r3, [r2, #28]
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	58000400 	.word	0x58000400

08001d70 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d80:	4904      	ldr	r1, [pc, #16]	@ (8001d94 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61cb      	str	r3, [r1, #28]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	58000400 	.word	0x58000400

08001d98 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001da0:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d108      	bne.n	8001dc4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f023 020f 	bic.w	r2, r3, #15
 8001dba:	4913      	ldr	r1, [pc, #76]	@ (8001e08 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8001dc2:	e019      	b.n	8001df8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3b06      	subs	r3, #6
 8001dc8:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4413      	add	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da02      	bge.n	8001dde <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e004      	b.n	8001de8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	dd01      	ble.n	8001de8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001de4:	230f      	movs	r3, #15
 8001de6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001de8:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	f023 020f 	bic.w	r2, r3, #15
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4905      	ldr	r1, [pc, #20]	@ (8001e08 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61cb      	str	r3, [r1, #28]
}
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	1fff7558 	.word	0x1fff7558
 8001e08:	58000400 	.word	0x58000400

08001e0c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <LL_C2_PWR_SetPowerMode+0x28>)
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4905      	ldr	r1, [pc, #20]	@ (8001e34 <LL_C2_PWR_SetPowerMode+0x28>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	58000400 	.word	0x58000400

08001e38 <LL_EXTI_EnableIT_32_63>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <LL_EXTI_EnableIT_32_63+0x24>)
 8001e42:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001e46:	4905      	ldr	r1, [pc, #20]	@ (8001e5c <LL_EXTI_EnableIT_32_63+0x24>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	58000800 	.word	0x58000800

08001e60 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001e6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001e7a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	cafecafe 	.word	0xcafecafe

08001e9c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <LL_DBGMCU_GetDeviceID+0x18>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	e0042000 	.word	0xe0042000

08001ee0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <LL_DBGMCU_GetRevisionID+0x18>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	b29b      	uxth	r3, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e0042000 	.word	0xe0042000

08001efc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <LL_LPM_EnableSleep+0x1c>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <LL_LPM_EnableSleep+0x1c>)
 8001f06:	f023 0304 	bic.w	r3, r3, #4
 8001f0a:	6113      	str	r3, [r2, #16]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	22ff      	movs	r2, #255	@ 0xff
 8001f28:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	22ca      	movs	r2, #202	@ 0xca
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2253      	movs	r2, #83	@ 0x53
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 0207 	bic.w	r2, r3, #7
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <MX_APPE_Config+0x18>)
 8001f82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f86:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001f88:	f000 f829 	bl	8001fde <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001f8c:	f000 f82e 	bl	8001fec <Config_HSE>

  return;
 8001f90:	bf00      	nop
}
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	58004000 	.word	0x58004000

08001f98 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001f9c:	f000 f83a 	bl	8002014 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001fa0:	f000 f852 	bl	8002048 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001fa4:	4903      	ldr	r1, [pc, #12]	@ (8001fb4 <MX_APPE_Init+0x1c>)
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 ffa4 	bl	8002ef4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001fac:	f000 f85a 	bl	8002064 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001fb0:	bf00      	nop
}
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	200003ac 	.word	0x200003ac

08001fb8 <Init_Smps>:

void Init_Smps(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fed7 	bl	8001d70 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8001fc2:	2004      	movs	r0, #4
 8001fc4:	f7ff fee8 	bl	8001d98 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001fc8:	f7ff fec2 	bl	8001d50 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001fcc:	bf00      	nop
}
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <Init_Exti>:

void Init_Exti(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001fd4:	2050      	movs	r0, #80	@ 0x50
 8001fd6:	f7ff ff2f 	bl	8001e38 <LL_EXTI_EnableIT_32_63>

  return;
 8001fda:	bf00      	nop
}
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001fe2:	bf00      	nop
}
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f00a feac 	bl	800cd50 <OTP_Read>
 8001ff8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	799b      	ldrb	r3, [r3, #6]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff2b 	bl	8001e60 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800200a:	bf00      	nop
 800200c:	bf00      	nop
}
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <System_Init>:

static void System_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  Init_Smps();
 8002018:	f7ff ffce 	bl	8001fb8 <Init_Smps>

  Init_Exti();
 800201c:	f7ff ffd8 	bl	8001fd0 <Init_Exti>

  Init_Rtc();
 8002020:	f000 f802 	bl	8002028 <Init_Rtc>

  return;
 8002024:	bf00      	nop
}
 8002026:	bd80      	pop	{r7, pc}

08002028 <Init_Rtc>:

static void Init_Rtc(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800202c:	4805      	ldr	r0, [pc, #20]	@ (8002044 <Init_Rtc+0x1c>)
 800202e:	f7ff ff82 	bl	8001f36 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002032:	2100      	movs	r1, #0
 8002034:	4803      	ldr	r0, [pc, #12]	@ (8002044 <Init_Rtc+0x1c>)
 8002036:	f7ff ff8e 	bl	8001f56 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800203a:	4802      	ldr	r0, [pc, #8]	@ (8002044 <Init_Rtc+0x1c>)
 800203c:	f7ff ff6e 	bl	8001f1c <LL_RTC_EnableWriteProtection>

  return;
 8002040:	bf00      	nop
}
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40002800 	.word	0x40002800

08002048 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800204c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002050:	f7ff ff24 	bl	8001e9c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002054:	f00c fcf8 	bl	800ea48 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8002058:	2004      	movs	r0, #4
 800205a:	f7ff fed7 	bl	8001e0c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800205e:	bf00      	nop
}
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800206a:	f00a fbe7 	bl	800c83c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800206e:	4a11      	ldr	r2, [pc, #68]	@ (80020b4 <appe_Tl_Init+0x50>)
 8002070:	2100      	movs	r1, #0
 8002072:	2008      	movs	r0, #8
 8002074:	f00c fe26 	bl	800ecc4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <appe_Tl_Init+0x54>)
 800207a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <appe_Tl_Init+0x58>)
 800207e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002080:	463b      	mov	r3, r7
 8002082:	4619      	mov	r1, r3
 8002084:	480e      	ldr	r0, [pc, #56]	@ (80020c0 <appe_Tl_Init+0x5c>)
 8002086:	f00a fa9b 	bl	800c5c0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <appe_Tl_Init+0x60>)
 800208c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <appe_Tl_Init+0x64>)
 8002090:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <appe_Tl_Init+0x68>)
 8002094:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8002096:	f240 533c 	movw	r3, #1340	@ 0x53c
 800209a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00a fc9b 	bl	800c9dc <TL_MM_Init>

  TL_Enable();
 80020a6:	f00a fbc3 	bl	800c830 <TL_Enable>

  return;
 80020aa:	bf00      	nop
}
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	0800c5f9 	.word	0x0800c5f9
 80020b8:	20030734 	.word	0x20030734
 80020bc:	080020d1 	.word	0x080020d1
 80020c0:	080020e9 	.word	0x080020e9
 80020c4:	2003094c 	.word	0x2003094c
 80020c8:	20030840 	.word	0x20030840
 80020cc:	200301f8 	.word	0x200301f8

080020d0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80020da:	bf00      	nop
}
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	330b      	adds	r3, #11
 80020f6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8002102:	2b07      	cmp	r3, #7
 8002104:	f200 80d0 	bhi.w	80022a8 <APPE_SysUserEvtRx+0x1c0>
 8002108:	a201      	add	r2, pc, #4	@ (adr r2, 8002110 <APPE_SysUserEvtRx+0x28>)
 800210a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210e:	bf00      	nop
 8002110:	08002131 	.word	0x08002131
 8002114:	080021c3 	.word	0x080021c3
 8002118:	080021e5 	.word	0x080021e5
 800211c:	080022a9 	.word	0x080022a9
 8002120:	08002229 	.word	0x08002229
 8002124:	0800224d 	.word	0x0800224d
 8002128:	08002269 	.word	0x08002269
 800212c:	0800228d 	.word	0x0800228d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	4618      	mov	r0, r3
 8002136:	f009 fff9 	bl	800c12c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800213a:	485e      	ldr	r0, [pc, #376]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 800213c:	f00a fd2a 	bl	800cb94 <DbgTraceGetFileName>
 8002140:	4601      	mov	r1, r0
 8002142:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8002146:	4a5c      	ldr	r2, [pc, #368]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 8002148:	485c      	ldr	r0, [pc, #368]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 800214a:	f00d fbf3 	bl	800f934 <iprintf>
 800214e:	7b3b      	ldrb	r3, [r7, #12]
 8002150:	4619      	mov	r1, r3
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	461a      	mov	r2, r3
 8002156:	7bbb      	ldrb	r3, [r7, #14]
 8002158:	4859      	ldr	r0, [pc, #356]	@ (80022c0 <APPE_SysUserEvtRx+0x1d8>)
 800215a:	f00d fbeb 	bl	800f934 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800215e:	4855      	ldr	r0, [pc, #340]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 8002160:	f00a fd18 	bl	800cb94 <DbgTraceGetFileName>
 8002164:	4601      	mov	r1, r0
 8002166:	f240 136b 	movw	r3, #363	@ 0x16b
 800216a:	4a53      	ldr	r2, [pc, #332]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 800216c:	4853      	ldr	r0, [pc, #332]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 800216e:	f00d fbe1 	bl	800f934 <iprintf>
 8002172:	7c3b      	ldrb	r3, [r7, #16]
 8002174:	4619      	mov	r1, r3
 8002176:	4853      	ldr	r0, [pc, #332]	@ (80022c4 <APPE_SysUserEvtRx+0x1dc>)
 8002178:	f00d fbdc 	bl	800f934 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800217c:	484d      	ldr	r0, [pc, #308]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 800217e:	f00a fd09 	bl	800cb94 <DbgTraceGetFileName>
 8002182:	4601      	mov	r1, r0
 8002184:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002188:	4a4b      	ldr	r2, [pc, #300]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 800218a:	484c      	ldr	r0, [pc, #304]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 800218c:	f00d fbd2 	bl	800f934 <iprintf>
 8002190:	7dbb      	ldrb	r3, [r7, #22]
 8002192:	4619      	mov	r1, r3
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	461a      	mov	r2, r3
 8002198:	7e3b      	ldrb	r3, [r7, #24]
 800219a:	484b      	ldr	r0, [pc, #300]	@ (80022c8 <APPE_SysUserEvtRx+0x1e0>)
 800219c:	f00d fbca 	bl	800f934 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80021a0:	4844      	ldr	r0, [pc, #272]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 80021a2:	f00a fcf7 	bl	800cb94 <DbgTraceGetFileName>
 80021a6:	4601      	mov	r1, r0
 80021a8:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80021ac:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 80021ae:	4843      	ldr	r0, [pc, #268]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 80021b0:	f00d fbc0 	bl	800f934 <iprintf>
 80021b4:	4845      	ldr	r0, [pc, #276]	@ (80022cc <APPE_SysUserEvtRx+0x1e4>)
 80021b6:	f00d fbbd 	bl	800f934 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f8e0 	bl	8002380 <APPE_SysEvtReadyProcessing>
    break;
 80021c0:	e073      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80021c2:	483c      	ldr	r0, [pc, #240]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 80021c4:	f00a fce6 	bl	800cb94 <DbgTraceGetFileName>
 80021c8:	4601      	mov	r1, r0
 80021ca:	f240 1373 	movw	r3, #371	@ 0x173
 80021ce:	4a3a      	ldr	r2, [pc, #232]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 80021d0:	483a      	ldr	r0, [pc, #232]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 80021d2:	f00d fbaf 	bl	800f934 <iprintf>
 80021d6:	483e      	ldr	r0, [pc, #248]	@ (80022d0 <APPE_SysUserEvtRx+0x1e8>)
 80021d8:	f00d fbac 	bl	800f934 <iprintf>
    APPE_SysEvtError(pPayload);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f885 	bl	80022ec <APPE_SysEvtError>
    break;
 80021e2:	e062      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80021e4:	4833      	ldr	r0, [pc, #204]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 80021e6:	f00a fcd5 	bl	800cb94 <DbgTraceGetFileName>
 80021ea:	4601      	mov	r1, r0
 80021ec:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 80021f0:	4a31      	ldr	r2, [pc, #196]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 80021f2:	4832      	ldr	r0, [pc, #200]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 80021f4:	f00d fb9e 	bl	800f934 <iprintf>
 80021f8:	4836      	ldr	r0, [pc, #216]	@ (80022d4 <APPE_SysUserEvtRx+0x1ec>)
 80021fa:	f00d fc03 	bl	800fa04 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80021fe:	482d      	ldr	r0, [pc, #180]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 8002200:	f00a fcc8 	bl	800cb94 <DbgTraceGetFileName>
 8002204:	4601      	mov	r1, r0
 8002206:	f240 1379 	movw	r3, #377	@ 0x179
 800220a:	4a2b      	ldr	r2, [pc, #172]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 800220c:	482b      	ldr	r0, [pc, #172]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 800220e:	f00d fb91 	bl	800f934 <iprintf>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3302      	adds	r3, #2
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3302      	adds	r3, #2
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	461a      	mov	r2, r3
 8002220:	482d      	ldr	r0, [pc, #180]	@ (80022d8 <APPE_SysUserEvtRx+0x1f0>)
 8002222:	f00d fb87 	bl	800f934 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8002226:	e040      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8002228:	4822      	ldr	r0, [pc, #136]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 800222a:	f00a fcb3 	bl	800cb94 <DbgTraceGetFileName>
 800222e:	4601      	mov	r1, r0
 8002230:	f240 137f 	movw	r3, #383	@ 0x17f
 8002234:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 8002236:	4821      	ldr	r0, [pc, #132]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 8002238:	f00d fb7c 	bl	800f934 <iprintf>
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3302      	adds	r3, #2
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4619      	mov	r1, r3
 8002244:	4825      	ldr	r0, [pc, #148]	@ (80022dc <APPE_SysUserEvtRx+0x1f4>)
 8002246:	f00d fb75 	bl	800f934 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800224a:	e02e      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800224c:	4819      	ldr	r0, [pc, #100]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 800224e:	f00a fca1 	bl	800cb94 <DbgTraceGetFileName>
 8002252:	4601      	mov	r1, r0
 8002254:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8002258:	4a17      	ldr	r2, [pc, #92]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 800225a:	4818      	ldr	r0, [pc, #96]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 800225c:	f00d fb6a 	bl	800f934 <iprintf>
 8002260:	481f      	ldr	r0, [pc, #124]	@ (80022e0 <APPE_SysUserEvtRx+0x1f8>)
 8002262:	f00d fb67 	bl	800f934 <iprintf>
    break;
 8002266:	e020      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002268:	4812      	ldr	r0, [pc, #72]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 800226a:	f00a fc93 	bl	800cb94 <DbgTraceGetFileName>
 800226e:	4601      	mov	r1, r0
 8002270:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8002274:	4a10      	ldr	r2, [pc, #64]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 8002276:	4811      	ldr	r0, [pc, #68]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 8002278:	f00d fb5c 	bl	800f934 <iprintf>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	3302      	adds	r3, #2
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4619      	mov	r1, r3
 8002284:	4817      	ldr	r0, [pc, #92]	@ (80022e4 <APPE_SysUserEvtRx+0x1fc>)
 8002286:	f00d fb55 	bl	800f934 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800228a:	e00e      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800228c:	4809      	ldr	r0, [pc, #36]	@ (80022b4 <APPE_SysUserEvtRx+0x1cc>)
 800228e:	f00a fc81 	bl	800cb94 <DbgTraceGetFileName>
 8002292:	4601      	mov	r1, r0
 8002294:	f240 138d 	movw	r3, #397	@ 0x18d
 8002298:	4a07      	ldr	r2, [pc, #28]	@ (80022b8 <APPE_SysUserEvtRx+0x1d0>)
 800229a:	4808      	ldr	r0, [pc, #32]	@ (80022bc <APPE_SysUserEvtRx+0x1d4>)
 800229c:	f00d fb4a 	bl	800f934 <iprintf>
 80022a0:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <APPE_SysUserEvtRx+0x200>)
 80022a2:	f00d fb47 	bl	800f934 <iprintf>
    break;
 80022a6:	e000      	b.n	80022aa <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80022a8:	bf00      	nop
  }

  return;
 80022aa:	bf00      	nop
}
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	08011db0 	.word	0x08011db0
 80022b8:	08013240 	.word	0x08013240
 80022bc:	08011dc8 	.word	0x08011dc8
 80022c0:	08011ddc 	.word	0x08011ddc
 80022c4:	08011e00 	.word	0x08011e00
 80022c8:	08011e1c 	.word	0x08011e1c
 80022cc:	08011e34 	.word	0x08011e34
 80022d0:	08011e54 	.word	0x08011e54
 80022d4:	08011e78 	.word	0x08011e78
 80022d8:	08011ec8 	.word	0x08011ec8
 80022dc:	08011ef0 	.word	0x08011ef0
 80022e0:	08011f2c 	.word	0x08011f2c
 80022e4:	08011f50 	.word	0x08011f50
 80022e8:	08011f8c 	.word	0x08011f8c

080022ec <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	330b      	adds	r3, #11
 80022fa:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3302      	adds	r3, #2
 8002300:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8002302:	4819      	ldr	r0, [pc, #100]	@ (8002368 <APPE_SysEvtError+0x7c>)
 8002304:	f00a fc46 	bl	800cb94 <DbgTraceGetFileName>
 8002308:	4601      	mov	r1, r0
 800230a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <APPE_SysEvtError+0x80>)
 8002310:	4817      	ldr	r0, [pc, #92]	@ (8002370 <APPE_SysEvtError+0x84>)
 8002312:	f00d fb0f 	bl	800f934 <iprintf>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	4815      	ldr	r0, [pc, #84]	@ (8002374 <APPE_SysEvtError+0x88>)
 800231e:	f00d fb09 	bl	800f934 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800232a:	480f      	ldr	r0, [pc, #60]	@ (8002368 <APPE_SysEvtError+0x7c>)
 800232c:	f00a fc32 	bl	800cb94 <DbgTraceGetFileName>
 8002330:	4601      	mov	r1, r0
 8002332:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8002336:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <APPE_SysEvtError+0x80>)
 8002338:	480d      	ldr	r0, [pc, #52]	@ (8002370 <APPE_SysEvtError+0x84>)
 800233a:	f00d fafb 	bl	800f934 <iprintf>
 800233e:	480e      	ldr	r0, [pc, #56]	@ (8002378 <APPE_SysEvtError+0x8c>)
 8002340:	f00d fb60 	bl	800fa04 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002344:	e00d      	b.n	8002362 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8002346:	4808      	ldr	r0, [pc, #32]	@ (8002368 <APPE_SysEvtError+0x7c>)
 8002348:	f00a fc24 	bl	800cb94 <DbgTraceGetFileName>
 800234c:	4601      	mov	r1, r0
 800234e:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8002352:	4a06      	ldr	r2, [pc, #24]	@ (800236c <APPE_SysEvtError+0x80>)
 8002354:	4806      	ldr	r0, [pc, #24]	@ (8002370 <APPE_SysEvtError+0x84>)
 8002356:	f00d faed 	bl	800f934 <iprintf>
 800235a:	4808      	ldr	r0, [pc, #32]	@ (800237c <APPE_SysEvtError+0x90>)
 800235c:	f00d fb52 	bl	800fa04 <puts>
  return;
 8002360:	bf00      	nop
}
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	08011db0 	.word	0x08011db0
 800236c:	08013254 	.word	0x08013254
 8002370:	08011dc8 	.word	0x08011dc8
 8002374:	08011fb0 	.word	0x08011fb0
 8002378:	08011fe0 	.word	0x08011fe0
 800237c:	0801201c 	.word	0x0801201c

08002380 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002388:	f107 0308 	add.w	r3, r7, #8
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	330b      	adds	r3, #11
 80023a4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3302      	adds	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d146      	bne.n	8002442 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80023b4:	4836      	ldr	r0, [pc, #216]	@ (8002490 <APPE_SysEvtReadyProcessing+0x110>)
 80023b6:	f00a fbed 	bl	800cb94 <DbgTraceGetFileName>
 80023ba:	4601      	mov	r1, r0
 80023bc:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80023c0:	4a34      	ldr	r2, [pc, #208]	@ (8002494 <APPE_SysEvtReadyProcessing+0x114>)
 80023c2:	4835      	ldr	r0, [pc, #212]	@ (8002498 <APPE_SysEvtReadyProcessing+0x118>)
 80023c4:	f00d fab6 	bl	800f934 <iprintf>
 80023c8:	4834      	ldr	r0, [pc, #208]	@ (800249c <APPE_SysEvtReadyProcessing+0x11c>)
 80023ca:	f00d fb1b 	bl	800fa04 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80023ce:	f7ff fbe3 	bl	8001b98 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80023d2:	230f      	movs	r3, #15
 80023d4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80023d6:	237f      	movs	r3, #127	@ 0x7f
 80023d8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80023da:	f7ff fd81 	bl	8001ee0 <LL_DBGMCU_GetRevisionID>
 80023de:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80023e0:	482b      	ldr	r0, [pc, #172]	@ (8002490 <APPE_SysEvtReadyProcessing+0x110>)
 80023e2:	f00a fbd7 	bl	800cb94 <DbgTraceGetFileName>
 80023e6:	4601      	mov	r1, r0
 80023e8:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80023ec:	4a29      	ldr	r2, [pc, #164]	@ (8002494 <APPE_SysEvtReadyProcessing+0x114>)
 80023ee:	482a      	ldr	r0, [pc, #168]	@ (8002498 <APPE_SysEvtReadyProcessing+0x118>)
 80023f0:	f00d faa0 	bl	800f934 <iprintf>
 80023f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023f6:	482a      	ldr	r0, [pc, #168]	@ (80024a0 <APPE_SysEvtReadyProcessing+0x120>)
 80023f8:	f00d fa9c 	bl	800f934 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	b29b      	uxth	r3, r3
 8002400:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002402:	f7ff fd5f 	bl	8001ec4 <LL_DBGMCU_GetDeviceID>
 8002406:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002408:	4821      	ldr	r0, [pc, #132]	@ (8002490 <APPE_SysEvtReadyProcessing+0x110>)
 800240a:	f00a fbc3 	bl	800cb94 <DbgTraceGetFileName>
 800240e:	4601      	mov	r1, r0
 8002410:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8002414:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <APPE_SysEvtReadyProcessing+0x114>)
 8002416:	4820      	ldr	r0, [pc, #128]	@ (8002498 <APPE_SysEvtReadyProcessing+0x118>)
 8002418:	f00d fa8c 	bl	800f934 <iprintf>
 800241c:	6a39      	ldr	r1, [r7, #32]
 800241e:	4821      	ldr	r0, [pc, #132]	@ (80024a4 <APPE_SysEvtReadyProcessing+0x124>)
 8002420:	f00d fa88 	bl	800f934 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	b29b      	uxth	r3, r3
 8002428:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	4618      	mov	r0, r3
 8002430:	f009 fe66 	bl	800c100 <SHCI_C2_Config>

    APP_BLE_Init();
 8002434:	f00b f992 	bl	800d75c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002438:	2100      	movs	r1, #0
 800243a:	2001      	movs	r0, #1
 800243c:	f00c fb16 	bl	800ea6c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002440:	e022      	b.n	8002488 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d110      	bne.n	800246c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800244a:	4811      	ldr	r0, [pc, #68]	@ (8002490 <APPE_SysEvtReadyProcessing+0x110>)
 800244c:	f00a fba2 	bl	800cb94 <DbgTraceGetFileName>
 8002450:	4601      	mov	r1, r0
 8002452:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8002456:	4a0f      	ldr	r2, [pc, #60]	@ (8002494 <APPE_SysEvtReadyProcessing+0x114>)
 8002458:	480f      	ldr	r0, [pc, #60]	@ (8002498 <APPE_SysEvtReadyProcessing+0x118>)
 800245a:	f00d fa6b 	bl	800f934 <iprintf>
 800245e:	4812      	ldr	r0, [pc, #72]	@ (80024a8 <APPE_SysEvtReadyProcessing+0x128>)
 8002460:	f00d fa68 	bl	800f934 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
  return;
 800246a:	e00d      	b.n	8002488 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800246c:	4808      	ldr	r0, [pc, #32]	@ (8002490 <APPE_SysEvtReadyProcessing+0x110>)
 800246e:	f00a fb91 	bl	800cb94 <DbgTraceGetFileName>
 8002472:	4601      	mov	r1, r0
 8002474:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002478:	4a06      	ldr	r2, [pc, #24]	@ (8002494 <APPE_SysEvtReadyProcessing+0x114>)
 800247a:	4807      	ldr	r0, [pc, #28]	@ (8002498 <APPE_SysEvtReadyProcessing+0x118>)
 800247c:	f00d fa5a 	bl	800f934 <iprintf>
 8002480:	480a      	ldr	r0, [pc, #40]	@ (80024ac <APPE_SysEvtReadyProcessing+0x12c>)
 8002482:	f00d fa57 	bl	800f934 <iprintf>
  return;
 8002486:	bf00      	nop
}
 8002488:	3728      	adds	r7, #40	@ 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	08011db0 	.word	0x08011db0
 8002494:	08013268 	.word	0x08013268
 8002498:	08011dc8 	.word	0x08011dc8
 800249c:	08012054 	.word	0x08012054
 80024a0:	08012070 	.word	0x08012070
 80024a4:	08012094 	.word	0x08012094
 80024a8:	080120b4 	.word	0x080120b4
 80024ac:	080120e8 	.word	0x080120e8

080024b0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f001 fe70 	bl	800419c <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d00a      	beq.n	80024e0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80024ca:	f001 fe7f 	bl	80041cc <HAL_GetTickFreq>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4413      	add	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d8:	e002      	b.n	80024e0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80024da:	f7ff fd0f 	bl	8001efc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80024de:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80024e0:	f001 fe5c 	bl	800419c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f4      	bhi.n	80024da <HAL_Delay+0x2a>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80024fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002502:	f00c fae3 	bl	800eacc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}

0800250a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800250e:	bf00      	nop
}
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002522:	f04f 30ff 	mov.w	r0, #4294967295
 8002526:	f00c fad1 	bl	800eacc <UTIL_SEQ_Run>
  return;
 800252a:	bf00      	nop
}
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800253a:	2100      	movs	r1, #0
 800253c:	2008      	movs	r0, #8
 800253e:	f00c fbe3 	bl	800ed08 <UTIL_SEQ_SetTask>
  return;
 8002542:	bf00      	nop
}
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002552:	2002      	movs	r0, #2
 8002554:	f00c fc44 	bl	800ede0 <UTIL_SEQ_SetEvt>
  return;
 8002558:	bf00      	nop
}
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002568:	2002      	movs	r0, #2
 800256a:	f00c fc59 	bl	800ee20 <UTIL_SEQ_WaitEvt>
  return;
 800256e:	bf00      	nop
}
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <LL_AHB1_GRP1_EnableClock>:
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002582:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002584:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4313      	orrs	r3, r2
 800258c:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800258e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002592:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4013      	ands	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025ac:	2004      	movs	r0, #4
 80025ae:	f7ff ffe2 	bl	8002576 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff ffdf 	bl	8002576 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	200b      	movs	r0, #11
 80025be:	f002 fdf6 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025c2:	200b      	movs	r0, #11
 80025c4:	f002 fe0d 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	200c      	movs	r0, #12
 80025ce:	f002 fdee 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80025d2:	200c      	movs	r0, #12
 80025d4:	f002 fe05 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	200d      	movs	r0, #13
 80025de:	f002 fde6 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80025e2:	200d      	movs	r0, #13
 80025e4:	f002 fdfd 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	200e      	movs	r0, #14
 80025ee:	f002 fdde 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80025f2:	200e      	movs	r0, #14
 80025f4:	f002 fdf5 	bl	80051e2 <HAL_NVIC_EnableIRQ>

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}

080025fc <LL_AHB2_GRP1_EnableClock>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002608:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800260a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4313      	orrs	r3, r2
 8002612:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002618:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002620:	68fb      	ldr	r3, [r7, #12]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	2001      	movs	r0, #1
 8002646:	f7ff ffd9 	bl	80025fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800264a:	2002      	movs	r0, #2
 800264c:	f7ff ffd6 	bl	80025fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002650:	2008      	movs	r0, #8
 8002652:	f7ff ffd3 	bl	80025fc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	2004      	movs	r0, #4
 8002658:	f7ff ffd0 	bl	80025fc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|LED_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f241 0102 	movw	r1, #4098	@ 0x1002
 8002662:	4817      	ldr	r0, [pc, #92]	@ (80026c0 <MX_GPIO_Init+0x90>)
 8002664:	f003 faa4 	bl	8005bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800266c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800266e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	4619      	mov	r1, r3
 800267c:	4811      	ldr	r0, [pc, #68]	@ (80026c4 <MX_GPIO_Init+0x94>)
 800267e:	f003 f927 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002688:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800268c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	4619      	mov	r1, r3
 8002696:	480c      	ldr	r0, [pc, #48]	@ (80026c8 <MX_GPIO_Init+0x98>)
 8002698:	f003 f91a 	bl	80058d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 LED_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LED_Pin;
 800269c:	f241 0302 	movw	r3, #4098	@ 0x1002
 80026a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4803      	ldr	r0, [pc, #12]	@ (80026c0 <MX_GPIO_Init+0x90>)
 80026b4:	f003 f90c 	bl	80058d0 <HAL_GPIO_Init>

}
 80026b8:	bf00      	nop
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	48000400 	.word	0x48000400
 80026c4:	48000800 	.word	0x48000800
 80026c8:	48000c00 	.word	0x48000c00

080026cc <LL_EXTI_EnableIT_0_31>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80026d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80026da:	4905      	ldr	r1, [pc, #20]	@ (80026f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	58000800 	.word	0x58000800

080026f4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4904      	ldr	r1, [pc, #16]	@ (8002714 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]

}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	58000800 	.word	0x58000800

08002718 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <ReadRtcSsrValue+0x3c>)
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	b29b      	uxth	r3, r3
 8002724:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <ReadRtcSsrValue+0x3c>)
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	b29b      	uxth	r3, r3
 800272c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800272e:	e005      	b.n	800273c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002734:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <ReadRtcSsrValue+0x3c>)
 8002736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002738:	b29b      	uxth	r3, r3
 800273a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d1f5      	bne.n	8002730 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002744:	683b      	ldr	r3, [r7, #0]
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40002800 	.word	0x40002800

08002758 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002768:	79ba      	ldrb	r2, [r7, #6]
 800276a:	491d      	ldr	r1, [pc, #116]	@ (80027e0 <LinkTimerAfter+0x88>)
 800276c:	4613      	mov	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4413      	add	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	440b      	add	r3, r1
 8002776:	3315      	adds	r3, #21
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b06      	cmp	r3, #6
 8002780:	d009      	beq.n	8002796 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	4916      	ldr	r1, [pc, #88]	@ (80027e0 <LinkTimerAfter+0x88>)
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	3314      	adds	r3, #20
 8002792:	79fa      	ldrb	r2, [r7, #7]
 8002794:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002796:	79fa      	ldrb	r2, [r7, #7]
 8002798:	4911      	ldr	r1, [pc, #68]	@ (80027e0 <LinkTimerAfter+0x88>)
 800279a:	4613      	mov	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3315      	adds	r3, #21
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80027aa:	79fa      	ldrb	r2, [r7, #7]
 80027ac:	490c      	ldr	r1, [pc, #48]	@ (80027e0 <LinkTimerAfter+0x88>)
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	440b      	add	r3, r1
 80027b8:	3314      	adds	r3, #20
 80027ba:	79ba      	ldrb	r2, [r7, #6]
 80027bc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80027be:	79ba      	ldrb	r2, [r7, #6]
 80027c0:	4907      	ldr	r1, [pc, #28]	@ (80027e0 <LinkTimerAfter+0x88>)
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	3315      	adds	r3, #21
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	701a      	strb	r2, [r3, #0]

  return;
 80027d2:	bf00      	nop
}
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	200002cc 	.word	0x200002cc

080027e4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80027f4:	4b29      	ldr	r3, [pc, #164]	@ (800289c <LinkTimerBefore+0xb8>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	79ba      	ldrb	r2, [r7, #6]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d032      	beq.n	8002866 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002800:	79ba      	ldrb	r2, [r7, #6]
 8002802:	4927      	ldr	r1, [pc, #156]	@ (80028a0 <LinkTimerBefore+0xbc>)
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	3314      	adds	r3, #20
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <LinkTimerBefore+0xbc>)
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3315      	adds	r3, #21
 8002824:	79fa      	ldrb	r2, [r7, #7]
 8002826:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	491d      	ldr	r1, [pc, #116]	@ (80028a0 <LinkTimerBefore+0xbc>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3315      	adds	r3, #21
 8002838:	79ba      	ldrb	r2, [r7, #6]
 800283a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	4918      	ldr	r1, [pc, #96]	@ (80028a0 <LinkTimerBefore+0xbc>)
 8002840:	4613      	mov	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	3314      	adds	r3, #20
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002850:	79ba      	ldrb	r2, [r7, #6]
 8002852:	4913      	ldr	r1, [pc, #76]	@ (80028a0 <LinkTimerBefore+0xbc>)
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3314      	adds	r3, #20
 8002860:	79fa      	ldrb	r2, [r7, #7]
 8002862:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002864:	e014      	b.n	8002890 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002866:	79fa      	ldrb	r2, [r7, #7]
 8002868:	490d      	ldr	r1, [pc, #52]	@ (80028a0 <LinkTimerBefore+0xbc>)
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3315      	adds	r3, #21
 8002876:	79ba      	ldrb	r2, [r7, #6]
 8002878:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800287a:	79ba      	ldrb	r2, [r7, #6]
 800287c:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <LinkTimerBefore+0xbc>)
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	3314      	adds	r3, #20
 800288a:	79fa      	ldrb	r2, [r7, #7]
 800288c:	701a      	strb	r2, [r3, #0]
  return;
 800288e:	bf00      	nop
}
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	2000035c 	.word	0x2000035c
 80028a0:	200002cc 	.word	0x200002cc

080028a4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80028ae:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <linkTimer+0x144>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d118      	bne.n	80028ea <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80028b8:	4b4b      	ldr	r3, [pc, #300]	@ (80029e8 <linkTimer+0x144>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <linkTimer+0x148>)
 80028c0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80028c2:	4a49      	ldr	r2, [pc, #292]	@ (80029e8 <linkTimer+0x144>)
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80028c8:	79fa      	ldrb	r2, [r7, #7]
 80028ca:	4949      	ldr	r1, [pc, #292]	@ (80029f0 <linkTimer+0x14c>)
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	3315      	adds	r3, #21
 80028d8:	2206      	movs	r2, #6
 80028da:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80028dc:	4b45      	ldr	r3, [pc, #276]	@ (80029f4 <linkTimer+0x150>)
 80028de:	f04f 32ff 	mov.w	r2, #4294967295
 80028e2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	81fb      	strh	r3, [r7, #14]
 80028e8:	e078      	b.n	80029dc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80028ea:	f000 f909 	bl	8002b00 <ReturnTimeElapsed>
 80028ee:	4603      	mov	r3, r0
 80028f0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80028f2:	79fa      	ldrb	r2, [r7, #7]
 80028f4:	493e      	ldr	r1, [pc, #248]	@ (80029f0 <linkTimer+0x14c>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	440b      	add	r3, r1
 8002900:	3308      	adds	r3, #8
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	89fb      	ldrh	r3, [r7, #14]
 8002906:	79fa      	ldrb	r2, [r7, #7]
 8002908:	4419      	add	r1, r3
 800290a:	4839      	ldr	r0, [pc, #228]	@ (80029f0 <linkTimer+0x14c>)
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4403      	add	r3, r0
 8002916:	3308      	adds	r3, #8
 8002918:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800291a:	79fa      	ldrb	r2, [r7, #7]
 800291c:	4934      	ldr	r1, [pc, #208]	@ (80029f0 <linkTimer+0x14c>)
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	3308      	adds	r3, #8
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800292e:	4b2e      	ldr	r3, [pc, #184]	@ (80029e8 <linkTimer+0x144>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	4a2e      	ldr	r2, [pc, #184]	@ (80029f0 <linkTimer+0x14c>)
 8002938:	460b      	mov	r3, r1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	440b      	add	r3, r1
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	3308      	adds	r3, #8
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d337      	bcc.n	80029bc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 800294c:	4b26      	ldr	r3, [pc, #152]	@ (80029e8 <linkTimer+0x144>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002952:	7b7a      	ldrb	r2, [r7, #13]
 8002954:	4926      	ldr	r1, [pc, #152]	@ (80029f0 <linkTimer+0x14c>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3315      	adds	r3, #21
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002966:	e013      	b.n	8002990 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002968:	7b7a      	ldrb	r2, [r7, #13]
 800296a:	4921      	ldr	r1, [pc, #132]	@ (80029f0 <linkTimer+0x14c>)
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3315      	adds	r3, #21
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800297c:	7b7a      	ldrb	r2, [r7, #13]
 800297e:	491c      	ldr	r1, [pc, #112]	@ (80029f0 <linkTimer+0x14c>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3315      	adds	r3, #21
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002990:	7b3b      	ldrb	r3, [r7, #12]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d00b      	beq.n	80029ae <linkTimer+0x10a>
 8002996:	7b3a      	ldrb	r2, [r7, #12]
 8002998:	4915      	ldr	r1, [pc, #84]	@ (80029f0 <linkTimer+0x14c>)
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	3308      	adds	r3, #8
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d2dc      	bcs.n	8002968 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80029ae:	7b7a      	ldrb	r2, [r7, #13]
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fecf 	bl	8002758 <LinkTimerAfter>
 80029ba:	e00f      	b.n	80029dc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80029bc:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <linkTimer+0x144>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff0c 	bl	80027e4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <linkTimer+0x144>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <linkTimer+0x148>)
 80029d4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80029d6:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <linkTimer+0x144>)
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80029dc:	89fb      	ldrh	r3, [r7, #14]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000035c 	.word	0x2000035c
 80029ec:	2000035d 	.word	0x2000035d
 80029f0:	200002cc 	.word	0x200002cc
 80029f4:	20000360 	.word	0x20000360

080029f8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	460a      	mov	r2, r1
 8002a02:	71fb      	strb	r3, [r7, #7]
 8002a04:	4613      	mov	r3, r2
 8002a06:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002a08:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <UnlinkTimer+0xf8>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d111      	bne.n	8002a38 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002a14:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <UnlinkTimer+0xf8>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4b36      	ldr	r3, [pc, #216]	@ (8002af4 <UnlinkTimer+0xfc>)
 8002a1c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002a1e:	79fa      	ldrb	r2, [r7, #7]
 8002a20:	4935      	ldr	r1, [pc, #212]	@ (8002af8 <UnlinkTimer+0x100>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3315      	adds	r3, #21
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <UnlinkTimer+0xf8>)
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e03e      	b.n	8002ab6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002a38:	79fa      	ldrb	r2, [r7, #7]
 8002a3a:	492f      	ldr	r1, [pc, #188]	@ (8002af8 <UnlinkTimer+0x100>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3314      	adds	r3, #20
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002a4c:	79fa      	ldrb	r2, [r7, #7]
 8002a4e:	492a      	ldr	r1, [pc, #168]	@ (8002af8 <UnlinkTimer+0x100>)
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	3315      	adds	r3, #21
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002a60:	79f9      	ldrb	r1, [r7, #7]
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	4824      	ldr	r0, [pc, #144]	@ (8002af8 <UnlinkTimer+0x100>)
 8002a66:	460b      	mov	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	440b      	add	r3, r1
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4403      	add	r3, r0
 8002a70:	3315      	adds	r3, #21
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b2d8      	uxtb	r0, r3
 8002a76:	4920      	ldr	r1, [pc, #128]	@ (8002af8 <UnlinkTimer+0x100>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	3315      	adds	r3, #21
 8002a84:	4602      	mov	r2, r0
 8002a86:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d013      	beq.n	8002ab6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002a8e:	79f9      	ldrb	r1, [r7, #7]
 8002a90:	7bba      	ldrb	r2, [r7, #14]
 8002a92:	4819      	ldr	r0, [pc, #100]	@ (8002af8 <UnlinkTimer+0x100>)
 8002a94:	460b      	mov	r3, r1
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	440b      	add	r3, r1
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4403      	add	r3, r0
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b2d8      	uxtb	r0, r3
 8002aa4:	4914      	ldr	r1, [pc, #80]	@ (8002af8 <UnlinkTimer+0x100>)
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	3314      	adds	r3, #20
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002ab6:	79fa      	ldrb	r2, [r7, #7]
 8002ab8:	490f      	ldr	r1, [pc, #60]	@ (8002af8 <UnlinkTimer+0x100>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002aca:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <UnlinkTimer+0xf8>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b06      	cmp	r3, #6
 8002ad2:	d107      	bne.n	8002ae4 <UnlinkTimer+0xec>
 8002ad4:	79bb      	ldrb	r3, [r7, #6]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d104      	bne.n	8002ae4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <UnlinkTimer+0x104>)
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  return;
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
}
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	2000035c 	.word	0x2000035c
 8002af4:	2000035d 	.word	0x2000035d
 8002af8:	200002cc 	.word	0x200002cc
 8002afc:	20000360 	.word	0x20000360

08002b00 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002b06:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <ReturnTimeElapsed+0x70>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0e:	d026      	beq.n	8002b5e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002b10:	f7ff fe02 	bl	8002718 <ReadRtcSsrValue>
 8002b14:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002b16:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <ReturnTimeElapsed+0x70>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d805      	bhi.n	8002b2c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <ReturnTimeElapsed+0x70>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	e00a      	b.n	8002b42 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	@ (8002b74 <ReturnTimeElapsed+0x74>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002b38:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <ReturnTimeElapsed+0x70>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4413      	add	r3, r2
 8002b40:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <ReturnTimeElapsed+0x78>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002b50:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <ReturnTimeElapsed+0x7c>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	40d3      	lsrs	r3, r2
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	e001      	b.n	8002b62 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	b29b      	uxth	r3, r3
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000360 	.word	0x20000360
 8002b74:	20000368 	.word	0x20000368
 8002b78:	20000366 	.word	0x20000366
 8002b7c:	20000365 	.word	0x20000365

08002b80 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d108      	bne.n	8002ba2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002b90:	f7ff fdc2 	bl	8002718 <ReadRtcSsrValue>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <RestartWakeupCounter+0x9c>)
 8002b98:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002b9a:	2003      	movs	r0, #3
 8002b9c:	f002 fb49 	bl	8005232 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002ba0:	e039      	b.n	8002c16 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d803      	bhi.n	8002bb0 <RestartWakeupCounter+0x30>
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <RestartWakeupCounter+0xa0>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d002      	beq.n	8002bb6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002bb6:	bf00      	nop
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <RestartWakeupCounter+0xa4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f8      	beq.n	8002bb8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <RestartWakeupCounter+0xa4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <RestartWakeupCounter+0xa4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002bd6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002bd8:	4b13      	ldr	r3, [pc, #76]	@ (8002c28 <RestartWakeupCounter+0xa8>)
 8002bda:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002bde:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002be0:	2003      	movs	r0, #3
 8002be2:	f002 fb34 	bl	800524e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002be6:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <RestartWakeupCounter+0xac>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	041b      	lsls	r3, r3, #16
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	490e      	ldr	r1, [pc, #56]	@ (8002c2c <RestartWakeupCounter+0xac>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002bf6:	f7ff fd8f 	bl	8002718 <ReadRtcSsrValue>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <RestartWakeupCounter+0x9c>)
 8002bfe:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002c00:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <RestartWakeupCounter+0xa4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <RestartWakeupCounter+0xa4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c0e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002c10:	f3af 8000 	nop.w
  return ;
 8002c14:	bf00      	nop
}
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20000360 	.word	0x20000360
 8002c20:	20000365 	.word	0x20000365
 8002c24:	200003ac 	.word	0x200003ac
 8002c28:	58000800 	.word	0x58000800
 8002c2c:	40002800 	.word	0x40002800

08002c30 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002c36:	4b45      	ldr	r3, [pc, #276]	@ (8002d4c <RescheduleTimerList+0x11c>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c42:	d107      	bne.n	8002c54 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002c44:	bf00      	nop
 8002c46:	4b42      	ldr	r3, [pc, #264]	@ (8002d50 <RescheduleTimerList+0x120>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f8      	bne.n	8002c46 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002c54:	4b3e      	ldr	r3, [pc, #248]	@ (8002d50 <RescheduleTimerList+0x120>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <RescheduleTimerList+0x120>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c62:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002c64:	4b3b      	ldr	r3, [pc, #236]	@ (8002d54 <RescheduleTimerList+0x124>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	493a      	ldr	r1, [pc, #232]	@ (8002d58 <RescheduleTimerList+0x128>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	440b      	add	r3, r1
 8002c78:	3308      	adds	r3, #8
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002c7e:	f7ff ff3f 	bl	8002b00 <ReturnTimeElapsed>
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d205      	bcs.n	8002c9a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002c92:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <RescheduleTimerList+0x12c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e04d      	b.n	8002d36 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4a30      	ldr	r2, [pc, #192]	@ (8002d60 <RescheduleTimerList+0x130>)
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d906      	bls.n	8002cba <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <RescheduleTimerList+0x130>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <RescheduleTimerList+0x12c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
 8002cb8:	e03d      	b.n	8002d36 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <RescheduleTimerList+0x12c>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002cca:	e034      	b.n	8002d36 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	4922      	ldr	r1, [pc, #136]	@ (8002d58 <RescheduleTimerList+0x128>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3308      	adds	r3, #8
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d20a      	bcs.n	8002cfa <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	491c      	ldr	r1, [pc, #112]	@ (8002d58 <RescheduleTimerList+0x128>)
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3308      	adds	r3, #8
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e013      	b.n	8002d22 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	4916      	ldr	r1, [pc, #88]	@ (8002d58 <RescheduleTimerList+0x128>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3308      	adds	r3, #8
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	1ac9      	subs	r1, r1, r3
 8002d12:	4811      	ldr	r0, [pc, #68]	@ (8002d58 <RescheduleTimerList+0x128>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4403      	add	r3, r0
 8002d1e:	3308      	adds	r3, #8
 8002d20:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <RescheduleTimerList+0x128>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3315      	adds	r3, #21
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d1c7      	bne.n	8002ccc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002d3c:	89bb      	ldrh	r3, [r7, #12]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff1e 	bl	8002b80 <RestartWakeupCounter>

  return ;
 8002d44:	bf00      	nop
}
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40002800 	.word	0x40002800
 8002d50:	200003ac 	.word	0x200003ac
 8002d54:	2000035c 	.word	0x2000035c
 8002d58:	200002cc 	.word	0x200002cc
 8002d5c:	20000364 	.word	0x20000364
 8002d60:	2000036a 	.word	0x2000036a

08002d64 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	@ 0x28
 8002d68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	617b      	str	r3, [r7, #20]
  return(result);
 8002d70:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002d72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d78:	4b59      	ldr	r3, [pc, #356]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	22ca      	movs	r2, #202	@ 0xca
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d80:	4b57      	ldr	r3, [pc, #348]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2253      	movs	r2, #83	@ 0x53
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002d88:	4b55      	ldr	r3, [pc, #340]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	4b54      	ldr	r3, [pc, #336]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d96:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002d98:	4b52      	ldr	r3, [pc, #328]	@ (8002ee4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002da0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002da4:	4950      	ldr	r1, [pc, #320]	@ (8002ee8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	4413      	add	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	440b      	add	r3, r1
 8002db0:	330c      	adds	r3, #12
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d16e      	bne.n	8002e98 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002dba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002dbe:	494a      	ldr	r1, [pc, #296]	@ (8002ee8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	440b      	add	r3, r1
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002dce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002dd2:	4945      	ldr	r1, [pc, #276]	@ (8002ee8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3310      	adds	r3, #16
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002de4:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d04c      	beq.n	8002e88 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002dee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002df2:	493d      	ldr	r1, [pc, #244]	@ (8002ee8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	330d      	adds	r3, #13
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d124      	bne.n	8002e52 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002e08:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff fdf2 	bl	80029f8 <UnlinkTimer>
 8002e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e16:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f383 8810 	msr	PRIMASK, r3
}
 8002e1e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002e20:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002e24:	4930      	ldr	r1, [pc, #192]	@ (8002ee8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3304      	adds	r3, #4
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fa32 	bl	80032a4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e40:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	22ca      	movs	r2, #202	@ 0xca
 8002e46:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2253      	movs	r2, #83	@ 0x53
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e50:	e012      	b.n	8002e78 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f383 8810 	msr	PRIMASK, r3
}
 8002e5c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f99a 	bl	800319c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	22ca      	movs	r2, #202	@ 0xca
 8002e6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2253      	movs	r2, #83	@ 0x53
 8002e76:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002e78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	69b8      	ldr	r0, [r7, #24]
 8002e82:	f000 fa95 	bl	80033b0 <HW_TS_RTC_Int_AppNot>
 8002e86:	e022      	b.n	8002ece <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002e88:	f7ff fed2 	bl	8002c30 <RescheduleTimerList>
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	e01a      	b.n	8002ece <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002e98:	bf00      	nop
 8002e9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f8      	beq.n	8002e9a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002eb8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002eba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002ebc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002ece:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	22ff      	movs	r2, #255	@ 0xff
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002ed6:	bf00      	nop
}
 8002ed8:	3728      	adds	r7, #40	@ 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200003ac 	.word	0x200003ac
 8002ee4:	2000035c 	.word	0x2000035c
 8002ee8:	200002cc 	.word	0x200002cc
 8002eec:	20000364 	.word	0x20000364
 8002ef0:	58000800 	.word	0x58000800

08002ef4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b088      	sub	sp, #32
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002f00:	4b5e      	ldr	r3, [pc, #376]	@ (800307c <HW_TS_Init+0x188>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	22ca      	movs	r2, #202	@ 0xca
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f08:	4b5c      	ldr	r3, [pc, #368]	@ (800307c <HW_TS_Init+0x188>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2253      	movs	r2, #83	@ 0x53
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f10:	4b5b      	ldr	r3, [pc, #364]	@ (8003080 <HW_TS_Init+0x18c>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4a5a      	ldr	r2, [pc, #360]	@ (8003080 <HW_TS_Init+0x18c>)
 8002f16:	f043 0320 	orr.w	r3, r3, #32
 8002f1a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002f1c:	4b58      	ldr	r3, [pc, #352]	@ (8003080 <HW_TS_Init+0x18c>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f1c3 0304 	rsb	r3, r3, #4
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b55      	ldr	r3, [pc, #340]	@ (8003084 <HW_TS_Init+0x190>)
 8002f30:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002f32:	4b53      	ldr	r3, [pc, #332]	@ (8003080 <HW_TS_Init+0x18c>)
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f3a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002f3e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	fa92 f2a2 	rbit	r2, r2
 8002f46:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	2a00      	cmp	r2, #0
 8002f50:	d101      	bne.n	8002f56 <HW_TS_Init+0x62>
  {
    return 32U;
 8002f52:	2220      	movs	r2, #32
 8002f54:	e003      	b.n	8002f5e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	40d3      	lsrs	r3, r2
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	4b48      	ldr	r3, [pc, #288]	@ (8003088 <HW_TS_Init+0x194>)
 8002f68:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002f6a:	4b45      	ldr	r3, [pc, #276]	@ (8003080 <HW_TS_Init+0x18c>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	4b44      	ldr	r3, [pc, #272]	@ (800308c <HW_TS_Init+0x198>)
 8002f7c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002f7e:	4b43      	ldr	r3, [pc, #268]	@ (800308c <HW_TS_Init+0x198>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4a40      	ldr	r2, [pc, #256]	@ (8003088 <HW_TS_Init+0x194>)
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f90:	4a3c      	ldr	r2, [pc, #240]	@ (8003084 <HW_TS_Init+0x190>)
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	40d3      	lsrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d904      	bls.n	8002fac <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <HW_TS_Init+0x19c>)
 8002fa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	e003      	b.n	8002fb4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HW_TS_Init+0x19c>)
 8002fb2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002fb4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fb8:	f7ff fb9c 	bl	80026f4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002fbc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002fc0:	f7ff fb84 	bl	80026cc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d13d      	bne.n	8003046 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002fca:	4b32      	ldr	r3, [pc, #200]	@ (8003094 <HW_TS_Init+0x1a0>)
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002fd0:	4b31      	ldr	r3, [pc, #196]	@ (8003098 <HW_TS_Init+0x1a4>)
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e00c      	b.n	8002ff8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002fde:	7ffa      	ldrb	r2, [r7, #31]
 8002fe0:	492e      	ldr	r1, [pc, #184]	@ (800309c <HW_TS_Init+0x1a8>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	440b      	add	r3, r1
 8002fec:	330c      	adds	r3, #12
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002ff2:	7ffb      	ldrb	r3, [r7, #31]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d9ef      	bls.n	8002fde <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002ffe:	4b28      	ldr	r3, [pc, #160]	@ (80030a0 <HW_TS_Init+0x1ac>)
 8003000:	2206      	movs	r2, #6
 8003002:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <HW_TS_Init+0x188>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	4b1c      	ldr	r3, [pc, #112]	@ (800307c <HW_TS_Init+0x188>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003012:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HW_TS_Init+0x188>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	b2da      	uxtb	r2, r3
 800301c:	4b17      	ldr	r3, [pc, #92]	@ (800307c <HW_TS_Init+0x188>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003024:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8003026:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <HW_TS_Init+0x1b0>)
 8003028:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800302c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800302e:	2003      	movs	r0, #3
 8003030:	f002 f90d 	bl	800524e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8003034:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HW_TS_Init+0x188>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HW_TS_Init+0x188>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	e009      	b.n	800305a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <HW_TS_Init+0x188>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003054:	2003      	movs	r0, #3
 8003056:	f002 f8ec 	bl	8005232 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800305a:	4b08      	ldr	r3, [pc, #32]	@ (800307c <HW_TS_Init+0x188>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	22ff      	movs	r2, #255	@ 0xff
 8003060:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003062:	2200      	movs	r2, #0
 8003064:	2103      	movs	r1, #3
 8003066:	2003      	movs	r0, #3
 8003068:	f002 f8a1 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800306c:	2003      	movs	r0, #3
 800306e:	f002 f8b8 	bl	80051e2 <HAL_NVIC_EnableIRQ>

  return;
 8003072:	bf00      	nop
}
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200003ac 	.word	0x200003ac
 8003080:	40002800 	.word	0x40002800
 8003084:	20000365 	.word	0x20000365
 8003088:	20000366 	.word	0x20000366
 800308c:	20000368 	.word	0x20000368
 8003090:	2000036a 	.word	0x2000036a
 8003094:	20000364 	.word	0x20000364
 8003098:	20000360 	.word	0x20000360
 800309c:	200002cc 	.word	0x200002cc
 80030a0:	2000035c 	.word	0x2000035c
 80030a4:	58000800 	.word	0x58000800

080030a8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b08b      	sub	sp, #44	@ 0x2c
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030be:	f3ef 8310 	mrs	r3, PRIMASK
 80030c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80030c4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80030c8:	b672      	cpsid	i
}
 80030ca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80030cc:	e004      	b.n	80030d8 <HW_TS_Create+0x30>
  {
    loop++;
 80030ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030d2:	3301      	adds	r3, #1
 80030d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80030d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030dc:	2b05      	cmp	r3, #5
 80030de:	d80c      	bhi.n	80030fa <HW_TS_Create+0x52>
 80030e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80030e4:	492c      	ldr	r1, [pc, #176]	@ (8003198 <HW_TS_Create+0xf0>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	330c      	adds	r3, #12
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e9      	bne.n	80030ce <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d038      	beq.n	8003174 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8003102:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003106:	4924      	ldr	r1, [pc, #144]	@ (8003198 <HW_TS_Create+0xf0>)
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	330c      	adds	r3, #12
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8003124:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003128:	491b      	ldr	r1, [pc, #108]	@ (8003198 <HW_TS_Create+0xf0>)
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	3310      	adds	r3, #16
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800313a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800313e:	4916      	ldr	r1, [pc, #88]	@ (8003198 <HW_TS_Create+0xf0>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	440b      	add	r3, r1
 800314a:	330d      	adds	r3, #13
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8003150:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003154:	4910      	ldr	r1, [pc, #64]	@ (8003198 <HW_TS_Create+0xf0>)
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800316a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800316c:	2300      	movs	r3, #0
 800316e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003172:	e008      	b.n	8003186 <HW_TS_Create+0xde>
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 8003186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800318a:	4618      	mov	r0, r3
 800318c:	372c      	adds	r7, #44	@ 0x2c
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200002cc 	.word	0x200002cc

0800319c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a6:	f3ef 8310 	mrs	r3, PRIMASK
 80031aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80031ac:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80031ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80031b0:	b672      	cpsid	i
}
 80031b2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80031b4:	2003      	movs	r0, #3
 80031b6:	f002 f822 	bl	80051fe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80031ba:	4b34      	ldr	r3, [pc, #208]	@ (800328c <HW_TS_Stop+0xf0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	22ca      	movs	r2, #202	@ 0xca
 80031c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80031c2:	4b32      	ldr	r3, [pc, #200]	@ (800328c <HW_TS_Stop+0xf0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2253      	movs	r2, #83	@ 0x53
 80031c8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80031ca:	79fa      	ldrb	r2, [r7, #7]
 80031cc:	4930      	ldr	r1, [pc, #192]	@ (8003290 <HW_TS_Stop+0xf4>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	440b      	add	r3, r1
 80031d8:	330c      	adds	r3, #12
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d142      	bne.n	8003268 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fc06 	bl	80029f8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80031ec:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HW_TS_Stop+0xf8>)
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d12f      	bne.n	8003258 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80031f8:	4b27      	ldr	r3, [pc, #156]	@ (8003298 <HW_TS_Stop+0xfc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003204:	d107      	bne.n	8003216 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003206:	bf00      	nop
 8003208:	4b20      	ldr	r3, [pc, #128]	@ (800328c <HW_TS_Stop+0xf0>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f8      	bne.n	8003208 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003216:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <HW_TS_Stop+0xf0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b1b      	ldr	r3, [pc, #108]	@ (800328c <HW_TS_Stop+0xf0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003224:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003226:	bf00      	nop
 8003228:	4b18      	ldr	r3, [pc, #96]	@ (800328c <HW_TS_Stop+0xf0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f8      	beq.n	8003228 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <HW_TS_Stop+0xf0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	b2da      	uxtb	r2, r3
 800323e:	4b13      	ldr	r3, [pc, #76]	@ (800328c <HW_TS_Stop+0xf0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003246:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003248:	4b14      	ldr	r3, [pc, #80]	@ (800329c <HW_TS_Stop+0x100>)
 800324a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800324e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003250:	2003      	movs	r0, #3
 8003252:	f001 fffc 	bl	800524e <HAL_NVIC_ClearPendingIRQ>
 8003256:	e007      	b.n	8003268 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <HW_TS_Stop+0x104>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	7cfa      	ldrb	r2, [r7, #19]
 8003260:	429a      	cmp	r2, r3
 8003262:	d001      	beq.n	8003268 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003264:	f7ff fce4 	bl	8002c30 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <HW_TS_Stop+0xf0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	22ff      	movs	r2, #255	@ 0xff
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003270:	2003      	movs	r0, #3
 8003272:	f001 ffb6 	bl	80051e2 <HAL_NVIC_EnableIRQ>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003282:	bf00      	nop
}
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	200003ac 	.word	0x200003ac
 8003290:	200002cc 	.word	0x200002cc
 8003294:	2000035c 	.word	0x2000035c
 8003298:	40002800 	.word	0x40002800
 800329c:	58000800 	.word	0x58000800
 80032a0:	2000035d 	.word	0x2000035d

080032a4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	493b      	ldr	r1, [pc, #236]	@ (80033a0 <HW_TS_Start+0xfc>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	330c      	adds	r3, #12
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d103      	bne.n	80032d0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff66 	bl	800319c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d0:	f3ef 8310 	mrs	r3, PRIMASK
 80032d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032d6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80032d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80032da:	b672      	cpsid	i
}
 80032dc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80032de:	2003      	movs	r0, #3
 80032e0:	f001 ff8d 	bl	80051fe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80032e4:	4b2f      	ldr	r3, [pc, #188]	@ (80033a4 <HW_TS_Start+0x100>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	22ca      	movs	r2, #202	@ 0xca
 80032ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80032ec:	4b2d      	ldr	r3, [pc, #180]	@ (80033a4 <HW_TS_Start+0x100>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2253      	movs	r2, #83	@ 0x53
 80032f2:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80032f4:	79fa      	ldrb	r2, [r7, #7]
 80032f6:	492a      	ldr	r1, [pc, #168]	@ (80033a0 <HW_TS_Start+0xfc>)
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	440b      	add	r3, r1
 8003302:	330c      	adds	r3, #12
 8003304:	2202      	movs	r2, #2
 8003306:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003308:	79fa      	ldrb	r2, [r7, #7]
 800330a:	4925      	ldr	r1, [pc, #148]	@ (80033a0 <HW_TS_Start+0xfc>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	3308      	adds	r3, #8
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800331c:	79fa      	ldrb	r2, [r7, #7]
 800331e:	4920      	ldr	r1, [pc, #128]	@ (80033a0 <HW_TS_Start+0xfc>)
 8003320:	4613      	mov	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	3304      	adds	r3, #4
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fab6 	bl	80028a4 <linkTimer>
 8003338:	4603      	mov	r3, r0
 800333a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800333c:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <HW_TS_Start+0x104>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003342:	4b1a      	ldr	r3, [pc, #104]	@ (80033ac <HW_TS_Start+0x108>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	7c7a      	ldrb	r2, [r7, #17]
 800334a:	429a      	cmp	r2, r3
 800334c:	d002      	beq.n	8003354 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800334e:	f7ff fc6f 	bl	8002c30 <RescheduleTimerList>
 8003352:	e013      	b.n	800337c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003354:	79fa      	ldrb	r2, [r7, #7]
 8003356:	4912      	ldr	r1, [pc, #72]	@ (80033a0 <HW_TS_Start+0xfc>)
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	440b      	add	r3, r1
 8003362:	3308      	adds	r3, #8
 8003364:	6819      	ldr	r1, [r3, #0]
 8003366:	8a7b      	ldrh	r3, [r7, #18]
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	1ac9      	subs	r1, r1, r3
 800336c:	480c      	ldr	r0, [pc, #48]	@ (80033a0 <HW_TS_Start+0xfc>)
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4403      	add	r3, r0
 8003378:	3308      	adds	r3, #8
 800337a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HW_TS_Start+0x100>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	22ff      	movs	r2, #255	@ 0xff
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003384:	2003      	movs	r0, #3
 8003386:	f001 ff2c 	bl	80051e2 <HAL_NVIC_EnableIRQ>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f383 8810 	msr	PRIMASK, r3
}
 8003394:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003396:	bf00      	nop
}
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200002cc 	.word	0x200002cc
 80033a4:	200003ac 	.word	0x200003ac
 80033a8:	2000035c 	.word	0x2000035c
 80033ac:	2000035d 	.word	0x2000035d

080033b0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	460b      	mov	r3, r1
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4798      	blx	r3

  return;
 80033c2:	bf00      	nop
}
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	4603      	mov	r3, r0
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	4613      	mov	r3, r2
 80033dc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80033ec:	4a17      	ldr	r2, [pc, #92]	@ (800344c <HW_UART_Transmit_DMA+0x80>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80033f2:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <HW_UART_Transmit_DMA+0x84>)
 80033f4:	4a17      	ldr	r2, [pc, #92]	@ (8003454 <HW_UART_Transmit_DMA+0x88>)
 80033f6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80033f8:	89bb      	ldrh	r3, [r7, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4814      	ldr	r0, [pc, #80]	@ (8003450 <HW_UART_Transmit_DMA+0x84>)
 8003400:	f005 fe3c 	bl	800907c <HAL_UART_Transmit_DMA>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]
            break;
 8003408:	e000      	b.n	800340c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800340a:	bf00      	nop
    }

    switch (hal_status)
 800340c:	7dfb      	ldrb	r3, [r7, #23]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d816      	bhi.n	8003440 <HW_UART_Transmit_DMA+0x74>
 8003412:	a201      	add	r2, pc, #4	@ (adr r2, 8003418 <HW_UART_Transmit_DMA+0x4c>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	08003429 	.word	0x08003429
 800341c:	0800342f 	.word	0x0800342f
 8003420:	08003435 	.word	0x08003435
 8003424:	0800343b 	.word	0x0800343b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003428:	2300      	movs	r3, #0
 800342a:	75bb      	strb	r3, [r7, #22]
            break;
 800342c:	e009      	b.n	8003442 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800342e:	2301      	movs	r3, #1
 8003430:	75bb      	strb	r3, [r7, #22]
            break;
 8003432:	e006      	b.n	8003442 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003434:	2302      	movs	r3, #2
 8003436:	75bb      	strb	r3, [r7, #22]
            break;
 8003438:	e003      	b.n	8003442 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800343a:	2303      	movs	r3, #3
 800343c:	75bb      	strb	r3, [r7, #22]
            break;
 800343e:	e000      	b.n	8003442 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8003440:	bf00      	nop
    }

    return hw_status;
 8003442:	7dbb      	ldrb	r3, [r7, #22]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	2000036c 	.word	0x2000036c
 8003450:	200004f8 	.word	0x200004f8
 8003454:	40013800 	.word	0x40013800

08003458 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4b09      	ldr	r3, [pc, #36]	@ (800348c <HAL_UART_TxCpltCallback+0x34>)
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800346c:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <HAL_UART_TxCpltCallback+0x38>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <HAL_UART_TxCpltCallback+0x38>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4798      	blx	r3
            }
            break;
 800347a:	e001      	b.n	8003480 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003480:	bf00      	nop
    }

    return;
 8003482:	bf00      	nop
}
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40013800 	.word	0x40013800
 8003490:	2000036c 	.word	0x2000036c

08003494 <LL_AHB3_GRP1_EnableClock>:
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4013      	ands	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034b8:	68fb      	ldr	r3, [r7, #12]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80034cc:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <MX_IPCC_Init+0x20>)
 80034ce:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <MX_IPCC_Init+0x24>)
 80034d0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80034d2:	4805      	ldr	r0, [pc, #20]	@ (80034e8 <MX_IPCC_Init+0x20>)
 80034d4:	f002 fba8 	bl	8005c28 <HAL_IPCC_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80034de:	f000 f8ef 	bl	80036c0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000370 	.word	0x20000370
 80034ec:	58000c00 	.word	0x58000c00

080034f0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a05      	ldr	r2, [pc, #20]	@ (8003514 <HAL_IPCC_MspInit+0x24>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d103      	bne.n	800350a <HAL_IPCC_MspInit+0x1a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003502:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003506:	f7ff ffc5 	bl	8003494 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	58000c00 	.word	0x58000c00

08003518 <LL_RCC_LSE_SetDriveCapability>:
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003528:	f023 0218 	bic.w	r2, r3, #24
 800352c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003548:	f000 fdba 	bl	80040c0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800354c:	f7fe fd16 	bl	8001f7c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003550:	f000 f822 	bl	8003598 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003554:	f000 f894 	bl	8003680 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003558:	f7ff ffb6 	bl	80034c8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 800355c:	f000 f8b6 	bl	80036cc <MX_RF_Init>
  MX_GPIO_Init();
 8003560:	f7ff f866 	bl	8002630 <MX_GPIO_Init>
  MX_DMA_Init();
 8003564:	f7ff f820 	bl	80025a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003568:	f7fe fa04 	bl	8001974 <MX_ADC1_Init>
  MX_RTC_Init();
 800356c:	f000 f8e0 	bl	8003730 <MX_RTC_Init>
  MX_SPI2_Init();
 8003570:	f000 f978 	bl	8003864 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003574:	f000 fc3e 	bl	8003df4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003578:	2201      	movs	r2, #1
 800357a:	2102      	movs	r1, #2
 800357c:	4805      	ldr	r0, [pc, #20]	@ (8003594 <main+0x50>)
 800357e:	f002 fb17 	bl	8005bb0 <HAL_GPIO_WritePin>
  APPD_Init();
 8003582:	f7fe faf6 	bl	8001b72 <APPD_Init>
//  lsm6dsv16b_pedometer();
  lsm6dsv16b_pedometer();
 8003586:	f7fd fd35 	bl	8000ff4 <lsm6dsv16b_pedometer>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800358a:	f7fe fd05 	bl	8001f98 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800358e:	f7fe ffb4 	bl	80024fa <MX_APPE_Process>
 8003592:	e7fc      	b.n	800358e <main+0x4a>
 8003594:	48000400 	.word	0x48000400

08003598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b09a      	sub	sp, #104	@ 0x68
 800359c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359e:	f107 0320 	add.w	r3, r7, #32
 80035a2:	2248      	movs	r2, #72	@ 0x48
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f00c fb40 	bl	800fc2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	605a      	str	r2, [r3, #4]
 80035b4:	609a      	str	r2, [r3, #8]
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	611a      	str	r2, [r3, #16]
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035cc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f023 0303 	bic.w	r3, r3, #3
 80035d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80035e2:	f002 fc33 	bl	8005e4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80035e6:	2010      	movs	r0, #16
 80035e8:	f7ff ff96 	bl	8003518 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ec:	4b23      	ldr	r3, [pc, #140]	@ (800367c <SystemClock_Config+0xe4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035f4:	4a21      	ldr	r2, [pc, #132]	@ (800367c <SystemClock_Config+0xe4>)
 80035f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b1f      	ldr	r3, [pc, #124]	@ (800367c <SystemClock_Config+0xe4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003608:	2327      	movs	r3, #39	@ 0x27
 800360a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800360c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003612:	2301      	movs	r3, #1
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003616:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800361c:	2301      	movs	r3, #1
 800361e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003620:	2340      	movs	r3, #64	@ 0x40
 8003622:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003624:	2300      	movs	r3, #0
 8003626:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003628:	2360      	movs	r3, #96	@ 0x60
 800362a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800362c:	2300      	movs	r3, #0
 800362e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	4618      	mov	r0, r3
 8003636:	f002 ffef 	bl	8006618 <HAL_RCC_OscConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003640:	f000 f83e 	bl	80036c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003644:	236f      	movs	r3, #111	@ 0x6f
 8003646:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003648:	2302      	movs	r3, #2
 800364a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	2101      	movs	r1, #1
 8003664:	4618      	mov	r0, r3
 8003666:	f003 fb4b 	bl	8006d00 <HAL_RCC_ClockConfig>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8003670:	f000 f826 	bl	80036c0 <Error_Handler>
  }
}
 8003674:	bf00      	nop
 8003676:	3768      	adds	r7, #104	@ 0x68
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	58000400 	.word	0x58000400

08003680 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b094      	sub	sp, #80	@ 0x50
 8003684:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003686:	463b      	mov	r3, r7
 8003688:	2250      	movs	r2, #80	@ 0x50
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f00c facd 	bl	800fc2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8003692:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003696:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003698:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800369c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800369e:	2302      	movs	r3, #2
 80036a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a6:	463b      	mov	r3, r7
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 ff66 	bl	800757a <HAL_RCCEx_PeriphCLKConfig>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80036b4:	f000 f804 	bl	80036c0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80036b8:	bf00      	nop
 80036ba:	3750      	adds	r7, #80	@ 0x50
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036c4:	b672      	cpsid	i
}
 80036c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <Error_Handler+0x8>

080036cc <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80036de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_APB1_GRP1_EnableClock>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003708:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4313      	orrs	r3, r2
 8003712:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003718:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4013      	ands	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003720:	68fb      	ldr	r3, [r7, #12]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003734:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <MX_RTC_Init+0x60>)
 8003736:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <MX_RTC_Init+0x64>)
 8003738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <MX_RTC_Init+0x60>)
 800373c:	2200      	movs	r2, #0
 800373e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <MX_RTC_Init+0x60>)
 8003742:	220f      	movs	r2, #15
 8003744:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <MX_RTC_Init+0x60>)
 8003748:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800374c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <MX_RTC_Init+0x60>)
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003754:	4b0e      	ldr	r3, [pc, #56]	@ (8003790 <MX_RTC_Init+0x60>)
 8003756:	2200      	movs	r2, #0
 8003758:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <MX_RTC_Init+0x60>)
 800375c:	2200      	movs	r2, #0
 800375e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <MX_RTC_Init+0x60>)
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003766:	480a      	ldr	r0, [pc, #40]	@ (8003790 <MX_RTC_Init+0x60>)
 8003768:	f004 f98e 	bl	8007a88 <HAL_RTC_Init>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003772:	f7ff ffa5 	bl	80036c0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003776:	2200      	movs	r2, #0
 8003778:	2100      	movs	r1, #0
 800377a:	4805      	ldr	r0, [pc, #20]	@ (8003790 <MX_RTC_Init+0x60>)
 800377c:	f004 fa84 	bl	8007c88 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003786:	f7ff ff9b 	bl	80036c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	200003ac 	.word	0x200003ac
 8003794:	40002800 	.word	0x40002800

08003798 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b096      	sub	sp, #88	@ 0x58
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	2250      	movs	r2, #80	@ 0x50
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f00c fa3f 	bl	800fc2c <memset>
  if(rtcHandle->Instance==RTC)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a12      	ldr	r2, [pc, #72]	@ (80037fc <HAL_RTC_MspInit+0x64>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d11d      	bne.n	80037f4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fed6 	bl	800757a <HAL_RCCEx_PeriphCLKConfig>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80037d4:	f7ff ff74 	bl	80036c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037d8:	f7ff ff7f 	bl	80036da <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80037dc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80037e0:	f7ff ff8c 	bl	80036fc <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2100      	movs	r1, #0
 80037e8:	2003      	movs	r0, #3
 80037ea:	f001 fce0 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037ee:	2003      	movs	r0, #3
 80037f0:	f001 fcf7 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037f4:	bf00      	nop
 80037f6:	3758      	adds	r7, #88	@ 0x58
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40002800 	.word	0x40002800

08003800 <LL_AHB2_GRP1_EnableClock>:
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800380c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800380e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4313      	orrs	r3, r2
 8003816:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4013      	ands	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <LL_APB1_GRP1_EnableClock>:
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800383e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4313      	orrs	r3, r2
 8003848:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4013      	ands	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003868:	4b1b      	ldr	r3, [pc, #108]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800386a:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <MX_SPI2_Init+0x78>)
 800386c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800386e:	4b1a      	ldr	r3, [pc, #104]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003870:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003874:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800387c:	4b16      	ldr	r3, [pc, #88]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800387e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003882:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003884:	4b14      	ldr	r3, [pc, #80]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800388a:	4b13      	ldr	r3, [pc, #76]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800388c:	2200      	movs	r2, #0
 800388e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003890:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <MX_SPI2_Init+0x74>)
 8003892:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003896:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003898:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <MX_SPI2_Init+0x74>)
 800389a:	2210      	movs	r2, #16
 800389c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a4:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038b2:	2207      	movs	r2, #7
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038b6:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038be:	2208      	movs	r2, #8
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038c2:	4805      	ldr	r0, [pc, #20]	@ (80038d8 <MX_SPI2_Init+0x74>)
 80038c4:	f004 fa9c 	bl	8007e00 <HAL_SPI_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80038ce:	f7ff fef7 	bl	80036c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200003d0 	.word	0x200003d0
 80038dc:	40003800 	.word	0x40003800

080038e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a46      	ldr	r2, [pc, #280]	@ (8003a18 <HAL_SPI_MspInit+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	f040 8085 	bne.w	8003a0e <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003904:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003908:	f7ff ff93 	bl	8003832 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390c:	2002      	movs	r0, #2
 800390e:	f7ff ff77 	bl	8003800 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003912:	2008      	movs	r0, #8
 8003914:	f7ff ff74 	bl	8003800 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800391c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800392a:	2305      	movs	r3, #5
 800392c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	4619      	mov	r1, r3
 8003934:	4839      	ldr	r0, [pc, #228]	@ (8003a1c <HAL_SPI_MspInit+0x13c>)
 8003936:	f001 ffcb 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800393a:	2318      	movs	r3, #24
 800393c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393e:	2302      	movs	r3, #2
 8003940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800394a:	2305      	movs	r3, #5
 800394c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	4619      	mov	r1, r3
 8003954:	4832      	ldr	r0, [pc, #200]	@ (8003a20 <HAL_SPI_MspInit+0x140>)
 8003956:	f001 ffbb 	bl	80058d0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel3;
 800395a:	4b32      	ldr	r3, [pc, #200]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 800395c:	4a32      	ldr	r2, [pc, #200]	@ (8003a28 <HAL_SPI_MspInit+0x148>)
 800395e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003960:	4b30      	ldr	r3, [pc, #192]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 8003962:	2208      	movs	r2, #8
 8003964:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003966:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 8003968:	2200      	movs	r2, #0
 800396a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800396c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 800396e:	2200      	movs	r2, #0
 8003970:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003972:	4b2c      	ldr	r3, [pc, #176]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 8003974:	2280      	movs	r2, #128	@ 0x80
 8003976:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003978:	4b2a      	ldr	r3, [pc, #168]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 800397a:	2200      	movs	r2, #0
 800397c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800397e:	4b29      	ldr	r3, [pc, #164]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003984:	4b27      	ldr	r3, [pc, #156]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800398a:	4b26      	ldr	r3, [pc, #152]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 800398c:	2200      	movs	r2, #0
 800398e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003990:	4824      	ldr	r0, [pc, #144]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 8003992:	f001 fc6b 	bl	800526c <HAL_DMA_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 800399c:	f7ff fe90 	bl	80036c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a20      	ldr	r2, [pc, #128]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 80039a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80039a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a24 <HAL_SPI_MspInit+0x144>)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel4;
 80039ac:	4b1f      	ldr	r3, [pc, #124]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039ae:	4a20      	ldr	r2, [pc, #128]	@ (8003a30 <HAL_SPI_MspInit+0x150>)
 80039b0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80039b2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039b4:	2209      	movs	r2, #9
 80039b6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039b8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039ba:	2210      	movs	r2, #16
 80039bc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039be:	4b1b      	ldr	r3, [pc, #108]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039c4:	4b19      	ldr	r3, [pc, #100]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039c6:	2280      	movs	r2, #128	@ 0x80
 80039c8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ca:	4b18      	ldr	r3, [pc, #96]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d0:	4b16      	ldr	r3, [pc, #88]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80039d6:	4b15      	ldr	r3, [pc, #84]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039dc:	4b13      	ldr	r3, [pc, #76]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80039e2:	4812      	ldr	r0, [pc, #72]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039e4:	f001 fc42 	bl	800526c <HAL_DMA_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80039ee:	f7ff fe67 	bl	80036c0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80039f8:	4a0c      	ldr	r2, [pc, #48]	@ (8003a2c <HAL_SPI_MspInit+0x14c>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2100      	movs	r1, #0
 8003a02:	2023      	movs	r0, #35	@ 0x23
 8003a04:	f001 fbd3 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003a08:	2023      	movs	r0, #35	@ 0x23
 8003a0a:	f001 fbea 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40003800 	.word	0x40003800
 8003a1c:	48000400 	.word	0x48000400
 8003a20:	48000c00 	.word	0x48000c00
 8003a24:	20000434 	.word	0x20000434
 8003a28:	40020030 	.word	0x40020030
 8003a2c:	20000494 	.word	0x20000494
 8003a30:	40020044 	.word	0x40020044

08003a34 <LL_AHB3_GRP1_EnableClock>:
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a58:	68fb      	ldr	r3, [r7, #12]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003a74:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003a78:	f7ff ffdc 	bl	8003a34 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2100      	movs	r1, #0
 8003a80:	202e      	movs	r0, #46	@ 0x2e
 8003a82:	f001 fb94 	bl	80051ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003a86:	202e      	movs	r0, #46	@ 0x2e
 8003a88:	f001 fbab 	bl	80051e2 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003a94:	463b      	mov	r3, r7
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 f9e8 	bl	8005e6c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003a9c:	f002 fa28 	bl	8005ef0 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <NMI_Handler+0x4>

08003ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <HardFault_Handler+0x4>

08003ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <MemManage_Handler+0x4>

08003ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <BusFault_Handler+0x4>

08003ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <UsageFault_Handler+0x4>

08003ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003afe:	f000 fb39 	bl	8004174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003b0a:	f7ff f92b 	bl	8002d64 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b18:	4802      	ldr	r0, [pc, #8]	@ (8003b24 <DMA1_Channel1_IRQHandler+0x10>)
 8003b1a:	f001 fd88 	bl	800562e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	2000058c 	.word	0x2000058c

08003b28 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b2c:	4802      	ldr	r0, [pc, #8]	@ (8003b38 <DMA1_Channel2_IRQHandler+0x10>)
 8003b2e:	f001 fd7e 	bl	800562e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200005ec 	.word	0x200005ec

08003b3c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003b40:	4802      	ldr	r0, [pc, #8]	@ (8003b4c <DMA1_Channel3_IRQHandler+0x10>)
 8003b42:	f001 fd74 	bl	800562e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000434 	.word	0x20000434

08003b50 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003b54:	4802      	ldr	r0, [pc, #8]	@ (8003b60 <DMA1_Channel4_IRQHandler+0x10>)
 8003b56:	f001 fd6a 	bl	800562e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000494 	.word	0x20000494

08003b64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003b68:	4802      	ldr	r0, [pc, #8]	@ (8003b74 <SPI2_IRQHandler+0x10>)
 8003b6a:	f004 feb9 	bl	80088e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200003d0 	.word	0x200003d0

08003b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	@ (8003b88 <USART1_IRQHandler+0x10>)
 8003b7e:	f005 fafd 	bl	800917c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	200004f8 	.word	0x200004f8

08003b8c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003b90:	f002 f826 	bl	8005be0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003b94:	bf00      	nop
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return 1;
 8003b9c:	2301      	movs	r3, #1
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_kill>:

int _kill(int pid, int sig)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bb2:	f00c f8a3 	bl	800fcfc <__errno>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2216      	movs	r2, #22
 8003bba:	601a      	str	r2, [r3, #0]
  return -1;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <_exit>:

void _exit (int status)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff ffe7 	bl	8003ba8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <_exit+0x12>

08003bde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e00a      	b.n	8003c06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bf0:	f3af 8000 	nop.w
 8003bf4:	4601      	mov	r1, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	60ba      	str	r2, [r7, #8]
 8003bfc:	b2ca      	uxtb	r2, r1
 8003bfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3301      	adds	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	dbf0      	blt.n	8003bf0 <_read+0x12>
  }

  return len;
 8003c0e:	687b      	ldr	r3, [r7, #4]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c40:	605a      	str	r2, [r3, #4]
  return 0;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <_isatty>:

int _isatty(int file)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c58:	2301      	movs	r3, #1
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <_sbrk+0x5c>)
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <_sbrk+0x60>)
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c94:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <_sbrk+0x64>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d102      	bne.n	8003ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ce4 <_sbrk+0x64>)
 8003c9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ce8 <_sbrk+0x68>)
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <_sbrk+0x64>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4413      	add	r3, r2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d207      	bcs.n	8003cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cb0:	f00c f824 	bl	800fcfc <__errno>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	220c      	movs	r2, #12
 8003cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbe:	e009      	b.n	8003cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	@ (8003ce4 <_sbrk+0x64>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cc6:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <_sbrk+0x64>)
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	4a05      	ldr	r2, [pc, #20]	@ (8003ce4 <_sbrk+0x64>)
 8003cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20030000 	.word	0x20030000
 8003ce0:	00000400 	.word	0x00000400
 8003ce4:	200004f4 	.word	0x200004f4
 8003ce8:	20001978 	.word	0x20001978

08003cec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003cf0:	4b24      	ldr	r3, [pc, #144]	@ (8003d84 <SystemInit+0x98>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	4a23      	ldr	r2, [pc, #140]	@ (8003d84 <SystemInit+0x98>)
 8003cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003d10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d14:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003d18:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d24:	4b18      	ldr	r3, [pc, #96]	@ (8003d88 <SystemInit+0x9c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d36:	f023 0305 	bic.w	r3, r3, #5
 8003d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d56:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <SystemInit+0xa0>)
 8003d58:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8003d8c <SystemInit+0xa0>)
 8003d60:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d70:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d76:	2200      	movs	r2, #0
 8003d78:	619a      	str	r2, [r3, #24]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000ed00 	.word	0xe000ed00
 8003d88:	faf6fefb 	.word	0xfaf6fefb
 8003d8c:	22041000 	.word	0x22041000

08003d90 <LL_AHB2_GRP1_EnableClock>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003db4:	68fb      	ldr	r3, [r7, #12]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_APB2_GRP1_EnableClock>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4013      	ands	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003df8:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003dfa:	4a24      	ldr	r2, [pc, #144]	@ (8003e8c <MX_USART1_UART_Init+0x98>)
 8003dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003dfe:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e12:	4b1d      	ldr	r3, [pc, #116]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e18:	4b1b      	ldr	r3, [pc, #108]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e1a:	220c      	movs	r2, #12
 8003e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8003e24:	4b18      	ldr	r3, [pc, #96]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003e2a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e2c:	4b16      	ldr	r3, [pc, #88]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e32:	4b15      	ldr	r3, [pc, #84]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e38:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e3e:	4812      	ldr	r0, [pc, #72]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e40:	f005 f83e 	bl	8008ec0 <HAL_UART_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003e4a:	f7ff fc39 	bl	80036c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e4e:	2100      	movs	r1, #0
 8003e50:	480d      	ldr	r0, [pc, #52]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e52:	f006 faac 	bl	800a3ae <HAL_UARTEx_SetTxFifoThreshold>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8003e5c:	f7ff fc30 	bl	80036c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e60:	2100      	movs	r1, #0
 8003e62:	4809      	ldr	r0, [pc, #36]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e64:	f006 fae1 	bl	800a42a <HAL_UARTEx_SetRxFifoThreshold>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8003e6e:	f7ff fc27 	bl	80036c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e72:	4805      	ldr	r0, [pc, #20]	@ (8003e88 <MX_USART1_UART_Init+0x94>)
 8003e74:	f006 fa62 	bl	800a33c <HAL_UARTEx_DisableFifoMode>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8003e7e:	f7ff fc1f 	bl	80036c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200004f8 	.word	0x200004f8
 8003e8c:	40013800 	.word	0x40013800

08003e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b09c      	sub	sp, #112	@ 0x70
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	2250      	movs	r2, #80	@ 0x50
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f00b febb 	bl	800fc2c <memset>
  if(uartHandle->Instance==USART1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a4e      	ldr	r2, [pc, #312]	@ (8003ff4 <HAL_UART_MspInit+0x164>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f040 8095 	bne.w	8003fec <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fb53 	bl	800757a <HAL_RCCEx_PeriphCLKConfig>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003eda:	f7ff fbf1 	bl	80036c0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ede:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003ee2:	f7ff ff6e 	bl	8003dc2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	f7ff ff52 	bl	8003d90 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7ff ff4f 	bl	8003d90 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efe:	2300      	movs	r3, #0
 8003f00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f02:	2307      	movs	r3, #7
 8003f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f06:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	483a      	ldr	r0, [pc, #232]	@ (8003ff8 <HAL_UART_MspInit+0x168>)
 8003f0e:	f001 fcdf 	bl	80058d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	2300      	movs	r3, #0
 8003f22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f24:	2307      	movs	r3, #7
 8003f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f32:	f001 fccd 	bl	80058d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8003f36:	4b31      	ldr	r3, [pc, #196]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f38:	4a31      	ldr	r2, [pc, #196]	@ (8004000 <HAL_UART_MspInit+0x170>)
 8003f3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f3e:	220e      	movs	r2, #14
 8003f40:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f42:	4b2e      	ldr	r3, [pc, #184]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f48:	4b2c      	ldr	r3, [pc, #176]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f50:	2280      	movs	r2, #128	@ 0x80
 8003f52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f54:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5a:	4b28      	ldr	r3, [pc, #160]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003f60:	4b26      	ldr	r3, [pc, #152]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f66:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003f6c:	4823      	ldr	r0, [pc, #140]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f6e:	f001 f97d 	bl	800526c <HAL_DMA_Init>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8003f78:	f7ff fba2 	bl	80036c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003f84:	4a1d      	ldr	r2, [pc, #116]	@ (8003ffc <HAL_UART_MspInit+0x16c>)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004008 <HAL_UART_MspInit+0x178>)
 8003f8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003f90:	4b1c      	ldr	r3, [pc, #112]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003f92:	220f      	movs	r2, #15
 8003f94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f96:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003f98:	2210      	movs	r2, #16
 8003f9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9c:	4b19      	ldr	r3, [pc, #100]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fa2:	4b18      	ldr	r3, [pc, #96]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fa4:	2280      	movs	r2, #128	@ 0x80
 8003fa6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa8:	4b16      	ldr	r3, [pc, #88]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fae:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003fb4:	4b13      	ldr	r3, [pc, #76]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003fc0:	4810      	ldr	r0, [pc, #64]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fc2:	f001 f953 	bl	800526c <HAL_DMA_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8003fcc:	f7ff fb78 	bl	80036c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fd4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8004004 <HAL_UART_MspInit+0x174>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2024      	movs	r0, #36	@ 0x24
 8003fe2:	f001 f8e4 	bl	80051ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fe6:	2024      	movs	r0, #36	@ 0x24
 8003fe8:	f001 f8fb 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003fec:	bf00      	nop
 8003fee:	3770      	adds	r7, #112	@ 0x70
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	48000400 	.word	0x48000400
 8003ffc:	2000058c 	.word	0x2000058c
 8004000:	40020008 	.word	0x40020008
 8004004:	200005ec 	.word	0x200005ec
 8004008:	4002001c 	.word	0x4002001c

0800400c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800400c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800400e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004010:	3304      	adds	r3, #4

08004012 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004012:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004014:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004016:	d3f9      	bcc.n	800400c <CopyDataInit>
  bx lr
 8004018:	4770      	bx	lr

0800401a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800401a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800401c:	3004      	adds	r0, #4

0800401e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800401e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004020:	d3fb      	bcc.n	800401a <FillZerobss>
  bx lr
 8004022:	4770      	bx	lr

08004024 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004024:	480c      	ldr	r0, [pc, #48]	@ (8004058 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004026:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004028:	f7ff fe60 	bl	8003cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800402c:	480b      	ldr	r0, [pc, #44]	@ (800405c <LoopForever+0x6>)
 800402e:	490c      	ldr	r1, [pc, #48]	@ (8004060 <LoopForever+0xa>)
 8004030:	4a0c      	ldr	r2, [pc, #48]	@ (8004064 <LoopForever+0xe>)
 8004032:	2300      	movs	r3, #0
 8004034:	f7ff ffed 	bl	8004012 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004038:	480b      	ldr	r0, [pc, #44]	@ (8004068 <LoopForever+0x12>)
 800403a:	490c      	ldr	r1, [pc, #48]	@ (800406c <LoopForever+0x16>)
 800403c:	4a0c      	ldr	r2, [pc, #48]	@ (8004070 <LoopForever+0x1a>)
 800403e:	2300      	movs	r3, #0
 8004040:	f7ff ffe7 	bl	8004012 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004044:	480b      	ldr	r0, [pc, #44]	@ (8004074 <LoopForever+0x1e>)
 8004046:	490c      	ldr	r1, [pc, #48]	@ (8004078 <LoopForever+0x22>)
 8004048:	2300      	movs	r3, #0
 800404a:	f7ff ffe8 	bl	800401e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800404e:	f00b fe5b 	bl	800fd08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004052:	f7ff fa77 	bl	8003544 <main>

08004056 <LoopForever>:

LoopForever:
  b LoopForever
 8004056:	e7fe      	b.n	8004056 <LoopForever>
  ldr   r0, =_estack
 8004058:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800405c:	20000008 	.word	0x20000008
 8004060:	200001f4 	.word	0x200001f4
 8004064:	08013778 	.word	0x08013778
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004068:	200301e4 	.word	0x200301e4
 800406c:	20030a67 	.word	0x20030a67
 8004070:	080139b6 	.word	0x080139b6
  INIT_BSS _sbss, _ebss
 8004074:	2000024c 	.word	0x2000024c
 8004078:	20001974 	.word	0x20001974

0800407c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800407c:	e7fe      	b.n	800407c <ADC1_IRQHandler>
	...

08004080 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004084:	4b05      	ldr	r3, [pc, #20]	@ (800409c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4a04      	ldr	r2, [pc, #16]	@ (800409c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	6053      	str	r3, [r2, #4]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	e0042000 	.word	0xe0042000

080040a0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	6053      	str	r3, [r2, #4]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e0042000 	.word	0xe0042000

080040c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040ca:	4b0c      	ldr	r3, [pc, #48]	@ (80040fc <HAL_Init+0x3c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a0b      	ldr	r2, [pc, #44]	@ (80040fc <HAL_Init+0x3c>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d6:	2003      	movs	r0, #3
 80040d8:	f001 f85e 	bl	8005198 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040dc:	200f      	movs	r0, #15
 80040de:	f000 f80f 	bl	8004100 <HAL_InitTick>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	71fb      	strb	r3, [r7, #7]
 80040ec:	e001      	b.n	80040f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80040ee:	f7ff fcba 	bl	8003a66 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040f2:	79fb      	ldrb	r3, [r7, #7]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	58004000 	.word	0x58004000

08004100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800410c:	4b17      	ldr	r3, [pc, #92]	@ (800416c <HAL_InitTick+0x6c>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d024      	beq.n	800415e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004114:	f002 ffa0 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b14      	ldr	r3, [pc, #80]	@ (800416c <HAL_InitTick+0x6c>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	4619      	mov	r1, r3
 8004120:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004124:	fbb3 f3f1 	udiv	r3, r3, r1
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	4618      	mov	r0, r3
 800412e:	f001 f874 	bl	800521a <HAL_SYSTICK_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10f      	bne.n	8004158 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	d809      	bhi.n	8004152 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800413e:	2200      	movs	r2, #0
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	f04f 30ff 	mov.w	r0, #4294967295
 8004146:	f001 f832 	bl	80051ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800414a:	4a09      	ldr	r2, [pc, #36]	@ (8004170 <HAL_InitTick+0x70>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e007      	b.n	8004162 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	e004      	b.n	8004162 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
 800415c:	e001      	b.n	8004162 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000010 	.word	0x20000010
 8004170:	2000000c 	.word	0x2000000c

08004174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_IncTick+0x20>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_IncTick+0x24>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4413      	add	r3, r2
 8004184:	4a04      	ldr	r2, [pc, #16]	@ (8004198 <HAL_IncTick+0x24>)
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000010 	.word	0x20000010
 8004198:	2000064c 	.word	0x2000064c

0800419c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return uwTick;
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <HAL_GetTick+0x14>)
 80041a2:	681b      	ldr	r3, [r3, #0]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	2000064c 	.word	0x2000064c

080041b4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80041b8:	4b03      	ldr	r3, [pc, #12]	@ (80041c8 <HAL_GetTickPrio+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	2000000c 	.word	0x2000000c

080041cc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80041d0:	4b03      	ldr	r3, [pc, #12]	@ (80041e0 <HAL_GetTickFreq+0x14>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	20000010 	.word	0x20000010

080041e4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80041e8:	f7ff ff4a 	bl	8004080 <LL_DBGMCU_EnableDBGSleepMode>
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80041f4:	f7ff ff54 	bl	80040a0 <LL_DBGMCU_EnableDBGStopMode>
}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}

080041fc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3360      	adds	r3, #96	@ 0x60
 8004276:	461a      	mov	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <LL_ADC_SetOffset+0x44>)
 8004286:	4013      	ands	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800429c:	bf00      	nop
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	03fff000 	.word	0x03fff000

080042ac <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3360      	adds	r3, #96	@ 0x60
 80042ba:	461a      	mov	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3360      	adds	r3, #96	@ 0x60
 80042e8:	461a      	mov	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3330      	adds	r3, #48	@ 0x30
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	4413      	add	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	211f      	movs	r1, #31
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	f003 011f 	and.w	r1, r3, #31
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	fa01 f303 	lsl.w	r3, r1, r3
 8004354:	431a      	orrs	r2, r3
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004366:	b480      	push	{r7}
 8004368:	b087      	sub	sp, #28
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	3314      	adds	r3, #20
 8004376:	461a      	mov	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	0e5b      	lsrs	r3, r3, #25
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0d1b      	lsrs	r3, r3, #20
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2107      	movs	r1, #7
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	43db      	mvns	r3, r3
 800439a:	401a      	ands	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	0d1b      	lsrs	r3, r3, #20
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	431a      	orrs	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80043b0:	bf00      	nop
 80043b2:	371c      	adds	r7, #28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f003 0318 	and.w	r3, r3, #24
 80043de:	4908      	ldr	r1, [pc, #32]	@ (8004400 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043e0:	40d9      	lsrs	r1, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	400b      	ands	r3, r1
 80043e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ea:	431a      	orrs	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	0007ffff 	.word	0x0007ffff

08004404 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6093      	str	r3, [r2, #8]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800443c:	d101      	bne.n	8004442 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004464:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800448c:	d101      	bne.n	8004492 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <LL_ADC_IsEnabled+0x18>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <LL_ADC_IsEnabled+0x1a>
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d101      	bne.n	80044de <LL_ADC_REG_IsConversionOngoing+0x18>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d101      	bne.n	8004504 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e12e      	b.n	8004790 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fd fa7b 	bl	8001a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff ff65 	bl	8004428 <LL_ADC_IsDeepPowerDownEnabled>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff4b 	bl	8004404 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ff80 	bl	8004478 <LL_ADC_IsInternalRegulatorEnabled>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d115      	bne.n	80045aa <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff64 	bl	8004450 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004588:	4b83      	ldr	r3, [pc, #524]	@ (8004798 <HAL_ADC_Init+0x284>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	4a83      	ldr	r2, [pc, #524]	@ (800479c <HAL_ADC_Init+0x288>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	3301      	adds	r3, #1
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800459c:	e002      	b.n	80045a4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f9      	bne.n	800459e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ff62 	bl	8004478 <LL_ADC_IsInternalRegulatorEnabled>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	f043 0210 	orr.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ca:	f043 0201 	orr.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ff73 	bl	80044c6 <LL_ADC_REG_IsConversionOngoing>
 80045e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f040 80c7 	bne.w	800477e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f040 80c3 	bne.w	800477e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004600:	f043 0202 	orr.w	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff47 	bl	80044a0 <LL_ADC_IsEnabled>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004618:	4861      	ldr	r0, [pc, #388]	@ (80047a0 <HAL_ADC_Init+0x28c>)
 800461a:	f7ff ff41 	bl	80044a0 <LL_ADC_IsEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4619      	mov	r1, r3
 800462a:	485e      	ldr	r0, [pc, #376]	@ (80047a4 <HAL_ADC_Init+0x290>)
 800462c:	f7ff fde6 	bl	80041fc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	7e5b      	ldrb	r3, [r3, #25]
 8004634:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800463a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004640:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004646:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8004650:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	4313      	orrs	r3, r2
 8004656:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d106      	bne.n	8004670 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	3b01      	subs	r3, #1
 8004668:	045b      	lsls	r3, r3, #17
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004684:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	4b45      	ldr	r3, [pc, #276]	@ (80047a8 <HAL_ADC_Init+0x294>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	69b9      	ldr	r1, [r7, #24]
 800469c:	430b      	orrs	r3, r1
 800469e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ff0e 	bl	80044c6 <LL_ADC_REG_IsConversionOngoing>
 80046aa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff1b 	bl	80044ec <LL_ADC_INJ_IsConversionOngoing>
 80046b6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d13d      	bne.n	800473a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d13a      	bne.n	800473a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80046c8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046d0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e0:	f023 0302 	bic.w	r3, r3, #2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	69b9      	ldr	r1, [r7, #24]
 80046ea:	430b      	orrs	r3, r1
 80046ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d118      	bne.n	800472a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004702:	f023 0304 	bic.w	r3, r3, #4
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004714:	4311      	orrs	r1, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800471a:	430a      	orrs	r2, r1
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	611a      	str	r2, [r3, #16]
 8004728:	e007      	b.n	800473a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d10c      	bne.n	800475c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	f023 010f 	bic.w	r1, r3, #15
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
 800475a:	e007      	b.n	800476c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 020f 	bic.w	r2, r2, #15
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	f023 0303 	bic.w	r3, r3, #3
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	@ 0x54
 800477c:	e007      	b.n	800478e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004782:	f043 0210 	orr.w	r2, r3, #16
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800478e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000008 	.word	0x20000008
 800479c:	053e2d63 	.word	0x053e2d63
 80047a0:	50040000 	.word	0x50040000
 80047a4:	50040300 	.word	0x50040300
 80047a8:	fff0c007 	.word	0xfff0c007

080047ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b0b6      	sub	sp, #216	@ 0xd8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x22>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e39f      	b.n	8004f0e <HAL_ADC_ConfigChannel+0x762>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fe73 	bl	80044c6 <LL_ADC_REG_IsConversionOngoing>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8384 	bne.w	8004ef0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	f7ff fd8a 	bl	800430e <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fe61 	bl	80044c6 <LL_ADC_REG_IsConversionOngoing>
 8004804:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fe6d 	bl	80044ec <LL_ADC_INJ_IsConversionOngoing>
 8004812:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004816:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 81a6 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 81a1 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	461a      	mov	r2, r3
 8004838:	f7ff fd95 	bl	8004366 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695a      	ldr	r2, [r3, #20]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	08db      	lsrs	r3, r3, #3
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d00a      	beq.n	8004874 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	6919      	ldr	r1, [r3, #16]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800486e:	f7ff fcf9 	bl	8004264 <LL_ADC_SetOffset>
 8004872:	e17b      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fd16 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004880:	4603      	mov	r3, r0
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10a      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0xf4>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fd0b 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004896:	4603      	mov	r3, r0
 8004898:	0e9b      	lsrs	r3, r3, #26
 800489a:	f003 021f 	and.w	r2, r3, #31
 800489e:	e01e      	b.n	80048de <HAL_ADC_ConfigChannel+0x132>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2100      	movs	r1, #0
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff fd00 	bl	80042ac <LL_ADC_GetOffsetChannel>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80048b6:	fa93 f3a3 	rbit	r3, r3
 80048ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 80048be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80048c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 80048ce:	2320      	movs	r3, #32
 80048d0:	e004      	b.n	80048dc <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 80048d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048d6:	fab3 f383 	clz	r3, r3
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x14a>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	0e9b      	lsrs	r3, r3, #26
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	e018      	b.n	8004928 <HAL_ADC_ConfigChannel+0x17c>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800490a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800490e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e004      	b.n	8004928 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800491e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	429a      	cmp	r2, r3
 800492a:	d106      	bne.n	800493a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2200      	movs	r2, #0
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fccf 	bl	80042d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2101      	movs	r1, #1
 8004940:	4618      	mov	r0, r3
 8004942:	f7ff fcb3 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004946:	4603      	mov	r3, r0
 8004948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x1ba>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fca8 	bl	80042ac <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	f003 021f 	and.w	r2, r3, #31
 8004964:	e01e      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x1f8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fc9d 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004972:	4603      	mov	r3, r0
 8004974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004978:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800497c:	fa93 f3a3 	rbit	r3, r3
 8004980:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004984:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004988:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800498c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8004994:	2320      	movs	r3, #32
 8004996:	e004      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8004998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x210>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	0e9b      	lsrs	r3, r3, #26
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	e018      	b.n	80049ee <HAL_ADC_ConfigChannel+0x242>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80049d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80049d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80049d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e004      	b.n	80049ee <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80049e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d106      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fc6c 	bl	80042d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2102      	movs	r1, #2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fc50 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x280>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fc45 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	f003 021f 	and.w	r2, r3, #31
 8004a2a:	e01e      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x2be>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2102      	movs	r1, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fc3a 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8004a5a:	2320      	movs	r3, #32
 8004a5c:	e004      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004a62:	fab3 f383 	clz	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x2d6>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	0e9b      	lsrs	r3, r3, #26
 8004a7c:	f003 031f 	and.w	r3, r3, #31
 8004a80:	e016      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x304>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	e004      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8004aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004aaa:	fab3 f383 	clz	r3, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d106      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2102      	movs	r1, #2
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fc0b 	bl	80042d8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2103      	movs	r1, #3
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fbef 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x342>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2103      	movs	r1, #3
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fbe4 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	0e9b      	lsrs	r3, r3, #26
 8004ae8:	f003 021f 	and.w	r2, r3, #31
 8004aec:	e017      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x372>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2103      	movs	r1, #3
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff fbd9 	bl	80042ac <LL_ADC_GetOffsetChannel>
 8004afa:	4603      	mov	r3, r0
 8004afc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b00:	fa93 f3a3 	rbit	r3, r3
 8004b04:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004b06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004b0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8004b10:	2320      	movs	r3, #32
 8004b12:	e003      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8004b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x38a>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0e9b      	lsrs	r3, r3, #26
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	e011      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x3ae>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004b44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e003      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8004b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d106      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2103      	movs	r1, #3
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fbb6 	bl	80042d8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fc95 	bl	80044a0 <LL_ADC_IsEnabled>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f040 81c2 	bne.w	8004f02 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7ff fc16 	bl	80043bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a8e      	ldr	r2, [pc, #568]	@ (8004dd0 <HAL_ADC_ConfigChannel+0x624>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f040 8130 	bne.w	8004dfc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x418>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0e9b      	lsrs	r3, r3, #26
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2b09      	cmp	r3, #9
 8004bba:	bf94      	ite	ls
 8004bbc:	2301      	movls	r3, #1
 8004bbe:	2300      	movhi	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	e019      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x44c>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bcc:	fa93 f3a3 	rbit	r3, r3
 8004bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004bd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	e003      	b.n	8004be8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004be2:	fab3 f383 	clz	r3, r3
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	3301      	adds	r3, #1
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	bf94      	ite	ls
 8004bf2:	2301      	movls	r3, #1
 8004bf4:	2300      	movhi	r3, #0
 8004bf6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d079      	beq.n	8004cf0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d107      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x46c>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	0e9b      	lsrs	r3, r3, #26
 8004c0e:	3301      	adds	r3, #1
 8004c10:	069b      	lsls	r3, r3, #26
 8004c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c16:	e015      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x498>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004c30:	2320      	movs	r3, #32
 8004c32:	e003      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c36:	fab3 f383 	clz	r3, r3
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	069b      	lsls	r3, r3, #26
 8004c40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x4b8>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	e017      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x4e8>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c6c:	fa93 f3a3 	rbit	r3, r3
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	e003      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8004c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	3301      	adds	r3, #1
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2101      	movs	r1, #1
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	ea42 0103 	orr.w	r1, r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x50e>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	3301      	adds	r3, #1
 8004cac:	f003 021f 	and.w	r2, r3, #31
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	4413      	add	r3, r2
 8004cb6:	051b      	lsls	r3, r3, #20
 8004cb8:	e018      	b.n	8004cec <HAL_ADC_ConfigChannel+0x540>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e003      	b.n	8004cde <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cec:	430b      	orrs	r3, r1
 8004cee:	e080      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x560>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	069b      	lsls	r3, r3, #26
 8004d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0a:	e015      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x58c>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004d24:	2320      	movs	r3, #32
 8004d26:	e003      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	fab3 f383 	clz	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	069b      	lsls	r3, r3, #26
 8004d34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x5ac>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2101      	movs	r1, #1
 8004d52:	fa01 f303 	lsl.w	r3, r1, r3
 8004d56:	e017      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x5dc>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	61fb      	str	r3, [r7, #28]
  return result;
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8004d70:	2320      	movs	r3, #32
 8004d72:	e003      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	fab3 f383 	clz	r3, r3
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2101      	movs	r1, #1
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	ea42 0103 	orr.w	r1, r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x608>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	0e9b      	lsrs	r3, r3, #26
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	3b1e      	subs	r3, #30
 8004dac:	051b      	lsls	r3, r3, #20
 8004dae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004db2:	e01d      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x644>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	613b      	str	r3, [r7, #16]
  return result;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d103      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004dcc:	2320      	movs	r3, #32
 8004dce:	e005      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x630>
 8004dd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f003 021f 	and.w	r2, r3, #31
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	3b1e      	subs	r3, #30
 8004dea:	051b      	lsls	r3, r3, #20
 8004dec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df6:	4619      	mov	r1, r3
 8004df8:	f7ff fab5 	bl	8004366 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b45      	ldr	r3, [pc, #276]	@ (8004f18 <HAL_ADC_ConfigChannel+0x76c>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d07c      	beq.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e08:	4844      	ldr	r0, [pc, #272]	@ (8004f1c <HAL_ADC_ConfigChannel+0x770>)
 8004e0a:	f7ff fa1d 	bl	8004248 <LL_ADC_GetCommonPathInternalCh>
 8004e0e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e12:	4843      	ldr	r0, [pc, #268]	@ (8004f20 <HAL_ADC_ConfigChannel+0x774>)
 8004e14:	f7ff fb44 	bl	80044a0 <LL_ADC_IsEnabled>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d15e      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a40      	ldr	r2, [pc, #256]	@ (8004f24 <HAL_ADC_ConfigChannel+0x778>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d127      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x6cc>
 8004e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d121      	bne.n	8004e78 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a39      	ldr	r2, [pc, #228]	@ (8004f20 <HAL_ADC_ConfigChannel+0x774>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d161      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e46:	4619      	mov	r1, r3
 8004e48:	4834      	ldr	r0, [pc, #208]	@ (8004f1c <HAL_ADC_ConfigChannel+0x770>)
 8004e4a:	f7ff f9ea 	bl	8004222 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e4e:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <HAL_ADC_ConfigChannel+0x77c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	4a35      	ldr	r2, [pc, #212]	@ (8004f2c <HAL_ADC_ConfigChannel+0x780>)
 8004e56:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004e68:	e002      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f9      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e76:	e044      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f30 <HAL_ADC_ConfigChannel+0x784>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d113      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x6fe>
 8004e82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a23      	ldr	r2, [pc, #140]	@ (8004f20 <HAL_ADC_ConfigChannel+0x774>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d134      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	481e      	ldr	r0, [pc, #120]	@ (8004f1c <HAL_ADC_ConfigChannel+0x770>)
 8004ea4:	f7ff f9bd 	bl	8004222 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ea8:	e02b      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a21      	ldr	r2, [pc, #132]	@ (8004f34 <HAL_ADC_ConfigChannel+0x788>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d126      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
 8004eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004eb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d120      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <HAL_ADC_ConfigChannel+0x774>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d11b      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ece:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4811      	ldr	r0, [pc, #68]	@ (8004f1c <HAL_ADC_ConfigChannel+0x770>)
 8004ed6:	f7ff f9a4 	bl	8004222 <LL_ADC_SetCommonPathInternalCh>
 8004eda:	e012      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004eee:	e008      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8004f0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	37d8      	adds	r7, #216	@ 0xd8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	80080000 	.word	0x80080000
 8004f1c:	50040300 	.word	0x50040300
 8004f20:	50040000 	.word	0x50040000
 8004f24:	c7520000 	.word	0xc7520000
 8004f28:	20000008 	.word	0x20000008
 8004f2c:	053e2d63 	.word	0x053e2d63
 8004f30:	cb840000 	.word	0xcb840000
 8004f34:	80000001 	.word	0x80000001

08004f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f48:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f54:	4013      	ands	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f6a:	4a04      	ldr	r2, [pc, #16]	@ (8004f7c <__NVIC_SetPriorityGrouping+0x44>)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	60d3      	str	r3, [r2, #12]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f84:	4b04      	ldr	r3, [pc, #16]	@ (8004f98 <__NVIC_GetPriorityGrouping+0x18>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	f003 0307 	and.w	r3, r3, #7
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	e000ed00 	.word	0xe000ed00

08004f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	db0b      	blt.n	8004fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	f003 021f 	and.w	r2, r3, #31
 8004fb4:	4907      	ldr	r1, [pc, #28]	@ (8004fd4 <__NVIC_EnableIRQ+0x38>)
 8004fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	e000e100 	.word	0xe000e100

08004fd8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	db12      	blt.n	8005010 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fea:	79fb      	ldrb	r3, [r7, #7]
 8004fec:	f003 021f 	and.w	r2, r3, #31
 8004ff0:	490a      	ldr	r1, [pc, #40]	@ (800501c <__NVIC_DisableIRQ+0x44>)
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8004ffe:	3320      	adds	r3, #32
 8005000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005004:	f3bf 8f4f 	dsb	sy
}
 8005008:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800500a:	f3bf 8f6f 	isb	sy
}
 800500e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	e000e100 	.word	0xe000e100

08005020 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	2b00      	cmp	r3, #0
 8005030:	db0c      	blt.n	800504c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	f003 021f 	and.w	r2, r3, #31
 8005038:	4907      	ldr	r1, [pc, #28]	@ (8005058 <__NVIC_SetPendingIRQ+0x38>)
 800503a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503e:	095b      	lsrs	r3, r3, #5
 8005040:	2001      	movs	r0, #1
 8005042:	fa00 f202 	lsl.w	r2, r0, r2
 8005046:	3340      	adds	r3, #64	@ 0x40
 8005048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000e100 	.word	0xe000e100

0800505c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	2b00      	cmp	r3, #0
 800506c:	db0c      	blt.n	8005088 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	f003 021f 	and.w	r2, r3, #31
 8005074:	4907      	ldr	r1, [pc, #28]	@ (8005094 <__NVIC_ClearPendingIRQ+0x38>)
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	2001      	movs	r0, #1
 800507e:	fa00 f202 	lsl.w	r2, r0, r2
 8005082:	3360      	adds	r3, #96	@ 0x60
 8005084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000e100 	.word	0xe000e100

08005098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	4603      	mov	r3, r0
 80050a0:	6039      	str	r1, [r7, #0]
 80050a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	db0a      	blt.n	80050c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	490c      	ldr	r1, [pc, #48]	@ (80050e4 <__NVIC_SetPriority+0x4c>)
 80050b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b6:	0112      	lsls	r2, r2, #4
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	440b      	add	r3, r1
 80050bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050c0:	e00a      	b.n	80050d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	b2da      	uxtb	r2, r3
 80050c6:	4908      	ldr	r1, [pc, #32]	@ (80050e8 <__NVIC_SetPriority+0x50>)
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	3b04      	subs	r3, #4
 80050d0:	0112      	lsls	r2, r2, #4
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	440b      	add	r3, r1
 80050d6:	761a      	strb	r2, [r3, #24]
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000e100 	.word	0xe000e100
 80050e8:	e000ed00 	.word	0xe000ed00

080050ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	@ 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f1c3 0307 	rsb	r3, r3, #7
 8005106:	2b04      	cmp	r3, #4
 8005108:	bf28      	it	cs
 800510a:	2304      	movcs	r3, #4
 800510c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3304      	adds	r3, #4
 8005112:	2b06      	cmp	r3, #6
 8005114:	d902      	bls.n	800511c <NVIC_EncodePriority+0x30>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3b03      	subs	r3, #3
 800511a:	e000      	b.n	800511e <NVIC_EncodePriority+0x32>
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	401a      	ands	r2, r3
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005134:	f04f 31ff 	mov.w	r1, #4294967295
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	43d9      	mvns	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005144:	4313      	orrs	r3, r2
         );
}
 8005146:	4618      	mov	r0, r3
 8005148:	3724      	adds	r7, #36	@ 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
	...

08005154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005164:	d301      	bcc.n	800516a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005166:	2301      	movs	r3, #1
 8005168:	e00f      	b.n	800518a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800516a:	4a0a      	ldr	r2, [pc, #40]	@ (8005194 <SysTick_Config+0x40>)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	3b01      	subs	r3, #1
 8005170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005172:	210f      	movs	r1, #15
 8005174:	f04f 30ff 	mov.w	r0, #4294967295
 8005178:	f7ff ff8e 	bl	8005098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800517c:	4b05      	ldr	r3, [pc, #20]	@ (8005194 <SysTick_Config+0x40>)
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005182:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <SysTick_Config+0x40>)
 8005184:	2207      	movs	r2, #7
 8005186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	e000e010 	.word	0xe000e010

08005198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff fec9 	bl	8004f38 <__NVIC_SetPriorityGrouping>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b086      	sub	sp, #24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	4603      	mov	r3, r0
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051bc:	f7ff fee0 	bl	8004f80 <__NVIC_GetPriorityGrouping>
 80051c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f7ff ff90 	bl	80050ec <NVIC_EncodePriority>
 80051cc:	4602      	mov	r2, r0
 80051ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff ff5f 	bl	8005098 <__NVIC_SetPriority>
}
 80051da:	bf00      	nop
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fed3 	bl	8004f9c <__NVIC_EnableIRQ>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b082      	sub	sp, #8
 8005202:	af00      	add	r7, sp, #0
 8005204:	4603      	mov	r3, r0
 8005206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fee3 	bl	8004fd8 <__NVIC_DisableIRQ>
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ff96 	bl	8005154 <SysTick_Config>
 8005228:	4603      	mov	r3, r0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff feed 	bl	8005020 <__NVIC_SetPendingIRQ>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	4603      	mov	r3, r0
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fefd 	bl	800505c <__NVIC_ClearPendingIRQ>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e08e      	b.n	800539c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	4b47      	ldr	r3, [pc, #284]	@ (80053a4 <HAL_DMA_Init+0x138>)
 8005286:	429a      	cmp	r2, r3
 8005288:	d80f      	bhi.n	80052aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	4b45      	ldr	r3, [pc, #276]	@ (80053a8 <HAL_DMA_Init+0x13c>)
 8005292:	4413      	add	r3, r2
 8005294:	4a45      	ldr	r2, [pc, #276]	@ (80053ac <HAL_DMA_Init+0x140>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	009a      	lsls	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a42      	ldr	r2, [pc, #264]	@ (80053b0 <HAL_DMA_Init+0x144>)
 80052a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80052a8:	e00e      	b.n	80052c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b40      	ldr	r3, [pc, #256]	@ (80053b4 <HAL_DMA_Init+0x148>)
 80052b2:	4413      	add	r3, r2
 80052b4:	4a3d      	ldr	r2, [pc, #244]	@ (80053ac <HAL_DMA_Init+0x140>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	009a      	lsls	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a3c      	ldr	r2, [pc, #240]	@ (80053b8 <HAL_DMA_Init+0x14c>)
 80052c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80052de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa74 	bl	8005808 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005328:	d102      	bne.n	8005330 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005338:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800533c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005346:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d010      	beq.n	8005372 <HAL_DMA_Init+0x106>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d80c      	bhi.n	8005372 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa93 	bl	8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800536e:	605a      	str	r2, [r3, #4]
 8005370:	e008      	b.n	8005384 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40020407 	.word	0x40020407
 80053a8:	bffdfff8 	.word	0xbffdfff8
 80053ac:	cccccccd 	.word	0xcccccccd
 80053b0:	40020000 	.word	0x40020000
 80053b4:	bffdfbf8 	.word	0xbffdfbf8
 80053b8:	40020400 	.word	0x40020400

080053bc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_DMA_Start_IT+0x20>
 80053d8:	2302      	movs	r3, #2
 80053da:	e066      	b.n	80054aa <HAL_DMA_Start_IT+0xee>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d155      	bne.n	800549c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0201 	bic.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f9b9 	bl	800578c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 020e 	orr.w	r2, r2, #14
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e00f      	b.n	8005454 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0204 	bic.w	r2, r2, #4
 8005442:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 020a 	orr.w	r2, r2, #10
 8005452:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d007      	beq.n	8005472 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005470:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005488:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0201 	orr.w	r2, r2, #1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e005      	b.n	80054a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054a4:	2302      	movs	r3, #2
 80054a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e04f      	b.n	8005564 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d008      	beq.n	80054e2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2204      	movs	r2, #4
 80054d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e040      	b.n	8005564 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 020e 	bic.w	r2, r2, #14
 80054f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005500:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005516:	f003 021c 	and.w	r2, r3, #28
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800551e:	2101      	movs	r1, #1
 8005520:	fa01 f202 	lsl.w	r2, r1, r2
 8005524:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800552e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00c      	beq.n	8005552 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005542:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005546:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005550:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005578:	2300      	movs	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d005      	beq.n	8005594 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2204      	movs	r2, #4
 800558c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
 8005592:	e047      	b.n	8005624 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 020e 	bic.w	r2, r2, #14
 80055a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0201 	bic.w	r2, r2, #1
 80055b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	f003 021c 	and.w	r2, r3, #28
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d0:	2101      	movs	r1, #1
 80055d2:	fa01 f202 	lsl.w	r2, r1, r2
 80055d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00c      	beq.n	8005604 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005602:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
    }
  }
  return status;
 8005624:	7bfb      	ldrb	r3, [r7, #15]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800564a:	f003 031c 	and.w	r3, r3, #28
 800564e:	2204      	movs	r2, #4
 8005650:	409a      	lsls	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4013      	ands	r3, r2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d026      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x7a>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d021      	beq.n	80056a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d107      	bne.n	8005682 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0204 	bic.w	r2, r2, #4
 8005680:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f003 021c 	and.w	r2, r3, #28
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568e:	2104      	movs	r1, #4
 8005690:	fa01 f202 	lsl.w	r2, r1, r2
 8005694:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	2b00      	cmp	r3, #0
 800569c:	d071      	beq.n	8005782 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80056a6:	e06c      	b.n	8005782 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	f003 031c 	and.w	r3, r3, #28
 80056b0:	2202      	movs	r2, #2
 80056b2:	409a      	lsls	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d02e      	beq.n	800571a <HAL_DMA_IRQHandler+0xec>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d029      	beq.n	800571a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 020a 	bic.w	r2, r2, #10
 80056e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f003 021c 	and.w	r2, r3, #28
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2102      	movs	r1, #2
 80056fa:	fa01 f202 	lsl.w	r2, r1, r2
 80056fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d038      	beq.n	8005782 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005718:	e033      	b.n	8005782 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571e:	f003 031c 	and.w	r3, r3, #28
 8005722:	2208      	movs	r2, #8
 8005724:	409a      	lsls	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4013      	ands	r3, r2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02a      	beq.n	8005784 <HAL_DMA_IRQHandler+0x156>
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d025      	beq.n	8005784 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 020e 	bic.w	r2, r2, #14
 8005746:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574c:	f003 021c 	and.w	r2, r3, #28
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	2101      	movs	r1, #1
 8005756:	fa01 f202 	lsl.w	r2, r1, r2
 800575a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005782:	bf00      	nop
 8005784:	bf00      	nop
}
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	f003 021c 	and.w	r2, r3, #28
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c2:	2101      	movs	r1, #1
 80057c4:	fa01 f202 	lsl.w	r2, r1, r2
 80057c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d108      	bne.n	80057ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80057ea:	e007      	b.n	80057fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	60da      	str	r2, [r3, #12]
}
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005818:	429a      	cmp	r2, r3
 800581a:	d80a      	bhi.n	8005832 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005828:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6493      	str	r3, [r2, #72]	@ 0x48
 8005830:	e007      	b.n	8005842 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	009a      	lsls	r2, r3, #2
 800583a:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800583c:	4413      	add	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	3b08      	subs	r3, #8
 800584a:	4a0c      	ldr	r2, [pc, #48]	@ (800587c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	091b      	lsrs	r3, r3, #4
 8005852:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0a      	ldr	r2, [pc, #40]	@ (8005880 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005858:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2201      	movs	r2, #1
 8005862:	409a      	lsls	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	40020407 	.word	0x40020407
 8005878:	4002081c 	.word	0x4002081c
 800587c:	cccccccd 	.word	0xcccccccd
 8005880:	40020880 	.word	0x40020880

08005884 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005894:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80058a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3b01      	subs	r3, #1
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2201      	movs	r2, #1
 80058b4:	409a      	lsls	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	1000823f 	.word	0x1000823f
 80058cc:	40020940 	.word	0x40020940

080058d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058de:	e14c      	b.n	8005b7a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	2101      	movs	r1, #1
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ec:	4013      	ands	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 813e 	beq.w	8005b74 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d005      	beq.n	8005910 <HAL_GPIO_Init+0x40>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d130      	bne.n	8005972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	2203      	movs	r2, #3
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4313      	orrs	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005946:	2201      	movs	r2, #1
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4013      	ands	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	091b      	lsrs	r3, r3, #4
 800595c:	f003 0201 	and.w	r2, r3, #1
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b03      	cmp	r3, #3
 800597c:	d017      	beq.n	80059ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	2203      	movs	r2, #3
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d123      	bne.n	8005a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	08da      	lsrs	r2, r3, #3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3208      	adds	r2, #8
 80059c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	220f      	movs	r2, #15
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4013      	ands	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	08da      	lsrs	r2, r3, #3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	3208      	adds	r2, #8
 80059fc:	6939      	ldr	r1, [r7, #16]
 80059fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	2203      	movs	r2, #3
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43db      	mvns	r3, r3
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4013      	ands	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f003 0203 	and.w	r2, r3, #3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8098 	beq.w	8005b74 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005a44:	4a54      	ldr	r2, [pc, #336]	@ (8005b98 <HAL_GPIO_Init+0x2c8>)
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	089b      	lsrs	r3, r3, #2
 8005a4a:	3302      	adds	r3, #2
 8005a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	4013      	ands	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005a6e:	d019      	beq.n	8005aa4 <HAL_GPIO_Init+0x1d4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a4a      	ldr	r2, [pc, #296]	@ (8005b9c <HAL_GPIO_Init+0x2cc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_GPIO_Init+0x1d0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a49      	ldr	r2, [pc, #292]	@ (8005ba0 <HAL_GPIO_Init+0x2d0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00d      	beq.n	8005a9c <HAL_GPIO_Init+0x1cc>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a48      	ldr	r2, [pc, #288]	@ (8005ba4 <HAL_GPIO_Init+0x2d4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d007      	beq.n	8005a98 <HAL_GPIO_Init+0x1c8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a47      	ldr	r2, [pc, #284]	@ (8005ba8 <HAL_GPIO_Init+0x2d8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d101      	bne.n	8005a94 <HAL_GPIO_Init+0x1c4>
 8005a90:	2304      	movs	r3, #4
 8005a92:	e008      	b.n	8005aa6 <HAL_GPIO_Init+0x1d6>
 8005a94:	2307      	movs	r3, #7
 8005a96:	e006      	b.n	8005aa6 <HAL_GPIO_Init+0x1d6>
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e004      	b.n	8005aa6 <HAL_GPIO_Init+0x1d6>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e002      	b.n	8005aa6 <HAL_GPIO_Init+0x1d6>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <HAL_GPIO_Init+0x1d6>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	f002 0203 	and.w	r2, r2, #3
 8005aac:	0092      	lsls	r2, r2, #2
 8005aae:	4093      	lsls	r3, r2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005ab6:	4938      	ldr	r1, [pc, #224]	@ (8005b98 <HAL_GPIO_Init+0x2c8>)
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	3302      	adds	r3, #2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ac4:	4b39      	ldr	r3, [pc, #228]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	43db      	mvns	r3, r3
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ae8:	4a30      	ldr	r2, [pc, #192]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005aee:	4b2f      	ldr	r3, [pc, #188]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	43db      	mvns	r3, r3
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4013      	ands	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b12:	4a26      	ldr	r2, [pc, #152]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b18:	4b24      	ldr	r3, [pc, #144]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	43db      	mvns	r3, r3
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4013      	ands	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8005b46:	4b19      	ldr	r3, [pc, #100]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	43db      	mvns	r3, r3
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4013      	ands	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8005bac <HAL_GPIO_Init+0x2dc>)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	3301      	adds	r3, #1
 8005b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	fa22 f303 	lsr.w	r3, r2, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f47f aeab 	bne.w	80058e0 <HAL_GPIO_Init+0x10>
  }
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	40010000 	.word	0x40010000
 8005b9c:	48000400 	.word	0x48000400
 8005ba0:	48000800 	.word	0x48000800
 8005ba4:	48000c00 	.word	0x48000c00
 8005ba8:	48001000 	.word	0x48001000
 8005bac:	58000800 	.word	0x58000800

08005bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	807b      	strh	r3, [r7, #2]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bc0:	787b      	ldrb	r3, [r7, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bc6:	887a      	ldrh	r2, [r7, #2]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bcc:	e002      	b.n	8005bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bce:	887a      	ldrh	r2, [r7, #2]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <HAL_HSEM_IRQHandler+0x30>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005bec:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <HAL_HSEM_IRQHandler+0x30>)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	43db      	mvns	r3, r3
 8005bf4:	4906      	ldr	r1, [pc, #24]	@ (8005c10 <HAL_HSEM_IRQHandler+0x30>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005bfa:	4a05      	ldr	r2, [pc, #20]	@ (8005c10 <HAL_HSEM_IRQHandler+0x30>)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f807 	bl	8005c14 <HAL_HSEM_FreeCallback>
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	58001500 	.word	0x58001500

08005c14 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01e      	beq.n	8005c78 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005c3a:	4b13      	ldr	r3, [pc, #76]	@ (8005c88 <HAL_IPCC_Init+0x60>)
 8005c3c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d102      	bne.n	8005c50 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fd fc50 	bl	80034f0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005c50:	68b8      	ldr	r0, [r7, #8]
 8005c52:	f000 f85b 	bl	8005d0c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f82c 	bl	8005cc0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005c76:	e001      	b.n	8005c7c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	58000c00 	.word	0x58000c00

08005c8c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e00f      	b.n	8005cee <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005d04 <IPCC_SetDefaultCallbacks+0x44>)
 8005cd8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3306      	adds	r3, #6
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4a08      	ldr	r2, [pc, #32]	@ (8005d08 <IPCC_SetDefaultCallbacks+0x48>)
 8005ce6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d9ec      	bls.n	8005cce <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	08005c8d 	.word	0x08005c8d
 8005d08:	08005ca7 	.word	0x08005ca7

08005d0c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005d20:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	223f      	movs	r2, #63	@ 0x3f
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <LL_EXTI_EnableIT_0_31>:
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <LL_EXTI_EnableIT_0_31+0x24>)
 8005d3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005d42:	4905      	ldr	r1, [pc, #20]	@ (8005d58 <LL_EXTI_EnableIT_0_31+0x24>)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	58000800 	.word	0x58000800

08005d5c <LL_EXTI_DisableIT_0_31>:
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005d64:	4b07      	ldr	r3, [pc, #28]	@ (8005d84 <LL_EXTI_DisableIT_0_31+0x28>)
 8005d66:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	4905      	ldr	r1, [pc, #20]	@ (8005d84 <LL_EXTI_DisableIT_0_31+0x28>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	58000800 	.word	0x58000800

08005d88 <LL_C2_EXTI_DisableIT_0_31>:
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8005d90:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8005d92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	4905      	ldr	r1, [pc, #20]	@ (8005db0 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	f8c1 30c0 	str.w	r3, [r1, #192]	@ 0xc0
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	58000800 	.word	0x58000800

08005db4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005dbc:	4b05      	ldr	r3, [pc, #20]	@ (8005dd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4904      	ldr	r1, [pc, #16]	@ (8005dd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	600b      	str	r3, [r1, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	58000800 	.word	0x58000800

08005dd8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	4904      	ldr	r1, [pc, #16]	@ (8005dfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005dea:	4013      	ands	r3, r2
 8005dec:	600b      	str	r3, [r1, #0]

}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	58000800 	.word	0x58000800

08005e00 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4904      	ldr	r1, [pc, #16]	@ (8005e20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	58000800 	.word	0x58000800

08005e24 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005e2c:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	43db      	mvns	r3, r3
 8005e34:	4904      	ldr	r1, [pc, #16]	@ (8005e48 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	604b      	str	r3, [r1, #4]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	58000800 	.word	0x58000800

08005e4c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a04      	ldr	r2, [pc, #16]	@ (8005e68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5a:	6013      	str	r3, [r2, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	58000400 	.word	0x58000400

08005e6c <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8005e74:	4b1d      	ldr	r3, [pc, #116]	@ (8005eec <HAL_PWR_ConfigPVD+0x80>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f023 020e 	bic.w	r2, r3, #14
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	491a      	ldr	r1, [pc, #104]	@ (8005eec <HAL_PWR_ConfigPVD+0x80>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WB series, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8005e86:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e8a:	f7ff ff67 	bl	8005d5c <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8005e8e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e92:	f7ff ff79 	bl	8005d88 <LL_C2_EXTI_DisableIT_0_31>

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8005e96:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005e9a:	f7ff ffc3 	bl	8005e24 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8005e9e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005ea2:	f7ff ff99 	bl	8005dd8 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8005eb2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005eb6:	f7ff ff3d 	bl	8005d34 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8005ec6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005eca:	f7ff ff73 	bl	8005db4 <LL_EXTI_EnableRisingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8005eda:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005ede:	f7ff ff8f 	bl	8005e00 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	58000400 	.word	0x58000400

08005ef0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8005ef4:	4b05      	ldr	r3, [pc, #20]	@ (8005f0c <HAL_PWR_EnablePVD+0x1c>)
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a04      	ldr	r2, [pc, #16]	@ (8005f0c <HAL_PWR_EnablePVD+0x1c>)
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	6053      	str	r3, [r2, #4]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	58000400 	.word	0x58000400

08005f10 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005f14:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	58000400 	.word	0x58000400

08005f2c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f3e:	d101      	bne.n	8005f44 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <LL_RCC_HSE_Enable>:
{
 8005f50:	b480      	push	{r7}
 8005f52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <LL_RCC_HSE_Disable>:
{
 8005f6e:	b480      	push	{r7}
 8005f70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
}
 8005f82:	bf00      	nop
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <LL_RCC_HSE_IsReady>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f9e:	d101      	bne.n	8005fa4 <LL_RCC_HSE_IsReady+0x18>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <LL_RCC_HSE_IsReady+0x1a>
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <LL_RCC_HSI_Enable>:
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fc2:	6013      	str	r3, [r2, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <LL_RCC_HSI_Disable>:
{
 8005fce:	b480      	push	{r7}
 8005fd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe0:	6013      	str	r3, [r2, #0]
}
 8005fe2:	bf00      	nop
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_RCC_HSI_IsReady>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffe:	d101      	bne.n	8006004 <LL_RCC_HSI_IsReady+0x18>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <LL_RCC_HSI_IsReady+0x1a>
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	061b      	lsls	r3, r3, #24
 8006026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800602a:	4313      	orrs	r3, r2
 800602c:	604b      	str	r3, [r1, #4]
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <LL_RCC_HSI48_Enable>:
{
 800603a:	b480      	push	{r7}
 800603c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800603e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006046:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006052:	bf00      	nop
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_RCC_HSI48_Disable>:
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <LL_RCC_HSI48_IsReady>:
{
 800607e:	b480      	push	{r7}
 8006080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800608a:	f003 0302 	and.w	r3, r3, #2
 800608e:	2b02      	cmp	r3, #2
 8006090:	d101      	bne.n	8006096 <LL_RCC_HSI48_IsReady+0x18>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <LL_RCC_HSI48_IsReady+0x1a>
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <LL_RCC_LSE_Enable>:
{
 80060a2:	b480      	push	{r7}
 80060a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060ba:	bf00      	nop
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_RCC_LSE_Disable>:
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80060c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060dc:	bf00      	nop
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <LL_RCC_LSE_EnableBypass>:
{
 80060e6:	b480      	push	{r7}
 80060e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060fe:	bf00      	nop
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <LL_RCC_LSE_DisableBypass>:
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800610c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006118:	f023 0304 	bic.w	r3, r3, #4
 800611c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006120:	bf00      	nop
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <LL_RCC_LSE_IsReady>:
{
 800612a:	b480      	push	{r7}
 800612c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800612e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b02      	cmp	r3, #2
 800613c:	d101      	bne.n	8006142 <LL_RCC_LSE_IsReady+0x18>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <LL_RCC_LSE_IsReady+0x1a>
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <LL_RCC_LSI1_Enable>:
{
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800615a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_RCC_LSI1_Disable>:
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006178:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800617c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006180:	f023 0301 	bic.w	r3, r3, #1
 8006184:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006188:	bf00      	nop
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <LL_RCC_LSI1_IsReady>:
{
 8006192:	b480      	push	{r7}
 8006194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800619a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d101      	bne.n	80061aa <LL_RCC_LSI1_IsReady+0x18>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <LL_RCC_LSI1_IsReady+0x1a>
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <LL_RCC_LSI2_Enable>:
{
 80061b6:	b480      	push	{r7}
 80061b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061c6:	f043 0304 	orr.w	r3, r3, #4
 80061ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80061ce:	bf00      	nop
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <LL_RCC_LSI2_Disable>:
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80061dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061e8:	f023 0304 	bic.w	r3, r3, #4
 80061ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80061f0:	bf00      	nop
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <LL_RCC_LSI2_IsReady>:
{
 80061fa:	b480      	push	{r7}
 80061fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80061fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b08      	cmp	r3, #8
 800620c:	d101      	bne.n	8006212 <LL_RCC_LSI2_IsReady+0x18>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <LL_RCC_LSI2_IsReady+0x1a>
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <LL_RCC_LSI2_SetTrimming>:
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LL_RCC_MSI_Enable>:
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <LL_RCC_MSI_Disable>:
{
 800626a:	b480      	push	{r7}
 800626c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800626e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006278:	f023 0301 	bic.w	r3, r3, #1
 800627c:	6013      	str	r3, [r2, #0]
}
 800627e:	bf00      	nop
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <LL_RCC_MSI_IsReady>:
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800628c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b02      	cmp	r3, #2
 8006298:	d101      	bne.n	800629e <LL_RCC_MSI_IsReady+0x16>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_RCC_MSI_IsReady+0x18>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_RCC_MSI_SetRange>:
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80062b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <LL_RCC_MSI_GetRange>:
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80062d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062e2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2bb0      	cmp	r3, #176	@ 0xb0
 80062e8:	d901      	bls.n	80062ee <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80062ea:	23b0      	movs	r3, #176	@ 0xb0
 80062ec:	607b      	str	r3, [r7, #4]
  return msiRange;
 80062ee:	687b      	ldr	r3, [r7, #4]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_RCC_MSI_SetCalibTrimming>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006316:	4313      	orrs	r3, r2
 8006318:	604b      	str	r3, [r1, #4]
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LL_RCC_SetSysClkSource>:
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800632e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f023 0203 	bic.w	r2, r3, #3
 8006338:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	608b      	str	r3, [r1, #8]
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <LL_RCC_GetSysClkSource>:
{
 800634e:	b480      	push	{r7}
 8006350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 030c 	and.w	r3, r3, #12
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_RCC_SetAHBPrescaler>:
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800636e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006378:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <LL_C2_RCC_SetAHBPrescaler>:
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800639a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800639e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <LL_RCC_SetAHB4Prescaler>:
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80063c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80063ca:	f023 020f 	bic.w	r2, r3, #15
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <LL_RCC_SetAPB1Prescaler>:
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4313      	orrs	r3, r2
 8006402:	608b      	str	r3, [r1, #8]
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <LL_RCC_SetAPB2Prescaler>:
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006422:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4313      	orrs	r3, r2
 800642a:	608b      	str	r3, [r1, #8]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_RCC_GetAHBPrescaler>:
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800643c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_RCC_GetAHB4Prescaler>:
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006458:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006462:	4618      	mov	r0, r3
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <LL_RCC_GetAPB1Prescaler>:
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800647a:	4618      	mov	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <LL_RCC_GetAPB2Prescaler>:
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006492:	4618      	mov	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80064a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064ae:	6013      	str	r3, [r2, #0]
}
 80064b0:	bf00      	nop
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80064ba:	b480      	push	{r7}
 80064bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064cc:	6013      	str	r3, [r2, #0]
}
 80064ce:	bf00      	nop
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064ea:	d101      	bne.n	80064f0 <LL_RCC_PLL_IsReady+0x18>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <LL_RCC_PLL_IsReady+0x1a>
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800650c:	4618      	mov	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006516:	b480      	push	{r7}
 8006518:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800651a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006524:	4618      	mov	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800652e:	b480      	push	{r7}
 8006530:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800653c:	4618      	mov	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006546:	b480      	push	{r7}
 8006548:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0303 	and.w	r3, r3, #3
}
 8006554:	4618      	mov	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800655e:	b480      	push	{r7}
 8006560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006570:	d101      	bne.n	8006576 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006582:	b480      	push	{r7}
 8006584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800658a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800658e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006596:	d101      	bne.n	800659c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80065ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80065b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065bc:	d101      	bne.n	80065c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80065be:	2301      	movs	r3, #1
 80065c0:	e000      	b.n	80065c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80065ce:	b480      	push	{r7}
 80065d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80065d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065e0:	d101      	bne.n	80065e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80065f2:	b480      	push	{r7}
 80065f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80065f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006600:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006604:	d101      	bne.n	800660a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006618:	b590      	push	{r4, r7, lr}
 800661a:	b08d      	sub	sp, #52	@ 0x34
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e363      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 808d 	beq.w	8006752 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006638:	f7ff fe89 	bl	800634e <LL_RCC_GetSysClkSource>
 800663c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800663e:	f7ff ff82 	bl	8006546 <LL_RCC_PLL_GetMainSource>
 8006642:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_RCC_OscConfig+0x3e>
 800664a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d147      	bne.n	80066e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	2b01      	cmp	r3, #1
 8006654:	d144      	bne.n	80066e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e347      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006666:	f7ff fe34 	bl	80062d2 <LL_RCC_MSI_GetRange>
 800666a:	4603      	mov	r3, r0
 800666c:	429c      	cmp	r4, r3
 800666e:	d914      	bls.n	800669a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fd2f 	bl	80070d8 <RCC_SetFlashLatencyFromMSIRange>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e336      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fe0e 	bl	80062aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fe32 	bl	80062fc <LL_RCC_MSI_SetCalibTrimming>
 8006698:	e013      	b.n	80066c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fe03 	bl	80062aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fe27 	bl	80062fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fd10 	bl	80070d8 <RCC_SetFlashLatencyFromMSIRange>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e317      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066c2:	f000 fcc9 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 80066c6:	4603      	mov	r3, r0
 80066c8:	4aa4      	ldr	r2, [pc, #656]	@ (800695c <HAL_RCC_OscConfig+0x344>)
 80066ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80066cc:	4ba4      	ldr	r3, [pc, #656]	@ (8006960 <HAL_RCC_OscConfig+0x348>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7fd fd15 	bl	8004100 <HAL_InitTick>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d039      	beq.n	8006750 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e308      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01e      	beq.n	8006726 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80066e8:	f7ff fdb0 	bl	800624c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066ec:	f7fd fd56 	bl	800419c <HAL_GetTick>
 80066f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066f4:	f7fd fd52 	bl	800419c <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e2f5      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006706:	f7ff fdbf 	bl	8006288 <LL_RCC_MSI_IsReady>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f1      	beq.n	80066f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fdc8 	bl	80062aa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fdec 	bl	80062fc <LL_RCC_MSI_SetCalibTrimming>
 8006724:	e015      	b.n	8006752 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006726:	f7ff fda0 	bl	800626a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800672a:	f7fd fd37 	bl	800419c <HAL_GetTick>
 800672e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006732:	f7fd fd33 	bl	800419c <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e2d6      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006744:	f7ff fda0 	bl	8006288 <LL_RCC_MSI_IsReady>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1f1      	bne.n	8006732 <HAL_RCC_OscConfig+0x11a>
 800674e:	e000      	b.n	8006752 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006750:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d047      	beq.n	80067ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800675e:	f7ff fdf6 	bl	800634e <LL_RCC_GetSysClkSource>
 8006762:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006764:	f7ff feef 	bl	8006546 <LL_RCC_PLL_GetMainSource>
 8006768:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d005      	beq.n	800677c <HAL_RCC_OscConfig+0x164>
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	2b0c      	cmp	r3, #12
 8006774:	d108      	bne.n	8006788 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b03      	cmp	r3, #3
 800677a:	d105      	bne.n	8006788 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d134      	bne.n	80067ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e2b4      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006790:	d102      	bne.n	8006798 <HAL_RCC_OscConfig+0x180>
 8006792:	f7ff fbdd 	bl	8005f50 <LL_RCC_HSE_Enable>
 8006796:	e001      	b.n	800679c <HAL_RCC_OscConfig+0x184>
 8006798:	f7ff fbe9 	bl	8005f6e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d012      	beq.n	80067ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a4:	f7fd fcfa 	bl	800419c <HAL_GetTick>
 80067a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067ac:	f7fd fcf6 	bl	800419c <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b64      	cmp	r3, #100	@ 0x64
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e299      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80067be:	f7ff fbe5 	bl	8005f8c <LL_RCC_HSE_IsReady>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f1      	beq.n	80067ac <HAL_RCC_OscConfig+0x194>
 80067c8:	e011      	b.n	80067ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ca:	f7fd fce7 	bl	800419c <HAL_GetTick>
 80067ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80067d0:	e008      	b.n	80067e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067d2:	f7fd fce3 	bl	800419c <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b64      	cmp	r3, #100	@ 0x64
 80067de:	d901      	bls.n	80067e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e286      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80067e4:	f7ff fbd2 	bl	8005f8c <LL_RCC_HSE_IsReady>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f1      	bne.n	80067d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04c      	beq.n	8006894 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067fa:	f7ff fda8 	bl	800634e <LL_RCC_GetSysClkSource>
 80067fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006800:	f7ff fea1 	bl	8006546 <LL_RCC_PLL_GetMainSource>
 8006804:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d005      	beq.n	8006818 <HAL_RCC_OscConfig+0x200>
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b0c      	cmp	r3, #12
 8006810:	d10e      	bne.n	8006830 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b02      	cmp	r3, #2
 8006816:	d10b      	bne.n	8006830 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e266      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fbf1 	bl	8006010 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800682e:	e031      	b.n	8006894 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d019      	beq.n	800686c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	f7ff fbba 	bl	8005fb0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683c:	f7fd fcae 	bl	800419c <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006844:	f7fd fcaa 	bl	800419c <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e24d      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006856:	f7ff fbc9 	bl	8005fec <LL_RCC_HSI_IsReady>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0f1      	beq.n	8006844 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fbd3 	bl	8006010 <LL_RCC_HSI_SetCalibTrimming>
 800686a:	e013      	b.n	8006894 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686c:	f7ff fbaf 	bl	8005fce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7fd fc94 	bl	800419c <HAL_GetTick>
 8006874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006878:	f7fd fc90 	bl	800419c <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e233      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800688a:	f7ff fbaf 	bl	8005fec <LL_RCC_HSI_IsReady>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f1      	bne.n	8006878 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 80a3 	beq.w	80069f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d076      	beq.n	80069a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d046      	beq.n	8006950 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80068c2:	f7ff fc66 	bl	8006192 <LL_RCC_LSI1_IsReady>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d113      	bne.n	80068f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80068cc:	f7ff fc3f 	bl	800614e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068d0:	f7fd fc64 	bl	800419c <HAL_GetTick>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068d8:	f7fd fc60 	bl	800419c <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e203      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80068ea:	f7ff fc52 	bl	8006192 <LL_RCC_LSI1_IsReady>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f1      	beq.n	80068d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80068f4:	f7ff fc5f 	bl	80061b6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f8:	f7fd fc50 	bl	800419c <HAL_GetTick>
 80068fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006900:	f7fd fc4c 	bl	800419c <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b03      	cmp	r3, #3
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e1ef      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006912:	f7ff fc72 	bl	80061fa <LL_RCC_LSI2_IsReady>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f1      	beq.n	8006900 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fc7c 	bl	800621e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006926:	f7ff fc23 	bl	8006170 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692a:	f7fd fc37 	bl	800419c <HAL_GetTick>
 800692e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006932:	f7fd fc33 	bl	800419c <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e1d6      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006944:	f7ff fc25 	bl	8006192 <LL_RCC_LSI1_IsReady>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f1      	bne.n	8006932 <HAL_RCC_OscConfig+0x31a>
 800694e:	e051      	b.n	80069f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006950:	f7ff fbfd 	bl	800614e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fd fc22 	bl	800419c <HAL_GetTick>
 8006958:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800695a:	e00c      	b.n	8006976 <HAL_RCC_OscConfig+0x35e>
 800695c:	20000008 	.word	0x20000008
 8006960:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006964:	f7fd fc1a 	bl	800419c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e1bd      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006976:	f7ff fc0c 	bl	8006192 <LL_RCC_LSI1_IsReady>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f1      	beq.n	8006964 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006980:	f7ff fc2a 	bl	80061d8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006984:	e008      	b.n	8006998 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006986:	f7fd fc09 	bl	800419c <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b03      	cmp	r3, #3
 8006992:	d901      	bls.n	8006998 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e1ac      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006998:	f7ff fc2f 	bl	80061fa <LL_RCC_LSI2_IsReady>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f1      	bne.n	8006986 <HAL_RCC_OscConfig+0x36e>
 80069a2:	e027      	b.n	80069f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80069a4:	f7ff fc18 	bl	80061d8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a8:	f7fd fbf8 	bl	800419c <HAL_GetTick>
 80069ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80069b0:	f7fd fbf4 	bl	800419c <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e197      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80069c2:	f7ff fc1a 	bl	80061fa <LL_RCC_LSI2_IsReady>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1f1      	bne.n	80069b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80069cc:	f7ff fbd0 	bl	8006170 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fd fbe4 	bl	800419c <HAL_GetTick>
 80069d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80069d8:	f7fd fbe0 	bl	800419c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e183      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80069ea:	f7ff fbd2 	bl	8006192 <LL_RCC_LSI1_IsReady>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f1      	bne.n	80069d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d05b      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a00:	4ba7      	ldr	r3, [pc, #668]	@ (8006ca0 <HAL_RCC_OscConfig+0x688>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d114      	bne.n	8006a36 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006a0c:	f7ff fa1e 	bl	8005e4c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a10:	f7fd fbc4 	bl	800419c <HAL_GetTick>
 8006a14:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a18:	f7fd fbc0 	bl	800419c <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e163      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a2a:	4b9d      	ldr	r3, [pc, #628]	@ (8006ca0 <HAL_RCC_OscConfig+0x688>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCC_OscConfig+0x42c>
 8006a3e:	f7ff fb30 	bl	80060a2 <LL_RCC_LSE_Enable>
 8006a42:	e00c      	b.n	8006a5e <HAL_RCC_OscConfig+0x446>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b05      	cmp	r3, #5
 8006a4a:	d104      	bne.n	8006a56 <HAL_RCC_OscConfig+0x43e>
 8006a4c:	f7ff fb4b 	bl	80060e6 <LL_RCC_LSE_EnableBypass>
 8006a50:	f7ff fb27 	bl	80060a2 <LL_RCC_LSE_Enable>
 8006a54:	e003      	b.n	8006a5e <HAL_RCC_OscConfig+0x446>
 8006a56:	f7ff fb35 	bl	80060c4 <LL_RCC_LSE_Disable>
 8006a5a:	f7ff fb55 	bl	8006108 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d014      	beq.n	8006a90 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a66:	f7fd fb99 	bl	800419c <HAL_GetTick>
 8006a6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a6c:	e00a      	b.n	8006a84 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a6e:	f7fd fb95 	bl	800419c <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e136      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a84:	f7ff fb51 	bl	800612a <LL_RCC_LSE_IsReady>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0ef      	beq.n	8006a6e <HAL_RCC_OscConfig+0x456>
 8006a8e:	e013      	b.n	8006ab8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a90:	f7fd fb84 	bl	800419c <HAL_GetTick>
 8006a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a96:	e00a      	b.n	8006aae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a98:	f7fd fb80 	bl	800419c <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e121      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006aae:	f7ff fb3c 	bl	800612a <LL_RCC_LSE_IsReady>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1ef      	bne.n	8006a98 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d02c      	beq.n	8006b1e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d014      	beq.n	8006af6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006acc:	f7ff fab5 	bl	800603a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad0:	f7fd fb64 	bl	800419c <HAL_GetTick>
 8006ad4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ad8:	f7fd fb60 	bl	800419c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e103      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006aea:	f7ff fac8 	bl	800607e <LL_RCC_HSI48_IsReady>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d0f1      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x4c0>
 8006af4:	e013      	b.n	8006b1e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006af6:	f7ff fab1 	bl	800605c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afa:	f7fd fb4f 	bl	800419c <HAL_GetTick>
 8006afe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b02:	f7fd fb4b 	bl	800419c <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0ee      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006b14:	f7ff fab3 	bl	800607e <LL_RCC_HSI48_IsReady>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1f1      	bne.n	8006b02 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 80e4 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b28:	f7ff fc11 	bl	800634e <LL_RCC_GetSysClkSource>
 8006b2c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	f040 80b4 	bne.w	8006ca8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0203 	and.w	r2, r3, #3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d123      	bne.n	8006b96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d11c      	bne.n	8006b96 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d114      	bne.n	8006b96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d10d      	bne.n	8006b96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d106      	bne.n	8006b96 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d05d      	beq.n	8006c52 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2b0c      	cmp	r3, #12
 8006b9a:	d058      	beq.n	8006c4e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e0a1      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006bae:	f7ff fc84 	bl	80064ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bb2:	f7fd faf3 	bl	800419c <HAL_GetTick>
 8006bb6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bba:	f7fd faef 	bl	800419c <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e092      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1ef      	bne.n	8006bba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	4b30      	ldr	r3, [pc, #192]	@ (8006ca4 <HAL_RCC_OscConfig+0x68c>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bec:	4311      	orrs	r1, r2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006bf2:	0212      	lsls	r2, r2, #8
 8006bf4:	4311      	orrs	r1, r2
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c00:	4311      	orrs	r1, r2
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c06:	430a      	orrs	r2, r1
 8006c08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006c10:	f7ff fc44 	bl	800649c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006c24:	f7fd faba 	bl	800419c <HAL_GetTick>
 8006c28:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fd fab6 	bl	800419c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e059      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0ef      	beq.n	8006c2c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c4c:	e050      	b.n	8006cf0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e04f      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d147      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c60:	f7ff fc1c 	bl	800649c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c74:	f7fd fa92 	bl	800419c <HAL_GetTick>
 8006c78:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c7c:	f7fd fa8e 	bl	800419c <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e031      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0ef      	beq.n	8006c7c <HAL_RCC_OscConfig+0x664>
 8006c9c:	e028      	b.n	8006cf0 <HAL_RCC_OscConfig+0x6d8>
 8006c9e:	bf00      	nop
 8006ca0:	58000400 	.word	0x58000400
 8006ca4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2b0c      	cmp	r3, #12
 8006cac:	d01e      	beq.n	8006cec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cae:	f7ff fc04 	bl	80064ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb2:	f7fd fa73 	bl	800419c <HAL_GetTick>
 8006cb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cba:	f7fd fa6f 	bl	800419c <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e012      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1ef      	bne.n	8006cba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ce4:	4b05      	ldr	r3, [pc, #20]	@ (8006cfc <HAL_RCC_OscConfig+0x6e4>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	60cb      	str	r3, [r1, #12]
 8006cea:	e001      	b.n	8006cf0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3734      	adds	r7, #52	@ 0x34
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd90      	pop	{r4, r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	eefefffc 	.word	0xeefefffc

08006d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e12d      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d14:	4b98      	ldr	r3, [pc, #608]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d91b      	bls.n	8006d5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d22:	4b95      	ldr	r3, [pc, #596]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 0207 	bic.w	r2, r3, #7
 8006d2a:	4993      	ldr	r1, [pc, #588]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d32:	f7fd fa33 	bl	800419c <HAL_GetTick>
 8006d36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006d3a:	f7fd fa2f 	bl	800419c <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e111      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4c:	4b8a      	ldr	r3, [pc, #552]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d1ef      	bne.n	8006d3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fafb 	bl	8006366 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d70:	f7fd fa14 	bl	800419c <HAL_GetTick>
 8006d74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d78:	f7fd fa10 	bl	800419c <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e0f2      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d8a:	f7ff fbe8 	bl	800655e <LL_RCC_IsActiveFlag_HPRE>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f1      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d016      	beq.n	8006dce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff faf2 	bl	800638e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006daa:	f7fd f9f7 	bl	800419c <HAL_GetTick>
 8006dae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006db0:	e008      	b.n	8006dc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006db2:	f7fd f9f3 	bl	800419c <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e0d5      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006dc4:	f7ff fbdd 	bl	8006582 <LL_RCC_IsActiveFlag_C2HPRE>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f1      	beq.n	8006db2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d016      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff faeb 	bl	80063ba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006de4:	f7fd f9da 	bl	800419c <HAL_GetTick>
 8006de8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dec:	f7fd f9d6 	bl	800419c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e0b8      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006dfe:	f7ff fbd3 	bl	80065a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f1      	beq.n	8006dec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d016      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fae5 	bl	80063e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e1e:	f7fd f9bd 	bl	800419c <HAL_GetTick>
 8006e22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e26:	f7fd f9b9 	bl	800419c <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e09b      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006e38:	f7ff fbc9 	bl	80065ce <LL_RCC_IsActiveFlag_PPRE1>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0f1      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d017      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7ff fadb 	bl	8006410 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e5a:	f7fd f99f 	bl	800419c <HAL_GetTick>
 8006e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e62:	f7fd f99b 	bl	800419c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e07d      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e74:	f7ff fbbd 	bl	80065f2 <LL_RCC_IsActiveFlag_PPRE2>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0f1      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d043      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006e92:	f7ff f87b 	bl	8005f8c <LL_RCC_HSE_IsReady>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d11e      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e067      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b03      	cmp	r3, #3
 8006ea6:	d106      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006ea8:	f7ff fb16 	bl	80064d8 <LL_RCC_PLL_IsReady>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d113      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e05c      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006ebe:	f7ff f9e3 	bl	8006288 <LL_RCC_MSI_IsReady>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d108      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e051      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006ecc:	f7ff f88e 	bl	8005fec <LL_RCC_HSI_IsReady>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e04a      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fa21 	bl	8006326 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ee4:	f7fd f95a 	bl	800419c <HAL_GetTick>
 8006ee8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eea:	e00a      	b.n	8006f02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eec:	f7fd f956 	bl	800419c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e036      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f02:	f7ff fa24 	bl	800634e <LL_RCC_GetSysClkSource>
 8006f06:	4602      	mov	r2, r0
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d1ec      	bne.n	8006eec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f12:	4b19      	ldr	r3, [pc, #100]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d21b      	bcs.n	8006f58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f20:	4b15      	ldr	r3, [pc, #84]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f023 0207 	bic.w	r2, r3, #7
 8006f28:	4913      	ldr	r1, [pc, #76]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f30:	f7fd f934 	bl	800419c <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f36:	e008      	b.n	8006f4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006f38:	f7fd f930 	bl	800419c <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e012      	b.n	8006f70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <HAL_RCC_ClockConfig+0x278>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0307 	and.w	r3, r3, #7
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d1ef      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f58:	f000 f87e 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	4a07      	ldr	r2, [pc, #28]	@ (8006f7c <HAL_RCC_ClockConfig+0x27c>)
 8006f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006f62:	f7fd f927 	bl	80041b4 <HAL_GetTickPrio>
 8006f66:	4603      	mov	r3, r0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fd f8c9 	bl	8004100 <HAL_InitTick>
 8006f6e:	4603      	mov	r3, r0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	58004000 	.word	0x58004000
 8006f7c:	20000008 	.word	0x20000008

08006f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f86:	f7ff f9e2 	bl	800634e <LL_RCC_GetSysClkSource>
 8006f8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f92:	f7ff f99e 	bl	80062d2 <LL_RCC_MSI_GetRange>
 8006f96:	4603      	mov	r3, r0
 8006f98:	091b      	lsrs	r3, r3, #4
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800704c <HAL_RCC_GetSysClockFreq+0xcc>)
 8006fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e04b      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d102      	bne.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fae:	4b28      	ldr	r3, [pc, #160]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	e045      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b08      	cmp	r3, #8
 8006fb8:	d10a      	bne.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006fba:	f7fe ffb7 	bl	8005f2c <LL_RCC_HSE_IsEnabledDiv2>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d102      	bne.n	8006fca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006fc4:	4b22      	ldr	r3, [pc, #136]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	e03a      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006fca:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e037      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006fd0:	f7ff fab9 	bl	8006546 <LL_RCC_PLL_GetMainSource>
 8006fd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d003      	beq.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x64>
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d003      	beq.n	8006fea <HAL_RCC_GetSysClockFreq+0x6a>
 8006fe2:	e00d      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fe6:	60bb      	str	r3, [r7, #8]
        break;
 8006fe8:	e015      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006fea:	f7fe ff9f 	bl	8005f2c <LL_RCC_HSE_IsEnabledDiv2>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006ff4:	4b16      	ldr	r3, [pc, #88]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006ff6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006ff8:	e00d      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006ffa:	4b16      	ldr	r3, [pc, #88]	@ (8007054 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006ffc:	60bb      	str	r3, [r7, #8]
        break;
 8006ffe:	e00a      	b.n	8007016 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007000:	f7ff f967 	bl	80062d2 <LL_RCC_MSI_GetRange>
 8007004:	4603      	mov	r3, r0
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	4a0f      	ldr	r2, [pc, #60]	@ (800704c <HAL_RCC_GetSysClockFreq+0xcc>)
 800700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007012:	60bb      	str	r3, [r7, #8]
        break;
 8007014:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007016:	f7ff fa71 	bl	80064fc <LL_RCC_PLL_GetN>
 800701a:	4602      	mov	r2, r0
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	fb03 f402 	mul.w	r4, r3, r2
 8007022:	f7ff fa84 	bl	800652e <LL_RCC_PLL_GetDivider>
 8007026:	4603      	mov	r3, r0
 8007028:	091b      	lsrs	r3, r3, #4
 800702a:	3301      	adds	r3, #1
 800702c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007030:	f7ff fa71 	bl	8006516 <LL_RCC_PLL_GetR>
 8007034:	4603      	mov	r3, r0
 8007036:	0f5b      	lsrs	r3, r3, #29
 8007038:	3301      	adds	r3, #1
 800703a:	fbb4 f3f3 	udiv	r3, r4, r3
 800703e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}
 800704a:	bf00      	nop
 800704c:	080132e4 	.word	0x080132e4
 8007050:	00f42400 	.word	0x00f42400
 8007054:	01e84800 	.word	0x01e84800

08007058 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007058:	b598      	push	{r3, r4, r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800705c:	f7ff ff90 	bl	8006f80 <HAL_RCC_GetSysClockFreq>
 8007060:	4604      	mov	r4, r0
 8007062:	f7ff f9e9 	bl	8006438 <LL_RCC_GetAHBPrescaler>
 8007066:	4603      	mov	r3, r0
 8007068:	091b      	lsrs	r3, r3, #4
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	4a03      	ldr	r2, [pc, #12]	@ (800707c <HAL_RCC_GetHCLKFreq+0x24>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007078:	4618      	mov	r0, r3
 800707a:	bd98      	pop	{r3, r4, r7, pc}
 800707c:	08013284 	.word	0x08013284

08007080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007080:	b598      	push	{r3, r4, r7, lr}
 8007082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007084:	f7ff ffe8 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 8007088:	4604      	mov	r4, r0
 800708a:	f7ff f9ef 	bl	800646c <LL_RCC_GetAPB1Prescaler>
 800708e:	4603      	mov	r3, r0
 8007090:	0a1b      	lsrs	r3, r3, #8
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	4a04      	ldr	r2, [pc, #16]	@ (80070a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709c:	f003 031f 	and.w	r3, r3, #31
 80070a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	bd98      	pop	{r3, r4, r7, pc}
 80070a8:	080132c4 	.word	0x080132c4

080070ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070ac:	b598      	push	{r3, r4, r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80070b0:	f7ff ffd2 	bl	8007058 <HAL_RCC_GetHCLKFreq>
 80070b4:	4604      	mov	r4, r0
 80070b6:	f7ff f9e5 	bl	8006484 <LL_RCC_GetAPB2Prescaler>
 80070ba:	4603      	mov	r3, r0
 80070bc:	0adb      	lsrs	r3, r3, #11
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	4a04      	ldr	r2, [pc, #16]	@ (80070d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	bd98      	pop	{r3, r4, r7, pc}
 80070d4:	080132c4 	.word	0x080132c4

080070d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2bb0      	cmp	r3, #176	@ 0xb0
 80070e4:	d903      	bls.n	80070ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80070e6:	4b15      	ldr	r3, [pc, #84]	@ (800713c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e007      	b.n	80070fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	4a11      	ldr	r2, [pc, #68]	@ (800713c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80070fe:	f7ff f9a7 	bl	8006450 <LL_RCC_GetAHB4Prescaler>
 8007102:	4603      	mov	r3, r0
 8007104:	091b      	lsrs	r3, r3, #4
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	4a0d      	ldr	r2, [pc, #52]	@ (8007140 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800710c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4a0a      	ldr	r2, [pc, #40]	@ (8007144 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800711c:	fba2 2303 	umull	r2, r3, r2, r3
 8007120:	0c9c      	lsrs	r4, r3, #18
 8007122:	f7fe fef5 	bl	8005f10 <HAL_PWREx_GetVoltageRange>
 8007126:	4603      	mov	r3, r0
 8007128:	4619      	mov	r1, r3
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f80c 	bl	8007148 <RCC_SetFlashLatency>
 8007130:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	bd90      	pop	{r4, r7, pc}
 800713a:	bf00      	nop
 800713c:	080132e4 	.word	0x080132e4
 8007140:	08013284 	.word	0x08013284
 8007144:	431bde83 	.word	0x431bde83

08007148 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b093      	sub	sp, #76	@ 0x4c
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007152:	4b37      	ldr	r3, [pc, #220]	@ (8007230 <RCC_SetFlashLatency+0xe8>)
 8007154:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800715a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800715e:	4a35      	ldr	r2, [pc, #212]	@ (8007234 <RCC_SetFlashLatency+0xec>)
 8007160:	f107 031c 	add.w	r3, r7, #28
 8007164:	ca07      	ldmia	r2, {r0, r1, r2}
 8007166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800716a:	4b33      	ldr	r3, [pc, #204]	@ (8007238 <RCC_SetFlashLatency+0xf0>)
 800716c:	f107 040c 	add.w	r4, r7, #12
 8007170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007176:	2300      	movs	r3, #0
 8007178:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007180:	d11a      	bne.n	80071b8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007182:	2300      	movs	r3, #0
 8007184:	643b      	str	r3, [r7, #64]	@ 0x40
 8007186:	e013      	b.n	80071b0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	3348      	adds	r3, #72	@ 0x48
 800718e:	443b      	add	r3, r7
 8007190:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d807      	bhi.n	80071aa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800719a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	3348      	adds	r3, #72	@ 0x48
 80071a0:	443b      	add	r3, r7
 80071a2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80071a6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80071a8:	e020      	b.n	80071ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80071aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ac:	3301      	adds	r3, #1
 80071ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d9e8      	bls.n	8007188 <RCC_SetFlashLatency+0x40>
 80071b6:	e019      	b.n	80071ec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80071b8:	2300      	movs	r3, #0
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071bc:	e013      	b.n	80071e6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80071be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	3348      	adds	r3, #72	@ 0x48
 80071c4:	443b      	add	r3, r7
 80071c6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d807      	bhi.n	80071e0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80071d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	3348      	adds	r3, #72	@ 0x48
 80071d6:	443b      	add	r3, r7
 80071d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80071dc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80071de:	e005      	b.n	80071ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80071e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e2:	3301      	adds	r3, #1
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d9e8      	bls.n	80071be <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80071ec:	4b13      	ldr	r3, [pc, #76]	@ (800723c <RCC_SetFlashLatency+0xf4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f023 0207 	bic.w	r2, r3, #7
 80071f4:	4911      	ldr	r1, [pc, #68]	@ (800723c <RCC_SetFlashLatency+0xf4>)
 80071f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071f8:	4313      	orrs	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071fc:	f7fc ffce 	bl	800419c <HAL_GetTick>
 8007200:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007202:	e008      	b.n	8007216 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007204:	f7fc ffca 	bl	800419c <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e007      	b.n	8007226 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007216:	4b09      	ldr	r3, [pc, #36]	@ (800723c <RCC_SetFlashLatency+0xf4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007220:	429a      	cmp	r2, r3
 8007222:	d1ef      	bne.n	8007204 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	374c      	adds	r7, #76	@ 0x4c
 800722a:	46bd      	mov	sp, r7
 800722c:	bd90      	pop	{r4, r7, pc}
 800722e:	bf00      	nop
 8007230:	0801211c 	.word	0x0801211c
 8007234:	0801212c 	.word	0x0801212c
 8007238:	08012138 	.word	0x08012138
 800723c:	58004000 	.word	0x58004000

08007240 <LL_RCC_LSE_IsEnabled>:
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <LL_RCC_LSE_IsEnabled+0x18>
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <LL_RCC_LSE_IsEnabled+0x1a>
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <LL_RCC_LSE_IsReady>:
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b02      	cmp	r3, #2
 8007276:	d101      	bne.n	800727c <LL_RCC_LSE_IsReady+0x18>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <LL_RCC_LSE_IsReady+0x1a>
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <LL_RCC_SetRFWKPClockSource>:
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007294:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007298:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800729c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <LL_RCC_SetSMPSClockSource>:
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80072bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	f023 0203 	bic.w	r2, r3, #3
 80072c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <LL_RCC_SetSMPSPrescaler>:
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80072e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <LL_RCC_SetUSARTClockSource>:
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007314:	f023 0203 	bic.w	r2, r3, #3
 8007318:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007324:	bf00      	nop
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <LL_RCC_SetLPUARTClockSource>:
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007340:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <LL_RCC_SetI2CClockSource>:
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007368:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	091b      	lsrs	r3, r3, #4
 8007370:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007374:	43db      	mvns	r3, r3
 8007376:	401a      	ands	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007380:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <LL_RCC_SetLPTIMClockSource>:
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800739e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	43db      	mvns	r3, r3
 80073ae:	401a      	ands	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	041b      	lsls	r3, r3, #16
 80073b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <LL_RCC_SetSAIClockSource>:
{
 80073ca:	b480      	push	{r7}
 80073cc:	b083      	sub	sp, #12
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80073d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <LL_RCC_SetRNGClockSource>:
{
 80073f6:	b480      	push	{r7}
 80073f8:	b083      	sub	sp, #12
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007406:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800740a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4313      	orrs	r3, r2
 8007412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <LL_RCC_SetCLK48ClockSource>:
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800742a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <LL_RCC_SetUSBClockSource>:
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff ffe3 	bl	8007422 <LL_RCC_SetCLK48ClockSource>
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <LL_RCC_SetADCClockSource>:
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800746c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007474:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007478:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4313      	orrs	r3, r2
 8007480:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_RCC_SetRTCClockSource>:
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <LL_RCC_GetRTCClockSource>:
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80074c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <LL_RCC_ForceBackupDomainReset>:
{
 80074d6:	b480      	push	{r7}
 80074d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074ee:	bf00      	nop
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800750c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007510:	bf00      	nop
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <LL_RCC_PLLSAI1_Enable>:
{
 800751a:	b480      	push	{r7}
 800751c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800751e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800752c:	6013      	str	r3, [r2, #0]
}
 800752e:	bf00      	nop
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_RCC_PLLSAI1_Disable>:
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800753c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007546:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800754a:	6013      	str	r3, [r2, #0]
}
 800754c:	bf00      	nop
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <LL_RCC_PLLSAI1_IsReady>:
{
 8007556:	b480      	push	{r7}
 8007558:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800755a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007568:	d101      	bne.n	800756e <LL_RCC_PLLSAI1_IsReady+0x18>
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b088      	sub	sp, #32
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007582:	2300      	movs	r3, #0
 8007584:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007586:	2300      	movs	r3, #0
 8007588:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d034      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800759e:	d021      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80075a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80075a4:	d81b      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075aa:	d01d      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80075ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075b0:	d815      	bhi.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x64>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x54>
 80075b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075ba:	d110      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80075bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ca:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80075cc:	e00d      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f947 	bl	8007866 <RCCEx_PLLSAI1_ConfigNP>
 80075d8:	4603      	mov	r3, r0
 80075da:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075dc:	e005      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	77fb      	strb	r3, [r7, #31]
        break;
 80075e2:	e002      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80075e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ea:	7ffb      	ldrb	r3, [r7, #31]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff fee8 	bl	80073ca <LL_RCC_SetSAIClockSource>
 80075fa:	e001      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075fc:	7ffb      	ldrb	r3, [r7, #31]
 80075fe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007608:	2b00      	cmp	r3, #0
 800760a:	d046      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800760c:	f7ff ff56 	bl	80074bc <LL_RCC_GetRTCClockSource>
 8007610:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	429a      	cmp	r2, r3
 800761a:	d03c      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800761c:	f7fe fc16 	bl	8005e4c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff ff30 	bl	8007490 <LL_RCC_SetRTCClockSource>
 8007630:	e02e      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800763a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800763c:	f7ff ff4b 	bl	80074d6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007640:	f7ff ff5a 	bl	80074f8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	4313      	orrs	r3, r2
 8007650:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800765c:	f7ff fdf0 	bl	8007240 <LL_RCC_LSE_IsEnabled>
 8007660:	4603      	mov	r3, r0
 8007662:	2b01      	cmp	r3, #1
 8007664:	d114      	bne.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007666:	f7fc fd99 	bl	800419c <HAL_GetTick>
 800766a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800766c:	e00b      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766e:	f7fc fd95 	bl	800419c <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800767c:	4293      	cmp	r3, r2
 800767e:	d902      	bls.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	77fb      	strb	r3, [r7, #31]
              break;
 8007684:	e004      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007686:	f7ff fded 	bl	8007264 <LL_RCC_LSE_IsReady>
 800768a:	4603      	mov	r3, r0
 800768c:	2b01      	cmp	r3, #1
 800768e:	d1ee      	bne.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007690:	7ffb      	ldrb	r3, [r7, #31]
 8007692:	77bb      	strb	r3, [r7, #30]
 8007694:	e001      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007696:	7ffb      	ldrb	r3, [r7, #31]
 8007698:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d004      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7ff fe2a 	bl	8007304 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff fe35 	bl	8007330 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0310 	and.w	r3, r3, #16
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fe5d 	bl	8007396 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0320 	and.w	r3, r3, #32
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fe52 	bl	8007396 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0304 	and.w	r3, r3, #4
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d004      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff fe2a 	bl	800735c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff fe1f 	bl	800735c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d022      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fe8d 	bl	800744e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800773c:	d107      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800773e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007748:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800774c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007756:	d10b      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f8dd 	bl	800791c <RCCEx_PLLSAI1_ConfigNQ>
 8007762:	4603      	mov	r3, r0
 8007764:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007766:	7ffb      	ldrb	r3, [r7, #31]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800776c:	7ffb      	ldrb	r3, [r7, #31]
 800776e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007778:	2b00      	cmp	r3, #0
 800777a:	d02b      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007784:	d008      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800778e:	d003      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007794:	2b00      	cmp	r3, #0
 8007796:	d105      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff fe2a 	bl	80073f6 <LL_RCC_SetRNGClockSource>
 80077a2:	e00a      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x240>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	2000      	movs	r0, #0
 80077b0:	f7ff fe21 	bl	80073f6 <LL_RCC_SetRNGClockSource>
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff fe34 	bl	8007422 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077be:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80077c2:	d107      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80077c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80077d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d022      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff fe3d 	bl	8007464 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077f2:	d107      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007802:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800780c:	d10b      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3304      	adds	r3, #4
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f8dd 	bl	80079d2 <RCCEx_PLLSAI1_ConfigNR>
 8007818:	4603      	mov	r3, r0
 800781a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800781c:	7ffb      	ldrb	r3, [r7, #31]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007822:	7ffb      	ldrb	r3, [r7, #31]
 8007824:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff fd26 	bl	8007288 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fd45 	bl	80072dc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fd2c 	bl	80072b4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800785c:	7fbb      	ldrb	r3, [r7, #30]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3720      	adds	r7, #32
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007872:	f7ff fe61 	bl	8007538 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007876:	f7fc fc91 	bl	800419c <HAL_GetTick>
 800787a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800787c:	e009      	b.n	8007892 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800787e:	f7fc fc8d 	bl	800419c <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d902      	bls.n	8007892 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	73fb      	strb	r3, [r7, #15]
      break;
 8007890:	e004      	b.n	800789c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007892:	f7ff fe60 	bl	8007556 <LL_RCC_PLLSAI1_IsReady>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f0      	bne.n	800787e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d137      	bne.n	8007912 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80078a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078b6:	4313      	orrs	r3, r2
 80078b8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80078ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078cc:	4313      	orrs	r3, r2
 80078ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80078d0:	f7ff fe23 	bl	800751a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d4:	f7fc fc62 	bl	800419c <HAL_GetTick>
 80078d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078da:	e009      	b.n	80078f0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078dc:	f7fc fc5e 	bl	800419c <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d902      	bls.n	80078f0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	73fb      	strb	r3, [r7, #15]
        break;
 80078ee:	e004      	b.n	80078fa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80078f0:	f7ff fe31 	bl	8007556 <LL_RCC_PLLSAI1_IsReady>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d1f0      	bne.n	80078dc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80078fa:	7bfb      	ldrb	r3, [r7, #15]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d108      	bne.n	8007912 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007900:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007904:	691a      	ldr	r2, [r3, #16]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800790e:	4313      	orrs	r3, r2
 8007910:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007928:	f7ff fe06 	bl	8007538 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800792c:	f7fc fc36 	bl	800419c <HAL_GetTick>
 8007930:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007932:	e009      	b.n	8007948 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007934:	f7fc fc32 	bl	800419c <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d902      	bls.n	8007948 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e004      	b.n	8007952 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007948:	f7ff fe05 	bl	8007556 <LL_RCC_PLLSAI1_IsReady>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f0      	bne.n	8007934 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d137      	bne.n	80079c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	021b      	lsls	r3, r3, #8
 8007968:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800796c:	4313      	orrs	r3, r2
 800796e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007982:	4313      	orrs	r3, r2
 8007984:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007986:	f7ff fdc8 	bl	800751a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798a:	f7fc fc07 	bl	800419c <HAL_GetTick>
 800798e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007990:	e009      	b.n	80079a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007992:	f7fc fc03 	bl	800419c <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d902      	bls.n	80079a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	73fb      	strb	r3, [r7, #15]
        break;
 80079a4:	e004      	b.n	80079b0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079a6:	f7ff fdd6 	bl	8007556 <LL_RCC_PLLSAI1_IsReady>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d1f0      	bne.n	8007992 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d108      	bne.n	80079c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80079b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079c4:	4313      	orrs	r3, r2
 80079c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80079de:	f7ff fdab 	bl	8007538 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079e2:	f7fc fbdb 	bl	800419c <HAL_GetTick>
 80079e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079e8:	e009      	b.n	80079fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079ea:	f7fc fbd7 	bl	800419c <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d902      	bls.n	80079fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	73fb      	strb	r3, [r7, #15]
      break;
 80079fc:	e004      	b.n	8007a08 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079fe:	f7ff fdaa 	bl	8007556 <LL_RCC_PLLSAI1_IsReady>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f0      	bne.n	80079ea <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d137      	bne.n	8007a7e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a22:	4313      	orrs	r3, r2
 8007a24:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007a3c:	f7ff fd6d 	bl	800751a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a40:	f7fc fbac 	bl	800419c <HAL_GetTick>
 8007a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a46:	e009      	b.n	8007a5c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a48:	f7fc fba8 	bl	800419c <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d902      	bls.n	8007a5c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	73fb      	strb	r3, [r7, #15]
        break;
 8007a5a:	e004      	b.n	8007a66 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a5c:	f7ff fd7b 	bl	8007556 <LL_RCC_PLLSAI1_IsReady>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d1f0      	bne.n	8007a48 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d108      	bne.n	8007a7e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a70:	691a      	ldr	r2, [r3, #16]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e09f      	b.n	8007bda <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fb fe72 	bl	8003798 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007abc:	4b49      	ldr	r3, [pc, #292]	@ (8007be4 <HAL_RTC_Init+0x15c>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b10      	cmp	r3, #16
 8007ac6:	d07e      	beq.n	8007bc6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	22ca      	movs	r2, #202	@ 0xca
 8007ace:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2253      	movs	r2, #83	@ 0x53
 8007ad6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 f8ab 	bl	8007c34 <RTC_EnterInitMode>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	22ff      	movs	r2, #255	@ 0xff
 8007aea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2204      	movs	r2, #4
 8007af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
 8007af8:	e067      	b.n	8007bca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6899      	ldr	r1, [r3, #8]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68d2      	ldr	r2, [r2, #12]
 8007b34:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6919      	ldr	r1, [r3, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	041a      	lsls	r2, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007b58:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0203 	bic.w	r2, r2, #3
 8007b68:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	69da      	ldr	r2, [r3, #28]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d113      	bne.n	8007bb8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f829 	bl	8007be8 <HAL_RTC_WaitForSynchro>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00d      	beq.n	8007bb8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	22ff      	movs	r2, #255	@ 0xff
 8007ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e010      	b.n	8007bda <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	22ff      	movs	r2, #255	@ 0xff
 8007bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	73fb      	strb	r3, [r7, #15]
 8007bc4:	e001      	b.n	8007bca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40002800 	.word	0x40002800

08007be8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	68da      	ldr	r2, [r3, #12]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007bfe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007c00:	f7fc facc 	bl	800419c <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c06:	e009      	b.n	8007c1c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c08:	f7fc fac8 	bl	800419c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c16:	d901      	bls.n	8007c1c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e007      	b.n	8007c2c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ee      	beq.n	8007c08 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d119      	bne.n	8007c7e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c54:	f7fc faa2 	bl	800419c <HAL_GetTick>
 8007c58:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c5a:	e009      	b.n	8007c70 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c5c:	f7fc fa9e 	bl	800419c <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c6a:	d901      	bls.n	8007c70 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e007      	b.n	8007c80 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0ee      	beq.n	8007c5c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e0a8      	b.n	8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	22ca      	movs	r2, #202	@ 0xca
 8007cb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2253      	movs	r2, #83	@ 0x53
 8007cc0:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d020      	beq.n	8007d12 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007cd0:	f7fc fa64 	bl	800419c <HAL_GetTick>
 8007cd4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007cd6:	e015      	b.n	8007d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cd8:	f7fc fa60 	bl	800419c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ce6:	d90d      	bls.n	8007d04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	22ff      	movs	r2, #255	@ 0xff
 8007cee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2203      	movs	r2, #3
 8007cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e077      	b.n	8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e2      	bne.n	8007cd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d20:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	b2da      	uxtb	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007d32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d34:	f7fc fa32 	bl	800419c <HAL_GetTick>
 8007d38:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007d3a:	e015      	b.n	8007d68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d3c:	f7fc fa2e 	bl	800419c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d4a:	d90d      	bls.n	8007d68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	22ff      	movs	r2, #255	@ 0xff
 8007d52:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2203      	movs	r2, #3
 8007d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e045      	b.n	8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0e2      	beq.n	8007d3c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0207 	bic.w	r2, r2, #7
 8007d8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6899      	ldr	r1, [r3, #8]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d9e:	4b17      	ldr	r3, [pc, #92]	@ (8007dfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da4:	4a15      	ldr	r2, [pc, #84]	@ (8007dfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007da6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007daa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007dae:	4b13      	ldr	r3, [pc, #76]	@ (8007dfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a12      	ldr	r2, [pc, #72]	@ (8007dfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007db4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dc8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689a      	ldr	r2, [r3, #8]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007dd8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	22ff      	movs	r2, #255	@ 0xff
 8007de0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	58000800 	.word	0x58000800

08007e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e095      	b.n	8007f3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d108      	bne.n	8007e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e22:	d009      	beq.n	8007e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	61da      	str	r2, [r3, #28]
 8007e2a:	e005      	b.n	8007e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fb fd44 	bl	80038e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e78:	d902      	bls.n	8007e80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
 8007e7e:	e002      	b.n	8007e86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e8e:	d007      	beq.n	8007ea0 <HAL_SPI_Init+0xa0>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e98:	d002      	beq.n	8007ea0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	69db      	ldr	r3, [r3, #28]
 8007ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ee2:	ea42 0103 	orr.w	r1, r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	0c1b      	lsrs	r3, r3, #16
 8007efc:	f003 0204 	and.w	r2, r3, #4
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f1c:	ea42 0103 	orr.w	r1, r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b088      	sub	sp, #32
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	603b      	str	r3, [r7, #0]
 8007f52:	4613      	mov	r3, r2
 8007f54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f56:	f7fc f921 	bl	800419c <HAL_GetTick>
 8007f5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d001      	beq.n	8007f70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e15c      	b.n	800822a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_SPI_Transmit+0x36>
 8007f76:	88fb      	ldrh	r3, [r7, #6]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e154      	b.n	800822a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d101      	bne.n	8007f8e <HAL_SPI_Transmit+0x48>
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e14d      	b.n	800822a <HAL_SPI_Transmit+0x2e4>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2203      	movs	r2, #3
 8007f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	88fa      	ldrh	r2, [r7, #6]
 8007fae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	88fa      	ldrh	r2, [r7, #6]
 8007fb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fe0:	d10f      	bne.n	8008002 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800800c:	2b40      	cmp	r3, #64	@ 0x40
 800800e:	d007      	beq.n	8008020 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800801e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008028:	d952      	bls.n	80080d0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_SPI_Transmit+0xf2>
 8008032:	8b7b      	ldrh	r3, [r7, #26]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d145      	bne.n	80080c4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800803c:	881a      	ldrh	r2, [r3, #0]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008048:	1c9a      	adds	r2, r3, #2
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800805c:	e032      	b.n	80080c4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b02      	cmp	r3, #2
 800806a:	d112      	bne.n	8008092 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807c:	1c9a      	adds	r2, r3, #2
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008086:	b29b      	uxth	r3, r3
 8008088:	3b01      	subs	r3, #1
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008090:	e018      	b.n	80080c4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008092:	f7fc f883 	bl	800419c <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d803      	bhi.n	80080aa <HAL_SPI_Transmit+0x164>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a8:	d102      	bne.n	80080b0 <HAL_SPI_Transmit+0x16a>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d109      	bne.n	80080c4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e0b2      	b.n	800822a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1c7      	bne.n	800805e <HAL_SPI_Transmit+0x118>
 80080ce:	e083      	b.n	80081d8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <HAL_SPI_Transmit+0x198>
 80080d8:	8b7b      	ldrh	r3, [r7, #26]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d177      	bne.n	80081ce <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d912      	bls.n	800810e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ec:	881a      	ldrh	r2, [r3, #0]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	1c9a      	adds	r2, r3, #2
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008102:	b29b      	uxth	r3, r3
 8008104:	3b02      	subs	r3, #2
 8008106:	b29a      	uxth	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800810c:	e05f      	b.n	80081ce <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	330c      	adds	r3, #12
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b01      	subs	r3, #1
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008134:	e04b      	b.n	80081ce <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f003 0302 	and.w	r3, r3, #2
 8008140:	2b02      	cmp	r3, #2
 8008142:	d12b      	bne.n	800819c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008148:	b29b      	uxth	r3, r3
 800814a:	2b01      	cmp	r3, #1
 800814c:	d912      	bls.n	8008174 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008152:	881a      	ldrh	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008168:	b29b      	uxth	r3, r3
 800816a:	3b02      	subs	r3, #2
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008172:	e02c      	b.n	80081ce <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	7812      	ldrb	r2, [r2, #0]
 8008180:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008190:	b29b      	uxth	r3, r3
 8008192:	3b01      	subs	r3, #1
 8008194:	b29a      	uxth	r2, r3
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800819a:	e018      	b.n	80081ce <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800819c:	f7fb fffe 	bl	800419c <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d803      	bhi.n	80081b4 <HAL_SPI_Transmit+0x26e>
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b2:	d102      	bne.n	80081ba <HAL_SPI_Transmit+0x274>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d109      	bne.n	80081ce <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e02d      	b.n	800822a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1ae      	bne.n	8008136 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	6839      	ldr	r1, [r7, #0]
 80081dc:	68f8      	ldr	r0, [r7, #12]
 80081de:	f000 fe09 	bl	8008df4 <SPI_EndRxTxTransaction>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2220      	movs	r2, #32
 80081ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e000      	b.n	800822a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008228:	2300      	movs	r3, #0
  }
}
 800822a:	4618      	mov	r0, r3
 800822c:	3720      	adds	r7, #32
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b088      	sub	sp, #32
 8008236:	af02      	add	r7, sp, #8
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	4613      	mov	r3, r2
 8008240:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d001      	beq.n	8008252 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800824e:	2302      	movs	r3, #2
 8008250:	e123      	b.n	800849a <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_SPI_Receive+0x2c>
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e11b      	b.n	800849a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800826a:	d112      	bne.n	8008292 <HAL_SPI_Receive+0x60>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10e      	bne.n	8008292 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2204      	movs	r2, #4
 8008278:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800827c:	88fa      	ldrh	r2, [r7, #6]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	68b9      	ldr	r1, [r7, #8]
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 f90a 	bl	80084a2 <HAL_SPI_TransmitReceive>
 800828e:	4603      	mov	r3, r0
 8008290:	e103      	b.n	800849a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008292:	f7fb ff83 	bl	800419c <HAL_GetTick>
 8008296:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d101      	bne.n	80082a6 <HAL_SPI_Receive+0x74>
 80082a2:	2302      	movs	r3, #2
 80082a4:	e0f9      	b.n	800849a <HAL_SPI_Receive+0x268>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2204      	movs	r2, #4
 80082b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	88fa      	ldrh	r2, [r7, #6]
 80082c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80082f8:	d908      	bls.n	800830c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	e007      	b.n	800831c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800831a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008324:	d10f      	bne.n	8008346 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008334:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008344:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008350:	2b40      	cmp	r3, #64	@ 0x40
 8008352:	d007      	beq.n	8008364 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008362:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800836c:	d875      	bhi.n	800845a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800836e:	e037      	b.n	80083e0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	d117      	bne.n	80083ae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f103 020c 	add.w	r2, r3, #12
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	7812      	ldrb	r2, [r2, #0]
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80083ac:	e018      	b.n	80083e0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ae:	f7fb fef5 	bl	800419c <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d803      	bhi.n	80083c6 <HAL_SPI_Receive+0x194>
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d102      	bne.n	80083cc <HAL_SPI_Receive+0x19a>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d109      	bne.n	80083e0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e05c      	b.n	800849a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1c1      	bne.n	8008370 <HAL_SPI_Receive+0x13e>
 80083ec:	e03b      	b.n	8008466 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d115      	bne.n	8008428 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008406:	b292      	uxth	r2, r2
 8008408:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840e:	1c9a      	adds	r2, r3, #2
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800841a:	b29b      	uxth	r3, r3
 800841c:	3b01      	subs	r3, #1
 800841e:	b29a      	uxth	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008426:	e018      	b.n	800845a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008428:	f7fb feb8 	bl	800419c <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d803      	bhi.n	8008440 <HAL_SPI_Receive+0x20e>
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843e:	d102      	bne.n	8008446 <HAL_SPI_Receive+0x214>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d109      	bne.n	800845a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e01f      	b.n	800849a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008460:	b29b      	uxth	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1c3      	bne.n	80083ee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	6839      	ldr	r1, [r7, #0]
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 fc6a 	bl	8008d44 <SPI_EndRxTransaction>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2220      	movs	r2, #32
 800847a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8008498:	2300      	movs	r3, #0
  }
}
 800849a:	4618      	mov	r0, r3
 800849c:	3718      	adds	r7, #24
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b08a      	sub	sp, #40	@ 0x28
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084b0:	2301      	movs	r3, #1
 80084b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084b4:	f7fb fe72 	bl	800419c <HAL_GetTick>
 80084b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80084c8:	887b      	ldrh	r3, [r7, #2]
 80084ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80084cc:	887b      	ldrh	r3, [r7, #2]
 80084ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80084d0:	7ffb      	ldrb	r3, [r7, #31]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d00c      	beq.n	80084f0 <HAL_SPI_TransmitReceive+0x4e>
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084dc:	d106      	bne.n	80084ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <HAL_SPI_TransmitReceive+0x4a>
 80084e6:	7ffb      	ldrb	r3, [r7, #31]
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d001      	beq.n	80084f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80084ec:	2302      	movs	r3, #2
 80084ee:	e1f3      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_SPI_TransmitReceive+0x60>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <HAL_SPI_TransmitReceive+0x60>
 80084fc:	887b      	ldrh	r3, [r7, #2]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e1e8      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_SPI_TransmitReceive+0x72>
 8008510:	2302      	movs	r3, #2
 8008512:	e1e1      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b04      	cmp	r3, #4
 8008526:	d003      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2205      	movs	r2, #5
 800852c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	887a      	ldrh	r2, [r7, #2]
 8008540:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	887a      	ldrh	r2, [r7, #2]
 8008548:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	887a      	ldrh	r2, [r7, #2]
 8008556:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	887a      	ldrh	r2, [r7, #2]
 800855c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008572:	d802      	bhi.n	800857a <HAL_SPI_TransmitReceive+0xd8>
 8008574:	8abb      	ldrh	r3, [r7, #20]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d908      	bls.n	800858c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e007      	b.n	800859c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800859a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a6:	2b40      	cmp	r3, #64	@ 0x40
 80085a8:	d007      	beq.n	80085ba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80085c2:	f240 8083 	bls.w	80086cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_SPI_TransmitReceive+0x132>
 80085ce:	8afb      	ldrh	r3, [r7, #22]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d16f      	bne.n	80086b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e4:	1c9a      	adds	r2, r3, #2
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085f8:	e05c      	b.n	80086b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b02      	cmp	r3, #2
 8008606:	d11b      	bne.n	8008640 <HAL_SPI_TransmitReceive+0x19e>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800860c:	b29b      	uxth	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d016      	beq.n	8008640 <HAL_SPI_TransmitReceive+0x19e>
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	2b01      	cmp	r3, #1
 8008616:	d113      	bne.n	8008640 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861c:	881a      	ldrh	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	1c9a      	adds	r2, r3, #2
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008632:	b29b      	uxth	r3, r3
 8008634:	3b01      	subs	r3, #1
 8008636:	b29a      	uxth	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b01      	cmp	r3, #1
 800864c:	d11c      	bne.n	8008688 <HAL_SPI_TransmitReceive+0x1e6>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008654:	b29b      	uxth	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d016      	beq.n	8008688 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008664:	b292      	uxth	r2, r2
 8008666:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866c:	1c9a      	adds	r2, r3, #2
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008684:	2301      	movs	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008688:	f7fb fd88 	bl	800419c <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008694:	429a      	cmp	r2, r3
 8008696:	d80d      	bhi.n	80086b4 <HAL_SPI_TransmitReceive+0x212>
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d009      	beq.n	80086b4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80086b0:	2303      	movs	r3, #3
 80086b2:	e111      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d19d      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x158>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d197      	bne.n	80085fa <HAL_SPI_TransmitReceive+0x158>
 80086ca:	e0e5      	b.n	8008898 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d003      	beq.n	80086dc <HAL_SPI_TransmitReceive+0x23a>
 80086d4:	8afb      	ldrh	r3, [r7, #22]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	f040 80d1 	bne.w	800887e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d912      	bls.n	800870c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ea:	881a      	ldrh	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f6:	1c9a      	adds	r2, r3, #2
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b02      	subs	r3, #2
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800870a:	e0b8      	b.n	800887e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008732:	e0a4      	b.n	800887e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b02      	cmp	r3, #2
 8008740:	d134      	bne.n	80087ac <HAL_SPI_TransmitReceive+0x30a>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008746:	b29b      	uxth	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d02f      	beq.n	80087ac <HAL_SPI_TransmitReceive+0x30a>
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	2b01      	cmp	r3, #1
 8008750:	d12c      	bne.n	80087ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008756:	b29b      	uxth	r3, r3
 8008758:	2b01      	cmp	r3, #1
 800875a:	d912      	bls.n	8008782 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	881a      	ldrh	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876c:	1c9a      	adds	r2, r3, #2
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008776:	b29b      	uxth	r3, r3
 8008778:	3b02      	subs	r3, #2
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008780:	e012      	b.n	80087a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	330c      	adds	r3, #12
 800878c:	7812      	ldrb	r2, [r2, #0]
 800878e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008794:	1c5a      	adds	r2, r3, #1
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800879e:	b29b      	uxth	r3, r3
 80087a0:	3b01      	subs	r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d148      	bne.n	800884c <HAL_SPI_TransmitReceive+0x3aa>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d042      	beq.n	800884c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d923      	bls.n	800881a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087dc:	b292      	uxth	r2, r2
 80087de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e4:	1c9a      	adds	r2, r3, #2
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b02      	subs	r3, #2
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008802:	b29b      	uxth	r3, r3
 8008804:	2b01      	cmp	r3, #1
 8008806:	d81f      	bhi.n	8008848 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008816:	605a      	str	r2, [r3, #4]
 8008818:	e016      	b.n	8008848 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f103 020c 	add.w	r2, r3, #12
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	b2d2      	uxtb	r2, r2
 800882a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008830:	1c5a      	adds	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800883c:	b29b      	uxth	r3, r3
 800883e:	3b01      	subs	r3, #1
 8008840:	b29a      	uxth	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008848:	2301      	movs	r3, #1
 800884a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800884c:	f7fb fca6 	bl	800419c <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008858:	429a      	cmp	r2, r3
 800885a:	d803      	bhi.n	8008864 <HAL_SPI_TransmitReceive+0x3c2>
 800885c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d102      	bne.n	800886a <HAL_SPI_TransmitReceive+0x3c8>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d109      	bne.n	800887e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e02c      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	f47f af55 	bne.w	8008734 <HAL_SPI_TransmitReceive+0x292>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008890:	b29b      	uxth	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	f47f af4e 	bne.w	8008734 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008898:	6a3a      	ldr	r2, [r7, #32]
 800889a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 faa9 	bl	8008df4 <SPI_EndRxTxTransaction>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2220      	movs	r2, #32
 80088ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e00e      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80088d6:	2300      	movs	r3, #0
  }
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3728      	adds	r7, #40	@ 0x28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10e      	bne.n	8008920 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008908:	2b00      	cmp	r3, #0
 800890a:	d009      	beq.n	8008920 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d004      	beq.n	8008920 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	4798      	blx	r3
    return;
 800891e:	e0ce      	b.n	8008abe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	f003 0302 	and.w	r3, r3, #2
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <HAL_SPI_IRQHandler+0x5e>
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008930:	2b00      	cmp	r3, #0
 8008932:	d004      	beq.n	800893e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
    return;
 800893c:	e0bf      	b.n	8008abe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	f003 0320 	and.w	r3, r3, #32
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <HAL_SPI_IRQHandler+0x7e>
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 80b0 	beq.w	8008abe <HAL_SPI_IRQHandler+0x1de>
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	f003 0320 	and.w	r3, r3, #32
 8008964:	2b00      	cmp	r3, #0
 8008966:	f000 80aa 	beq.w	8008abe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008970:	2b00      	cmp	r3, #0
 8008972:	d023      	beq.n	80089bc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b03      	cmp	r3, #3
 800897e:	d011      	beq.n	80089a4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008984:	f043 0204 	orr.w	r2, r3, #4
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	e00b      	b.n	80089bc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	693b      	ldr	r3, [r7, #16]
        return;
 80089ba:	e080      	b.n	8008abe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	f003 0320 	and.w	r3, r3, #32
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d014      	beq.n	80089f0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089ca:	f043 0201 	orr.w	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089ec:	601a      	str	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00c      	beq.n	8008a14 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089fe:	f043 0208 	orr.w	r2, r3, #8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d04f      	beq.n	8008abc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d104      	bne.n	8008a48 <HAL_SPI_IRQHandler+0x168>
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d034      	beq.n	8008ab2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0203 	bic.w	r2, r2, #3
 8008a56:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d011      	beq.n	8008a84 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a64:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <HAL_SPI_IRQHandler+0x1e4>)
 8008a66:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fc fd7f 	bl	8005570 <HAL_DMA_Abort_IT>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d005      	beq.n	8008a84 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d016      	beq.n	8008aba <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a90:	4a0c      	ldr	r2, [pc, #48]	@ (8008ac4 <HAL_SPI_IRQHandler+0x1e4>)
 8008a92:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7fc fd69 	bl	8005570 <HAL_DMA_Abort_IT>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008aa8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008ab0:	e003      	b.n	8008aba <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f808 	bl	8008ac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ab8:	e000      	b.n	8008abc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008aba:	bf00      	nop
    return;
 8008abc:	bf00      	nop
  }
}
 8008abe:	3720      	adds	r7, #32
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	08008add 	.word	0x08008add

08008ac8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff ffe5 	bl	8008ac8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008afe:	bf00      	nop
 8008b00:	3710      	adds	r7, #16
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	4613      	mov	r3, r2
 8008b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008b18:	f7fb fb40 	bl	800419c <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008b28:	f7fb fb38 	bl	800419c <HAL_GetTick>
 8008b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008b2e:	4b39      	ldr	r3, [pc, #228]	@ (8008c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	015b      	lsls	r3, r3, #5
 8008b34:	0d1b      	lsrs	r3, r3, #20
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	fb02 f303 	mul.w	r3, r2, r3
 8008b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008b3e:	e054      	b.n	8008bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b46:	d050      	beq.n	8008bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b48:	f7fb fb28 	bl	800419c <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d902      	bls.n	8008b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d13d      	bne.n	8008bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b76:	d111      	bne.n	8008b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b80:	d004      	beq.n	8008b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b8a:	d107      	bne.n	8008b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ba4:	d10f      	bne.n	8008bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e017      	b.n	8008c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	3b01      	subs	r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	bf0c      	ite	eq
 8008bfa:	2301      	moveq	r3, #1
 8008bfc:	2300      	movne	r3, #0
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	461a      	mov	r2, r3
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d19b      	bne.n	8008b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3720      	adds	r7, #32
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	20000008 	.word	0x20000008

08008c18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08a      	sub	sp, #40	@ 0x28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008c26:	2300      	movs	r3, #0
 8008c28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008c2a:	f7fb fab7 	bl	800419c <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	4413      	add	r3, r2
 8008c38:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008c3a:	f7fb faaf 	bl	800419c <HAL_GetTick>
 8008c3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	330c      	adds	r3, #12
 8008c46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008c48:	4b3d      	ldr	r3, [pc, #244]	@ (8008d40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	00da      	lsls	r2, r3, #3
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	0d1b      	lsrs	r3, r3, #20
 8008c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c5a:	fb02 f303 	mul.w	r3, r2, r3
 8008c5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008c60:	e060      	b.n	8008d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008c68:	d107      	bne.n	8008c7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d050      	beq.n	8008d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c82:	f7fb fa8b 	bl	800419c <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d902      	bls.n	8008c98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d13d      	bne.n	8008d14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ca6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cb0:	d111      	bne.n	8008cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cba:	d004      	beq.n	8008cc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cc4:	d107      	bne.n	8008cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cde:	d10f      	bne.n	8008d00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008cfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e010      	b.n	8008d36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d196      	bne.n	8008c62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3728      	adds	r7, #40	@ 0x28
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000008 	.word	0x20000008

08008d44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d58:	d111      	bne.n	8008d7e <SPI_EndRxTransaction+0x3a>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d62:	d004      	beq.n	8008d6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d6c:	d107      	bne.n	8008d7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2200      	movs	r2, #0
 8008d86:	2180      	movs	r1, #128	@ 0x80
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f7ff febd 	bl	8008b08 <SPI_WaitFlagStateUntilTimeout>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d007      	beq.n	8008da4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d98:	f043 0220 	orr.w	r2, r3, #32
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e023      	b.n	8008dec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dac:	d11d      	bne.n	8008dea <SPI_EndRxTransaction+0xa6>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008db6:	d004      	beq.n	8008dc2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dc0:	d113      	bne.n	8008dea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f7ff ff22 	bl	8008c18 <SPI_WaitFifoStateUntilTimeout>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d007      	beq.n	8008dea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dde:	f043 0220 	orr.w	r2, r3, #32
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e000      	b.n	8008dec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff ff03 	bl	8008c18 <SPI_WaitFifoStateUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1c:	f043 0220 	orr.w	r2, r3, #32
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e027      	b.n	8008e78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2180      	movs	r1, #128	@ 0x80
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f7ff fe68 	bl	8008b08 <SPI_WaitFlagStateUntilTimeout>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e42:	f043 0220 	orr.w	r2, r3, #32
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e014      	b.n	8008e78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff fedc 	bl	8008c18 <SPI_WaitFifoStateUntilTimeout>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d007      	beq.n	8008e76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e6a:	f043 0220 	orr.w	r2, r3, #32
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e000      	b.n	8008e78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <LL_RCC_GetUSARTClockSource>:
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4013      	ands	r3, r2
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <LL_RCC_GetLPUARTClockSource>:
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4013      	ands	r3, r2
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e042      	b.n	8008f58 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d106      	bne.n	8008eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f7fa ffd3 	bl	8003e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2224      	movs	r2, #36	@ 0x24
 8008eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0201 	bic.w	r2, r2, #1
 8008f00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fec0 	bl	8009c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fc95 	bl	8009840 <UART_SetConfig>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d101      	bne.n	8008f20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e01b      	b.n	8008f58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689a      	ldr	r2, [r3, #8]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0201 	orr.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 ff3f 	bl	8009dd4 <UART_CheckIdleState>
 8008f56:	4603      	mov	r3, r0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08a      	sub	sp, #40	@ 0x28
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	d17b      	bne.n	8009072 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d002      	beq.n	8008f86 <HAL_UART_Transmit+0x26>
 8008f80:	88fb      	ldrh	r3, [r7, #6]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e074      	b.n	8009074 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2221      	movs	r2, #33	@ 0x21
 8008f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f9a:	f7fb f8ff 	bl	800419c <HAL_GetTick>
 8008f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	88fa      	ldrh	r2, [r7, #6]
 8008fa4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	88fa      	ldrh	r2, [r7, #6]
 8008fac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb8:	d108      	bne.n	8008fcc <HAL_UART_Transmit+0x6c>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	61bb      	str	r3, [r7, #24]
 8008fca:	e003      	b.n	8008fd4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008fd4:	e030      	b.n	8009038 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2180      	movs	r1, #128	@ 0x80
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 ffa1 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d005      	beq.n	8008ff8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2220      	movs	r2, #32
 8008ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e03d      	b.n	8009074 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10b      	bne.n	8009016 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800900c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	3302      	adds	r3, #2
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e007      	b.n	8009026 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	3301      	adds	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800902c:	b29b      	uxth	r3, r3
 800902e:	3b01      	subs	r3, #1
 8009030:	b29a      	uxth	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800903e:	b29b      	uxth	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1c8      	bne.n	8008fd6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2200      	movs	r2, #0
 800904c:	2140      	movs	r1, #64	@ 0x40
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 ff6a 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e006      	b.n	8009074 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	e000      	b.n	8009074 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009072:	2302      	movs	r3, #2
  }
}
 8009074:	4618      	mov	r0, r3
 8009076:	3720      	adds	r7, #32
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08a      	sub	sp, #40	@ 0x28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009090:	2b20      	cmp	r3, #32
 8009092:	d167      	bne.n	8009164 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <HAL_UART_Transmit_DMA+0x24>
 800909a:	88fb      	ldrh	r3, [r7, #6]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e060      	b.n	8009166 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	88fa      	ldrh	r2, [r7, #6]
 80090ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	88fa      	ldrh	r2, [r7, #6]
 80090b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2221      	movs	r2, #33	@ 0x21
 80090c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d028      	beq.n	8009124 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090d6:	4a26      	ldr	r2, [pc, #152]	@ (8009170 <HAL_UART_Transmit_DMA+0xf4>)
 80090d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090de:	4a25      	ldr	r2, [pc, #148]	@ (8009174 <HAL_UART_Transmit_DMA+0xf8>)
 80090e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090e6:	4a24      	ldr	r2, [pc, #144]	@ (8009178 <HAL_UART_Transmit_DMA+0xfc>)
 80090e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090ee:	2200      	movs	r2, #0
 80090f0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fa:	4619      	mov	r1, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3328      	adds	r3, #40	@ 0x28
 8009102:	461a      	mov	r2, r3
 8009104:	88fb      	ldrh	r3, [r7, #6]
 8009106:	f7fc f959 	bl	80053bc <HAL_DMA_Start_IT>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2210      	movs	r2, #16
 8009114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2220      	movs	r2, #32
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e020      	b.n	8009166 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2240      	movs	r2, #64	@ 0x40
 800912a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3308      	adds	r3, #8
 8009132:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	613b      	str	r3, [r7, #16]
   return(result);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3308      	adds	r3, #8
 800914a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800914c:	623a      	str	r2, [r7, #32]
 800914e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	69f9      	ldr	r1, [r7, #28]
 8009152:	6a3a      	ldr	r2, [r7, #32]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	61bb      	str	r3, [r7, #24]
   return(result);
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e5      	bne.n	800912c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	e000      	b.n	8009166 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009164:	2302      	movs	r3, #2
  }
}
 8009166:	4618      	mov	r0, r3
 8009168:	3728      	adds	r7, #40	@ 0x28
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	0800a151 	.word	0x0800a151
 8009174:	0800a1eb 	.word	0x0800a1eb
 8009178:	0800a207 	.word	0x0800a207

0800917c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b0ba      	sub	sp, #232	@ 0xe8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80091a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80091a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80091aa:	4013      	ands	r3, r2
 80091ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80091b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11b      	bne.n	80091f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091bc:	f003 0320 	and.w	r3, r3, #32
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d015      	beq.n	80091f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d105      	bne.n	80091dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8300 	beq.w	80097e6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	4798      	blx	r3
      }
      return;
 80091ee:	e2fa      	b.n	80097e6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8123 	beq.w	8009440 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80091fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009434 <HAL_UART_IRQHandler+0x2b8>)
 8009200:	4013      	ands	r3, r2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d106      	bne.n	8009214 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800920a:	4b8b      	ldr	r3, [pc, #556]	@ (8009438 <HAL_UART_IRQHandler+0x2bc>)
 800920c:	4013      	ands	r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 8116 	beq.w	8009440 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d011      	beq.n	8009244 <HAL_UART_IRQHandler+0xc8>
 8009220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2201      	movs	r2, #1
 8009232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923a:	f043 0201 	orr.w	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009248:	f003 0302 	and.w	r3, r3, #2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d011      	beq.n	8009274 <HAL_UART_IRQHandler+0xf8>
 8009250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2202      	movs	r2, #2
 8009262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800926a:	f043 0204 	orr.w	r2, r3, #4
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	2b00      	cmp	r3, #0
 800927e:	d011      	beq.n	80092a4 <HAL_UART_IRQHandler+0x128>
 8009280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00b      	beq.n	80092a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2204      	movs	r2, #4
 8009292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929a:	f043 0202 	orr.w	r2, r3, #2
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80092a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092a8:	f003 0308 	and.w	r3, r3, #8
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d017      	beq.n	80092e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d105      	bne.n	80092c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80092bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092c0:	4b5c      	ldr	r3, [pc, #368]	@ (8009434 <HAL_UART_IRQHandler+0x2b8>)
 80092c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2208      	movs	r2, #8
 80092ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d6:	f043 0208 	orr.w	r2, r3, #8
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d012      	beq.n	8009312 <HAL_UART_IRQHandler+0x196>
 80092ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00c      	beq.n	8009312 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009308:	f043 0220 	orr.w	r2, r3, #32
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8266 	beq.w	80097ea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800931e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	d013      	beq.n	8009352 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800932a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800932e:	f003 0320 	and.w	r3, r3, #32
 8009332:	2b00      	cmp	r3, #0
 8009334:	d105      	bne.n	8009342 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800933a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d007      	beq.n	8009352 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009358:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009366:	2b40      	cmp	r3, #64	@ 0x40
 8009368:	d005      	beq.n	8009376 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800936a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800936e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009372:	2b00      	cmp	r3, #0
 8009374:	d054      	beq.n	8009420 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fe84 	bl	800a084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009386:	2b40      	cmp	r3, #64	@ 0x40
 8009388:	d146      	bne.n	8009418 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80093a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3308      	adds	r3, #8
 80093b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80093b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1d9      	bne.n	800938a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d017      	beq.n	8009410 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e6:	4a15      	ldr	r2, [pc, #84]	@ (800943c <HAL_UART_IRQHandler+0x2c0>)
 80093e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7fc f8bd 	bl	8005570 <HAL_DMA_Abort_IT>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d019      	beq.n	8009430 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800940a:	4610      	mov	r0, r2
 800940c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940e:	e00f      	b.n	8009430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f9ff 	bl	8009814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009416:	e00b      	b.n	8009430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f9fb 	bl	8009814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800941e:	e007      	b.n	8009430 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f9f7 	bl	8009814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800942e:	e1dc      	b.n	80097ea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009430:	bf00      	nop
    return;
 8009432:	e1da      	b.n	80097ea <HAL_UART_IRQHandler+0x66e>
 8009434:	10000001 	.word	0x10000001
 8009438:	04000120 	.word	0x04000120
 800943c:	0800a287 	.word	0x0800a287

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009444:	2b01      	cmp	r3, #1
 8009446:	f040 8170 	bne.w	800972a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 8169 	beq.w	800972a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 8162 	beq.w	800972a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2210      	movs	r2, #16
 800946c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009478:	2b40      	cmp	r3, #64	@ 0x40
 800947a:	f040 80d8 	bne.w	800962e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800948c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 80af 	beq.w	80095f4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800949c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094a0:	429a      	cmp	r2, r3
 80094a2:	f080 80a7 	bcs.w	80095f4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80094ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f040 8087 	bne.w	80095d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80094d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	461a      	mov	r2, r3
 80094ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80094fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009506:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1da      	bne.n	80094c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800951e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009532:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009536:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800953a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009544:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e1      	bne.n	800950e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3308      	adds	r3, #8
 8009550:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800955a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800955c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800956e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009570:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009574:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800957c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e3      	bne.n	800954a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800959e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095a0:	f023 0310 	bic.w	r3, r3, #16
 80095a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80095b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095ba:	e841 2300 	strex	r3, r2, [r1]
 80095be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1e4      	bne.n	8009590 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fb ff70 	bl	80054b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f91b 	bl	8009828 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80095f2:	e0fc      	b.n	80097ee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095fe:	429a      	cmp	r2, r3
 8009600:	f040 80f5 	bne.w	80097ee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b20      	cmp	r3, #32
 8009614:	f040 80eb 	bne.w	80097ee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2202      	movs	r2, #2
 800961c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f8fe 	bl	8009828 <HAL_UARTEx_RxEventCallback>
      return;
 800962c:	e0df      	b.n	80097ee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800963a:	b29b      	uxth	r3, r3
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009648:	b29b      	uxth	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80d1 	beq.w	80097f2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80cc 	beq.w	80097f2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800966a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800966e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800967c:	647b      	str	r3, [r7, #68]	@ 0x44
 800967e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800968a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e4      	bne.n	800965a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969a:	e853 3f00 	ldrex	r3, [r3]
 800969e:	623b      	str	r3, [r7, #32]
   return(result);
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3308      	adds	r3, #8
 80096b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80096b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80096ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e1      	bne.n	8009690 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	e853 3f00 	ldrex	r3, [r3]
 80096ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f023 0310 	bic.w	r3, r3, #16
 80096f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009702:	61fb      	str	r3, [r7, #28]
 8009704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	69b9      	ldr	r1, [r7, #24]
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	617b      	str	r3, [r7, #20]
   return(result);
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e4      	bne.n	80096e0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2202      	movs	r2, #2
 800971a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800971c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009720:	4619      	mov	r1, r3
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f880 	bl	8009828 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009728:	e063      	b.n	80097f2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800972a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800972e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00e      	beq.n	8009754 <HAL_UART_IRQHandler+0x5d8>
 8009736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800973a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d008      	beq.n	8009754 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800974a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fdd7 	bl	800a300 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009752:	e051      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800975c:	2b00      	cmp	r3, #0
 800975e:	d014      	beq.n	800978a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009768:	2b00      	cmp	r3, #0
 800976a:	d105      	bne.n	8009778 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800976c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009770:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d008      	beq.n	800978a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800977c:	2b00      	cmp	r3, #0
 800977e:	d03a      	beq.n	80097f6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	4798      	blx	r3
    }
    return;
 8009788:	e035      	b.n	80097f6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800978a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800978e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d009      	beq.n	80097aa <HAL_UART_IRQHandler+0x62e>
 8009796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800979a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fd81 	bl	800a2aa <UART_EndTransmit_IT>
    return;
 80097a8:	e026      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80097aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <HAL_UART_IRQHandler+0x64e>
 80097b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fdb0 	bl	800a328 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097c8:	e016      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80097ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d010      	beq.n	80097f8 <HAL_UART_IRQHandler+0x67c>
 80097d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	da0c      	bge.n	80097f8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fd98 	bl	800a314 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80097e4:	e008      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80097e6:	bf00      	nop
 80097e8:	e006      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
    return;
 80097ea:	bf00      	nop
 80097ec:	e004      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80097ee:	bf00      	nop
 80097f0:	e002      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80097f2:	bf00      	nop
 80097f4:	e000      	b.n	80097f8 <HAL_UART_IRQHandler+0x67c>
    return;
 80097f6:	bf00      	nop
  }
}
 80097f8:	37e8      	adds	r7, #232	@ 0xe8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop

08009800 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009844:	b08c      	sub	sp, #48	@ 0x30
 8009846:	af00      	add	r7, sp, #0
 8009848:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	431a      	orrs	r2, r3
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	431a      	orrs	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	4313      	orrs	r3, r2
 8009866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4baf      	ldr	r3, [pc, #700]	@ (8009b2c <UART_SetConfig+0x2ec>)
 8009870:	4013      	ands	r3, r2
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	6812      	ldr	r2, [r2, #0]
 8009876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009878:	430b      	orrs	r3, r1
 800987a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4aa4      	ldr	r2, [pc, #656]	@ (8009b30 <UART_SetConfig+0x2f0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d004      	beq.n	80098ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098a8:	4313      	orrs	r3, r2
 80098aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80098b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098c0:	430b      	orrs	r3, r1
 80098c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	f023 010f 	bic.w	r1, r3, #15
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	430a      	orrs	r2, r1
 80098d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a95      	ldr	r2, [pc, #596]	@ (8009b34 <UART_SetConfig+0x2f4>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d125      	bne.n	8009930 <UART_SetConfig+0xf0>
 80098e4:	2003      	movs	r0, #3
 80098e6:	f7ff facb 	bl	8008e80 <LL_RCC_GetUSARTClockSource>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d81b      	bhi.n	8009928 <UART_SetConfig+0xe8>
 80098f0:	a201      	add	r2, pc, #4	@ (adr r2, 80098f8 <UART_SetConfig+0xb8>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	08009909 	.word	0x08009909
 80098fc:	08009919 	.word	0x08009919
 8009900:	08009911 	.word	0x08009911
 8009904:	08009921 	.word	0x08009921
 8009908:	2301      	movs	r3, #1
 800990a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800990e:	e042      	b.n	8009996 <UART_SetConfig+0x156>
 8009910:	2302      	movs	r3, #2
 8009912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009916:	e03e      	b.n	8009996 <UART_SetConfig+0x156>
 8009918:	2304      	movs	r3, #4
 800991a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800991e:	e03a      	b.n	8009996 <UART_SetConfig+0x156>
 8009920:	2308      	movs	r3, #8
 8009922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009926:	e036      	b.n	8009996 <UART_SetConfig+0x156>
 8009928:	2310      	movs	r3, #16
 800992a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992e:	e032      	b.n	8009996 <UART_SetConfig+0x156>
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a7e      	ldr	r2, [pc, #504]	@ (8009b30 <UART_SetConfig+0x2f0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d12a      	bne.n	8009990 <UART_SetConfig+0x150>
 800993a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800993e:	f7ff faaf 	bl	8008ea0 <LL_RCC_GetLPUARTClockSource>
 8009942:	4603      	mov	r3, r0
 8009944:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009948:	d01a      	beq.n	8009980 <UART_SetConfig+0x140>
 800994a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800994e:	d81b      	bhi.n	8009988 <UART_SetConfig+0x148>
 8009950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009954:	d00c      	beq.n	8009970 <UART_SetConfig+0x130>
 8009956:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800995a:	d815      	bhi.n	8009988 <UART_SetConfig+0x148>
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <UART_SetConfig+0x128>
 8009960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009964:	d008      	beq.n	8009978 <UART_SetConfig+0x138>
 8009966:	e00f      	b.n	8009988 <UART_SetConfig+0x148>
 8009968:	2300      	movs	r3, #0
 800996a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800996e:	e012      	b.n	8009996 <UART_SetConfig+0x156>
 8009970:	2302      	movs	r3, #2
 8009972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009976:	e00e      	b.n	8009996 <UART_SetConfig+0x156>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800997e:	e00a      	b.n	8009996 <UART_SetConfig+0x156>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009986:	e006      	b.n	8009996 <UART_SetConfig+0x156>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800998e:	e002      	b.n	8009996 <UART_SetConfig+0x156>
 8009990:	2310      	movs	r3, #16
 8009992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a65      	ldr	r2, [pc, #404]	@ (8009b30 <UART_SetConfig+0x2f0>)
 800999c:	4293      	cmp	r3, r2
 800999e:	f040 8097 	bne.w	8009ad0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80099a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80099a6:	2b08      	cmp	r3, #8
 80099a8:	d823      	bhi.n	80099f2 <UART_SetConfig+0x1b2>
 80099aa:	a201      	add	r2, pc, #4	@ (adr r2, 80099b0 <UART_SetConfig+0x170>)
 80099ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	080099f3 	.word	0x080099f3
 80099b8:	080099dd 	.word	0x080099dd
 80099bc:	080099f3 	.word	0x080099f3
 80099c0:	080099e3 	.word	0x080099e3
 80099c4:	080099f3 	.word	0x080099f3
 80099c8:	080099f3 	.word	0x080099f3
 80099cc:	080099f3 	.word	0x080099f3
 80099d0:	080099eb 	.word	0x080099eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099d4:	f7fd fb54 	bl	8007080 <HAL_RCC_GetPCLK1Freq>
 80099d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099da:	e010      	b.n	80099fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099dc:	4b56      	ldr	r3, [pc, #344]	@ (8009b38 <UART_SetConfig+0x2f8>)
 80099de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099e0:	e00d      	b.n	80099fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099e2:	f7fd facd 	bl	8006f80 <HAL_RCC_GetSysClockFreq>
 80099e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099e8:	e009      	b.n	80099fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099f0:	e005      	b.n	80099fe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 812b 	beq.w	8009c5c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0a:	4a4c      	ldr	r2, [pc, #304]	@ (8009b3c <UART_SetConfig+0x2fc>)
 8009a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a10:	461a      	mov	r2, r3
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	005b      	lsls	r3, r3, #1
 8009a22:	4413      	add	r3, r2
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d305      	bcc.n	8009a36 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d903      	bls.n	8009a3e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a3c:	e10e      	b.n	8009c5c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a40:	2200      	movs	r2, #0
 8009a42:	60bb      	str	r3, [r7, #8]
 8009a44:	60fa      	str	r2, [r7, #12]
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8009b3c <UART_SetConfig+0x2fc>)
 8009a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2200      	movs	r2, #0
 8009a54:	603b      	str	r3, [r7, #0]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a60:	f7f7 f87a 	bl	8000b58 <__aeabi_uldivmod>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	020b      	lsls	r3, r1, #8
 8009a76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a7a:	0202      	lsls	r2, r0, #8
 8009a7c:	6979      	ldr	r1, [r7, #20]
 8009a7e:	6849      	ldr	r1, [r1, #4]
 8009a80:	0849      	lsrs	r1, r1, #1
 8009a82:	2000      	movs	r0, #0
 8009a84:	460c      	mov	r4, r1
 8009a86:	4605      	mov	r5, r0
 8009a88:	eb12 0804 	adds.w	r8, r2, r4
 8009a8c:	eb43 0905 	adc.w	r9, r3, r5
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	469a      	mov	sl, r3
 8009a98:	4693      	mov	fp, r2
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	465b      	mov	r3, fp
 8009a9e:	4640      	mov	r0, r8
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	f7f7 f859 	bl	8000b58 <__aeabi_uldivmod>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4613      	mov	r3, r2
 8009aac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ab4:	d308      	bcc.n	8009ac8 <UART_SetConfig+0x288>
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009abc:	d204      	bcs.n	8009ac8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	6a3a      	ldr	r2, [r7, #32]
 8009ac4:	60da      	str	r2, [r3, #12]
 8009ac6:	e0c9      	b.n	8009c5c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009ace:	e0c5      	b.n	8009c5c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ad8:	d16d      	bne.n	8009bb6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009ada:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	2b07      	cmp	r3, #7
 8009ae2:	d82d      	bhi.n	8009b40 <UART_SetConfig+0x300>
 8009ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <UART_SetConfig+0x2ac>)
 8009ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aea:	bf00      	nop
 8009aec:	08009b0d 	.word	0x08009b0d
 8009af0:	08009b15 	.word	0x08009b15
 8009af4:	08009b41 	.word	0x08009b41
 8009af8:	08009b1b 	.word	0x08009b1b
 8009afc:	08009b41 	.word	0x08009b41
 8009b00:	08009b41 	.word	0x08009b41
 8009b04:	08009b41 	.word	0x08009b41
 8009b08:	08009b23 	.word	0x08009b23
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b0c:	f7fd face 	bl	80070ac <HAL_RCC_GetPCLK2Freq>
 8009b10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b12:	e01b      	b.n	8009b4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b14:	4b08      	ldr	r3, [pc, #32]	@ (8009b38 <UART_SetConfig+0x2f8>)
 8009b16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b18:	e018      	b.n	8009b4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b1a:	f7fd fa31 	bl	8006f80 <HAL_RCC_GetSysClockFreq>
 8009b1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b20:	e014      	b.n	8009b4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b28:	e010      	b.n	8009b4c <UART_SetConfig+0x30c>
 8009b2a:	bf00      	nop
 8009b2c:	cfff69f3 	.word	0xcfff69f3
 8009b30:	40008000 	.word	0x40008000
 8009b34:	40013800 	.word	0x40013800
 8009b38:	00f42400 	.word	0x00f42400
 8009b3c:	08013324 	.word	0x08013324
      default:
        pclk = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 8084 	beq.w	8009c5c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b58:	4a4b      	ldr	r2, [pc, #300]	@ (8009c88 <UART_SetConfig+0x448>)
 8009b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b66:	005a      	lsls	r2, r3, #1
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	085b      	lsrs	r3, r3, #1
 8009b6e:	441a      	add	r2, r3
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b78:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	2b0f      	cmp	r3, #15
 8009b7e:	d916      	bls.n	8009bae <UART_SetConfig+0x36e>
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b86:	d212      	bcs.n	8009bae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b88:	6a3b      	ldr	r3, [r7, #32]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	f023 030f 	bic.w	r3, r3, #15
 8009b90:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	8bfb      	ldrh	r3, [r7, #30]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	8bfa      	ldrh	r2, [r7, #30]
 8009baa:	60da      	str	r2, [r3, #12]
 8009bac:	e056      	b.n	8009c5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009bb4:	e052      	b.n	8009c5c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	2b07      	cmp	r3, #7
 8009bbe:	d822      	bhi.n	8009c06 <UART_SetConfig+0x3c6>
 8009bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc8 <UART_SetConfig+0x388>)
 8009bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc6:	bf00      	nop
 8009bc8:	08009be9 	.word	0x08009be9
 8009bcc:	08009bf1 	.word	0x08009bf1
 8009bd0:	08009c07 	.word	0x08009c07
 8009bd4:	08009bf7 	.word	0x08009bf7
 8009bd8:	08009c07 	.word	0x08009c07
 8009bdc:	08009c07 	.word	0x08009c07
 8009be0:	08009c07 	.word	0x08009c07
 8009be4:	08009bff 	.word	0x08009bff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009be8:	f7fd fa60 	bl	80070ac <HAL_RCC_GetPCLK2Freq>
 8009bec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bee:	e010      	b.n	8009c12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bf0:	4b26      	ldr	r3, [pc, #152]	@ (8009c8c <UART_SetConfig+0x44c>)
 8009bf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bf4:	e00d      	b.n	8009c12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf6:	f7fd f9c3 	bl	8006f80 <HAL_RCC_GetSysClockFreq>
 8009bfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bfc:	e009      	b.n	8009c12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009c04:	e005      	b.n	8009c12 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009c10:	bf00      	nop
    }

    if (pclk != 0U)
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d021      	beq.n	8009c5c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8009c88 <UART_SetConfig+0x448>)
 8009c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c22:	461a      	mov	r2, r3
 8009c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	085b      	lsrs	r3, r3, #1
 8009c30:	441a      	add	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	2b0f      	cmp	r3, #15
 8009c40:	d909      	bls.n	8009c56 <UART_SetConfig+0x416>
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c48:	d205      	bcs.n	8009c56 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60da      	str	r2, [r3, #12]
 8009c54:	e002      	b.n	8009c5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2200      	movs	r2, #0
 8009c76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c78:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3730      	adds	r7, #48	@ 0x30
 8009c80:	46bd      	mov	sp, r7
 8009c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c86:	bf00      	nop
 8009c88:	08013324 	.word	0x08013324
 8009c8c:	00f42400 	.word	0x00f42400

08009c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00a      	beq.n	8009cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00a      	beq.n	8009cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce0:	f003 0302 	and.w	r3, r3, #2
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00a      	beq.n	8009cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	430a      	orrs	r2, r1
 8009cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00a      	beq.n	8009d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	430a      	orrs	r2, r1
 8009d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d24:	f003 0310 	and.w	r3, r3, #16
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00a      	beq.n	8009d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00a      	beq.n	8009d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01a      	beq.n	8009da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	430a      	orrs	r2, r1
 8009d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d8e:	d10a      	bne.n	8009da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d00a      	beq.n	8009dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	430a      	orrs	r2, r1
 8009dc6:	605a      	str	r2, [r3, #4]
  }
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b098      	sub	sp, #96	@ 0x60
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009de4:	f7fa f9da 	bl	800419c <HAL_GetTick>
 8009de8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 0308 	and.w	r3, r3, #8
 8009df4:	2b08      	cmp	r3, #8
 8009df6:	d12f      	bne.n	8009e58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009df8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e00:	2200      	movs	r2, #0
 8009e02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f88e 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d022      	beq.n	8009e58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1a:	e853 3f00 	ldrex	r3, [r3]
 8009e1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e26:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e38:	e841 2300 	strex	r3, r2, [r1]
 8009e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e6      	bne.n	8009e12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2220      	movs	r2, #32
 8009e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e063      	b.n	8009f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b04      	cmp	r3, #4
 8009e64:	d149      	bne.n	8009efa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e6a:	9300      	str	r3, [sp, #0]
 8009e6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f857 	bl	8009f28 <UART_WaitOnFlagUntilTimeout>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d03c      	beq.n	8009efa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ea0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1e6      	bne.n	8009e80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3308      	adds	r3, #8
 8009eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f023 0301 	bic.w	r3, r3, #1
 8009ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3308      	adds	r3, #8
 8009ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ed2:	61fa      	str	r2, [r7, #28]
 8009ed4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed6:	69b9      	ldr	r1, [r7, #24]
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	e841 2300 	strex	r3, r2, [r1]
 8009ede:	617b      	str	r3, [r7, #20]
   return(result);
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1e5      	bne.n	8009eb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e012      	b.n	8009f20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3758      	adds	r7, #88	@ 0x58
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	603b      	str	r3, [r7, #0]
 8009f34:	4613      	mov	r3, r2
 8009f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f38:	e04f      	b.n	8009fda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d04b      	beq.n	8009fda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f42:	f7fa f92b 	bl	800419c <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	69ba      	ldr	r2, [r7, #24]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d302      	bcc.n	8009f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d101      	bne.n	8009f5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e04e      	b.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d037      	beq.n	8009fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b80      	cmp	r3, #128	@ 0x80
 8009f6e:	d034      	beq.n	8009fda <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2b40      	cmp	r3, #64	@ 0x40
 8009f74:	d031      	beq.n	8009fda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	69db      	ldr	r3, [r3, #28]
 8009f7c:	f003 0308 	and.w	r3, r3, #8
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d110      	bne.n	8009fa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2208      	movs	r2, #8
 8009f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 f879 	bl	800a084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2208      	movs	r2, #8
 8009f96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e029      	b.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009fb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fb4:	d111      	bne.n	8009fda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 f85f 	bl	800a084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2220      	movs	r2, #32
 8009fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e00f      	b.n	8009ffa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	69da      	ldr	r2, [r3, #28]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	bf0c      	ite	eq
 8009fea:	2301      	moveq	r3, #1
 8009fec:	2300      	movne	r3, #0
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d0a0      	beq.n	8009f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a002:	b480      	push	{r7}
 800a004:	b08f      	sub	sp, #60	@ 0x3c
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	e853 3f00 	ldrex	r3, [r3]
 800a016:	61fb      	str	r3, [r7, #28]
   return(result);
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a01e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	461a      	mov	r2, r3
 800a026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a02a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a02e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e6      	bne.n	800a00a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3308      	adds	r3, #8
 800a042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a052:	633b      	str	r3, [r7, #48]	@ 0x30
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3308      	adds	r3, #8
 800a05a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a05c:	61ba      	str	r2, [r7, #24]
 800a05e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6979      	ldr	r1, [r7, #20]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	613b      	str	r3, [r7, #16]
   return(result);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e5      	bne.n	800a03c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a078:	bf00      	nop
 800a07a:	373c      	adds	r7, #60	@ 0x3c
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a084:	b480      	push	{r7}
 800a086:	b095      	sub	sp, #84	@ 0x54
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a094:	e853 3f00 	ldrex	r3, [r3]
 800a098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e6      	bne.n	800a08c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0d4:	f023 0301 	bic.w	r3, r3, #1
 800a0d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e3      	bne.n	800a0be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d118      	bne.n	800a130 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f023 0310 	bic.w	r3, r3, #16
 800a112:	647b      	str	r3, [r7, #68]	@ 0x44
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a11c:	61bb      	str	r3, [r7, #24]
 800a11e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	6979      	ldr	r1, [r7, #20]
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	613b      	str	r3, [r7, #16]
   return(result);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e6      	bne.n	800a0fe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a144:	bf00      	nop
 800a146:	3754      	adds	r7, #84	@ 0x54
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b090      	sub	sp, #64	@ 0x40
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0320 	and.w	r3, r3, #32
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d137      	bne.n	800a1dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a16e:	2200      	movs	r2, #0
 800a170:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	3308      	adds	r3, #8
 800a17a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	e853 3f00 	ldrex	r3, [r3]
 800a182:	623b      	str	r3, [r7, #32]
   return(result);
 800a184:	6a3b      	ldr	r3, [r7, #32]
 800a186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a18a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a194:	633a      	str	r2, [r7, #48]	@ 0x30
 800a196:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a19a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e5      	bne.n	800a174 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	e853 3f00 	ldrex	r3, [r3]
 800a1b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c6:	61fb      	str	r3, [r7, #28]
 800a1c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ca:	69b9      	ldr	r1, [r7, #24]
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	e841 2300 	strex	r3, r2, [r1]
 800a1d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e6      	bne.n	800a1a8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1da:	e002      	b.n	800a1e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a1dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1de:	f7f9 f93b 	bl	8003458 <HAL_UART_TxCpltCallback>
}
 800a1e2:	bf00      	nop
 800a1e4:	3740      	adds	r7, #64	@ 0x40
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7ff fb01 	bl	8009800 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1fe:	bf00      	nop
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b086      	sub	sp, #24
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a21a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a222:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a22e:	2b80      	cmp	r3, #128	@ 0x80
 800a230:	d109      	bne.n	800a246 <UART_DMAError+0x40>
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b21      	cmp	r3, #33	@ 0x21
 800a236:	d106      	bne.n	800a246 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a240:	6978      	ldr	r0, [r7, #20]
 800a242:	f7ff fede 	bl	800a002 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a250:	2b40      	cmp	r3, #64	@ 0x40
 800a252:	d109      	bne.n	800a268 <UART_DMAError+0x62>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b22      	cmp	r3, #34	@ 0x22
 800a258:	d106      	bne.n	800a268 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a262:	6978      	ldr	r0, [r7, #20]
 800a264:	f7ff ff0e 	bl	800a084 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a26e:	f043 0210 	orr.w	r2, r3, #16
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a278:	6978      	ldr	r0, [r7, #20]
 800a27a:	f7ff facb 	bl	8009814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a27e:	bf00      	nop
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fab9 	bl	8009814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2a2:	bf00      	nop
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b088      	sub	sp, #32
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2c6:	61fb      	str	r3, [r7, #28]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	61bb      	str	r3, [r7, #24]
 800a2d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6979      	ldr	r1, [r7, #20]
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2220      	movs	r2, #32
 800a2e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7f9 f8b0 	bl	8003458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2f8:	bf00      	nop
 800a2fa:	3720      	adds	r7, #32
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_UARTEx_DisableFifoMode+0x16>
 800a34e:	2302      	movs	r3, #2
 800a350:	e027      	b.n	800a3a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2224      	movs	r2, #36	@ 0x24
 800a35e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0201 	bic.w	r2, r2, #1
 800a378:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a380:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e02d      	b.n	800a422 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2224      	movs	r2, #36	@ 0x24
 800a3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f022 0201 	bic.w	r2, r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f850 	bl	800a4a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b084      	sub	sp, #16
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d101      	bne.n	800a442 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a43e:	2302      	movs	r3, #2
 800a440:	e02d      	b.n	800a49e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2224      	movs	r2, #36	@ 0x24
 800a44e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f812 	bl	800a4a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2220      	movs	r2, #32
 800a490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
	...

0800a4a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d108      	bne.n	800a4ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4c8:	e031      	b.n	800a52e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4ce:	2308      	movs	r3, #8
 800a4d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	0e5b      	lsrs	r3, r3, #25
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	0f5b      	lsrs	r3, r3, #29
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	f003 0307 	and.w	r3, r3, #7
 800a4f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	7b3a      	ldrb	r2, [r7, #12]
 800a4f6:	4911      	ldr	r1, [pc, #68]	@ (800a53c <UARTEx_SetNbDataToProcess+0x94>)
 800a4f8:	5c8a      	ldrb	r2, [r1, r2]
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4fe:	7b3a      	ldrb	r2, [r7, #12]
 800a500:	490f      	ldr	r1, [pc, #60]	@ (800a540 <UARTEx_SetNbDataToProcess+0x98>)
 800a502:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a504:	fb93 f3f2 	sdiv	r3, r3, r2
 800a508:	b29a      	uxth	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	7b7a      	ldrb	r2, [r7, #13]
 800a514:	4909      	ldr	r1, [pc, #36]	@ (800a53c <UARTEx_SetNbDataToProcess+0x94>)
 800a516:	5c8a      	ldrb	r2, [r1, r2]
 800a518:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a51c:	7b7a      	ldrb	r2, [r7, #13]
 800a51e:	4908      	ldr	r1, [pc, #32]	@ (800a540 <UARTEx_SetNbDataToProcess+0x98>)
 800a520:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a522:	fb93 f3f2 	sdiv	r3, r3, r2
 800a526:	b29a      	uxth	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	0801333c 	.word	0x0801333c
 800a540:	08013344 	.word	0x08013344

0800a544 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	2218      	movs	r2, #24
 800a554:	2100      	movs	r1, #0
 800a556:	4618      	mov	r0, r3
 800a558:	f001 f936 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a55c:	233f      	movs	r3, #63	@ 0x3f
 800a55e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800a560:	2381      	movs	r3, #129	@ 0x81
 800a562:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a564:	1dfb      	adds	r3, r7, #7
 800a566:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a568:	2301      	movs	r3, #1
 800a56a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a56c:	f107 0308 	add.w	r3, r7, #8
 800a570:	2100      	movs	r1, #0
 800a572:	4618      	mov	r0, r3
 800a574:	f001 fef2 	bl	800c35c <hci_send_req>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	da01      	bge.n	800a582 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a57e:	23ff      	movs	r3, #255	@ 0xff
 800a580:	e000      	b.n	800a584 <aci_gap_set_non_discoverable+0x40>
  return status;
 800a582:	79fb      	ldrb	r3, [r7, #7]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3720      	adds	r7, #32
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800a58c:	b5b0      	push	{r4, r5, r7, lr}
 800a58e:	b0ce      	sub	sp, #312	@ 0x138
 800a590:	af00      	add	r7, sp, #0
 800a592:	4605      	mov	r5, r0
 800a594:	460c      	mov	r4, r1
 800a596:	4610      	mov	r0, r2
 800a598:	4619      	mov	r1, r3
 800a59a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a59e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a5a2:	462a      	mov	r2, r5
 800a5a4:	701a      	strb	r2, [r3, #0]
 800a5a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	801a      	strh	r2, [r3, #0]
 800a5b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5b6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	801a      	strh	r2, [r3, #0]
 800a5be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5c2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800a5ca:	f107 0310 	add.w	r3, r7, #16
 800a5ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800a5d2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a5d6:	3308      	adds	r3, #8
 800a5d8:	f107 0210 	add.w	r2, r7, #16
 800a5dc:	4413      	add	r3, r2
 800a5de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800a5e2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a5e6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a5ea:	4413      	add	r3, r2
 800a5ec:	3309      	adds	r3, #9
 800a5ee:	f107 0210 	add.w	r2, r7, #16
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a5f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a5fc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a600:	2200      	movs	r2, #0
 800a602:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800a60a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a60e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a612:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a616:	7812      	ldrb	r2, [r2, #0]
 800a618:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a61a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a61e:	3301      	adds	r3, #1
 800a620:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800a624:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a628:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a62c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800a630:	8812      	ldrh	r2, [r2, #0]
 800a632:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800a636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a63a:	3302      	adds	r3, #2
 800a63c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800a640:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a644:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a648:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800a64c:	8812      	ldrh	r2, [r2, #0]
 800a64e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800a652:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a656:	3302      	adds	r3, #2
 800a658:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a65c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a660:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a664:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a668:	7812      	ldrb	r2, [r2, #0]
 800a66a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a66c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a670:	3301      	adds	r3, #1
 800a672:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800a676:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a67a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800a67e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a680:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a684:	3301      	adds	r3, #1
 800a686:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800a68a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a68e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a692:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800a694:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a698:	3301      	adds	r3, #1
 800a69a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800a69e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a6a2:	3308      	adds	r3, #8
 800a6a4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800a6a8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 f87b 	bl	800b7a8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800a6b2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800a6b6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a6ba:	4413      	add	r3, r2
 800a6bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800a6c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a6c4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a6c8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a6ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800a6d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a6d8:	3301      	adds	r3, #1
 800a6da:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a6de:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 f860 	bl	800b7a8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a6e8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800a6ec:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800a6f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a6fa:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800a6fe:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a704:	3302      	adds	r3, #2
 800a706:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800a70a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a70e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800a712:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a718:	3302      	adds	r3, #2
 800a71a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a71e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a722:	2218      	movs	r2, #24
 800a724:	2100      	movs	r1, #0
 800a726:	4618      	mov	r0, r3
 800a728:	f001 f84e 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a72c:	233f      	movs	r3, #63	@ 0x3f
 800a72e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800a732:	2383      	movs	r3, #131	@ 0x83
 800a734:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a740:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a744:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a748:	f107 030f 	add.w	r3, r7, #15
 800a74c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a750:	2301      	movs	r3, #1
 800a752:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a75a:	2100      	movs	r1, #0
 800a75c:	4618      	mov	r0, r3
 800a75e:	f001 fdfd 	bl	800c35c <hci_send_req>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	da01      	bge.n	800a76c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800a768:	23ff      	movs	r3, #255	@ 0xff
 800a76a:	e004      	b.n	800a776 <aci_gap_set_discoverable+0x1ea>
  return status;
 800a76c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a770:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a774:	781b      	ldrb	r3, [r3, #0]
}
 800a776:	4618      	mov	r0, r3
 800a778:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bdb0      	pop	{r4, r5, r7, pc}

0800a780 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b0cc      	sub	sp, #304	@ 0x130
 800a784:	af00      	add	r7, sp, #0
 800a786:	4602      	mov	r2, r0
 800a788:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a78c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a790:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a792:	f107 0310 	add.w	r3, r7, #16
 800a796:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a79a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a79e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800a7ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7b4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a7b8:	7812      	ldrb	r2, [r2, #0]
 800a7ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a7ca:	2218      	movs	r2, #24
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fffa 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a7d4:	233f      	movs	r3, #63	@ 0x3f
 800a7d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800a7da:	2385      	movs	r3, #133	@ 0x85
 800a7dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a7e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a7f0:	f107 030f 	add.w	r3, r7, #15
 800a7f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a802:	2100      	movs	r1, #0
 800a804:	4618      	mov	r0, r3
 800a806:	f001 fda9 	bl	800c35c <hci_send_req>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	da01      	bge.n	800a814 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a810:	23ff      	movs	r3, #255	@ 0xff
 800a812:	e004      	b.n	800a81e <aci_gap_set_io_capability+0x9e>
  return status;
 800a814:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a818:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a81c:	781b      	ldrb	r3, [r3, #0]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a828:	b5b0      	push	{r4, r5, r7, lr}
 800a82a:	b0cc      	sub	sp, #304	@ 0x130
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4605      	mov	r5, r0
 800a830:	460c      	mov	r4, r1
 800a832:	4610      	mov	r0, r2
 800a834:	4619      	mov	r1, r3
 800a836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a83a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a83e:	462a      	mov	r2, r5
 800a840:	701a      	strb	r2, [r3, #0]
 800a842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a846:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a84a:	4622      	mov	r2, r4
 800a84c:	701a      	strb	r2, [r3, #0]
 800a84e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a852:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a856:	4602      	mov	r2, r0
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a85e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a862:	460a      	mov	r2, r1
 800a864:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a866:	f107 0310 	add.w	r3, r7, #16
 800a86a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a86e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a872:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a876:	2200      	movs	r2, #0
 800a878:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a880:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a884:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a888:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a88c:	7812      	ldrb	r2, [r2, #0]
 800a88e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a890:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a894:	3301      	adds	r3, #1
 800a896:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a89a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a89e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8a2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a8a6:	7812      	ldrb	r2, [r2, #0]
 800a8a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a8aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800a8b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8bc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a8c0:	7812      	ldrb	r2, [r2, #0]
 800a8c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a8c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a8ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8d6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a8da:	7812      	ldrb	r2, [r2, #0]
 800a8dc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a8de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a8e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8ec:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800a8f0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a8f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a8fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a900:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800a904:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a90a:	3301      	adds	r3, #1
 800a90c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a910:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a914:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800a918:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a91a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a91e:	3301      	adds	r3, #1
 800a920:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a924:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a928:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800a92c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a930:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a934:	3304      	adds	r3, #4
 800a936:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a93a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a93e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a942:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a944:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a948:	3301      	adds	r3, #1
 800a94a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a94e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a952:	2218      	movs	r2, #24
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f000 ff36 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a95c:	233f      	movs	r3, #63	@ 0x3f
 800a95e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800a962:	2386      	movs	r3, #134	@ 0x86
 800a964:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a968:	f107 0310 	add.w	r3, r7, #16
 800a96c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a970:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a974:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a978:	f107 030f 	add.w	r3, r7, #15
 800a97c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a980:	2301      	movs	r3, #1
 800a982:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a986:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 fce5 	bl	800c35c <hci_send_req>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	da01      	bge.n	800a99c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800a998:	23ff      	movs	r3, #255	@ 0xff
 800a99a:	e004      	b.n	800a9a6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800a99c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a9a4:	781b      	ldrb	r3, [r3, #0]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bdb0      	pop	{r4, r5, r7, pc}

0800a9b0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a9b0:	b590      	push	{r4, r7, lr}
 800a9b2:	b0cd      	sub	sp, #308	@ 0x134
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9c0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9ca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a9ce:	4622      	mov	r2, r4
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9d6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a9da:	4602      	mov	r2, r0
 800a9dc:	701a      	strb	r2, [r3, #0]
 800a9de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9e2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a9ea:	f107 0310 	add.w	r3, r7, #16
 800a9ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a9f2:	f107 0308 	add.w	r3, r7, #8
 800a9f6:	2207      	movs	r2, #7
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fee4 	bl	800b7c8 <Osal_MemSet>
  int index_input = 0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800aa06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa0e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800aa12:	7812      	ldrb	r2, [r2, #0]
 800aa14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800aa20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa28:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aa30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa34:	3301      	adds	r3, #1
 800aa36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800aa3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800aa3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800aa42:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aa4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa4e:	3301      	adds	r3, #1
 800aa50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa54:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa58:	2218      	movs	r2, #24
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 feb3 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa62:	233f      	movs	r3, #63	@ 0x3f
 800aa64:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800aa68:	238a      	movs	r3, #138	@ 0x8a
 800aa6a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aa6e:	f107 0310 	add.w	r3, r7, #16
 800aa72:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800aa76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800aa7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800aa7e:	f107 0308 	add.w	r3, r7, #8
 800aa82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800aa86:	2307      	movs	r3, #7
 800aa88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800aa90:	2100      	movs	r1, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 fc62 	bl	800c35c <hci_send_req>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da01      	bge.n	800aaa2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800aa9e:	23ff      	movs	r3, #255	@ 0xff
 800aaa0:	e02e      	b.n	800ab00 <aci_gap_init+0x150>
  if ( resp.Status )
 800aaa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aaa6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d005      	beq.n	800aabc <aci_gap_init+0x10c>
    return resp.Status;
 800aab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aab4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	e021      	b.n	800ab00 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800aabc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aac0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800aac4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aace:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800aad6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aada:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800aade:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aae8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800aaea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aaee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800aaf2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800aafc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd90      	pop	{r4, r7, pc}

0800ab0a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b0cc      	sub	sp, #304	@ 0x130
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	4602      	mov	r2, r0
 800ab12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab1a:	6019      	str	r1, [r3, #0]
 800ab1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab20:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ab24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ab26:	f107 0310 	add.w	r3, r7, #16
 800ab2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ab2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800ab40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ab48:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ab4c:	7812      	ldrb	r2, [r2, #0]
 800ab4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ab50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ab54:	3301      	adds	r3, #1
 800ab56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800ab5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ab5e:	1c58      	adds	r0, r3, #1
 800ab60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab64:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ab68:	781a      	ldrb	r2, [r3, #0]
 800ab6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ab72:	6819      	ldr	r1, [r3, #0]
 800ab74:	f000 fe18 	bl	800b7a8 <Osal_MemCpy>
  index_input += AdvDataLen;
 800ab78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ab7c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ab86:	4413      	add	r3, r2
 800ab88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ab90:	2218      	movs	r2, #24
 800ab92:	2100      	movs	r1, #0
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 fe17 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab9a:	233f      	movs	r3, #63	@ 0x3f
 800ab9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800aba0:	238e      	movs	r3, #142	@ 0x8e
 800aba2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800aba6:	f107 0310 	add.w	r3, r7, #16
 800abaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800abae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800abb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800abb6:	f107 030f 	add.w	r3, r7, #15
 800abba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800abc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800abc8:	2100      	movs	r1, #0
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 fbc6 	bl	800c35c <hci_send_req>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	da01      	bge.n	800abda <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800abd6:	23ff      	movs	r3, #255	@ 0xff
 800abd8:	e004      	b.n	800abe4 <aci_gap_update_adv_data+0xda>
  return status;
 800abda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800abde:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800abe2:	781b      	ldrb	r3, [r3, #0]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}

0800abee <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800abee:	b580      	push	{r7, lr}
 800abf0:	b088      	sub	sp, #32
 800abf2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800abf8:	f107 0308 	add.w	r3, r7, #8
 800abfc:	2218      	movs	r2, #24
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fde1 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac06:	233f      	movs	r3, #63	@ 0x3f
 800ac08:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ac0a:	2392      	movs	r3, #146	@ 0x92
 800ac0c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac0e:	1dfb      	adds	r3, r7, #7
 800ac10:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac12:	2301      	movs	r3, #1
 800ac14:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac16:	f107 0308 	add.w	r3, r7, #8
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 fb9d 	bl	800c35c <hci_send_req>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	da01      	bge.n	800ac2c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ac28:	23ff      	movs	r3, #255	@ 0xff
 800ac2a:	e000      	b.n	800ac2e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3720      	adds	r7, #32
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b088      	sub	sp, #32
 800ac3a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	2218      	movs	r2, #24
 800ac46:	2100      	movs	r1, #0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 fdbd 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac4e:	233f      	movs	r3, #63	@ 0x3f
 800ac50:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ac52:	f240 1301 	movw	r3, #257	@ 0x101
 800ac56:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ac58:	1dfb      	adds	r3, r7, #7
 800ac5a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f001 fb78 	bl	800c35c <hci_send_req>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	da01      	bge.n	800ac76 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ac72:	23ff      	movs	r3, #255	@ 0xff
 800ac74:	e000      	b.n	800ac78 <aci_gatt_init+0x42>
  return status;
 800ac76:	79fb      	ldrb	r3, [r7, #7]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3720      	adds	r7, #32
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800ac80:	b590      	push	{r4, r7, lr}
 800ac82:	b0cf      	sub	sp, #316	@ 0x13c
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4604      	mov	r4, r0
 800ac88:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800ac8c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800ac90:	6001      	str	r1, [r0, #0]
 800ac92:	4610      	mov	r0, r2
 800ac94:	4619      	mov	r1, r3
 800ac96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ac9a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ac9e:	4622      	mov	r2, r4
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800aca6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800acaa:	4602      	mov	r2, r0
 800acac:	701a      	strb	r2, [r3, #0]
 800acae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800acb2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800acb6:	460a      	mov	r2, r1
 800acb8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800acba:	f107 0310 	add.w	r3, r7, #16
 800acbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800acc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800acc6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d00a      	beq.n	800ace6 <aci_gatt_add_service+0x66>
 800acd0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800acd4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d101      	bne.n	800ace2 <aci_gatt_add_service+0x62>
 800acde:	2311      	movs	r3, #17
 800ace0:	e002      	b.n	800ace8 <aci_gatt_add_service+0x68>
 800ace2:	2301      	movs	r3, #1
 800ace4:	e000      	b.n	800ace8 <aci_gatt_add_service+0x68>
 800ace6:	2303      	movs	r3, #3
 800ace8:	f107 0210 	add.w	r2, r7, #16
 800acec:	4413      	add	r3, r2
 800acee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800acf2:	f107 030c 	add.w	r3, r7, #12
 800acf6:	2203      	movs	r2, #3
 800acf8:	2100      	movs	r1, #0
 800acfa:	4618      	mov	r0, r3
 800acfc:	f000 fd64 	bl	800b7c8 <Osal_MemSet>
  int index_input = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800ad06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ad0a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ad0e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ad12:	7812      	ldrb	r2, [r2, #0]
 800ad14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800ad20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ad24:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d002      	beq.n	800ad34 <aci_gatt_add_service+0xb4>
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d004      	beq.n	800ad3c <aci_gatt_add_service+0xbc>
 800ad32:	e007      	b.n	800ad44 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800ad34:	2302      	movs	r3, #2
 800ad36:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ad3a:	e005      	b.n	800ad48 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ad42:	e001      	b.n	800ad48 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ad44:	2397      	movs	r3, #151	@ 0x97
 800ad46:	e06c      	b.n	800ae22 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800ad48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ad4c:	1c58      	adds	r0, r3, #1
 800ad4e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800ad52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ad56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ad5a:	6819      	ldr	r1, [r3, #0]
 800ad5c:	f000 fd24 	bl	800b7a8 <Osal_MemCpy>
    index_input += size;
 800ad60:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800ad64:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ad68:	4413      	add	r3, r2
 800ad6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800ad6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad72:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ad76:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ad7a:	7812      	ldrb	r2, [r2, #0]
 800ad7c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ad7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad82:	3301      	adds	r3, #1
 800ad84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ad88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ad8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ad90:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800ad94:	7812      	ldrb	r2, [r2, #0]
 800ad96:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ad98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ada2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ada6:	2218      	movs	r2, #24
 800ada8:	2100      	movs	r1, #0
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 fd0c 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800adb0:	233f      	movs	r3, #63	@ 0x3f
 800adb2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800adb6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800adba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800adbe:	f107 0310 	add.w	r3, r7, #16
 800adc2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800adc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800adca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800adce:	f107 030c 	add.w	r3, r7, #12
 800add2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800add6:	2303      	movs	r3, #3
 800add8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800addc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ade0:	2100      	movs	r1, #0
 800ade2:	4618      	mov	r0, r3
 800ade4:	f001 faba 	bl	800c35c <hci_send_req>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	da01      	bge.n	800adf2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800adee:	23ff      	movs	r3, #255	@ 0xff
 800adf0:	e017      	b.n	800ae22 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800adf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800adf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800ae00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	e00a      	b.n	800ae22 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ae0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ae10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ae14:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ae1e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd90      	pop	{r4, r7, pc}

0800ae2c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ae2c:	b590      	push	{r4, r7, lr}
 800ae2e:	b0d1      	sub	sp, #324	@ 0x144
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	4608      	mov	r0, r1
 800ae36:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ae3a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800ae3e:	600a      	str	r2, [r1, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ae46:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ae4a:	4622      	mov	r2, r4
 800ae4c:	801a      	strh	r2, [r3, #0]
 800ae4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ae52:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ae56:	4602      	mov	r2, r0
 800ae58:	701a      	strb	r2, [r3, #0]
 800ae5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ae5e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800ae62:	460a      	mov	r2, r1
 800ae64:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ae66:	f107 0318 	add.w	r3, r7, #24
 800ae6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ae6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ae72:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d00a      	beq.n	800ae92 <aci_gatt_add_char+0x66>
 800ae7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ae80:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d101      	bne.n	800ae8e <aci_gatt_add_char+0x62>
 800ae8a:	2313      	movs	r3, #19
 800ae8c:	e002      	b.n	800ae94 <aci_gatt_add_char+0x68>
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e000      	b.n	800ae94 <aci_gatt_add_char+0x68>
 800ae92:	2305      	movs	r3, #5
 800ae94:	f107 0218 	add.w	r2, r7, #24
 800ae98:	4413      	add	r3, r2
 800ae9a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ae9e:	f107 0314 	add.w	r3, r7, #20
 800aea2:	2203      	movs	r2, #3
 800aea4:	2100      	movs	r1, #0
 800aea6:	4618      	mov	r0, r3
 800aea8:	f000 fc8e 	bl	800b7c8 <Osal_MemSet>
  int index_input = 0;
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800aeb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800aeb6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800aeba:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800aebe:	8812      	ldrh	r2, [r2, #0]
 800aec0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aec2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aec6:	3302      	adds	r3, #2
 800aec8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800aecc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800aed0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800aed4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800aed8:	7812      	ldrb	r2, [r2, #0]
 800aeda:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aedc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800aee0:	3301      	adds	r3, #1
 800aee2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800aee6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800aeea:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d002      	beq.n	800aefa <aci_gatt_add_char+0xce>
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d004      	beq.n	800af02 <aci_gatt_add_char+0xd6>
 800aef8:	e007      	b.n	800af0a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800aefa:	2302      	movs	r3, #2
 800aefc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800af00:	e005      	b.n	800af0e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800af02:	2310      	movs	r3, #16
 800af04:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800af08:	e001      	b.n	800af0e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800af0a:	2397      	movs	r3, #151	@ 0x97
 800af0c:	e091      	b.n	800b032 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800af0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800af12:	1cd8      	adds	r0, r3, #3
 800af14:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800af18:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af1c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800af20:	6819      	ldr	r1, [r3, #0]
 800af22:	f000 fc41 	bl	800b7a8 <Osal_MemCpy>
    index_input += size;
 800af26:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800af2a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800af2e:	4413      	add	r3, r2
 800af30:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800af34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800af38:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800af3c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800af40:	8812      	ldrh	r2, [r2, #0]
 800af42:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800af44:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af48:	3302      	adds	r3, #2
 800af4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800af4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800af52:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800af56:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800af58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af5c:	3301      	adds	r3, #1
 800af5e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800af62:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800af66:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800af6a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800af6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af70:	3301      	adds	r3, #1
 800af72:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800af76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800af7a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800af7e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800af80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af84:	3301      	adds	r3, #1
 800af86:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800af8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800af8e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800af92:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800af94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800af98:	3301      	adds	r3, #1
 800af9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800af9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800afa2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800afa6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800afa8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800afac:	3301      	adds	r3, #1
 800afae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800afb2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800afb6:	2218      	movs	r2, #24
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fc04 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800afc0:	233f      	movs	r3, #63	@ 0x3f
 800afc2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800afc6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800afca:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800afce:	f107 0318 	add.w	r3, r7, #24
 800afd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800afd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800afda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800afde:	f107 0314 	add.w	r3, r7, #20
 800afe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800afe6:	2303      	movs	r3, #3
 800afe8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800afec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f001 f9b2 	bl	800c35c <hci_send_req>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	da01      	bge.n	800b002 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800affe:	23ff      	movs	r3, #255	@ 0xff
 800b000:	e017      	b.n	800b032 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800b002:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d005      	beq.n	800b01c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800b010:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b014:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	e00a      	b.n	800b032 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800b01c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b020:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b024:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800b02e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd90      	pop	{r4, r7, pc}

0800b03c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800b03c:	b5b0      	push	{r4, r5, r7, lr}
 800b03e:	b0cc      	sub	sp, #304	@ 0x130
 800b040:	af00      	add	r7, sp, #0
 800b042:	4605      	mov	r5, r0
 800b044:	460c      	mov	r4, r1
 800b046:	4610      	mov	r0, r2
 800b048:	4619      	mov	r1, r3
 800b04a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b04e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b052:	462a      	mov	r2, r5
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b05a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b05e:	4622      	mov	r2, r4
 800b060:	801a      	strh	r2, [r3, #0]
 800b062:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b066:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800b06a:	4602      	mov	r2, r0
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b072:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b076:	460a      	mov	r2, r1
 800b078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800b07a:	f107 0310 	add.w	r3, r7, #16
 800b07e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b086:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800b094:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b098:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b09c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b0a0:	8812      	ldrh	r2, [r2, #0]
 800b0a2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b0a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0a8:	3302      	adds	r3, #2
 800b0aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800b0ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b0b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b0b6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800b0ba:	8812      	ldrh	r2, [r2, #0]
 800b0bc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b0be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0c2:	3302      	adds	r3, #2
 800b0c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800b0c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b0cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b0d0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b0d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0dc:	3301      	adds	r3, #1
 800b0de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800b0e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b0e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b0ea:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800b0ee:	7812      	ldrb	r2, [r2, #0]
 800b0f0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b0f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800b0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b100:	1d98      	adds	r0, r3, #6
 800b102:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b106:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	461a      	mov	r2, r3
 800b10e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800b112:	f000 fb49 	bl	800b7a8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800b116:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b11a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b124:	4413      	add	r3, r2
 800b126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b12a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b12e:	2218      	movs	r2, #24
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fb48 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b138:	233f      	movs	r3, #63	@ 0x3f
 800b13a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800b13e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800b142:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b146:	f107 0310 	add.w	r3, r7, #16
 800b14a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b14e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b152:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b156:	f107 030f 	add.w	r3, r7, #15
 800b15a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b15e:	2301      	movs	r3, #1
 800b160:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b164:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 f8f6 	bl	800c35c <hci_send_req>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	da01      	bge.n	800b17a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800b176:	23ff      	movs	r3, #255	@ 0xff
 800b178:	e004      	b.n	800b184 <aci_gatt_update_char_value+0x148>
  return status;
 800b17a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b17e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b182:	781b      	ldrb	r3, [r3, #0]
}
 800b184:	4618      	mov	r0, r3
 800b186:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bdb0      	pop	{r4, r5, r7, pc}

0800b18e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b0cc      	sub	sp, #304	@ 0x130
 800b192:	af00      	add	r7, sp, #0
 800b194:	4602      	mov	r2, r0
 800b196:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b19a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b19e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800b1a0:	f107 0310 	add.w	r3, r7, #16
 800b1a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b1a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b1ac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b1ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b1be:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b1c2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b1c6:	8812      	ldrh	r2, [r2, #0]
 800b1c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b1d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b1d8:	2218      	movs	r2, #24
 800b1da:	2100      	movs	r1, #0
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 faf3 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b1e2:	233f      	movs	r3, #63	@ 0x3f
 800b1e4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800b1e8:	f240 1325 	movw	r3, #293	@ 0x125
 800b1ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b1f0:	f107 0310 	add.w	r3, r7, #16
 800b1f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b1f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b1fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b200:	f107 030f 	add.w	r3, r7, #15
 800b204:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b208:	2301      	movs	r3, #1
 800b20a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b20e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b212:	2100      	movs	r1, #0
 800b214:	4618      	mov	r0, r3
 800b216:	f001 f8a1 	bl	800c35c <hci_send_req>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	da01      	bge.n	800b224 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800b220:	23ff      	movs	r3, #255	@ 0xff
 800b222:	e004      	b.n	800b22e <aci_gatt_confirm_indication+0xa0>
  return status;
 800b224:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b228:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b22c:	781b      	ldrb	r3, [r3, #0]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <aci_gatt_write_resp>:
                                uint16_t Attr_Handle,
                                uint8_t Write_status,
                                uint8_t Error_Code,
                                uint8_t Attribute_Val_Length,
                                const uint8_t* Attribute_Val )
{
 800b238:	b5b0      	push	{r4, r5, r7, lr}
 800b23a:	b0cc      	sub	sp, #304	@ 0x130
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	4605      	mov	r5, r0
 800b240:	460c      	mov	r4, r1
 800b242:	4610      	mov	r0, r2
 800b244:	4619      	mov	r1, r3
 800b246:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b24a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b24e:	462a      	mov	r2, r5
 800b250:	801a      	strh	r2, [r3, #0]
 800b252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b256:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800b25a:	4622      	mov	r2, r4
 800b25c:	801a      	strh	r2, [r3, #0]
 800b25e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b262:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800b266:	4602      	mov	r2, r0
 800b268:	701a      	strb	r2, [r3, #0]
 800b26a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b26e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800b272:	460a      	mov	r2, r1
 800b274:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_resp_cp0 *cp0 = (aci_gatt_write_resp_cp0*)(cmd_buffer);
 800b276:	f107 0310 	add.w	r3, r7, #16
 800b27a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b27e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b282:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b286:	2200      	movs	r2, #0
 800b288:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b290:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b294:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b298:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b29c:	8812      	ldrh	r2, [r2, #0]
 800b29e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b2a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Attr_Handle = Attr_Handle;
 800b2aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b2ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b2b2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800b2b6:	8812      	ldrh	r2, [r2, #0]
 800b2b8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b2ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2be:	3302      	adds	r3, #2
 800b2c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Write_status = Write_status;
 800b2c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b2c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b2cc:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800b2d0:	7812      	ldrb	r2, [r2, #0]
 800b2d2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800b2d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2d8:	3301      	adds	r3, #1
 800b2da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Error_Code = Error_Code;
 800b2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b2e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b2e6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800b2ea:	7812      	ldrb	r2, [r2, #0]
 800b2ec:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b2ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800b2f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b2fc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800b300:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b302:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b306:	3301      	adds	r3, #1
 800b308:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800b30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b310:	3307      	adds	r3, #7
 800b312:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800b316:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 fa44 	bl	800b7a8 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800b320:	f897 3140 	ldrb.w	r3, [r7, #320]	@ 0x140
 800b324:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b328:	4413      	add	r3, r2
 800b32a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b32e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b332:	2218      	movs	r2, #24
 800b334:	2100      	movs	r1, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fa46 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b33c:	233f      	movs	r3, #63	@ 0x3f
 800b33e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x126;
 800b342:	f44f 7393 	mov.w	r3, #294	@ 0x126
 800b346:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b34a:	f107 0310 	add.w	r3, r7, #16
 800b34e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b352:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b356:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b35a:	f107 030f 	add.w	r3, r7, #15
 800b35e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b362:	2301      	movs	r3, #1
 800b364:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b368:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b36c:	2100      	movs	r1, #0
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fff4 	bl	800c35c <hci_send_req>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	da01      	bge.n	800b37e <aci_gatt_write_resp+0x146>
    return BLE_STATUS_TIMEOUT;
 800b37a:	23ff      	movs	r3, #255	@ 0xff
 800b37c:	e004      	b.n	800b388 <aci_gatt_write_resp+0x150>
  return status;
 800b37e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b382:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b386:	781b      	ldrb	r3, [r3, #0]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b38e:	46bd      	mov	sp, r7
 800b390:	bdb0      	pop	{r4, r5, r7, pc}

0800b392 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b0cc      	sub	sp, #304	@ 0x130
 800b396:	af00      	add	r7, sp, #0
 800b398:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b39c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b3a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b3b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b3b6:	460a      	mov	r2, r1
 800b3b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800b3ba:	f107 0310 	add.w	r3, r7, #16
 800b3be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b3c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b3c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800b3d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b3e0:	7812      	ldrb	r2, [r2, #0]
 800b3e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b3e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800b3ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b3f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b3f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b3fa:	7812      	ldrb	r2, [r2, #0]
 800b3fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b3fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b402:	3301      	adds	r3, #1
 800b404:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800b408:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b40c:	1c98      	adds	r0, r3, #2
 800b40e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b412:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b416:	781a      	ldrb	r2, [r3, #0]
 800b418:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b41c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b420:	6819      	ldr	r1, [r3, #0]
 800b422:	f000 f9c1 	bl	800b7a8 <Osal_MemCpy>
  index_input += Length;
 800b426:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b42a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800b434:	4413      	add	r3, r2
 800b436:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b43a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b43e:	2218      	movs	r2, #24
 800b440:	2100      	movs	r1, #0
 800b442:	4618      	mov	r0, r3
 800b444:	f000 f9c0 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b448:	233f      	movs	r3, #63	@ 0x3f
 800b44a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800b44e:	230c      	movs	r3, #12
 800b450:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b454:	f107 0310 	add.w	r3, r7, #16
 800b458:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b45c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b460:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b464:	f107 030f 	add.w	r3, r7, #15
 800b468:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b472:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b476:	2100      	movs	r1, #0
 800b478:	4618      	mov	r0, r3
 800b47a:	f000 ff6f 	bl	800c35c <hci_send_req>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	da01      	bge.n	800b488 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800b484:	23ff      	movs	r3, #255	@ 0xff
 800b486:	e004      	b.n	800b492 <aci_hal_write_config_data+0x100>
  return status;
 800b488:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b48c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b490:	781b      	ldrb	r3, [r3, #0]
}
 800b492:	4618      	mov	r0, r3
 800b494:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b0cc      	sub	sp, #304	@ 0x130
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b4b6:	460a      	mov	r2, r1
 800b4b8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800b4ba:	f107 0310 	add.w	r3, r7, #16
 800b4be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b4c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b4c6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800b4d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b4d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b4dc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b4e0:	7812      	ldrb	r2, [r2, #0]
 800b4e2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b4e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800b4ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b4f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b4f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b4fa:	7812      	ldrb	r2, [r2, #0]
 800b4fc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b4fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b502:	3301      	adds	r3, #1
 800b504:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b508:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b50c:	2218      	movs	r2, #24
 800b50e:	2100      	movs	r1, #0
 800b510:	4618      	mov	r0, r3
 800b512:	f000 f959 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b516:	233f      	movs	r3, #63	@ 0x3f
 800b518:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800b51c:	230f      	movs	r3, #15
 800b51e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b522:	f107 0310 	add.w	r3, r7, #16
 800b526:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b52a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b52e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b532:	f107 030f 	add.w	r3, r7, #15
 800b536:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b53a:	2301      	movs	r3, #1
 800b53c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b540:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
 800b548:	f000 ff08 	bl	800c35c <hci_send_req>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	da01      	bge.n	800b556 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800b552:	23ff      	movs	r3, #255	@ 0xff
 800b554:	e004      	b.n	800b560 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800b556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b55a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b55e:	781b      	ldrb	r3, [r3, #0]
}
 800b560:	4618      	mov	r0, r3
 800b562:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b088      	sub	sp, #32
 800b56e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b574:	f107 0308 	add.w	r3, r7, #8
 800b578:	2218      	movs	r2, #24
 800b57a:	2100      	movs	r1, #0
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f923 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x03;
 800b582:	2303      	movs	r3, #3
 800b584:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b586:	2303      	movs	r3, #3
 800b588:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b58a:	1dfb      	adds	r3, r7, #7
 800b58c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b58e:	2301      	movs	r3, #1
 800b590:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b592:	f107 0308 	add.w	r3, r7, #8
 800b596:	2100      	movs	r1, #0
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fedf 	bl	800c35c <hci_send_req>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	da01      	bge.n	800b5a8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b5a4:	23ff      	movs	r3, #255	@ 0xff
 800b5a6:	e000      	b.n	800b5aa <hci_reset+0x40>
  return status;
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3720      	adds	r7, #32
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b0ce      	sub	sp, #312	@ 0x138
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b5bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b5c0:	6019      	str	r1, [r3, #0]
 800b5c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b5c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b5d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b5d8:	f107 0318 	add.w	r3, r7, #24
 800b5dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b5e0:	f107 0310 	add.w	r3, r7, #16
 800b5e4:	2205      	movs	r2, #5
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 f8ed 	bl	800b7c8 <Osal_MemSet>
  int index_input = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800b5f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b5f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800b5fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b600:	8812      	ldrh	r2, [r2, #0]
 800b602:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b604:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b608:	3302      	adds	r3, #2
 800b60a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b60e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b612:	2218      	movs	r2, #24
 800b614:	2100      	movs	r1, #0
 800b616:	4618      	mov	r0, r3
 800b618:	f000 f8d6 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x08;
 800b61c:	2308      	movs	r3, #8
 800b61e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800b622:	2330      	movs	r3, #48	@ 0x30
 800b624:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800b628:	f107 0318 	add.w	r3, r7, #24
 800b62c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800b630:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b634:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800b638:	f107 0310 	add.w	r3, r7, #16
 800b63c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800b640:	2305      	movs	r3, #5
 800b642:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b646:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800b64a:	2100      	movs	r1, #0
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 fe85 	bl	800c35c <hci_send_req>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	da01      	bge.n	800b65c <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800b658:	23ff      	movs	r3, #255	@ 0xff
 800b65a:	e023      	b.n	800b6a4 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800b65c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b660:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d005      	beq.n	800b676 <hci_le_read_phy+0xc4>
    return resp.Status;
 800b66a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b66e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	e016      	b.n	800b6a4 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800b676:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b67a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b67e:	78da      	ldrb	r2, [r3, #3]
 800b680:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b684:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800b68c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b690:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800b694:	791a      	ldrb	r2, [r3, #4]
 800b696:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800b69a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b6ae:	b590      	push	{r4, r7, lr}
 800b6b0:	b0cd      	sub	sp, #308	@ 0x134
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6ca:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6d6:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800b6da:	460a      	mov	r2, r1
 800b6dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b6de:	f107 0310 	add.w	r3, r7, #16
 800b6e2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800b6e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b6ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b6f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b6fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b700:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800b704:	7812      	ldrb	r2, [r2, #0]
 800b706:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b708:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b70c:	3301      	adds	r3, #1
 800b70e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b712:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b716:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b71a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800b71e:	7812      	ldrb	r2, [r2, #0]
 800b720:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b722:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b726:	3301      	adds	r3, #1
 800b728:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b72c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b730:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800b734:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800b738:	7812      	ldrb	r2, [r2, #0]
 800b73a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b73c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b740:	3301      	adds	r3, #1
 800b742:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b746:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b74a:	2218      	movs	r2, #24
 800b74c:	2100      	movs	r1, #0
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 f83a 	bl	800b7c8 <Osal_MemSet>
  rq.ogf = 0x08;
 800b754:	2308      	movs	r3, #8
 800b756:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800b75a:	2331      	movs	r3, #49	@ 0x31
 800b75c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800b760:	f107 0310 	add.w	r3, r7, #16
 800b764:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800b768:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b76c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800b770:	f107 030f 	add.w	r3, r7, #15
 800b774:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800b778:	2301      	movs	r3, #1
 800b77a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b77e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b782:	2100      	movs	r1, #0
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fde9 	bl	800c35c <hci_send_req>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	da01      	bge.n	800b794 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800b790:	23ff      	movs	r3, #255	@ 0xff
 800b792:	e004      	b.n	800b79e <hci_le_set_default_phy+0xf0>
  return status;
 800b794:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800b798:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800b79c:	781b      	ldrb	r3, [r3, #0]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd90      	pop	{r4, r7, pc}

0800b7a8 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f004 facc 	bl	800fd56 <memcpy>
 800b7be:	4603      	mov	r3, r0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	68b9      	ldr	r1, [r7, #8]
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f004 fa27 	bl	800fc2c <memset>
 800b7de:	4603      	mov	r3, r0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <DIS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void DIS_Init(void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult;

  memset ( &DIS_Context, 0, sizeof(DIS_Context_t) );
 800b7ee:	2204      	movs	r2, #4
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	4837      	ldr	r0, [pc, #220]	@ (800b8d0 <DIS_Init+0xe8>)
 800b7f4:	f004 fa1a 	bl	800fc2c <memset>
   */

  /**
   *  Add Device Information Service
   */
  uuid = DEVICE_INFORMATION_SERVICE_UUID;
 800b7f8:	f641 030a 	movw	r3, #6154	@ 0x180a
 800b7fc:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800b7fe:	1d39      	adds	r1, r7, #4
 800b800:	4b33      	ldr	r3, [pc, #204]	@ (800b8d0 <DIS_Init+0xe8>)
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	2303      	movs	r3, #3
 800b806:	2201      	movs	r2, #1
 800b808:	2001      	movs	r0, #1
 800b80a:	f7ff fa39 	bl	800ac80 <aci_gatt_add_service>
 800b80e:	4603      	mov	r3, r0
 800b810:	71fb      	strb	r3, [r7, #7]
                                      2+
#endif
                                      1,
                                      &(DIS_Context.DeviceInformationSvcHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10f      	bne.n	800b838 <DIS_Init+0x50>
  {
    BLE_DBG_DIS_MSG ("Device Information Service (DIS) is added Successfully %04X\n", 
 800b818:	482e      	ldr	r0, [pc, #184]	@ (800b8d4 <DIS_Init+0xec>)
 800b81a:	f001 f9bb 	bl	800cb94 <DbgTraceGetFileName>
 800b81e:	4601      	mov	r1, r0
 800b820:	2385      	movs	r3, #133	@ 0x85
 800b822:	4a2d      	ldr	r2, [pc, #180]	@ (800b8d8 <DIS_Init+0xf0>)
 800b824:	482d      	ldr	r0, [pc, #180]	@ (800b8dc <DIS_Init+0xf4>)
 800b826:	f004 f885 	bl	800f934 <iprintf>
 800b82a:	4b29      	ldr	r3, [pc, #164]	@ (800b8d0 <DIS_Init+0xe8>)
 800b82c:	881b      	ldrh	r3, [r3, #0]
 800b82e:	4619      	mov	r1, r3
 800b830:	482b      	ldr	r0, [pc, #172]	@ (800b8e0 <DIS_Init+0xf8>)
 800b832:	f004 f87f 	bl	800f934 <iprintf>
 800b836:	e00d      	b.n	800b854 <DIS_Init+0x6c>
                 DIS_Context.DeviceInformationSvcHdle);
  }
  else
  {
    BLE_DBG_DIS_MSG ("FAILED to add Device Information Service (DIS), Error: %02X !!\n", 
 800b838:	4826      	ldr	r0, [pc, #152]	@ (800b8d4 <DIS_Init+0xec>)
 800b83a:	f001 f9ab 	bl	800cb94 <DbgTraceGetFileName>
 800b83e:	4601      	mov	r1, r0
 800b840:	238a      	movs	r3, #138	@ 0x8a
 800b842:	4a25      	ldr	r2, [pc, #148]	@ (800b8d8 <DIS_Init+0xf0>)
 800b844:	4825      	ldr	r0, [pc, #148]	@ (800b8dc <DIS_Init+0xf4>)
 800b846:	f004 f875 	bl	800f934 <iprintf>
 800b84a:	79fb      	ldrb	r3, [r7, #7]
 800b84c:	4619      	mov	r1, r3
 800b84e:	4825      	ldr	r0, [pc, #148]	@ (800b8e4 <DIS_Init+0xfc>)
 800b850:	f004 f870 	bl	800f934 <iprintf>

#if (BLE_CFG_DIS_MANUFACTURER_NAME_STRING != 0)
  /**
   *  Add Manufacturer Name String Characteristic
   */
  uuid = MANUFACTURER_NAME_UUID;
 800b854:	f642 2329 	movw	r3, #10793	@ 0x2a29
 800b858:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(DIS_Context.DeviceInformationSvcHdle,
 800b85a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8d0 <DIS_Init+0xe8>)
 800b85c:	8818      	ldrh	r0, [r3, #0]
 800b85e:	1d3a      	adds	r2, r7, #4
 800b860:	4b21      	ldr	r3, [pc, #132]	@ (800b8e8 <DIS_Init+0x100>)
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	2301      	movs	r3, #1
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	230a      	movs	r3, #10
 800b86a:	9303      	str	r3, [sp, #12]
 800b86c:	2300      	movs	r3, #0
 800b86e:	9302      	str	r3, [sp, #8]
 800b870:	2300      	movs	r3, #0
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	2302      	movs	r3, #2
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	2320      	movs	r3, #32
 800b87a:	2101      	movs	r1, #1
 800b87c:	f7ff fad6 	bl	800ae2c <aci_gatt_add_char>
 800b880:	4603      	mov	r3, r0
 800b882:	71fb      	strb	r3, [r7, #7]
                                   GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                                   10, /* encryKeySize */
                                   CHAR_VALUE_LEN_VARIABLE, /* isVariable */
                                   &(DIS_Context.ManufacturerNameStringCharHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800b884:	79fb      	ldrb	r3, [r7, #7]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10f      	bne.n	800b8aa <DIS_Init+0xc2>
  {
    BLE_DBG_DIS_MSG ("Manufacturer Name Characteristic Added Successfully  %04X \n", 
 800b88a:	4812      	ldr	r0, [pc, #72]	@ (800b8d4 <DIS_Init+0xec>)
 800b88c:	f001 f982 	bl	800cb94 <DbgTraceGetFileName>
 800b890:	4601      	mov	r1, r0
 800b892:	23a0      	movs	r3, #160	@ 0xa0
 800b894:	4a10      	ldr	r2, [pc, #64]	@ (800b8d8 <DIS_Init+0xf0>)
 800b896:	4811      	ldr	r0, [pc, #68]	@ (800b8dc <DIS_Init+0xf4>)
 800b898:	f004 f84c 	bl	800f934 <iprintf>
 800b89c:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d0 <DIS_Init+0xe8>)
 800b89e:	885b      	ldrh	r3, [r3, #2]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4812      	ldr	r0, [pc, #72]	@ (800b8ec <DIS_Init+0x104>)
 800b8a4:	f004 f846 	bl	800f934 <iprintf>
    BLE_DBG_DIS_MSG ("FAILED to add PNP ID Characteristic, Error: %02X !!\n", 
                hciCmdResult);
  }
#endif
      
  return;
 800b8a8:	e00e      	b.n	800b8c8 <DIS_Init+0xe0>
    BLE_DBG_DIS_MSG ("FAILED to add Manufacturer Name Characteristic, Error: %02X !!\n", 
 800b8aa:	480a      	ldr	r0, [pc, #40]	@ (800b8d4 <DIS_Init+0xec>)
 800b8ac:	f001 f972 	bl	800cb94 <DbgTraceGetFileName>
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	23a5      	movs	r3, #165	@ 0xa5
 800b8b4:	4a08      	ldr	r2, [pc, #32]	@ (800b8d8 <DIS_Init+0xf0>)
 800b8b6:	4809      	ldr	r0, [pc, #36]	@ (800b8dc <DIS_Init+0xf4>)
 800b8b8:	f004 f83c 	bl	800f934 <iprintf>
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	4619      	mov	r1, r3
 800b8c0:	480b      	ldr	r0, [pc, #44]	@ (800b8f0 <DIS_Init+0x108>)
 800b8c2:	f004 f837 	bl	800f934 <iprintf>
  return;
 800b8c6:	bf00      	nop
}
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	200001f4 	.word	0x200001f4
 800b8d4:	08012148 	.word	0x08012148
 800b8d8:	0801334c 	.word	0x0801334c
 800b8dc:	08012178 	.word	0x08012178
 800b8e0:	0801218c 	.word	0x0801218c
 800b8e4:	080121cc 	.word	0x080121cc
 800b8e8:	200001f6 	.word	0x200001f6
 800b8ec:	0801220c 	.word	0x0801220c
 800b8f0:	08012248 	.word	0x08012248

0800b8f4 <HeartRate_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t HeartRate_Event_Handler(void *Event)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08e      	sub	sp, #56	@ 0x38
 800b8f8:	af02      	add	r7, sp, #8
 800b8fa:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  HRS_App_Notification_evt_t Notification;
  
  return_value = SVCCTL_EvtNotAck;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3301      	adds	r3, #1
 800b906:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch(event_pckt->evt)
 800b908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	2bff      	cmp	r3, #255	@ 0xff
 800b90e:	f040 809a 	bne.w	800ba46 <HeartRate_Event_Handler+0x152>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b914:	3302      	adds	r3, #2
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
      switch(blecore_evt->ecode)
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f640 4201 	movw	r2, #3073	@ 0xc01
 800b922:	4293      	cmp	r3, r2
 800b924:	d04c      	beq.n	800b9c0 <HeartRate_Event_Handler+0xcc>
 800b926:	f640 4213 	movw	r2, #3091	@ 0xc13
 800b92a:	4293      	cmp	r3, r2
 800b92c:	f040 8085 	bne.w	800ba3a <HeartRate_Event_Handler+0x146>
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
        {
          aci_gatt_write_permit_req_event_rp0 * write_perm_req;

          BLE_DBG_HRS_MSG("ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE\n");
 800b930:	4848      	ldr	r0, [pc, #288]	@ (800ba54 <HeartRate_Event_Handler+0x160>)
 800b932:	f001 f92f 	bl	800cb94 <DbgTraceGetFileName>
 800b936:	4601      	mov	r1, r0
 800b938:	2370      	movs	r3, #112	@ 0x70
 800b93a:	4a47      	ldr	r2, [pc, #284]	@ (800ba58 <HeartRate_Event_Handler+0x164>)
 800b93c:	4847      	ldr	r0, [pc, #284]	@ (800ba5c <HeartRate_Event_Handler+0x168>)
 800b93e:	f003 fff9 	bl	800f934 <iprintf>
 800b942:	4847      	ldr	r0, [pc, #284]	@ (800ba60 <HeartRate_Event_Handler+0x16c>)
 800b944:	f004 f85e 	bl	800fa04 <puts>
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	3302      	adds	r3, #2
 800b94c:	623b      	str	r3, [r7, #32]

          if(write_perm_req->Attribute_Handle == (HRS_Context.ControlPointCharHdle + 1))
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	885b      	ldrh	r3, [r3, #2]
 800b952:	b29b      	uxth	r3, r3
 800b954:	461a      	mov	r2, r3
 800b956:	4b43      	ldr	r3, [pc, #268]	@ (800ba64 <HeartRate_Event_Handler+0x170>)
 800b958:	88db      	ldrh	r3, [r3, #6]
 800b95a:	3301      	adds	r3, #1
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d16e      	bne.n	800ba3e <HeartRate_Event_Handler+0x14a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b960:	2301      	movs	r3, #1
 800b962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            if (write_perm_req->Data[0] == HRS_CNTL_POINT_RESET_ENERGY_EXPENDED)
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	795b      	ldrb	r3, [r3, #5]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d117      	bne.n	800b99e <HeartRate_Event_Handler+0xaa>
            {
              /* received a correct value for HRM control point char */
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	b298      	uxth	r0, r3
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	885b      	ldrh	r3, [r3, #2]
 800b978:	b299      	uxth	r1, r3
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	791b      	ldrb	r3, [r3, #4]
                                      write_perm_req->Attribute_Handle,
                                      0x00, /* write_status = 0 (no error))*/
                                      (uint8_t)HRS_CNTL_POINT_VALUE_IS_SUPPORTED, /* err_code */
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
 800b97e:	6a3a      	ldr	r2, [r7, #32]
 800b980:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800b982:	9201      	str	r2, [sp, #4]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	2300      	movs	r3, #0
 800b988:	2200      	movs	r2, #0
 800b98a:	f7ff fc55 	bl	800b238 <aci_gatt_write_resp>

              /**
               * Notify the application to Reset The Energy Expended Value
               */
              Notification.HRS_Evt_Opcode = HRS_RESET_ENERGY_EXPENDED_EVT;
 800b98e:	2300      	movs	r3, #0
 800b990:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800b992:	f107 030c 	add.w	r3, r7, #12
 800b996:	4618      	mov	r0, r3
 800b998:	f002 fe76 	bl	800e688 <HRS_Notification>
                                      write_perm_req->Data_Length,
                                      (uint8_t *)&write_perm_req->Data[0]);
            }
          }
        }
        break;
 800b99c:	e04f      	b.n	800ba3e <HeartRate_Event_Handler+0x14a>
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800b99e:	6a3b      	ldr	r3, [r7, #32]
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	b298      	uxth	r0, r3
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	885b      	ldrh	r3, [r3, #2]
 800b9a8:	b299      	uxth	r1, r3
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	791b      	ldrb	r3, [r3, #4]
                                      (uint8_t *)&write_perm_req->Data[0]);
 800b9ae:	6a3a      	ldr	r2, [r7, #32]
 800b9b0:	3205      	adds	r2, #5
              aci_gatt_write_resp(write_perm_req->Connection_Handle,
 800b9b2:	9201      	str	r2, [sp, #4]
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	2380      	movs	r3, #128	@ 0x80
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f7ff fc3d 	bl	800b238 <aci_gatt_write_resp>
        break;
 800b9be:	e03e      	b.n	800ba3e <HeartRate_Event_Handler+0x14a>
#endif

        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
        {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	3302      	adds	r3, #2
 800b9c4:	61fb      	str	r3, [r7, #28]
          if(attribute_modified->Attr_Handle == (HRS_Context.HeartRatemeasurementCharHdle + 2))
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	885b      	ldrh	r3, [r3, #2]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	4b25      	ldr	r3, [pc, #148]	@ (800ba64 <HeartRate_Event_Handler+0x170>)
 800b9d0:	885b      	ldrh	r3, [r3, #2]
 800b9d2:	3302      	adds	r3, #2
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d134      	bne.n	800ba42 <HeartRate_Event_Handler+0x14e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /**
             * Notify the application to start measurement
             */
            if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	7a1b      	ldrb	r3, [r3, #8]
 800b9e2:	f003 0301 	and.w	r3, r3, #1
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d013      	beq.n	800ba12 <HeartRate_Event_Handler+0x11e>
            {
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_ENABLED\n");
 800b9ea:	481a      	ldr	r0, [pc, #104]	@ (800ba54 <HeartRate_Event_Handler+0x160>)
 800b9ec:	f001 f8d2 	bl	800cb94 <DbgTraceGetFileName>
 800b9f0:	4601      	mov	r1, r0
 800b9f2:	23a2      	movs	r3, #162	@ 0xa2
 800b9f4:	4a18      	ldr	r2, [pc, #96]	@ (800ba58 <HeartRate_Event_Handler+0x164>)
 800b9f6:	4819      	ldr	r0, [pc, #100]	@ (800ba5c <HeartRate_Event_Handler+0x168>)
 800b9f8:	f003 ff9c 	bl	800f934 <iprintf>
 800b9fc:	481a      	ldr	r0, [pc, #104]	@ (800ba68 <HeartRate_Event_Handler+0x174>)
 800b9fe:	f004 f801 	bl	800fa04 <puts>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_ENABLED;
 800ba02:	2301      	movs	r3, #1
 800ba04:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800ba06:	f107 030c 	add.w	r3, r7, #12
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f002 fe3c 	bl	800e688 <HRS_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              HRS_Notification(&Notification);
            }
#endif         
        }
        break;
 800ba10:	e017      	b.n	800ba42 <HeartRate_Event_Handler+0x14e>
              BLE_DBG_HRS_MSG("ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE HRS_NOTIFICATION_DISABLED\n");
 800ba12:	4810      	ldr	r0, [pc, #64]	@ (800ba54 <HeartRate_Event_Handler+0x160>)
 800ba14:	f001 f8be 	bl	800cb94 <DbgTraceGetFileName>
 800ba18:	4601      	mov	r1, r0
 800ba1a:	23a8      	movs	r3, #168	@ 0xa8
 800ba1c:	4a0e      	ldr	r2, [pc, #56]	@ (800ba58 <HeartRate_Event_Handler+0x164>)
 800ba1e:	480f      	ldr	r0, [pc, #60]	@ (800ba5c <HeartRate_Event_Handler+0x168>)
 800ba20:	f003 ff88 	bl	800f934 <iprintf>
 800ba24:	4811      	ldr	r0, [pc, #68]	@ (800ba6c <HeartRate_Event_Handler+0x178>)
 800ba26:	f003 ffed 	bl	800fa04 <puts>
              Notification.HRS_Evt_Opcode =HRS_NOTIFICATION_DISABLED;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	733b      	strb	r3, [r7, #12]
              HRS_Notification(&Notification);
 800ba2e:	f107 030c 	add.w	r3, r7, #12
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 fe28 	bl	800e688 <HRS_Notification>
        break;
 800ba38:	e003      	b.n	800ba42 <HeartRate_Event_Handler+0x14e>

        default:
          break;
 800ba3a:	bf00      	nop
 800ba3c:	e004      	b.n	800ba48 <HeartRate_Event_Handler+0x154>
        break;
 800ba3e:	bf00      	nop
 800ba40:	e002      	b.n	800ba48 <HeartRate_Event_Handler+0x154>
        break;
 800ba42:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ba44:	e000      	b.n	800ba48 <HeartRate_Event_Handler+0x154>

    default:
      break;
 800ba46:	bf00      	nop
  }

  return(return_value);
 800ba48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end HeartRate_Event_Handler */
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3730      	adds	r7, #48	@ 0x30
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	08012288 	.word	0x08012288
 800ba58:	08013358 	.word	0x08013358
 800ba5c:	080122b8 	.word	0x080122b8
 800ba60:	080122cc 	.word	0x080122cc
 800ba64:	200001f8 	.word	0x200001f8
 800ba68:	080122f4 	.word	0x080122f4
 800ba6c:	08012334 	.word	0x08012334

0800ba70 <Update_Char_BodySensorLocation>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_BodySensorLocation(HRS_BodySensorLocation_t *pBodySensorLocationValue)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af02      	add	r7, sp, #8
 800ba76:	6078      	str	r0, [r7, #4]
  tBleStatus return_value = BLE_STATUS_SUCCESS;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 800ba7c:	4b08      	ldr	r3, [pc, #32]	@ (800baa0 <Update_Char_BodySensorLocation+0x30>)
 800ba7e:	8818      	ldrh	r0, [r3, #0]
 800ba80:	4b07      	ldr	r3, [pc, #28]	@ (800baa0 <Update_Char_BodySensorLocation+0x30>)
 800ba82:	8899      	ldrh	r1, [r3, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	2301      	movs	r3, #1
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f7ff fad6 	bl	800b03c <aci_gatt_update_char_value>
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]
                                            HRS_Context.BodySensorLocationCharHdle,
                                            0, /* charValOffset */
                                            1, /* charValueLen */
                                            (uint8_t *) pBodySensorLocationValue);
  return return_value;
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
}/* end Update_Char_BodySensorLocation() */
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	200001f8 	.word	0x200001f8

0800baa4 <Update_Char_Measurement>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * @param  pBodySensorLocationValue: The address of the new value to be written
 * @retval None
 */
static tBleStatus Update_Char_Measurement (HRS_MeasVal_t *pMeasurement )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af02      	add	r7, sp, #8
 800baaa:	6078      	str	r0, [r7, #4]
  tBleStatus return_value=BLE_STATUS_SUCCESS;
 800baac:	2300      	movs	r3, #0
 800baae:	753b      	strb	r3, [r7, #20]
  uint8_t hrm_char_length;

  /**
   * Flags update
   */
  ahrm_value[0] = (uint8_t)pMeasurement->Flags;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	7a5b      	ldrb	r3, [r3, #9]
 800bab4:	733b      	strb	r3, [r7, #12]
  hrm_char_length = 1;
 800bab6:	2301      	movs	r3, #1
 800bab8:	75fb      	strb	r3, [r7, #23]

  /**
   *  Heart Rate Measurement Value
   */
  if ( (pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16 )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	7a5b      	ldrb	r3, [r3, #9]
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d018      	beq.n	800baf8 <Update_Char_Measurement+0x54>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue & 0xFF);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	881a      	ldrh	r2, [r3, #0]
 800baca:	7dfb      	ldrb	r3, [r7, #23]
 800bacc:	b2d2      	uxtb	r2, r2
 800bace:	3318      	adds	r3, #24
 800bad0:	443b      	add	r3, r7
 800bad2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
 800bad8:	3301      	adds	r3, #1
 800bada:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->MeasurementValue >> 8);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	881b      	ldrh	r3, [r3, #0]
 800bae0:	0a1b      	lsrs	r3, r3, #8
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	7dfb      	ldrb	r3, [r7, #23]
 800bae6:	b2d2      	uxtb	r2, r2
 800bae8:	3318      	adds	r3, #24
 800baea:	443b      	add	r3, r7
 800baec:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	3301      	adds	r3, #1
 800baf4:	75fb      	strb	r3, [r7, #23]
 800baf6:	e00a      	b.n	800bb0e <Update_Char_Measurement+0x6a>
  }
  else
  {
    ahrm_value[hrm_char_length] = (uint8_t)pMeasurement->MeasurementValue;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	881a      	ldrh	r2, [r3, #0]
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	b2d2      	uxtb	r2, r2
 800bb00:	3318      	adds	r3, #24
 800bb02:	443b      	add	r3, r7
 800bb04:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 800bb08:	7dfb      	ldrb	r3, [r7, #23]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  /**
   *  Energy Expended
   */
  if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	7a5b      	ldrb	r3, [r3, #9]
 800bb12:	f003 0308 	and.w	r3, r3, #8
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d017      	beq.n	800bb4a <Update_Char_Measurement+0xa6>
  {
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended & 0xFF);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	885a      	ldrh	r2, [r3, #2]
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	b2d2      	uxtb	r2, r2
 800bb22:	3318      	adds	r3, #24
 800bb24:	443b      	add	r3, r7
 800bb26:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	75fb      	strb	r3, [r7, #23]
    ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->EnergyExpended >> 8);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	885b      	ldrh	r3, [r3, #2]
 800bb34:	0a1b      	lsrs	r3, r3, #8
 800bb36:	b29a      	uxth	r2, r3
 800bb38:	7dfb      	ldrb	r3, [r7, #23]
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	3318      	adds	r3, #24
 800bb3e:	443b      	add	r3, r7
 800bb40:	f803 2c0c 	strb.w	r2, [r3, #-12]
    hrm_char_length++;
 800bb44:	7dfb      	ldrb	r3, [r7, #23]
 800bb46:	3301      	adds	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]

#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  /**
   *  RR Interval Values
   */
  if ((pMeasurement->Flags) &  HRS_HRM_RR_INTERVAL_PRESENT)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7a5b      	ldrb	r3, [r3, #9]
 800bb4e:	f003 0310 	and.w	r3, r3, #16
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d048      	beq.n	800bbe8 <Update_Char_Measurement+0x144>
  {
    uint8_t index;
    uint8_t rr_interval_number;

    if((pMeasurement->Flags) &  HRS_HRM_VALUE_FORMAT_UINT16)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7a5b      	ldrb	r3, [r3, #9]
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00d      	beq.n	800bb7e <Update_Char_Measurement+0xda>
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	7a5b      	ldrb	r3, [r3, #9]
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d003      	beq.n	800bb76 <Update_Char_Measurement+0xd2>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-2);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7a1b      	ldrb	r3, [r3, #8]
 800bb72:	757b      	strb	r3, [r7, #21]
 800bb74:	e010      	b.n	800bb98 <Update_Char_Measurement+0xf4>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	7a1b      	ldrb	r3, [r3, #8]
 800bb7a:	757b      	strb	r3, [r7, #21]
 800bb7c:	e00c      	b.n	800bb98 <Update_Char_Measurement+0xf4>
#endif
    }
    else
    {
#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
      if ((pMeasurement->Flags) &  HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7a5b      	ldrb	r3, [r3, #9]
 800bb82:	f003 0308 	and.w	r3, r3, #8
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <Update_Char_Measurement+0xee>
          rr_interval_number = (HRS_MAX_NBR_RR_INTERVAL_VALUES-1);
        }
        else
#endif
        {
          rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	7a1b      	ldrb	r3, [r3, #8]
 800bb8e:	757b      	strb	r3, [r7, #21]
 800bb90:	e002      	b.n	800bb98 <Update_Char_Measurement+0xf4>
        }
      }
      else
      {
        rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	7a1b      	ldrb	r3, [r3, #8]
 800bb96:	757b      	strb	r3, [r7, #21]
#else /**< (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0) */
      rr_interval_number = pMeasurement->NbreOfValidRRIntervalValues;
#endif
    }

    for ( index = 0 ; index < rr_interval_number ; index++ )
 800bb98:	2300      	movs	r3, #0
 800bb9a:	75bb      	strb	r3, [r7, #22]
 800bb9c:	e020      	b.n	800bbe0 <Update_Char_Measurement+0x13c>
    {
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] & 0xFF);
 800bb9e:	7dbb      	ldrb	r3, [r7, #22]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	4413      	add	r3, r2
 800bba6:	889a      	ldrh	r2, [r3, #4]
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	3318      	adds	r3, #24
 800bbae:	443b      	add	r3, r7
 800bbb0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 800bbb4:	7dfb      	ldrb	r3, [r7, #23]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	75fb      	strb	r3, [r7, #23]
      ahrm_value[hrm_char_length] = (uint8_t)(pMeasurement->aRRIntervalValues[index] >> 8);
 800bbba:	7dbb      	ldrb	r3, [r7, #22]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	005b      	lsls	r3, r3, #1
 800bbc0:	4413      	add	r3, r2
 800bbc2:	889b      	ldrh	r3, [r3, #4]
 800bbc4:	0a1b      	lsrs	r3, r3, #8
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	3318      	adds	r3, #24
 800bbce:	443b      	add	r3, r7
 800bbd0:	f803 2c0c 	strb.w	r2, [r3, #-12]
      hrm_char_length++;
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	75fb      	strb	r3, [r7, #23]
    for ( index = 0 ; index < rr_interval_number ; index++ )
 800bbda:	7dbb      	ldrb	r3, [r7, #22]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	75bb      	strb	r3, [r7, #22]
 800bbe0:	7dba      	ldrb	r2, [r7, #22]
 800bbe2:	7d7b      	ldrb	r3, [r7, #21]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d3da      	bcc.n	800bb9e <Update_Char_Measurement+0xfa>
    }
  }

#endif  /**< (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0) */

  return_value = aci_gatt_update_char_value(HRS_Context.HeartRateSvcHdle,
 800bbe8:	4b09      	ldr	r3, [pc, #36]	@ (800bc10 <Update_Char_Measurement+0x16c>)
 800bbea:	8818      	ldrh	r0, [r3, #0]
 800bbec:	4b08      	ldr	r3, [pc, #32]	@ (800bc10 <Update_Char_Measurement+0x16c>)
 800bbee:	8859      	ldrh	r1, [r3, #2]
 800bbf0:	7dfa      	ldrb	r2, [r7, #23]
 800bbf2:	f107 030c 	add.w	r3, r7, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f7ff fa1e 	bl	800b03c <aci_gatt_update_char_value>
 800bc00:	4603      	mov	r3, r0
 800bc02:	753b      	strb	r3, [r7, #20]
                                            HRS_Context.HeartRatemeasurementCharHdle,
                                            0, /* charValOffset */
                                            hrm_char_length, /* charValueLen */
                                            (uint8_t *) &ahrm_value[0]);

  return return_value;
 800bc04:	7d3b      	ldrb	r3, [r7, #20]
}/* end Update_Char_Measurement() */
 800bc06:	4618      	mov	r0, r3
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200001f8 	.word	0x200001f8

0800bc14 <HRS_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void HRS_Init(void)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af06      	add	r7, sp, #24
  uint16_t uuid;
  tBleStatus hciCmdResult = BLE_STATUS_SUCCESS;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	71fb      	strb	r3, [r7, #7]

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(HeartRate_Event_Handler);
 800bc1e:	4874      	ldr	r0, [pc, #464]	@ (800bdf0 <HRS_Init+0x1dc>)
 800bc20:	f000 f9d2 	bl	800bfc8 <SVCCTL_RegisterSvcHandler>
   *                                2 for hear rate measurement characteristic +
   *                                1 for client char configuration descriptor +
   *                                2 for body sensor location characteristic +
   *                                2 for control point characteristic
   */
  uuid = HEART_RATE_SERVICE_UUID;
 800bc24:	f641 030d 	movw	r3, #6157	@ 0x180d
 800bc28:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_service(UUID_TYPE_16,
 800bc2a:	1d39      	adds	r1, r7, #4
 800bc2c:	4b71      	ldr	r3, [pc, #452]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	2308      	movs	r3, #8
 800bc32:	2201      	movs	r2, #1
 800bc34:	2001      	movs	r0, #1
 800bc36:	f7ff f823 	bl	800ac80 <aci_gatt_add_service>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	71fb      	strb	r3, [r7, #7]
                                   2+
#endif
                                   4,
                                   &(HRS_Context.HeartRateSvcHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d110      	bne.n	800bc66 <HRS_Init+0x52>
  {
    BLE_DBG_HRS_MSG ("Heart Rate Service (HRS) is added Successfully %04X\n",
 800bc44:	486c      	ldr	r0, [pc, #432]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bc46:	f000 ffa5 	bl	800cb94 <DbgTraceGetFileName>
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	f240 13b1 	movw	r3, #433	@ 0x1b1
 800bc50:	4a6a      	ldr	r2, [pc, #424]	@ (800bdfc <HRS_Init+0x1e8>)
 800bc52:	486b      	ldr	r0, [pc, #428]	@ (800be00 <HRS_Init+0x1ec>)
 800bc54:	f003 fe6e 	bl	800f934 <iprintf>
 800bc58:	4b66      	ldr	r3, [pc, #408]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4869      	ldr	r0, [pc, #420]	@ (800be04 <HRS_Init+0x1f0>)
 800bc60:	f003 fe68 	bl	800f934 <iprintf>
 800bc64:	e00e      	b.n	800bc84 <HRS_Init+0x70>
                        HRS_Context.HeartRateSvcHdle);
  }
  else
  {
    BLE_DBG_HRS_MSG ("FAILED to add Heart Rate Service (HRS), Error: %02X !!\n",
 800bc66:	4864      	ldr	r0, [pc, #400]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bc68:	f000 ff94 	bl	800cb94 <DbgTraceGetFileName>
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 800bc72:	4a62      	ldr	r2, [pc, #392]	@ (800bdfc <HRS_Init+0x1e8>)
 800bc74:	4862      	ldr	r0, [pc, #392]	@ (800be00 <HRS_Init+0x1ec>)
 800bc76:	f003 fe5d 	bl	800f934 <iprintf>
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	4862      	ldr	r0, [pc, #392]	@ (800be08 <HRS_Init+0x1f4>)
 800bc80:	f003 fe58 	bl	800f934 <iprintf>
  }

  /**
   *  Add Heart Rate Measurement Characteristic
   */
  uuid = HEART_RATE_MEASURMENT_UUID;
 800bc84:	f642 2337 	movw	r3, #10807	@ 0x2a37
 800bc88:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800bc8a:	4b5a      	ldr	r3, [pc, #360]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bc8c:	8818      	ldrh	r0, [r3, #0]
 800bc8e:	1d3a      	adds	r2, r7, #4
 800bc90:	4b5e      	ldr	r3, [pc, #376]	@ (800be0c <HRS_Init+0x1f8>)
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	2301      	movs	r3, #1
 800bc96:	9304      	str	r3, [sp, #16]
 800bc98:	230a      	movs	r3, #10
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9302      	str	r3, [sp, #8]
 800bca0:	2300      	movs	r3, #0
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	2310      	movs	r3, #16
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	2307      	movs	r3, #7
 800bcaa:	2101      	movs	r1, #1
 800bcac:	f7ff f8be 	bl	800ae2c <aci_gatt_add_char>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	71fb      	strb	r3, [r7, #7]
                                   GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                                   10, /* encryKeySize */
                                   1, /* isVariable */
                                   &(HRS_Context.HeartRatemeasurementCharHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d110      	bne.n	800bcdc <HRS_Init+0xc8>
  {
    BLE_DBG_HRS_MSG ("Heart Rate Measurement Characteristic Added Successfully  %04X \n",
 800bcba:	484f      	ldr	r0, [pc, #316]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bcbc:	f000 ff6a 	bl	800cb94 <DbgTraceGetFileName>
 800bcc0:	4601      	mov	r1, r0
 800bcc2:	f44f 73e9 	mov.w	r3, #466	@ 0x1d2
 800bcc6:	4a4d      	ldr	r2, [pc, #308]	@ (800bdfc <HRS_Init+0x1e8>)
 800bcc8:	484d      	ldr	r0, [pc, #308]	@ (800be00 <HRS_Init+0x1ec>)
 800bcca:	f003 fe33 	bl	800f934 <iprintf>
 800bcce:	4b49      	ldr	r3, [pc, #292]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bcd0:	885b      	ldrh	r3, [r3, #2]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	484e      	ldr	r0, [pc, #312]	@ (800be10 <HRS_Init+0x1fc>)
 800bcd6:	f003 fe2d 	bl	800f934 <iprintf>
 800bcda:	e00e      	b.n	800bcfa <HRS_Init+0xe6>
                        HRS_Context.HeartRatemeasurementCharHdle);
  }
  else
  {
    BLE_DBG_HRS_MSG ("FAILED to add Heart Rate Measurement Characteristic, Error: %02X !!\n",
 800bcdc:	4846      	ldr	r0, [pc, #280]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bcde:	f000 ff59 	bl	800cb94 <DbgTraceGetFileName>
 800bce2:	4601      	mov	r1, r0
 800bce4:	f240 13d7 	movw	r3, #471	@ 0x1d7
 800bce8:	4a44      	ldr	r2, [pc, #272]	@ (800bdfc <HRS_Init+0x1e8>)
 800bcea:	4845      	ldr	r0, [pc, #276]	@ (800be00 <HRS_Init+0x1ec>)
 800bcec:	f003 fe22 	bl	800f934 <iprintf>
 800bcf0:	79fb      	ldrb	r3, [r7, #7]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	4847      	ldr	r0, [pc, #284]	@ (800be14 <HRS_Init+0x200>)
 800bcf6:	f003 fe1d 	bl	800f934 <iprintf>

#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
  /**
   *  Add Body Sensor Location Characteristic
   */
  uuid = SENSOR_LOCATION_UUID;
 800bcfa:	f642 2338 	movw	r3, #10808	@ 0x2a38
 800bcfe:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800bd00:	4b3c      	ldr	r3, [pc, #240]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bd02:	8818      	ldrh	r0, [r3, #0]
 800bd04:	1d3a      	adds	r2, r7, #4
 800bd06:	4b44      	ldr	r3, [pc, #272]	@ (800be18 <HRS_Init+0x204>)
 800bd08:	9305      	str	r3, [sp, #20]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	230a      	movs	r3, #10
 800bd10:	9303      	str	r3, [sp, #12]
 800bd12:	2300      	movs	r3, #0
 800bd14:	9302      	str	r3, [sp, #8]
 800bd16:	2300      	movs	r3, #0
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	2301      	movs	r3, #1
 800bd20:	2101      	movs	r1, #1
 800bd22:	f7ff f883 	bl	800ae2c <aci_gatt_add_char>
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
                                   GATT_DONT_NOTIFY_EVENTS, /* gattEvtMask */
                                   10, /* encryKeySize */
                                   0, /* isVariable: 0 */
                                   &(HRS_Context.BodySensorLocationCharHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d110      	bne.n	800bd52 <HRS_Init+0x13e>
  {
    BLE_DBG_HRS_MSG ("Sensor Location Characteristic Added Successfully  %04X \n",
 800bd30:	4831      	ldr	r0, [pc, #196]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bd32:	f000 ff2f 	bl	800cb94 <DbgTraceGetFileName>
 800bd36:	4601      	mov	r1, r0
 800bd38:	f240 13ed 	movw	r3, #493	@ 0x1ed
 800bd3c:	4a2f      	ldr	r2, [pc, #188]	@ (800bdfc <HRS_Init+0x1e8>)
 800bd3e:	4830      	ldr	r0, [pc, #192]	@ (800be00 <HRS_Init+0x1ec>)
 800bd40:	f003 fdf8 	bl	800f934 <iprintf>
 800bd44:	4b2b      	ldr	r3, [pc, #172]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bd46:	889b      	ldrh	r3, [r3, #4]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4834      	ldr	r0, [pc, #208]	@ (800be1c <HRS_Init+0x208>)
 800bd4c:	f003 fdf2 	bl	800f934 <iprintf>
 800bd50:	e00e      	b.n	800bd70 <HRS_Init+0x15c>
                        HRS_Context.BodySensorLocationCharHdle);
  }
  else
  {
    BLE_DBG_HRS_MSG ("FAILED to add Sensor Location Characteristic, Error: %02X !!\n",
 800bd52:	4829      	ldr	r0, [pc, #164]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bd54:	f000 ff1e 	bl	800cb94 <DbgTraceGetFileName>
 800bd58:	4601      	mov	r1, r0
 800bd5a:	f44f 73f9 	mov.w	r3, #498	@ 0x1f2
 800bd5e:	4a27      	ldr	r2, [pc, #156]	@ (800bdfc <HRS_Init+0x1e8>)
 800bd60:	4827      	ldr	r0, [pc, #156]	@ (800be00 <HRS_Init+0x1ec>)
 800bd62:	f003 fde7 	bl	800f934 <iprintf>
 800bd66:	79fb      	ldrb	r3, [r7, #7]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	482d      	ldr	r0, [pc, #180]	@ (800be20 <HRS_Init+0x20c>)
 800bd6c:	f003 fde2 	bl	800f934 <iprintf>
  }

#endif

#if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  uuid = CONTROL_POINT_UUID;
 800bd70:	f642 2339 	movw	r3, #10809	@ 0x2a39
 800bd74:	80bb      	strh	r3, [r7, #4]
  hciCmdResult = aci_gatt_add_char(HRS_Context.HeartRateSvcHdle,
 800bd76:	4b1f      	ldr	r3, [pc, #124]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bd78:	8818      	ldrh	r0, [r3, #0]
 800bd7a:	1d3a      	adds	r2, r7, #4
 800bd7c:	4b29      	ldr	r3, [pc, #164]	@ (800be24 <HRS_Init+0x210>)
 800bd7e:	9305      	str	r3, [sp, #20]
 800bd80:	2300      	movs	r3, #0
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	230a      	movs	r3, #10
 800bd86:	9303      	str	r3, [sp, #12]
 800bd88:	2302      	movs	r3, #2
 800bd8a:	9302      	str	r3, [sp, #8]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	9301      	str	r3, [sp, #4]
 800bd90:	2308      	movs	r3, #8
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	2301      	movs	r3, #1
 800bd96:	2101      	movs	r1, #1
 800bd98:	f7ff f848 	bl	800ae2c <aci_gatt_add_char>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	71fb      	strb	r3, [r7, #7]
                                   GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP, /* gattEvtMask */
                                   10, /* encryKeySize */
                                   0, /* isVariable: 0*/
                                   &(HRS_Context.ControlPointCharHdle));

  if (hciCmdResult == BLE_STATUS_SUCCESS)
 800bda0:	79fb      	ldrb	r3, [r7, #7]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d110      	bne.n	800bdc8 <HRS_Init+0x1b4>
  {
    BLE_DBG_HRS_MSG ("Control Point Characteristic Added Successfully  %04X \n",
 800bda6:	4814      	ldr	r0, [pc, #80]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bda8:	f000 fef4 	bl	800cb94 <DbgTraceGetFileName>
 800bdac:	4601      	mov	r1, r0
 800bdae:	f240 2307 	movw	r3, #519	@ 0x207
 800bdb2:	4a12      	ldr	r2, [pc, #72]	@ (800bdfc <HRS_Init+0x1e8>)
 800bdb4:	4812      	ldr	r0, [pc, #72]	@ (800be00 <HRS_Init+0x1ec>)
 800bdb6:	f003 fdbd 	bl	800f934 <iprintf>
 800bdba:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf4 <HRS_Init+0x1e0>)
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	4819      	ldr	r0, [pc, #100]	@ (800be28 <HRS_Init+0x214>)
 800bdc2:	f003 fdb7 	bl	800f934 <iprintf>
  }
#endif
  
  
  
  return;
 800bdc6:	e00f      	b.n	800bde8 <HRS_Init+0x1d4>
    BLE_DBG_HRS_MSG ("FAILED to add Control Point Characteristic, Error: %02X !!\n",
 800bdc8:	480b      	ldr	r0, [pc, #44]	@ (800bdf8 <HRS_Init+0x1e4>)
 800bdca:	f000 fee3 	bl	800cb94 <DbgTraceGetFileName>
 800bdce:	4601      	mov	r1, r0
 800bdd0:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 800bdd4:	4a09      	ldr	r2, [pc, #36]	@ (800bdfc <HRS_Init+0x1e8>)
 800bdd6:	480a      	ldr	r0, [pc, #40]	@ (800be00 <HRS_Init+0x1ec>)
 800bdd8:	f003 fdac 	bl	800f934 <iprintf>
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	4619      	mov	r1, r3
 800bde0:	4812      	ldr	r0, [pc, #72]	@ (800be2c <HRS_Init+0x218>)
 800bde2:	f003 fda7 	bl	800f934 <iprintf>
  return;
 800bde6:	bf00      	nop
}
 800bde8:	3708      	adds	r7, #8
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	0800b8f5 	.word	0x0800b8f5
 800bdf4:	200001f8 	.word	0x200001f8
 800bdf8:	08012288 	.word	0x08012288
 800bdfc:	08013370 	.word	0x08013370
 800be00:	080122b8 	.word	0x080122b8
 800be04:	08012378 	.word	0x08012378
 800be08:	080123b0 	.word	0x080123b0
 800be0c:	200001fa 	.word	0x200001fa
 800be10:	080123e8 	.word	0x080123e8
 800be14:	0801242c 	.word	0x0801242c
 800be18:	200001fc 	.word	0x200001fc
 800be1c:	08012474 	.word	0x08012474
 800be20:	080124b0 	.word	0x080124b0
 800be24:	200001fe 	.word	0x200001fe
 800be28:	080124f0 	.word	0x080124f0
 800be2c:	08012528 	.word	0x08012528

0800be30 <HRS_UpdateChar>:
 * @brief  Characteristic update
 * @param  UUID: UUID of the characteristic
 * @retval BodySensorLocationValue: The new value to be written
 */
tBleStatus HRS_UpdateChar(uint16_t UUID, uint8_t *pPayload)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	80fb      	strh	r3, [r7, #6]
  tBleStatus return_value=0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800be40:	88fb      	ldrh	r3, [r7, #6]
 800be42:	f642 2237 	movw	r2, #10807	@ 0x2a37
 800be46:	4293      	cmp	r3, r2
 800be48:	d009      	beq.n	800be5e <HRS_UpdateChar+0x2e>
 800be4a:	f642 2238 	movw	r2, #10808	@ 0x2a38
 800be4e:	4293      	cmp	r3, r2
 800be50:	d10b      	bne.n	800be6a <HRS_UpdateChar+0x3a>
  {
#if (BLE_CFG_HRS_BODY_SENSOR_LOCATION_CHAR != 0)
    case SENSOR_LOCATION_UUID:
      return_value = Update_Char_BodySensorLocation((HRS_BodySensorLocation_t*)pPayload);
 800be52:	6838      	ldr	r0, [r7, #0]
 800be54:	f7ff fe0c 	bl	800ba70 <Update_Char_BodySensorLocation>
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
      break;
 800be5c:	e006      	b.n	800be6c <HRS_UpdateChar+0x3c>
#endif
    case HEART_RATE_MEASURMENT_UUID:
      return_value = Update_Char_Measurement((HRS_MeasVal_t*)pPayload);
 800be5e:	6838      	ldr	r0, [r7, #0]
 800be60:	f7ff fe20 	bl	800baa4 <Update_Char_Measurement>
 800be64:	4603      	mov	r3, r0
 800be66:	73fb      	strb	r3, [r7, #15]
      break;
 800be68:	e000      	b.n	800be6c <HRS_UpdateChar+0x3c>

    default:
      break;
 800be6a:	bf00      	nop
  }

  return return_value;
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
}/* end HRS_UpdateChar() */
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800be76:	b480      	push	{r7}
 800be78:	af00      	add	r7, sp, #0
  return;
 800be7a:	bf00      	nop
}
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800be84:	b480      	push	{r7}
 800be86:	af00      	add	r7, sp, #0
  return;
 800be88:	bf00      	nop
}
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800be92:	b480      	push	{r7}
 800be94:	af00      	add	r7, sp, #0
  return;
 800be96:	bf00      	nop
}
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <EDS_STM_Init>:
__WEAK void DIS_Init( void )
{
  return;
}
__WEAK void EDS_STM_Init( void )
{
 800bea0:	b480      	push	{r7}
 800bea2:	af00      	add	r7, sp, #0
  return;
 800bea4:	bf00      	nop
}
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800beae:	b480      	push	{r7}
 800beb0:	af00      	add	r7, sp, #0
  return;
 800beb2:	bf00      	nop
}
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <HTS_Init>:
__WEAK void HRS_Init( void )
{
  return;
}
__WEAK void HTS_Init( void )
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0
  return;
 800bec0:	bf00      	nop
}
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800beca:	b480      	push	{r7}
 800becc:	af00      	add	r7, sp, #0
  return;
 800bece:	bf00      	nop
}
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800bed8:	b480      	push	{r7}
 800beda:	af00      	add	r7, sp, #0
  return;
 800bedc:	bf00      	nop
}
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800bee6:	b480      	push	{r7}
 800bee8:	af00      	add	r7, sp, #0
  return;
 800beea:	bf00      	nop
}
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800bef4:	b480      	push	{r7}
 800bef6:	af00      	add	r7, sp, #0
  return;
 800bef8:	bf00      	nop
}
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800bf02:	b480      	push	{r7}
 800bf04:	af00      	add	r7, sp, #0
  return;
 800bf06:	bf00      	nop
}
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800bf10:	b480      	push	{r7}
 800bf12:	af00      	add	r7, sp, #0
  return;
 800bf14:	bf00      	nop
}
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800bf1e:	b480      	push	{r7}
 800bf20:	af00      	add	r7, sp, #0
  return;
 800bf22:	bf00      	nop
}
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
  return;
 800bf30:	bf00      	nop
}
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	af00      	add	r7, sp, #0
  return;
 800bf3e:	bf00      	nop
}
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
  return;
 800bf4c:	bf00      	nop
}
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
	...

0800bf58 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bf5c:	4b04      	ldr	r3, [pc, #16]	@ (800bf70 <SVCCTL_Init+0x18>)
 800bf5e:	2200      	movs	r2, #0
 800bf60:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bf62:	4b04      	ldr	r3, [pc, #16]	@ (800bf74 <SVCCTL_Init+0x1c>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bf68:	f000 f806 	bl	800bf78 <SVCCTL_SvcInit>

  return;
 800bf6c:	bf00      	nop
}
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000200 	.word	0x20000200
 800bf74:	20000220 	.word	0x20000220

0800bf78 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  BAS_Init();
 800bf7c:	f7ff ff7b 	bl	800be76 <BAS_Init>

  BLS_Init();
 800bf80:	f7ff ff80 	bl	800be84 <BLS_Init>

  CRS_STM_Init();
 800bf84:	f7ff ff85 	bl	800be92 <CRS_STM_Init>

  DIS_Init();
 800bf88:	f7ff fc2e 	bl	800b7e8 <DIS_Init>

  EDS_STM_Init();
 800bf8c:	f7ff ff88 	bl	800bea0 <EDS_STM_Init>

  HIDS_Init();
 800bf90:	f7ff ff8d 	bl	800beae <HIDS_Init>

  HRS_Init();
 800bf94:	f7ff fe3e 	bl	800bc14 <HRS_Init>

  HTS_Init();
 800bf98:	f7ff ff90 	bl	800bebc <HTS_Init>

  IAS_Init();
 800bf9c:	f7ff ff95 	bl	800beca <IAS_Init>

  LLS_Init();
 800bfa0:	f7ff ff9a 	bl	800bed8 <LLS_Init>

  TPS_Init();
 800bfa4:	f7ff ff9f 	bl	800bee6 <TPS_Init>

  MOTENV_STM_Init();
 800bfa8:	f7ff ffa4 	bl	800bef4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800bfac:	f7ff ffa9 	bl	800bf02 <P2PS_STM_Init>

  ZDD_STM_Init();
 800bfb0:	f7ff ffae 	bl	800bf10 <ZDD_STM_Init>

  OTAS_STM_Init();
 800bfb4:	f7ff ffb3 	bl	800bf1e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800bfb8:	f7ff ffbf 	bl	800bf3a <BVOPUS_STM_Init>

  MESH_Init();
 800bfbc:	f7ff ffb6 	bl	800bf2c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800bfc0:	f7ff ffc2 	bl	800bf48 <SVCCTL_InitCustomSvc>
  
  return;
 800bfc4:	bf00      	nop
}
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800bfd0:	4b09      	ldr	r3, [pc, #36]	@ (800bff8 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfd2:	7f1b      	ldrb	r3, [r3, #28]
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	4a08      	ldr	r2, [pc, #32]	@ (800bff8 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800bfde:	4b06      	ldr	r3, [pc, #24]	@ (800bff8 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfe0:	7f1b      	ldrb	r3, [r3, #28]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	4b04      	ldr	r3, [pc, #16]	@ (800bff8 <SVCCTL_RegisterSvcHandler+0x30>)
 800bfe8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800bfea:	bf00      	nop
}
 800bfec:	370c      	adds	r7, #12
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	20000200 	.word	0x20000200

0800bffc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3301      	adds	r3, #1
 800c008:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c00a:	2300      	movs	r3, #0
 800c00c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2bff      	cmp	r3, #255	@ 0xff
 800c014:	d125      	bne.n	800c062 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	3302      	adds	r3, #2
 800c01a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	b29b      	uxth	r3, r3
 800c022:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c02a:	d118      	bne.n	800c05e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c02c:	2300      	movs	r3, #0
 800c02e:	757b      	strb	r3, [r7, #21]
 800c030:	e00d      	b.n	800c04e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c032:	7d7b      	ldrb	r3, [r7, #21]
 800c034:	4a1a      	ldr	r2, [pc, #104]	@ (800c0a0 <SVCCTL_UserEvtRx+0xa4>)
 800c036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	4798      	blx	r3
 800c03e:	4603      	mov	r3, r0
 800c040:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c042:	7dfb      	ldrb	r3, [r7, #23]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d108      	bne.n	800c05a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c048:	7d7b      	ldrb	r3, [r7, #21]
 800c04a:	3301      	adds	r3, #1
 800c04c:	757b      	strb	r3, [r7, #21]
 800c04e:	4b14      	ldr	r3, [pc, #80]	@ (800c0a0 <SVCCTL_UserEvtRx+0xa4>)
 800c050:	7f1b      	ldrb	r3, [r3, #28]
 800c052:	7d7a      	ldrb	r2, [r7, #21]
 800c054:	429a      	cmp	r2, r3
 800c056:	d3ec      	bcc.n	800c032 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800c058:	e002      	b.n	800c060 <SVCCTL_UserEvtRx+0x64>
              break;
 800c05a:	bf00      	nop
          break;
 800c05c:	e000      	b.n	800c060 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800c05e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c060:	e000      	b.n	800c064 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800c062:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	2b02      	cmp	r3, #2
 800c068:	d00f      	beq.n	800c08a <SVCCTL_UserEvtRx+0x8e>
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	dc10      	bgt.n	800c090 <SVCCTL_UserEvtRx+0x94>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <SVCCTL_UserEvtRx+0x7c>
 800c072:	2b01      	cmp	r3, #1
 800c074:	d006      	beq.n	800c084 <SVCCTL_UserEvtRx+0x88>
 800c076:	e00b      	b.n	800c090 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 fc01 	bl	800d880 <SVCCTL_App_Notification>
 800c07e:	4603      	mov	r3, r0
 800c080:	75bb      	strb	r3, [r7, #22]
      break;
 800c082:	e008      	b.n	800c096 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c084:	2301      	movs	r3, #1
 800c086:	75bb      	strb	r3, [r7, #22]
      break;
 800c088:	e005      	b.n	800c096 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c08a:	2300      	movs	r3, #0
 800c08c:	75bb      	strb	r3, [r7, #22]
      break;
 800c08e:	e002      	b.n	800c096 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c090:	2301      	movs	r3, #1
 800c092:	75bb      	strb	r3, [r7, #22]
      break;
 800c094:	bf00      	nop
  }

  return (return_status);
 800c096:	7dbb      	ldrb	r3, [r7, #22]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	20000200 	.word	0x20000200

0800c0a4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	212e      	movs	r1, #46	@ 0x2e
 800c0bc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800c0c0:	f000 fae8 	bl	800c694 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	330b      	adds	r3, #11
 800c0c8:	78db      	ldrb	r3, [r3, #3]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3720      	adds	r7, #32
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b088      	sub	sp, #32
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c0da:	f107 030c 	add.w	r3, r7, #12
 800c0de:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	210f      	movs	r1, #15
 800c0ea:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800c0ee:	f000 fad1 	bl	800c694 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	330b      	adds	r3, #11
 800c0f6:	78db      	ldrb	r3, [r3, #3]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3720      	adds	r7, #32
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800c108:	f107 030c 	add.w	r3, r7, #12
 800c10c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	2110      	movs	r1, #16
 800c114:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800c118:	f000 fabc 	bl	800c694 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	330b      	adds	r3, #11
 800c120:	78db      	ldrb	r3, [r3, #3]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3720      	adds	r7, #32
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800c12c:	b480      	push	{r7}
 800c12e:	b08b      	sub	sp, #44	@ 0x2c
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800c144:	2300      	movs	r3, #0
 800c146:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800c148:	2300      	movs	r3, #0
 800c14a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800c150:	2300      	movs	r3, #0
 800c152:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800c154:	4b4a      	ldr	r3, [pc, #296]	@ (800c280 <SHCI_GetWirelessFwInfo+0x154>)
 800c156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c158:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c15c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800c166:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a44      	ldr	r2, [pc, #272]	@ (800c284 <SHCI_GetWirelessFwInfo+0x158>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d10f      	bne.n	800c198 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	695b      	ldr	r3, [r3, #20]
 800c17c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	617b      	str	r3, [r7, #20]
 800c196:	e01a      	b.n	800c1ce <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800c1a0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800c1a4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d0:	0e1b      	lsrs	r3, r3, #24
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1da:	0c1b      	lsrs	r3, r3, #16
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e4:	0a1b      	lsrs	r3, r3, #8
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	091b      	lsrs	r3, r3, #4
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	f003 030f 	and.w	r3, r3, #15
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f003 030f 	and.w	r3, r3, #15
 800c204:	b2da      	uxtb	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	0e1b      	lsrs	r3, r3, #24
 800c20e:	b2da      	uxtb	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	0c1b      	lsrs	r3, r3, #16
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800c21e:	6a3b      	ldr	r3, [r7, #32]
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	b2da      	uxtb	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	b2da      	uxtb	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	0e1b      	lsrs	r3, r3, #24
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800c242:	69bb      	ldr	r3, [r7, #24]
 800c244:	0c1b      	lsrs	r3, r3, #16
 800c246:	b2da      	uxtb	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800c24c:	69bb      	ldr	r3, [r7, #24]
 800c24e:	0a1b      	lsrs	r3, r3, #8
 800c250:	b2da      	uxtb	r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	0e1b      	lsrs	r3, r3, #24
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	0c1b      	lsrs	r3, r3, #16
 800c264:	b2da      	uxtb	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	b2da      	uxtb	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	372c      	adds	r7, #44	@ 0x2c
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	58004000 	.word	0x58004000
 800c284:	a94656b9 	.word	0xa94656b9

0800c288 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	4a08      	ldr	r2, [pc, #32]	@ (800c2b8 <hci_init+0x30>)
 800c298:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800c29a:	4a08      	ldr	r2, [pc, #32]	@ (800c2bc <hci_init+0x34>)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800c2a0:	4806      	ldr	r0, [pc, #24]	@ (800c2bc <hci_init+0x34>)
 800c2a2:	f000 f979 	bl	800c598 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f8da 	bl	800c464 <TlInit>

  return;
 800c2b0:	bf00      	nop
}
 800c2b2:	3708      	adds	r7, #8
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	20000678 	.word	0x20000678
 800c2bc:	20000650 	.word	0x20000650

0800c2c0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c2c6:	4822      	ldr	r0, [pc, #136]	@ (800c350 <hci_user_evt_proc+0x90>)
 800c2c8:	f000 fd7a 	bl	800cdc0 <LST_is_empty>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d12b      	bne.n	800c32a <hci_user_evt_proc+0x6a>
 800c2d2:	4b20      	ldr	r3, [pc, #128]	@ (800c354 <hci_user_evt_proc+0x94>)
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d027      	beq.n	800c32a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c2da:	f107 030c 	add.w	r3, r7, #12
 800c2de:	4619      	mov	r1, r3
 800c2e0:	481b      	ldr	r0, [pc, #108]	@ (800c350 <hci_user_evt_proc+0x90>)
 800c2e2:	f000 fdfc 	bl	800cede <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800c2e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c358 <hci_user_evt_proc+0x98>)
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00c      	beq.n	800c308 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c2f6:	4b18      	ldr	r3, [pc, #96]	@ (800c358 <hci_user_evt_proc+0x98>)
 800c2f8:	69db      	ldr	r3, [r3, #28]
 800c2fa:	1d3a      	adds	r2, r7, #4
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800c300:	793a      	ldrb	r2, [r7, #4]
 800c302:	4b14      	ldr	r3, [pc, #80]	@ (800c354 <hci_user_evt_proc+0x94>)
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	e002      	b.n	800c30e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c308:	4b12      	ldr	r3, [pc, #72]	@ (800c354 <hci_user_evt_proc+0x94>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800c30e:	4b11      	ldr	r3, [pc, #68]	@ (800c354 <hci_user_evt_proc+0x94>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d004      	beq.n	800c320 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 fb9b 	bl	800ca54 <TL_MM_EvtDone>
 800c31e:	e004      	b.n	800c32a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	4619      	mov	r1, r3
 800c324:	480a      	ldr	r0, [pc, #40]	@ (800c350 <hci_user_evt_proc+0x90>)
 800c326:	f000 fd6d 	bl	800ce04 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800c32a:	4809      	ldr	r0, [pc, #36]	@ (800c350 <hci_user_evt_proc+0x90>)
 800c32c:	f000 fd48 	bl	800cdc0 <LST_is_empty>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d107      	bne.n	800c346 <hci_user_evt_proc+0x86>
 800c336:	4b07      	ldr	r3, [pc, #28]	@ (800c354 <hci_user_evt_proc+0x94>)
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d003      	beq.n	800c346 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800c33e:	4804      	ldr	r0, [pc, #16]	@ (800c350 <hci_user_evt_proc+0x90>)
 800c340:	f002 f941 	bl	800e5c6 <hci_notify_asynch_evt>
  }


  return;
 800c344:	bf00      	nop
 800c346:	bf00      	nop
}
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20000228 	.word	0x20000228
 800c354:	20000234 	.word	0x20000234
 800c358:	20000650 	.word	0x20000650

0800c35c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b088      	sub	sp, #32
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800c368:	2000      	movs	r0, #0
 800c36a:	f000 f8d1 	bl	800c510 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800c36e:	2300      	movs	r3, #0
 800c370:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	885b      	ldrh	r3, [r3, #2]
 800c376:	b21b      	sxth	r3, r3
 800c378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c37c:	b21a      	sxth	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	029b      	lsls	r3, r3, #10
 800c384:	b21b      	sxth	r3, r3
 800c386:	4313      	orrs	r3, r2
 800c388:	b21b      	sxth	r3, r3
 800c38a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800c38c:	4b33      	ldr	r3, [pc, #204]	@ (800c45c <hci_send_req+0x100>)
 800c38e:	2201      	movs	r2, #1
 800c390:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	b2d9      	uxtb	r1, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	689a      	ldr	r2, [r3, #8]
 800c39c:	8bbb      	ldrh	r3, [r7, #28]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f000 f890 	bl	800c4c4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800c3a4:	e04e      	b.n	800c444 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800c3a6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800c3aa:	f002 f923 	bl	800e5f4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c3ae:	e043      	b.n	800c438 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800c3b0:	f107 030c 	add.w	r3, r7, #12
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	482a      	ldr	r0, [pc, #168]	@ (800c460 <hci_send_req+0x104>)
 800c3b8:	f000 fd91 	bl	800cede <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	7a5b      	ldrb	r3, [r3, #9]
 800c3c0:	2b0f      	cmp	r3, #15
 800c3c2:	d114      	bne.n	800c3ee <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	330b      	adds	r3, #11
 800c3c8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	885b      	ldrh	r3, [r3, #2]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	8bba      	ldrh	r2, [r7, #28]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d104      	bne.n	800c3e0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	7812      	ldrb	r2, [r2, #0]
 800c3de:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	785b      	ldrb	r3, [r3, #1]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d027      	beq.n	800c438 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	77fb      	strb	r3, [r7, #31]
 800c3ec:	e024      	b.n	800c438 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	330b      	adds	r3, #11
 800c3f2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	8bba      	ldrh	r2, [r7, #28]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d114      	bne.n	800c42c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	7a9b      	ldrb	r3, [r3, #10]
 800c406:	3b03      	subs	r3, #3
 800c408:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	695a      	ldr	r2, [r3, #20]
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	429a      	cmp	r2, r3
 800c412:	bfa8      	it	ge
 800c414:	461a      	movge	r2, r3
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6918      	ldr	r0, [r3, #16]
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	1cd9      	adds	r1, r3, #3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	461a      	mov	r2, r3
 800c428:	f003 fc95 	bl	800fd56 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d001      	beq.n	800c438 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800c434:	2301      	movs	r3, #1
 800c436:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800c438:	4809      	ldr	r0, [pc, #36]	@ (800c460 <hci_send_req+0x104>)
 800c43a:	f000 fcc1 	bl	800cdc0 <LST_is_empty>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0b5      	beq.n	800c3b0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800c444:	7ffb      	ldrb	r3, [r7, #31]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d0ad      	beq.n	800c3a6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800c44a:	2001      	movs	r0, #1
 800c44c:	f000 f860 	bl	800c510 <NotifyCmdStatus>

  return 0;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3720      	adds	r7, #32
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	2000067c 	.word	0x2000067c
 800c460:	20000670 	.word	0x20000670

0800c464 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800c46c:	480f      	ldr	r0, [pc, #60]	@ (800c4ac <TlInit+0x48>)
 800c46e:	f000 fc97 	bl	800cda0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800c472:	4a0f      	ldr	r2, [pc, #60]	@ (800c4b0 <TlInit+0x4c>)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800c478:	480e      	ldr	r0, [pc, #56]	@ (800c4b4 <TlInit+0x50>)
 800c47a:	f000 fc91 	bl	800cda0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800c47e:	4b0e      	ldr	r3, [pc, #56]	@ (800c4b8 <TlInit+0x54>)
 800c480:	2201      	movs	r2, #1
 800c482:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800c484:	4b0d      	ldr	r3, [pc, #52]	@ (800c4bc <TlInit+0x58>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00a      	beq.n	800c4a2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800c490:	4b0b      	ldr	r3, [pc, #44]	@ (800c4c0 <TlInit+0x5c>)
 800c492:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800c494:	4b09      	ldr	r3, [pc, #36]	@ (800c4bc <TlInit+0x58>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f107 0208 	add.w	r2, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
  }

  return;
 800c4a0:	bf00      	nop
 800c4a2:	bf00      	nop
}
 800c4a4:	3718      	adds	r7, #24
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20000670 	.word	0x20000670
 800c4b0:	20000230 	.word	0x20000230
 800c4b4:	20000228 	.word	0x20000228
 800c4b8:	20000234 	.word	0x20000234
 800c4bc:	20000650 	.word	0x20000650
 800c4c0:	0800c551 	.word	0x0800c551

0800c4c4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	603a      	str	r2, [r7, #0]
 800c4ce:	80fb      	strh	r3, [r7, #6]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800c4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c508 <SendCmd+0x44>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	88fa      	ldrh	r2, [r7, #6]
 800c4da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800c4de:	4b0a      	ldr	r3, [pc, #40]	@ (800c508 <SendCmd+0x44>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	797a      	ldrb	r2, [r7, #5]
 800c4e4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800c4e6:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <SendCmd+0x44>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	330c      	adds	r3, #12
 800c4ec:	797a      	ldrb	r2, [r7, #5]
 800c4ee:	6839      	ldr	r1, [r7, #0]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f003 fc30 	bl	800fd56 <memcpy>

  hciContext.io.Send(0,0);
 800c4f6:	4b05      	ldr	r3, [pc, #20]	@ (800c50c <SendCmd+0x48>)
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	2000      	movs	r0, #0
 800c4fe:	4798      	blx	r3

  return;
 800c500:	bf00      	nop
}
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20000230 	.word	0x20000230
 800c50c:	20000650 	.word	0x20000650

0800c510 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	4603      	mov	r3, r0
 800c518:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d108      	bne.n	800c532 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800c520:	4b0a      	ldr	r3, [pc, #40]	@ (800c54c <NotifyCmdStatus+0x3c>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00d      	beq.n	800c544 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800c528:	4b08      	ldr	r3, [pc, #32]	@ (800c54c <NotifyCmdStatus+0x3c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2000      	movs	r0, #0
 800c52e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800c530:	e008      	b.n	800c544 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800c532:	4b06      	ldr	r3, [pc, #24]	@ (800c54c <NotifyCmdStatus+0x3c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d004      	beq.n	800c544 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800c53a:	4b04      	ldr	r3, [pc, #16]	@ (800c54c <NotifyCmdStatus+0x3c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2001      	movs	r0, #1
 800c540:	4798      	blx	r3
  return;
 800c542:	bf00      	nop
 800c544:	bf00      	nop
}
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	20000678 	.word	0x20000678

0800c550 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	7a5b      	ldrb	r3, [r3, #9]
 800c55c:	2b0f      	cmp	r3, #15
 800c55e:	d003      	beq.n	800c568 <TlEvtReceived+0x18>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7a5b      	ldrb	r3, [r3, #9]
 800c564:	2b0e      	cmp	r3, #14
 800c566:	d107      	bne.n	800c578 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	4809      	ldr	r0, [pc, #36]	@ (800c590 <TlEvtReceived+0x40>)
 800c56c:	f000 fc70 	bl	800ce50 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800c570:	2000      	movs	r0, #0
 800c572:	f002 f834 	bl	800e5de <hci_cmd_resp_release>
 800c576:	e006      	b.n	800c586 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	4806      	ldr	r0, [pc, #24]	@ (800c594 <TlEvtReceived+0x44>)
 800c57c:	f000 fc68 	bl	800ce50 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c580:	4804      	ldr	r0, [pc, #16]	@ (800c594 <TlEvtReceived+0x44>)
 800c582:	f002 f820 	bl	800e5c6 <hci_notify_asynch_evt>
  }

  return;
 800c586:	bf00      	nop
}
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000670 	.word	0x20000670
 800c594:	20000228 	.word	0x20000228

0800c598 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a05      	ldr	r2, [pc, #20]	@ (800c5b8 <hci_register_io_bus+0x20>)
 800c5a4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a04      	ldr	r2, [pc, #16]	@ (800c5bc <hci_register_io_bus+0x24>)
 800c5aa:	611a      	str	r2, [r3, #16]

  return;
 800c5ac:	bf00      	nop
}
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr
 800c5b8:	0800c8b1 	.word	0x0800c8b1
 800c5bc:	0800c919 	.word	0x0800c919

0800c5c0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	4a08      	ldr	r2, [pc, #32]	@ (800c5f0 <shci_init+0x30>)
 800c5d0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800c5d2:	4a08      	ldr	r2, [pc, #32]	@ (800c5f4 <shci_init+0x34>)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800c5d8:	4806      	ldr	r0, [pc, #24]	@ (800c5f4 <shci_init+0x34>)
 800c5da:	f000 f915 	bl	800c808 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 f898 	bl	800c718 <TlInit>

  return;
 800c5e8:	bf00      	nop
}
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	200006a0 	.word	0x200006a0
 800c5f4:	20000680 	.word	0x20000680

0800c5f8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c5fe:	4822      	ldr	r0, [pc, #136]	@ (800c688 <shci_user_evt_proc+0x90>)
 800c600:	f000 fbde 	bl	800cdc0 <LST_is_empty>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d12b      	bne.n	800c662 <shci_user_evt_proc+0x6a>
 800c60a:	4b20      	ldr	r3, [pc, #128]	@ (800c68c <shci_user_evt_proc+0x94>)
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d027      	beq.n	800c662 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800c612:	f107 030c 	add.w	r3, r7, #12
 800c616:	4619      	mov	r1, r3
 800c618:	481b      	ldr	r0, [pc, #108]	@ (800c688 <shci_user_evt_proc+0x90>)
 800c61a:	f000 fc60 	bl	800cede <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800c61e:	4b1c      	ldr	r3, [pc, #112]	@ (800c690 <shci_user_evt_proc+0x98>)
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00c      	beq.n	800c640 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800c62a:	2301      	movs	r3, #1
 800c62c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800c62e:	4b18      	ldr	r3, [pc, #96]	@ (800c690 <shci_user_evt_proc+0x98>)
 800c630:	69db      	ldr	r3, [r3, #28]
 800c632:	1d3a      	adds	r2, r7, #4
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800c638:	793a      	ldrb	r2, [r7, #4]
 800c63a:	4b14      	ldr	r3, [pc, #80]	@ (800c68c <shci_user_evt_proc+0x94>)
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	e002      	b.n	800c646 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c640:	4b12      	ldr	r3, [pc, #72]	@ (800c68c <shci_user_evt_proc+0x94>)
 800c642:	2201      	movs	r2, #1
 800c644:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800c646:	4b11      	ldr	r3, [pc, #68]	@ (800c68c <shci_user_evt_proc+0x94>)
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	4618      	mov	r0, r3
 800c652:	f000 f9ff 	bl	800ca54 <TL_MM_EvtDone>
 800c656:	e004      	b.n	800c662 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	4619      	mov	r1, r3
 800c65c:	480a      	ldr	r0, [pc, #40]	@ (800c688 <shci_user_evt_proc+0x90>)
 800c65e:	f000 fbd1 	bl	800ce04 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800c662:	4809      	ldr	r0, [pc, #36]	@ (800c688 <shci_user_evt_proc+0x90>)
 800c664:	f000 fbac 	bl	800cdc0 <LST_is_empty>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d107      	bne.n	800c67e <shci_user_evt_proc+0x86>
 800c66e:	4b07      	ldr	r3, [pc, #28]	@ (800c68c <shci_user_evt_proc+0x94>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800c676:	4804      	ldr	r0, [pc, #16]	@ (800c688 <shci_user_evt_proc+0x90>)
 800c678:	f7f5 ff5b 	bl	8002532 <shci_notify_asynch_evt>
  }


  return;
 800c67c:	bf00      	nop
 800c67e:	bf00      	nop
}
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20000238 	.word	0x20000238
 800c68c:	20000248 	.word	0x20000248
 800c690:	20000680 	.word	0x20000680

0800c694 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60ba      	str	r2, [r7, #8]
 800c69c:	607b      	str	r3, [r7, #4]
 800c69e:	4603      	mov	r3, r0
 800c6a0:	81fb      	strh	r3, [r7, #14]
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	f000 f868 	bl	800c77c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800c6ac:	4b17      	ldr	r3, [pc, #92]	@ (800c70c <shci_send+0x78>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	89fa      	ldrh	r2, [r7, #14]
 800c6b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800c6b6:	4b15      	ldr	r3, [pc, #84]	@ (800c70c <shci_send+0x78>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	7b7a      	ldrb	r2, [r7, #13]
 800c6bc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800c6be:	4b13      	ldr	r3, [pc, #76]	@ (800c70c <shci_send+0x78>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	330c      	adds	r3, #12
 800c6c4:	7b7a      	ldrb	r2, [r7, #13]
 800c6c6:	68b9      	ldr	r1, [r7, #8]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f003 fb44 	bl	800fd56 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800c6ce:	4b10      	ldr	r3, [pc, #64]	@ (800c710 <shci_send+0x7c>)
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800c6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c714 <shci_send+0x80>)
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	2100      	movs	r1, #0
 800c6da:	2000      	movs	r0, #0
 800c6dc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800c6de:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800c6e2:	f7f5 ff3d 	bl	8002560 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f103 0008 	add.w	r0, r3, #8
 800c6ec:	4b07      	ldr	r3, [pc, #28]	@ (800c70c <shci_send+0x78>)
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	4b06      	ldr	r3, [pc, #24]	@ (800c70c <shci_send+0x78>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	789b      	ldrb	r3, [r3, #2]
 800c6f6:	3303      	adds	r3, #3
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	f003 fb2c 	bl	800fd56 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c6fe:	2001      	movs	r0, #1
 800c700:	f000 f83c 	bl	800c77c <Cmd_SetStatus>

  return;
 800c704:	bf00      	nop
}
 800c706:	3710      	adds	r7, #16
 800c708:	46bd      	mov	sp, r7
 800c70a:	bd80      	pop	{r7, pc}
 800c70c:	20000244 	.word	0x20000244
 800c710:	200006a4 	.word	0x200006a4
 800c714:	20000680 	.word	0x20000680

0800c718 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800c720:	4a10      	ldr	r2, [pc, #64]	@ (800c764 <TlInit+0x4c>)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800c726:	4810      	ldr	r0, [pc, #64]	@ (800c768 <TlInit+0x50>)
 800c728:	f000 fb3a 	bl	800cda0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800c72c:	2001      	movs	r0, #1
 800c72e:	f000 f825 	bl	800c77c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800c732:	4b0e      	ldr	r3, [pc, #56]	@ (800c76c <TlInit+0x54>)
 800c734:	2201      	movs	r2, #1
 800c736:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800c738:	4b0d      	ldr	r3, [pc, #52]	@ (800c770 <TlInit+0x58>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00c      	beq.n	800c75a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800c744:	4b0b      	ldr	r3, [pc, #44]	@ (800c774 <TlInit+0x5c>)
 800c746:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800c748:	4b0b      	ldr	r3, [pc, #44]	@ (800c778 <TlInit+0x60>)
 800c74a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800c74c:	4b08      	ldr	r3, [pc, #32]	@ (800c770 <TlInit+0x58>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f107 020c 	add.w	r2, r7, #12
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
  }

  return;
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
}
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	20000244 	.word	0x20000244
 800c768:	20000238 	.word	0x20000238
 800c76c:	20000248 	.word	0x20000248
 800c770:	20000680 	.word	0x20000680
 800c774:	0800c7cd 	.word	0x0800c7cd
 800c778:	0800c7e5 	.word	0x0800c7e5

0800c77c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800c786:	79fb      	ldrb	r3, [r7, #7]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10b      	bne.n	800c7a4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800c78c:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c4 <Cmd_SetStatus+0x48>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d003      	beq.n	800c79c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800c794:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c4 <Cmd_SetStatus+0x48>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2000      	movs	r0, #0
 800c79a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800c79c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c8 <Cmd_SetStatus+0x4c>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800c7a2:	e00b      	b.n	800c7bc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800c7a4:	4b08      	ldr	r3, [pc, #32]	@ (800c7c8 <Cmd_SetStatus+0x4c>)
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800c7aa:	4b06      	ldr	r3, [pc, #24]	@ (800c7c4 <Cmd_SetStatus+0x48>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d004      	beq.n	800c7bc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800c7b2:	4b04      	ldr	r3, [pc, #16]	@ (800c7c4 <Cmd_SetStatus+0x48>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2001      	movs	r0, #1
 800c7b8:	4798      	blx	r3
  return;
 800c7ba:	bf00      	nop
 800c7bc:	bf00      	nop
}
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	200006a0 	.word	0x200006a0
 800c7c8:	20000240 	.word	0x20000240

0800c7cc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	f7f5 feb8 	bl	800254a <shci_cmd_resp_release>

  return;
 800c7da:	bf00      	nop
}
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
	...

0800c7e4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800c7ec:	6879      	ldr	r1, [r7, #4]
 800c7ee:	4805      	ldr	r0, [pc, #20]	@ (800c804 <TlUserEvtReceived+0x20>)
 800c7f0:	f000 fb2e 	bl	800ce50 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800c7f4:	4803      	ldr	r0, [pc, #12]	@ (800c804 <TlUserEvtReceived+0x20>)
 800c7f6:	f7f5 fe9c 	bl	8002532 <shci_notify_asynch_evt>

  return;
 800c7fa:	bf00      	nop
}
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	20000238 	.word	0x20000238

0800c808 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a05      	ldr	r2, [pc, #20]	@ (800c828 <shci_register_io_bus+0x20>)
 800c814:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a04      	ldr	r2, [pc, #16]	@ (800c82c <shci_register_io_bus+0x24>)
 800c81a:	611a      	str	r2, [r3, #16]

  return;
 800c81c:	bf00      	nop
}
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	0800c951 	.word	0x0800c951
 800c82c:	0800c9a5 	.word	0x0800c9a5

0800c830 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c830:	b580      	push	{r7, lr}
 800c832:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c834:	f002 f886 	bl	800e944 <HW_IPCC_Enable>

  return;
 800c838:	bf00      	nop
}
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <TL_Init>:


void TL_Init( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c840:	4b10      	ldr	r3, [pc, #64]	@ (800c884 <TL_Init+0x48>)
 800c842:	4a11      	ldr	r2, [pc, #68]	@ (800c888 <TL_Init+0x4c>)
 800c844:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c846:	4b0f      	ldr	r3, [pc, #60]	@ (800c884 <TL_Init+0x48>)
 800c848:	4a10      	ldr	r2, [pc, #64]	@ (800c88c <TL_Init+0x50>)
 800c84a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c84c:	4b0d      	ldr	r3, [pc, #52]	@ (800c884 <TL_Init+0x48>)
 800c84e:	4a10      	ldr	r2, [pc, #64]	@ (800c890 <TL_Init+0x54>)
 800c850:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c852:	4b0c      	ldr	r3, [pc, #48]	@ (800c884 <TL_Init+0x48>)
 800c854:	4a0f      	ldr	r2, [pc, #60]	@ (800c894 <TL_Init+0x58>)
 800c856:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c858:	4b0a      	ldr	r3, [pc, #40]	@ (800c884 <TL_Init+0x48>)
 800c85a:	4a0f      	ldr	r2, [pc, #60]	@ (800c898 <TL_Init+0x5c>)
 800c85c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c85e:	4b09      	ldr	r3, [pc, #36]	@ (800c884 <TL_Init+0x48>)
 800c860:	4a0e      	ldr	r2, [pc, #56]	@ (800c89c <TL_Init+0x60>)
 800c862:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c864:	4b07      	ldr	r3, [pc, #28]	@ (800c884 <TL_Init+0x48>)
 800c866:	4a0e      	ldr	r2, [pc, #56]	@ (800c8a0 <TL_Init+0x64>)
 800c868:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c86a:	4b06      	ldr	r3, [pc, #24]	@ (800c884 <TL_Init+0x48>)
 800c86c:	4a0d      	ldr	r2, [pc, #52]	@ (800c8a4 <TL_Init+0x68>)
 800c86e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c870:	4b04      	ldr	r3, [pc, #16]	@ (800c884 <TL_Init+0x48>)
 800c872:	4a0d      	ldr	r2, [pc, #52]	@ (800c8a8 <TL_Init+0x6c>)
 800c874:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c876:	4b03      	ldr	r3, [pc, #12]	@ (800c884 <TL_Init+0x48>)
 800c878:	4a0c      	ldr	r2, [pc, #48]	@ (800c8ac <TL_Init+0x70>)
 800c87a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c87c:	f002 f876 	bl	800e96c <HW_IPCC_Init>

  return;
 800c880:	bf00      	nop
}
 800c882:	bd80      	pop	{r7, pc}
 800c884:	20030000 	.word	0x20030000
 800c888:	20030028 	.word	0x20030028
 800c88c:	20030048 	.word	0x20030048
 800c890:	20030058 	.word	0x20030058
 800c894:	20030068 	.word	0x20030068
 800c898:	20030070 	.word	0x20030070
 800c89c:	20030078 	.word	0x20030078
 800c8a0:	20030080 	.word	0x20030080
 800c8a4:	2003009c 	.word	0x2003009c
 800c8a8:	200300a0 	.word	0x200300a0
 800c8ac:	200300ac 	.word	0x200300ac

0800c8b0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c8bc:	4811      	ldr	r0, [pc, #68]	@ (800c904 <TL_BLE_Init+0x54>)
 800c8be:	f000 fa6f 	bl	800cda0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c8c2:	4b11      	ldr	r3, [pc, #68]	@ (800c908 <TL_BLE_Init+0x58>)
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	689a      	ldr	r2, [r3, #8]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	4a0c      	ldr	r2, [pc, #48]	@ (800c90c <TL_BLE_Init+0x5c>)
 800c8dc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	4a08      	ldr	r2, [pc, #32]	@ (800c904 <TL_BLE_Init+0x54>)
 800c8e2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c8e4:	f002 f858 	bl	800e998 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a08      	ldr	r2, [pc, #32]	@ (800c910 <TL_BLE_Init+0x60>)
 800c8ee:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	4a07      	ldr	r2, [pc, #28]	@ (800c914 <TL_BLE_Init+0x64>)
 800c8f6:	6013      	str	r3, [r2, #0]

  return 0;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	200300c8 	.word	0x200300c8
 800c908:	20030000 	.word	0x20030000
 800c90c:	20030a58 	.word	0x20030a58
 800c910:	200006b0 	.word	0x200006b0
 800c914:	200006b4 	.word	0x200006b4

0800c918 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	460b      	mov	r3, r1
 800c922:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c924:	4b09      	ldr	r3, [pc, #36]	@ (800c94c <TL_BLE_SendCmd+0x34>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	2201      	movs	r2, #1
 800c92c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c92e:	4b07      	ldr	r3, [pc, #28]	@ (800c94c <TL_BLE_SendCmd+0x34>)
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4619      	mov	r1, r3
 800c936:	2001      	movs	r0, #1
 800c938:	f000 f8d6 	bl	800cae8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c93c:	f002 f836 	bl	800e9ac <HW_IPCC_BLE_SendCmd>

  return 0;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20030000 	.word	0x20030000

0800c950 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c95c:	480d      	ldr	r0, [pc, #52]	@ (800c994 <TL_SYS_Init+0x44>)
 800c95e:	f000 fa1f 	bl	800cda0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c962:	4b0d      	ldr	r3, [pc, #52]	@ (800c998 <TL_SYS_Init+0x48>)
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	689a      	ldr	r2, [r3, #8]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	4a08      	ldr	r2, [pc, #32]	@ (800c994 <TL_SYS_Init+0x44>)
 800c974:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c976:	f002 f823 	bl	800e9c0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4a07      	ldr	r2, [pc, #28]	@ (800c99c <TL_SYS_Init+0x4c>)
 800c980:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	4a06      	ldr	r2, [pc, #24]	@ (800c9a0 <TL_SYS_Init+0x50>)
 800c988:	6013      	str	r3, [r2, #0]

  return 0;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	200300d0 	.word	0x200300d0
 800c998:	20030000 	.word	0x20030000
 800c99c:	200006b8 	.word	0x200006b8
 800c9a0:	200006bc 	.word	0x200006bc

0800c9a4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c9b0:	4b09      	ldr	r3, [pc, #36]	@ (800c9d8 <TL_SYS_SendCmd+0x34>)
 800c9b2:	68db      	ldr	r3, [r3, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2210      	movs	r2, #16
 800c9b8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c9ba:	4b07      	ldr	r3, [pc, #28]	@ (800c9d8 <TL_SYS_SendCmd+0x34>)
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	2004      	movs	r0, #4
 800c9c4:	f000 f890 	bl	800cae8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c9c8:	f002 f804 	bl	800e9d4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20030000 	.word	0x20030000

0800c9dc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c9e4:	4817      	ldr	r0, [pc, #92]	@ (800ca44 <TL_MM_Init+0x68>)
 800c9e6:	f000 f9db 	bl	800cda0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c9ea:	4817      	ldr	r0, [pc, #92]	@ (800ca48 <TL_MM_Init+0x6c>)
 800c9ec:	f000 f9d8 	bl	800cda0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c9f0:	4b16      	ldr	r3, [pc, #88]	@ (800ca4c <TL_MM_Init+0x70>)
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	4a16      	ldr	r2, [pc, #88]	@ (800ca50 <TL_MM_Init+0x74>)
 800c9f6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c9f8:	4b15      	ldr	r3, [pc, #84]	@ (800ca50 <TL_MM_Init+0x74>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	6892      	ldr	r2, [r2, #8]
 800ca00:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ca02:	4b13      	ldr	r3, [pc, #76]	@ (800ca50 <TL_MM_Init+0x74>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	68d2      	ldr	r2, [r2, #12]
 800ca0a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ca0c:	4b10      	ldr	r3, [pc, #64]	@ (800ca50 <TL_MM_Init+0x74>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a0c      	ldr	r2, [pc, #48]	@ (800ca44 <TL_MM_Init+0x68>)
 800ca12:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ca14:	4b0e      	ldr	r3, [pc, #56]	@ (800ca50 <TL_MM_Init+0x74>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	6812      	ldr	r2, [r2, #0]
 800ca1c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ca1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ca50 <TL_MM_Init+0x74>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	6852      	ldr	r2, [r2, #4]
 800ca26:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ca28:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <TL_MM_Init+0x74>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	6912      	ldr	r2, [r2, #16]
 800ca30:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ca32:	4b07      	ldr	r3, [pc, #28]	@ (800ca50 <TL_MM_Init+0x74>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	6952      	ldr	r2, [r2, #20]
 800ca3a:	619a      	str	r2, [r3, #24]

  return;
 800ca3c:	bf00      	nop
}
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	200300b8 	.word	0x200300b8
 800ca48:	200006a8 	.word	0x200006a8
 800ca4c:	20030000 	.word	0x20030000
 800ca50:	200006c0 	.word	0x200006c0

0800ca54 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ca5c:	6879      	ldr	r1, [r7, #4]
 800ca5e:	4807      	ldr	r0, [pc, #28]	@ (800ca7c <TL_MM_EvtDone+0x28>)
 800ca60:	f000 f9f6 	bl	800ce50 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	2000      	movs	r0, #0
 800ca68:	f000 f83e 	bl	800cae8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ca6c:	4804      	ldr	r0, [pc, #16]	@ (800ca80 <TL_MM_EvtDone+0x2c>)
 800ca6e:	f001 ffbf 	bl	800e9f0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ca72:	bf00      	nop
}
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	200006a8 	.word	0x200006a8
 800ca80:	0800ca85 	.word	0x0800ca85

0800ca84 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ca8a:	e00c      	b.n	800caa6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ca8c:	1d3b      	adds	r3, r7, #4
 800ca8e:	4619      	mov	r1, r3
 800ca90:	480a      	ldr	r0, [pc, #40]	@ (800cabc <SendFreeBuf+0x38>)
 800ca92:	f000 fa24 	bl	800cede <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ca96:	4b0a      	ldr	r3, [pc, #40]	@ (800cac0 <SendFreeBuf+0x3c>)
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 f9d5 	bl	800ce50 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800caa6:	4805      	ldr	r0, [pc, #20]	@ (800cabc <SendFreeBuf+0x38>)
 800caa8:	f000 f98a 	bl	800cdc0 <LST_is_empty>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0ec      	beq.n	800ca8c <SendFreeBuf+0x8>
  }

  return;
 800cab2:	bf00      	nop
}
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	200006a8 	.word	0x200006a8
 800cac0:	20030000 	.word	0x20030000

0800cac4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800cac8:	4805      	ldr	r0, [pc, #20]	@ (800cae0 <TL_TRACES_Init+0x1c>)
 800caca:	f000 f969 	bl	800cda0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800cace:	4b05      	ldr	r3, [pc, #20]	@ (800cae4 <TL_TRACES_Init+0x20>)
 800cad0:	695b      	ldr	r3, [r3, #20]
 800cad2:	4a03      	ldr	r2, [pc, #12]	@ (800cae0 <TL_TRACES_Init+0x1c>)
 800cad4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800cad6:	f001 ffad 	bl	800ea34 <HW_IPCC_TRACES_Init>

  return;
 800cada:	bf00      	nop
}
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	200300c0 	.word	0x200300c0
 800cae4:	20030000 	.word	0x20030000

0800cae8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800cae8:	b480      	push	{r7}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	6039      	str	r1, [r7, #0]
 800caf2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800caf4:	79fb      	ldrb	r3, [r7, #7]
 800caf6:	2b06      	cmp	r3, #6
 800caf8:	d845      	bhi.n	800cb86 <OutputDbgTrace+0x9e>
 800cafa:	a201      	add	r2, pc, #4	@ (adr r2, 800cb00 <OutputDbgTrace+0x18>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb1d 	.word	0x0800cb1d
 800cb04:	0800cb41 	.word	0x0800cb41
 800cb08:	0800cb47 	.word	0x0800cb47
 800cb0c:	0800cb5b 	.word	0x0800cb5b
 800cb10:	0800cb67 	.word	0x0800cb67
 800cb14:	0800cb6d 	.word	0x0800cb6d
 800cb18:	0800cb7b 	.word	0x0800cb7b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	7a5b      	ldrb	r3, [r3, #9]
 800cb24:	2bff      	cmp	r3, #255	@ 0xff
 800cb26:	d005      	beq.n	800cb34 <OutputDbgTrace+0x4c>
 800cb28:	2bff      	cmp	r3, #255	@ 0xff
 800cb2a:	dc05      	bgt.n	800cb38 <OutputDbgTrace+0x50>
 800cb2c:	2b0e      	cmp	r3, #14
 800cb2e:	d005      	beq.n	800cb3c <OutputDbgTrace+0x54>
 800cb30:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800cb32:	e001      	b.n	800cb38 <OutputDbgTrace+0x50>
          break;
 800cb34:	bf00      	nop
 800cb36:	e027      	b.n	800cb88 <OutputDbgTrace+0xa0>
          break;
 800cb38:	bf00      	nop
 800cb3a:	e025      	b.n	800cb88 <OutputDbgTrace+0xa0>
          break;
 800cb3c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800cb3e:	e023      	b.n	800cb88 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800cb44:	e020      	b.n	800cb88 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	7a5b      	ldrb	r3, [r3, #9]
 800cb4e:	2b0e      	cmp	r3, #14
 800cb50:	d001      	beq.n	800cb56 <OutputDbgTrace+0x6e>
 800cb52:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800cb54:	e000      	b.n	800cb58 <OutputDbgTrace+0x70>
          break;
 800cb56:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb58:	e016      	b.n	800cb88 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	7a5b      	ldrb	r3, [r3, #9]
 800cb62:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb64:	e010      	b.n	800cb88 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800cb6a:	e00d      	b.n	800cb88 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	785b      	ldrb	r3, [r3, #1]
 800cb74:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800cb76:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb78:	e006      	b.n	800cb88 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	7a5b      	ldrb	r3, [r3, #9]
 800cb82:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cb84:	e000      	b.n	800cb88 <OutputDbgTrace+0xa0>

    default:
      break;
 800cb86:	bf00      	nop
  }

  return;
 800cb88:	bf00      	nop
}
 800cb8a:	371c      	adds	r7, #28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800cba0:	215c      	movs	r1, #92	@ 0x5c
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f003 f84a 	bl	800fc3c <strrchr>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d007      	beq.n	800cbbe <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800cbae:	215c      	movs	r1, #92	@ 0x5c
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f003 f843 	bl	800fc3c <strrchr>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	3301      	adds	r3, #1
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e00d      	b.n	800cbda <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800cbbe:	212f      	movs	r1, #47	@ 0x2f
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f003 f83b 	bl	800fc3c <strrchr>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d006      	beq.n	800cbda <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800cbcc:	212f      	movs	r1, #47	@ 0x2f
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f003 f834 	bl	800fc3c <strrchr>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800cbda:	68fb      	ldr	r3, [r7, #12]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}

0800cbe4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b086      	sub	sp, #24
 800cbe8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbea:	f3ef 8310 	mrs	r3, PRIMASK
 800cbee:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800cbf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cbf4:	b672      	cpsid	i
}
 800cbf6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800cbf8:	1cbb      	adds	r3, r7, #2
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	4812      	ldr	r0, [pc, #72]	@ (800cc48 <DbgTrace_TxCpltCallback+0x64>)
 800cbfe:	f000 fbe5 	bl	800d3cc <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800cc02:	1cbb      	adds	r3, r7, #2
 800cc04:	4619      	mov	r1, r3
 800cc06:	4810      	ldr	r0, [pc, #64]	@ (800cc48 <DbgTrace_TxCpltCallback+0x64>)
 800cc08:	f000 fccf 	bl	800d5aa <CircularQueue_Sense>
 800cc0c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00c      	beq.n	800cc2e <DbgTrace_TxCpltCallback+0x4a>
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	f383 8810 	msr	PRIMASK, r3
}
 800cc1e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800cc20:	887b      	ldrh	r3, [r7, #2]
 800cc22:	4a0a      	ldr	r2, [pc, #40]	@ (800cc4c <DbgTrace_TxCpltCallback+0x68>)
 800cc24:	4619      	mov	r1, r3
 800cc26:	6938      	ldr	r0, [r7, #16]
 800cc28:	f7f5 f881 	bl	8001d2e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800cc2c:	e008      	b.n	800cc40 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800cc2e:	4b08      	ldr	r3, [pc, #32]	@ (800cc50 <DbgTrace_TxCpltCallback+0x6c>)
 800cc30:	2201      	movs	r2, #1
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f383 8810 	msr	PRIMASK, r3
}
 800cc3e:	bf00      	nop
}
 800cc40:	bf00      	nop
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	200006c4 	.word	0x200006c4
 800cc4c:	0800cbe5 	.word	0x0800cbe5
 800cc50:	20000011 	.word	0x20000011

0800cc54 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800cc5a:	f7f5 f862 	bl	8001d22 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800cc5e:	2302      	movs	r3, #2
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	2300      	movs	r3, #0
 800cc64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cc68:	4903      	ldr	r1, [pc, #12]	@ (800cc78 <DbgTraceInit+0x24>)
 800cc6a:	4804      	ldr	r0, [pc, #16]	@ (800cc7c <DbgTraceInit+0x28>)
 800cc6c:	f000 f956 	bl	800cf1c <CircularQueue_Init>
#endif 
#endif
  return;
 800cc70:	bf00      	nop
}
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	200006e4 	.word	0x200006e4
 800cc7c:	200006c4 	.word	0x200006c4

0800cc80 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	68b9      	ldr	r1, [r7, #8]
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	f000 f805 	bl	800cca0 <DbgTraceWrite>
 800cc96:	4603      	mov	r3, r0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	@ 0x28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ccac:	2300      	movs	r3, #0
 800ccae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb0:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb4:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccb6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ccb8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc0:	d102      	bne.n	800ccc8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccc6:	e037      	b.n	800cd38 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d006      	beq.n	800ccdc <DbgTraceWrite+0x3c>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d003      	beq.n	800ccdc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ccd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccda:	e02d      	b.n	800cd38 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d02a      	beq.n	800cd38 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800cce6:	b672      	cpsid	i
}
 800cce8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	2301      	movs	r3, #1
 800ccf0:	68b9      	ldr	r1, [r7, #8]
 800ccf2:	4814      	ldr	r0, [pc, #80]	@ (800cd44 <DbgTraceWrite+0xa4>)
 800ccf4:	f000 f944 	bl	800cf80 <CircularQueue_Add>
 800ccf8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d015      	beq.n	800cd2c <DbgTraceWrite+0x8c>
 800cd00:	4b11      	ldr	r3, [pc, #68]	@ (800cd48 <DbgTraceWrite+0xa8>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d010      	beq.n	800cd2c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800cd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd48 <DbgTraceWrite+0xa8>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]
 800cd10:	6a3b      	ldr	r3, [r7, #32]
 800cd12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f383 8810 	msr	PRIMASK, r3
}
 800cd1a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4a0a      	ldr	r2, [pc, #40]	@ (800cd4c <DbgTraceWrite+0xac>)
 800cd22:	4619      	mov	r1, r3
 800cd24:	69f8      	ldr	r0, [r7, #28]
 800cd26:	f7f5 f802 	bl	8001d2e <DbgOutputTraces>
 800cd2a:	e005      	b.n	800cd38 <DbgTraceWrite+0x98>
 800cd2c:	6a3b      	ldr	r3, [r7, #32]
 800cd2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	f383 8810 	msr	PRIMASK, r3
}
 800cd36:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800cd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3728      	adds	r7, #40	@ 0x28
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	200006c4 	.word	0x200006c4
 800cd48:	20000011 	.word	0x20000011
 800cd4c:	0800cbe5 	.word	0x0800cbe5

0800cd50 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	@ (800cd98 <OTP_Read+0x48>)
 800cd5c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cd5e:	e002      	b.n	800cd66 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	3b08      	subs	r3, #8
 800cd64:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	3307      	adds	r3, #7
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	79fa      	ldrb	r2, [r7, #7]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d003      	beq.n	800cd7a <OTP_Read+0x2a>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	4a09      	ldr	r2, [pc, #36]	@ (800cd9c <OTP_Read+0x4c>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d1f2      	bne.n	800cd60 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	79fa      	ldrb	r2, [r7, #7]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d001      	beq.n	800cd8a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800cd86:	2300      	movs	r3, #0
 800cd88:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	1fff73f8 	.word	0x1fff73f8
 800cd9c:	1fff7000 	.word	0x1fff7000

0800cda0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	605a      	str	r2, [r3, #4]
}
 800cdb4:	bf00      	nop
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b087      	sub	sp, #28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdc8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdcc:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cdd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdd2:	b672      	cpsid	i
}
 800cdd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d102      	bne.n	800cde6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800cde0:	2301      	movs	r3, #1
 800cde2:	75fb      	strb	r3, [r7, #23]
 800cde4:	e001      	b.n	800cdea <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	f383 8810 	msr	PRIMASK, r3
}
 800cdf4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800cdf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	371c      	adds	r7, #28
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce0e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce12:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce18:	b672      	cpsid	i
}
 800ce1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	683a      	ldr	r2, [r7, #0]
 800ce36:	605a      	str	r2, [r3, #4]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	f383 8810 	msr	PRIMASK, r3
}
 800ce42:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce44:	bf00      	nop
 800ce46:	371c      	adds	r7, #28
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b087      	sub	sp, #28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce60:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ce62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce64:	b672      	cpsid	i
}
 800ce66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	601a      	str	r2, [r3, #0]
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	f383 8810 	msr	PRIMASK, r3
}
 800ce8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ce90:	bf00      	nop
 800ce92:	371c      	adds	r7, #28
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr

0800ce9c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cea4:	f3ef 8310 	mrs	r3, PRIMASK
 800cea8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ceac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ceae:	b672      	cpsid	i
}
 800ceb0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	685b      	ldr	r3, [r3, #4]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	6852      	ldr	r2, [r2, #4]
 800cec4:	605a      	str	r2, [r3, #4]
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f383 8810 	msr	PRIMASK, r3
}
 800ced0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ced2:	bf00      	nop
 800ced4:	371c      	adds	r7, #28
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cee8:	f3ef 8310 	mrs	r3, PRIMASK
 800ceec:	60fb      	str	r3, [r7, #12]
  return(result);
 800ceee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800cef0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cef2:	b672      	cpsid	i
}
 800cef4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7ff ffca 	bl	800ce9c <LST_remove_node>
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	f383 8810 	msr	PRIMASK, r3
}
 800cf12:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800cf14:	bf00      	nop
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
 800cf28:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	68ba      	ldr	r2, [r7, #8]
 800cf2e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2200      	movs	r2, #0
 800cf46:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	887a      	ldrh	r2, [r7, #2]
 800cf52:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	7e3a      	ldrb	r2, [r7, #24]
 800cf58:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800cf5a:	7e3b      	ldrb	r3, [r7, #24]
 800cf5c:	f003 0302 	and.w	r3, r3, #2
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d006      	beq.n	800cf72 <CircularQueue_Init+0x56>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	891b      	ldrh	r3, [r3, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800cf6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf70:	e000      	b.n	800cf74 <CircularQueue_Init+0x58>
  }
  return 0;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08e      	sub	sp, #56	@ 0x38
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800cf90:	2300      	movs	r3, #0
 800cf92:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800cf94:	2300      	movs	r3, #0
 800cf96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800cf98:	2300      	movs	r3, #0
 800cf9a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	891b      	ldrh	r3, [r3, #8]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <CircularQueue_Add+0x38>
 800cfb4:	2302      	movs	r3, #2
 800cfb6:	e000      	b.n	800cfba <CircularQueue_Add+0x3a>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	695b      	ldr	r3, [r3, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d029      	beq.n	800d018 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	891b      	ldrh	r3, [r3, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d122      	bne.n	800d012 <CircularQueue_Add+0x92>
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681a      	ldr	r2, [r3, #0]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	1c59      	adds	r1, r3, #1
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	4299      	cmp	r1, r3
 800cfea:	d306      	bcc.n	800cffa <CircularQueue_Add+0x7a>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6919      	ldr	r1, [r3, #16]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	1acb      	subs	r3, r1, r3
 800cff6:	3301      	adds	r3, #1
 800cff8:	e002      	b.n	800d000 <CircularQueue_Add+0x80>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	3301      	adds	r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	021b      	lsls	r3, r3, #8
 800d006:	b29b      	uxth	r3, r3
 800d008:	4403      	add	r3, r0
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	3302      	adds	r3, #2
 800d00e:	b29b      	uxth	r3, r3
 800d010:	e001      	b.n	800d016 <CircularQueue_Add+0x96>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	891b      	ldrh	r3, [r3, #8]
 800d016:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	891b      	ldrh	r3, [r3, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	891b      	ldrh	r3, [r3, #8]
 800d024:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	691a      	ldr	r2, [r3, #16]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d307      	bcc.n	800d042 <CircularQueue_Add+0xc2>
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6919      	ldr	r1, [r3, #16]
 800d03a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d03c:	440b      	add	r3, r1
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	e000      	b.n	800d044 <CircularQueue_Add+0xc4>
 800d042:	2300      	movs	r3, #0
 800d044:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800d046:	88fa      	ldrh	r2, [r7, #6]
 800d048:	7ffb      	ldrb	r3, [r7, #31]
 800d04a:	4413      	add	r3, r2
 800d04c:	461a      	mov	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	fb02 f303 	mul.w	r3, r2, r3
 800d054:	69ba      	ldr	r2, [r7, #24]
 800d056:	429a      	cmp	r2, r3
 800d058:	d80b      	bhi.n	800d072 <CircularQueue_Add+0xf2>
 800d05a:	88fa      	ldrh	r2, [r7, #6]
 800d05c:	7ffb      	ldrb	r3, [r7, #31]
 800d05e:	4413      	add	r3, r2
 800d060:	461a      	mov	r2, r3
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	fbb3 f1f2 	udiv	r1, r3, r2
 800d068:	fb01 f202 	mul.w	r2, r1, r2
 800d06c:	1a9b      	subs	r3, r3, r2
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	e000      	b.n	800d074 <CircularQueue_Add+0xf4>
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800d076:	7dfa      	ldrb	r2, [r7, #23]
 800d078:	7ffb      	ldrb	r3, [r7, #31]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	bf8c      	ite	hi
 800d07e:	2301      	movhi	r3, #1
 800d080:	2300      	movls	r3, #0
 800d082:	b2db      	uxtb	r3, r3
 800d084:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800d086:	7fbb      	ldrb	r3, [r7, #30]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d008      	beq.n	800d09e <CircularQueue_Add+0x11e>
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	7f1b      	ldrb	r3, [r3, #28]
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b00      	cmp	r3, #0
 800d096:	d002      	beq.n	800d09e <CircularQueue_Add+0x11e>
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	e000      	b.n	800d0a0 <CircularQueue_Add+0x120>
 800d09e:	8bbb      	ldrh	r3, [r7, #28]
 800d0a0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800d0a2:	7fbb      	ldrb	r3, [r7, #30]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d008      	beq.n	800d0ba <CircularQueue_Add+0x13a>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	7f1b      	ldrb	r3, [r3, #28]
 800d0ac:	f003 0302 	and.w	r3, r3, #2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <CircularQueue_Add+0x13a>
 800d0b4:	7ffb      	ldrb	r3, [r7, #31]
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	e000      	b.n	800d0bc <CircularQueue_Add+0x13c>
 800d0ba:	8bbb      	ldrh	r3, [r7, #28]
 800d0bc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800d0be:	88fb      	ldrh	r3, [r7, #6]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f000 817e 	beq.w	800d3c2 <CircularQueue_Add+0x442>
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	695a      	ldr	r2, [r3, #20]
 800d0ca:	88f9      	ldrh	r1, [r7, #6]
 800d0cc:	7ffb      	ldrb	r3, [r7, #31]
 800d0ce:	440b      	add	r3, r1
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	fb01 f303 	mul.w	r3, r1, r3
 800d0d8:	441a      	add	r2, r3
 800d0da:	8bbb      	ldrh	r3, [r7, #28]
 800d0dc:	441a      	add	r2, r3
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	f200 816d 	bhi.w	800d3c2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ec:	e14a      	b.n	800d384 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	691a      	ldr	r2, [r3, #16]
 800d0f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d0f4:	441a      	add	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d307      	bcc.n	800d10e <CircularQueue_Add+0x18e>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	691a      	ldr	r2, [r3, #16]
 800d102:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d104:	441a      	add	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	e003      	b.n	800d116 <CircularQueue_Add+0x196>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	691a      	ldr	r2, [r3, #16]
 800d112:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d114:	4413      	add	r3, r2
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	891b      	ldrh	r3, [r3, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d130      	bne.n	800d18a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d12e:	1c59      	adds	r1, r3, #1
 800d130:	6339      	str	r1, [r7, #48]	@ 0x30
 800d132:	4413      	add	r3, r2
 800d134:	88fa      	ldrh	r2, [r7, #6]
 800d136:	b2d2      	uxtb	r2, r2
 800d138:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d140:	429a      	cmp	r2, r3
 800d142:	d304      	bcc.n	800d14e <CircularQueue_Add+0x1ce>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	685b      	ldr	r3, [r3, #4]
 800d148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	e000      	b.n	800d150 <CircularQueue_Add+0x1d0>
 800d14e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d150:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800d152:	88fb      	ldrh	r3, [r7, #6]
 800d154:	0a1b      	lsrs	r3, r3, #8
 800d156:	b298      	uxth	r0, r3
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15e:	1c59      	adds	r1, r3, #1
 800d160:	6339      	str	r1, [r7, #48]	@ 0x30
 800d162:	4413      	add	r3, r2
 800d164:	b2c2      	uxtb	r2, r0
 800d166:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d16e:	429a      	cmp	r2, r3
 800d170:	d304      	bcc.n	800d17c <CircularQueue_Add+0x1fc>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	e000      	b.n	800d17e <CircularQueue_Add+0x1fe>
 800d17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d17e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	695b      	ldr	r3, [r3, #20]
 800d184:	1c9a      	adds	r2, r3, #2
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800d18a:	88fa      	ldrh	r2, [r7, #6]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6859      	ldr	r1, [r3, #4]
 800d190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d192:	1acb      	subs	r3, r1, r3
 800d194:	4293      	cmp	r3, r2
 800d196:	bf28      	it	cs
 800d198:	4613      	movcs	r3, r2
 800d19a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800d19c:	88fb      	ldrh	r3, [r7, #6]
 800d19e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d007      	beq.n	800d1b4 <CircularQueue_Add+0x234>
 800d1a4:	88fb      	ldrh	r3, [r7, #6]
 800d1a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d225      	bcs.n	800d1f8 <CircularQueue_Add+0x278>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	7f1b      	ldrb	r3, [r3, #28]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d121      	bne.n	800d1f8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ba:	18d0      	adds	r0, r2, r3
 800d1bc:	88fb      	ldrh	r3, [r7, #6]
 800d1be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1c0:	fb02 f303 	mul.w	r3, r2, r3
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	4413      	add	r3, r2
 800d1c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	f002 fdc3 	bl	800fd56 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	695a      	ldr	r2, [r3, #20]
 800d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d6:	441a      	add	r2, r3
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800d1dc:	2300      	movs	r3, #0
 800d1de:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800d1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800d1e4:	88fa      	ldrh	r2, [r7, #6]
 800d1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800d1ec:	7ffb      	ldrb	r3, [r7, #31]
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	88fb      	ldrh	r3, [r7, #6]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d1f6:	e0a4      	b.n	800d342 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800d1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 80a1 	beq.w	800d342 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	7f1b      	ldrb	r3, [r3, #28]
 800d204:	f003 0301 	and.w	r3, r3, #1
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d03a      	beq.n	800d282 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	891b      	ldrh	r3, [r3, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10d      	bne.n	800d230 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21a:	3b02      	subs	r3, #2
 800d21c:	4413      	add	r3, r2
 800d21e:	22ff      	movs	r2, #255	@ 0xff
 800d220:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d228:	3b01      	subs	r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	22ff      	movs	r2, #255	@ 0xff
 800d22e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	695a      	ldr	r2, [r3, #20]
 800d234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d236:	441a      	add	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800d240:	88fb      	ldrh	r3, [r7, #6]
 800d242:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800d244:	2300      	movs	r3, #0
 800d246:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	891b      	ldrh	r3, [r3, #8]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d16f      	bne.n	800d330 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681a      	ldr	r2, [r3, #0]
 800d254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d256:	1c59      	adds	r1, r3, #1
 800d258:	6339      	str	r1, [r7, #48]	@ 0x30
 800d25a:	4413      	add	r3, r2
 800d25c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d25e:	b2d2      	uxtb	r2, r2
 800d260:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d264:	0a18      	lsrs	r0, r3, #8
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d26c:	1c59      	adds	r1, r3, #1
 800d26e:	6339      	str	r1, [r7, #48]	@ 0x30
 800d270:	4413      	add	r3, r2
 800d272:	b2c2      	uxtb	r2, r0
 800d274:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	695b      	ldr	r3, [r3, #20]
 800d27a:	1c9a      	adds	r2, r3, #2
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	615a      	str	r2, [r3, #20]
 800d280:	e056      	b.n	800d330 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	7f1b      	ldrb	r3, [r3, #28]
 800d286:	f003 0302 	and.w	r3, r3, #2
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d050      	beq.n	800d330 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	891b      	ldrh	r3, [r3, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d14a      	bne.n	800d32c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d29c:	3b02      	subs	r3, #2
 800d29e:	4413      	add	r3, r2
 800d2a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2a2:	b2d2      	uxtb	r2, r2
 800d2a4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a8:	0a19      	lsrs	r1, r3, #8
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	b2ca      	uxtb	r2, r1
 800d2b6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2be:	18d0      	adds	r0, r2, r3
 800d2c0:	88fb      	ldrh	r3, [r7, #6]
 800d2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2c4:	fb02 f303 	mul.w	r3, r2, r3
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	f002 fd41 	bl	800fd56 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	695a      	ldr	r2, [r3, #20]
 800d2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2da:	441a      	add	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800d2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800d2e4:	88fa      	ldrh	r2, [r7, #6]
 800d2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	699b      	ldr	r3, [r3, #24]
 800d2f0:	1c5a      	adds	r2, r3, #1
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d300:	1c59      	adds	r1, r3, #1
 800d302:	6339      	str	r1, [r7, #48]	@ 0x30
 800d304:	4413      	add	r3, r2
 800d306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d308:	b2d2      	uxtb	r2, r2
 800d30a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800d30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d30e:	0a18      	lsrs	r0, r3, #8
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d316:	1c59      	adds	r1, r3, #1
 800d318:	6339      	str	r1, [r7, #48]	@ 0x30
 800d31a:	4413      	add	r3, r2
 800d31c:	b2c2      	uxtb	r2, r0
 800d31e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	695b      	ldr	r3, [r3, #20]
 800d324:	1c9a      	adds	r2, r3, #2
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	615a      	str	r2, [r3, #20]
 800d32a:	e001      	b.n	800d330 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800d32c:	2300      	movs	r3, #0
 800d32e:	e049      	b.n	800d3c4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800d330:	7ffb      	ldrb	r3, [r7, #31]
 800d332:	b29a      	uxth	r2, r3
 800d334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d336:	b29b      	uxth	r3, r3
 800d338:	4413      	add	r3, r2
 800d33a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800d342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d344:	2b00      	cmp	r3, #0
 800d346:	d015      	beq.n	800d374 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d34e:	18d0      	adds	r0, r2, r3
 800d350:	88fb      	ldrh	r3, [r7, #6]
 800d352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d354:	fb03 f202 	mul.w	r2, r3, r2
 800d358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35a:	4413      	add	r3, r2
 800d35c:	68ba      	ldr	r2, [r7, #8]
 800d35e:	4413      	add	r3, r2
 800d360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d362:	4619      	mov	r1, r3
 800d364:	f002 fcf7 	bl	800fd56 <memcpy>
        q->byteCount += NbBytesToCopy;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	695a      	ldr	r2, [r3, #20]
 800d36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36e:	441a      	add	r2, r3
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	1c5a      	adds	r2, r3, #1
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800d37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d380:	3301      	adds	r3, #1
 800d382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	429a      	cmp	r2, r3
 800d38a:	f4ff aeb0 	bcc.w	800d0ee <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681a      	ldr	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6919      	ldr	r1, [r3, #16]
 800d396:	7ffb      	ldrb	r3, [r7, #31]
 800d398:	4419      	add	r1, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	4299      	cmp	r1, r3
 800d3a0:	d307      	bcc.n	800d3b2 <CircularQueue_Add+0x432>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6919      	ldr	r1, [r3, #16]
 800d3a6:	7ffb      	ldrb	r3, [r7, #31]
 800d3a8:	4419      	add	r1, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	1acb      	subs	r3, r1, r3
 800d3b0:	e003      	b.n	800d3ba <CircularQueue_Add+0x43a>
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6919      	ldr	r1, [r3, #16]
 800d3b6:	7ffb      	ldrb	r3, [r7, #31]
 800d3b8:	440b      	add	r3, r1
 800d3ba:	4413      	add	r3, r2
 800d3bc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800d3be:	6a3b      	ldr	r3, [r7, #32]
 800d3c0:	e000      	b.n	800d3c4 <CircularQueue_Add+0x444>
    return NULL;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3738      	adds	r7, #56	@ 0x38
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	891b      	ldrh	r3, [r3, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <CircularQueue_Remove+0x1e>
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	e000      	b.n	800d3ec <CircularQueue_Remove+0x20>
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f000 80ca 	beq.w	800d590 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	891b      	ldrh	r3, [r3, #8]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d120      	bne.n	800d446 <CircularQueue_Remove+0x7a>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	4413      	add	r3, r2
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	4618      	mov	r0, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	1c59      	adds	r1, r3, #1
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	4299      	cmp	r1, r3
 800d422:	d306      	bcc.n	800d432 <CircularQueue_Remove+0x66>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68d9      	ldr	r1, [r3, #12]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	1acb      	subs	r3, r1, r3
 800d42e:	3301      	adds	r3, #1
 800d430:	e002      	b.n	800d438 <CircularQueue_Remove+0x6c>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	3301      	adds	r3, #1
 800d438:	4413      	add	r3, r2
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	021b      	lsls	r3, r3, #8
 800d43e:	b29b      	uxth	r3, r3
 800d440:	4403      	add	r3, r0
 800d442:	b29b      	uxth	r3, r3
 800d444:	e001      	b.n	800d44a <CircularQueue_Remove+0x7e>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	891b      	ldrh	r3, [r3, #8]
 800d44a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7f1b      	ldrb	r3, [r3, #28]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	d056      	beq.n	800d506 <CircularQueue_Remove+0x13a>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	7f1b      	ldrb	r3, [r3, #28]
 800d45c:	f003 0302 	and.w	r3, r3, #2
 800d460:	2b00      	cmp	r3, #0
 800d462:	d150      	bne.n	800d506 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d464:	897b      	ldrh	r3, [r7, #10]
 800d466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d103      	bne.n	800d476 <CircularQueue_Remove+0xaa>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	891b      	ldrh	r3, [r3, #8]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d012      	beq.n	800d49c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68da      	ldr	r2, [r3, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d47e:	429a      	cmp	r2, r3
 800d480:	d941      	bls.n	800d506 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	891b      	ldrh	r3, [r3, #8]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d03d      	beq.n	800d506 <CircularQueue_Remove+0x13a>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	8912      	ldrh	r2, [r2, #8]
 800d498:	4293      	cmp	r3, r2
 800d49a:	d234      	bcs.n	800d506 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	695a      	ldr	r2, [r3, #20]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	68d9      	ldr	r1, [r3, #12]
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	1acb      	subs	r3, r1, r3
 800d4aa:	441a      	add	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	891b      	ldrh	r3, [r3, #8]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d120      	bne.n	800d500 <CircularQueue_Remove+0x134>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	781b      	ldrb	r3, [r3, #0]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	1c59      	adds	r1, r3, #1
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	4299      	cmp	r1, r3
 800d4dc:	d306      	bcc.n	800d4ec <CircularQueue_Remove+0x120>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	68d9      	ldr	r1, [r3, #12]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	685b      	ldr	r3, [r3, #4]
 800d4e6:	1acb      	subs	r3, r1, r3
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	e002      	b.n	800d4f2 <CircularQueue_Remove+0x126>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	4413      	add	r3, r2
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	4403      	add	r3, r0
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	e001      	b.n	800d504 <CircularQueue_Remove+0x138>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	891b      	ldrh	r3, [r3, #8]
 800d504:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	68d9      	ldr	r1, [r3, #12]
 800d50e:	7a7b      	ldrb	r3, [r7, #9]
 800d510:	4419      	add	r1, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	4299      	cmp	r1, r3
 800d518:	d307      	bcc.n	800d52a <CircularQueue_Remove+0x15e>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68d9      	ldr	r1, [r3, #12]
 800d51e:	7a7b      	ldrb	r3, [r7, #9]
 800d520:	4419      	add	r1, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	1acb      	subs	r3, r1, r3
 800d528:	e003      	b.n	800d532 <CircularQueue_Remove+0x166>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68d9      	ldr	r1, [r3, #12]
 800d52e:	7a7b      	ldrb	r3, [r7, #9]
 800d530:	440b      	add	r3, r1
 800d532:	4413      	add	r3, r2
 800d534:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	8979      	ldrh	r1, [r7, #10]
 800d53c:	7a7a      	ldrb	r2, [r7, #9]
 800d53e:	440a      	add	r2, r1
 800d540:	1a9a      	subs	r2, r3, r2
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d01b      	beq.n	800d586 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	897b      	ldrh	r3, [r7, #10]
 800d554:	441a      	add	r2, r3
 800d556:	7a7b      	ldrb	r3, [r7, #9]
 800d558:	441a      	add	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d309      	bcc.n	800d576 <CircularQueue_Remove+0x1aa>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	897b      	ldrh	r3, [r7, #10]
 800d568:	441a      	add	r2, r3
 800d56a:	7a7b      	ldrb	r3, [r7, #9]
 800d56c:	441a      	add	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	e005      	b.n	800d582 <CircularQueue_Remove+0x1b6>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68da      	ldr	r2, [r3, #12]
 800d57a:	897b      	ldrh	r3, [r7, #10]
 800d57c:	441a      	add	r2, r3
 800d57e:	7a7b      	ldrb	r3, [r7, #9]
 800d580:	4413      	add	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	1e5a      	subs	r2, r3, #1
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d002      	beq.n	800d59c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	897a      	ldrh	r2, [r7, #10]
 800d59a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800d59c:	68fb      	ldr	r3, [r7, #12]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr

0800d5aa <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b087      	sub	sp, #28
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	891b      	ldrh	r3, [r3, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <CircularQueue_Sense+0x1e>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	e000      	b.n	800d5ca <CircularQueue_Sense+0x20>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	695b      	ldr	r3, [r3, #20]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	f000 808e 	beq.w	800d6fa <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	891b      	ldrh	r3, [r3, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d120      	bne.n	800d62e <CircularQueue_Sense+0x84>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	4413      	add	r3, r2
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	1c59      	adds	r1, r3, #1
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	4299      	cmp	r1, r3
 800d60a:	d306      	bcc.n	800d61a <CircularQueue_Sense+0x70>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	68d9      	ldr	r1, [r3, #12]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	1acb      	subs	r3, r1, r3
 800d616:	3301      	adds	r3, #1
 800d618:	e002      	b.n	800d620 <CircularQueue_Sense+0x76>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	3301      	adds	r3, #1
 800d620:	4413      	add	r3, r2
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	021b      	lsls	r3, r3, #8
 800d626:	b29b      	uxth	r3, r3
 800d628:	4403      	add	r3, r0
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	e001      	b.n	800d632 <CircularQueue_Sense+0x88>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	891b      	ldrh	r3, [r3, #8]
 800d632:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7f1b      	ldrb	r3, [r3, #28]
 800d638:	f003 0301 	and.w	r3, r3, #1
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d047      	beq.n	800d6d0 <CircularQueue_Sense+0x126>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	7f1b      	ldrb	r3, [r3, #28]
 800d644:	f003 0302 	and.w	r3, r3, #2
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d141      	bne.n	800d6d0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d64c:	8a7b      	ldrh	r3, [r7, #18]
 800d64e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d652:	4293      	cmp	r3, r2
 800d654:	d103      	bne.n	800d65e <CircularQueue_Sense+0xb4>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	891b      	ldrh	r3, [r3, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d012      	beq.n	800d684 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	68da      	ldr	r2, [r3, #12]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800d666:	429a      	cmp	r2, r3
 800d668:	d932      	bls.n	800d6d0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	891b      	ldrh	r3, [r3, #8]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d02e      	beq.n	800d6d0 <CircularQueue_Sense+0x126>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685a      	ldr	r2, [r3, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	8912      	ldrh	r2, [r2, #8]
 800d680:	4293      	cmp	r3, r2
 800d682:	d225      	bcs.n	800d6d0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	891b      	ldrh	r3, [r3, #8]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d11c      	bne.n	800d6ca <CircularQueue_Sense+0x120>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	4413      	add	r3, r2
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	1c59      	adds	r1, r3, #1
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	4299      	cmp	r1, r3
 800d6aa:	d305      	bcc.n	800d6b8 <CircularQueue_Sense+0x10e>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	68f9      	ldr	r1, [r7, #12]
 800d6b2:	1acb      	subs	r3, r1, r3
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	e001      	b.n	800d6bc <CircularQueue_Sense+0x112>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	021b      	lsls	r3, r3, #8
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	4403      	add	r3, r0
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	e001      	b.n	800d6ce <CircularQueue_Sense+0x124>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	891b      	ldrh	r3, [r3, #8]
 800d6ce:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	7af9      	ldrb	r1, [r7, #11]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	4419      	add	r1, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4299      	cmp	r1, r3
 800d6e0:	d306      	bcc.n	800d6f0 <CircularQueue_Sense+0x146>
 800d6e2:	7af9      	ldrb	r1, [r7, #11]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4419      	add	r1, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	1acb      	subs	r3, r1, r3
 800d6ee:	e002      	b.n	800d6f6 <CircularQueue_Sense+0x14c>
 800d6f0:	7af9      	ldrb	r1, [r7, #11]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	440b      	add	r3, r1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d002      	beq.n	800d706 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	8a7a      	ldrh	r2, [r7, #18]
 800d704:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800d706:	697b      	ldr	r3, [r7, #20]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800d714:	b480      	push	{r7}
 800d716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800d718:	4b03      	ldr	r3, [pc, #12]	@ (800d728 <LL_FLASH_GetUDN+0x14>)
 800d71a:	681b      	ldr	r3, [r3, #0]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr
 800d726:	bf00      	nop
 800d728:	1fff7580 	.word	0x1fff7580

0800d72c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800d72c:	b480      	push	{r7}
 800d72e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800d730:	4b03      	ldr	r3, [pc, #12]	@ (800d740 <LL_FLASH_GetDeviceID+0x14>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	b2db      	uxtb	r3, r3
}
 800d736:	4618      	mov	r0, r3
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr
 800d740:	1fff7584 	.word	0x1fff7584

0800d744 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800d744:	b480      	push	{r7}
 800d746:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800d748:	4b03      	ldr	r3, [pc, #12]	@ (800d758 <LL_FLASH_GetSTCompanyID+0x14>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	0a1b      	lsrs	r3, r3, #8
}
 800d74e:	4618      	mov	r0, r3
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	1fff7584 	.word	0x1fff7584

0800d75c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800d75c:	b5b0      	push	{r4, r5, r7, lr}
 800d75e:	b090      	sub	sp, #64	@ 0x40
 800d760:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800d762:	4b3a      	ldr	r3, [pc, #232]	@ (800d84c <APP_BLE_Init+0xf0>)
 800d764:	1d3c      	adds	r4, r7, #4
 800d766:	461d      	mov	r5, r3
 800d768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d76a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d76c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d76e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d774:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d778:	c403      	stmia	r4!, {r0, r1}
 800d77a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800d77c:	f000 fa92 	bl	800dca4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800d780:	2101      	movs	r1, #1
 800d782:	2002      	movs	r0, #2
 800d784:	f001 f972 	bl	800ea6c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800d788:	4a31      	ldr	r2, [pc, #196]	@ (800d850 <APP_BLE_Init+0xf4>)
 800d78a:	2100      	movs	r1, #0
 800d78c:	2004      	movs	r0, #4
 800d78e:	f001 fa99 	bl	800ecc4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800d792:	1d3b      	adds	r3, r7, #4
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe fc85 	bl	800c0a4 <SHCI_C2_BLE_Init>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (status != SHCI_Success)
 800d7a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d012      	beq.n	800d7ce <APP_BLE_Init+0x72>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800d7a8:	482a      	ldr	r0, [pc, #168]	@ (800d854 <APP_BLE_Init+0xf8>)
 800d7aa:	f7ff f9f3 	bl	800cb94 <DbgTraceGetFileName>
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	f240 1349 	movw	r3, #329	@ 0x149
 800d7b4:	4a28      	ldr	r2, [pc, #160]	@ (800d858 <APP_BLE_Init+0xfc>)
 800d7b6:	4829      	ldr	r0, [pc, #164]	@ (800d85c <APP_BLE_Init+0x100>)
 800d7b8:	f002 f8bc 	bl	800f934 <iprintf>
 800d7bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4827      	ldr	r0, [pc, #156]	@ (800d860 <APP_BLE_Init+0x104>)
 800d7c4:	f002 f8b6 	bl	800f934 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800d7c8:	f7f5 ff7a 	bl	80036c0 <Error_Handler>
 800d7cc:	e00c      	b.n	800d7e8 <APP_BLE_Init+0x8c>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800d7ce:	4821      	ldr	r0, [pc, #132]	@ (800d854 <APP_BLE_Init+0xf8>)
 800d7d0:	f7ff f9e0 	bl	800cb94 <DbgTraceGetFileName>
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	f240 134f 	movw	r3, #335	@ 0x14f
 800d7da:	4a1f      	ldr	r2, [pc, #124]	@ (800d858 <APP_BLE_Init+0xfc>)
 800d7dc:	481f      	ldr	r0, [pc, #124]	@ (800d85c <APP_BLE_Init+0x100>)
 800d7de:	f002 f8a9 	bl	800f934 <iprintf>
 800d7e2:	4820      	ldr	r0, [pc, #128]	@ (800d864 <APP_BLE_Init+0x108>)
 800d7e4:	f002 f8a6 	bl	800f934 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800d7e8:	f000 fa72 	bl	800dcd0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800d7ec:	f7fe fbb4 	bl	800bf58 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d7f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d868 <APP_BLE_Init+0x10c>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800d7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800d868 <APP_BLE_Init+0x10c>)
 800d7fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7fe:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_UPDATE_ID, UTIL_SEQ_RFU, Adv_Update);
 800d800:	4a1a      	ldr	r2, [pc, #104]	@ (800d86c <APP_BLE_Init+0x110>)
 800d802:	2100      	movs	r1, #0
 800d804:	2001      	movs	r0, #1
 800d806:	f001 fa5d 	bl	800ecc4 <UTIL_SEQ_RegTask>
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

  /**
   * Initialize DIS Application
   */
  DISAPP_Init();
 800d80a:	f000 ff35 	bl	800e678 <DISAPP_Init>

  /**
   * Initialize HRS Application
   */
  HRSAPP_Init();
 800d80e:	f000 ff6b 	bl	800e6e8 <HRSAPP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the connection state machine
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 800d812:	4b17      	ldr	r3, [pc, #92]	@ (800d870 <APP_BLE_Init+0x114>)
 800d814:	2200      	movs	r2, #0
 800d816:	4917      	ldr	r1, [pc, #92]	@ (800d874 <APP_BLE_Init+0x118>)
 800d818:	2000      	movs	r0, #0
 800d81a:	f7f5 fc45 	bl	80030a8 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = AD_TYPE_16_BIT_SERV_UUID;
 800d81e:	4b12      	ldr	r3, [pc, #72]	@ (800d868 <APP_BLE_Init+0x10c>)
 800d820:	2202      	movs	r2, #2
 800d822:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 1;
 800d824:	4b10      	ldr	r3, [pc, #64]	@ (800d868 <APP_BLE_Init+0x10c>)
 800d826:	2201      	movs	r2, #1
 800d828:	761a      	strb	r2, [r3, #24]
  Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
 800d82a:	f641 000d 	movw	r0, #6157	@ 0x180d
 800d82e:	f000 fe8f 	bl	800e550 <Add_Advertisment_Service_UUID>

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800d832:	4b11      	ldr	r3, [pc, #68]	@ (800d878 <APP_BLE_Init+0x11c>)
 800d834:	2280      	movs	r2, #128	@ 0x80
 800d836:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800d838:	4b10      	ldr	r3, [pc, #64]	@ (800d87c <APP_BLE_Init+0x120>)
 800d83a:	22a0      	movs	r2, #160	@ 0xa0
 800d83c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by Collector
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800d83e:	2001      	movs	r0, #1
 800d840:	f000 fd40 	bl	800e2c4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800d844:	bf00      	nop
}
 800d846:	3740      	adds	r7, #64	@ 0x40
 800d848:	46bd      	mov	sp, r7
 800d84a:	bdb0      	pop	{r4, r5, r7, pc}
 800d84c:	080125f4 	.word	0x080125f4
 800d850:	0800c2c1 	.word	0x0800c2c1
 800d854:	08012564 	.word	0x08012564
 800d858:	080133ac 	.word	0x080133ac
 800d85c:	08012580 	.word	0x08012580
 800d860:	08012594 	.word	0x08012594
 800d864:	080125cc 	.word	0x080125cc
 800d868:	200016ec 	.word	0x200016ec
 800d86c:	0800e5b9 	.word	0x0800e5b9
 800d870:	0800e5a9 	.word	0x0800e5a9
 800d874:	2000176d 	.word	0x2000176d
 800d878:	20001770 	.word	0x20001770
 800d87c:	20001772 	.word	0x20001772

0800d880 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800d880:	b5b0      	push	{r4, r5, r7, lr}
 800d882:	b090      	sub	sp, #64	@ 0x40
 800d884:	af04      	add	r7, sp, #16
 800d886:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800d888:	2392      	movs	r3, #146	@ 0x92
 800d88a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	3301      	adds	r3, #1
 800d892:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800d894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2bff      	cmp	r3, #255	@ 0xff
 800d89a:	f000 81b8 	beq.w	800dc0e <SVCCTL_App_Notification+0x38e>
 800d89e:	2bff      	cmp	r3, #255	@ 0xff
 800d8a0:	f300 81e6 	bgt.w	800dc70 <SVCCTL_App_Notification+0x3f0>
 800d8a4:	2b05      	cmp	r3, #5
 800d8a6:	d002      	beq.n	800d8ae <SVCCTL_App_Notification+0x2e>
 800d8a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8aa:	d038      	beq.n	800d91e <SVCCTL_App_Notification+0x9e>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800d8ac:	e1e0      	b.n	800dc70 <SVCCTL_App_Notification+0x3f0>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800d8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b0:	3302      	adds	r3, #2
 800d8b2:	613b      	str	r3, [r7, #16]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	4b82      	ldr	r3, [pc, #520]	@ (800dac8 <SVCCTL_App_Notification+0x248>)
 800d8be:	8adb      	ldrh	r3, [r3, #22]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d128      	bne.n	800d916 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800d8c4:	4b80      	ldr	r3, [pc, #512]	@ (800dac8 <SVCCTL_App_Notification+0x248>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d8ca:	4b7f      	ldr	r3, [pc, #508]	@ (800dac8 <SVCCTL_App_Notification+0x248>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800d8d2:	487e      	ldr	r0, [pc, #504]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800d8d4:	f7ff f95e 	bl	800cb94 <DbgTraceGetFileName>
 800d8d8:	4601      	mov	r1, r0
 800d8da:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 800d8de:	4a7c      	ldr	r2, [pc, #496]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800d8e0:	487c      	ldr	r0, [pc, #496]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800d8e2:	f002 f827 	bl	800f934 <iprintf>
 800d8e6:	487c      	ldr	r0, [pc, #496]	@ (800dad8 <SVCCTL_App_Notification+0x258>)
 800d8e8:	f002 f88c 	bl	800fa04 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d8ec:	4877      	ldr	r0, [pc, #476]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800d8ee:	f7ff f951 	bl	800cb94 <DbgTraceGetFileName>
 800d8f2:	4601      	mov	r1, r0
 800d8f4:	f240 13b7 	movw	r3, #439	@ 0x1b7
 800d8f8:	4a75      	ldr	r2, [pc, #468]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800d8fa:	4876      	ldr	r0, [pc, #472]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800d8fc:	f002 f81a 	bl	800f934 <iprintf>
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d906:	b29b      	uxth	r3, r3
 800d908:	4619      	mov	r1, r3
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	78db      	ldrb	r3, [r3, #3]
 800d90e:	461a      	mov	r2, r3
 800d910:	4872      	ldr	r0, [pc, #456]	@ (800dadc <SVCCTL_App_Notification+0x25c>)
 800d912:	f002 f80f 	bl	800f934 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800d916:	2001      	movs	r0, #1
 800d918:	f000 fcd4 	bl	800e2c4 <Adv_Request>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800d91c:	e1a9      	b.n	800dc72 <SVCCTL_App_Notification+0x3f2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800d91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d920:	3302      	adds	r3, #2
 800d922:	623b      	str	r3, [r7, #32]
      switch (p_meta_evt->subevent)
 800d924:	6a3b      	ldr	r3, [r7, #32]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	2b0c      	cmp	r3, #12
 800d92a:	d048      	beq.n	800d9be <SVCCTL_App_Notification+0x13e>
 800d92c:	2b0c      	cmp	r3, #12
 800d92e:	f300 816c 	bgt.w	800dc0a <SVCCTL_App_Notification+0x38a>
 800d932:	2b01      	cmp	r3, #1
 800d934:	f000 80e6 	beq.w	800db04 <SVCCTL_App_Notification+0x284>
 800d938:	2b03      	cmp	r3, #3
 800d93a:	f040 8166 	bne.w	800dc0a <SVCCTL_App_Notification+0x38a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800d93e:	6a3b      	ldr	r3, [r7, #32]
 800d940:	3301      	adds	r3, #1
 800d942:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800d944:	4861      	ldr	r0, [pc, #388]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800d946:	f7ff f925 	bl	800cb94 <DbgTraceGetFileName>
 800d94a:	4601      	mov	r1, r0
 800d94c:	f44f 73ec 	mov.w	r3, #472	@ 0x1d8
 800d950:	4a5f      	ldr	r2, [pc, #380]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800d952:	4860      	ldr	r0, [pc, #384]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800d954:	f001 ffee 	bl	800f934 <iprintf>
 800d958:	4861      	ldr	r0, [pc, #388]	@ (800dae0 <SVCCTL_App_Notification+0x260>)
 800d95a:	f002 f853 	bl	800fa04 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d95e:	485b      	ldr	r0, [pc, #364]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800d960:	f7ff f918 	bl	800cb94 <DbgTraceGetFileName>
 800d964:	4601      	mov	r1, r0
 800d966:	f240 13d9 	movw	r3, #473	@ 0x1d9
 800d96a:	4a59      	ldr	r2, [pc, #356]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800d96c:	4859      	ldr	r0, [pc, #356]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800d96e:	f001 ffe1 	bl	800f934 <iprintf>
 800d972:	69bb      	ldr	r3, [r7, #24]
 800d974:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7f2 fdaa 	bl	80004d4 <__aeabi_i2d>
 800d980:	f04f 0200 	mov.w	r2, #0
 800d984:	4b57      	ldr	r3, [pc, #348]	@ (800dae4 <SVCCTL_App_Notification+0x264>)
 800d986:	f7f2 fe0f 	bl	80005a8 <__aeabi_dmul>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4610      	mov	r0, r2
 800d990:	4619      	mov	r1, r3
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	461c      	mov	r4, r3
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	4413      	add	r3, r2
 800d9ac:	005b      	lsls	r3, r3, #1
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	9400      	str	r4, [sp, #0]
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	484c      	ldr	r0, [pc, #304]	@ (800dae8 <SVCCTL_App_Notification+0x268>)
 800d9b8:	f001 ffbc 	bl	800f934 <iprintf>
          break;
 800d9bc:	e126      	b.n	800dc0c <SVCCTL_App_Notification+0x38c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800d9be:	6a3b      	ldr	r3, [r7, #32]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800d9c4:	4841      	ldr	r0, [pc, #260]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800d9c6:	f7ff f8e5 	bl	800cb94 <DbgTraceGetFileName>
 800d9ca:	4601      	mov	r1, r0
 800d9cc:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 800d9d0:	4a3f      	ldr	r2, [pc, #252]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800d9d2:	4840      	ldr	r0, [pc, #256]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800d9d4:	f001 ffae 	bl	800f934 <iprintf>
 800d9d8:	4844      	ldr	r0, [pc, #272]	@ (800daec <SVCCTL_App_Notification+0x26c>)
 800d9da:	f001 ffab 	bl	800f934 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d10d      	bne.n	800da02 <SVCCTL_App_Notification+0x182>
            APP_DBG_MSG("status ok \n");
 800d9e6:	4839      	ldr	r0, [pc, #228]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800d9e8:	f7ff f8d4 	bl	800cb94 <DbgTraceGetFileName>
 800d9ec:	4601      	mov	r1, r0
 800d9ee:	f240 13e9 	movw	r3, #489	@ 0x1e9
 800d9f2:	4a37      	ldr	r2, [pc, #220]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800d9f4:	4837      	ldr	r0, [pc, #220]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800d9f6:	f001 ff9d 	bl	800f934 <iprintf>
 800d9fa:	483d      	ldr	r0, [pc, #244]	@ (800daf0 <SVCCTL_App_Notification+0x270>)
 800d9fc:	f002 f802 	bl	800fa04 <puts>
 800da00:	e00c      	b.n	800da1c <SVCCTL_App_Notification+0x19c>
            APP_DBG_MSG("status nok \n");
 800da02:	4832      	ldr	r0, [pc, #200]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800da04:	f7ff f8c6 	bl	800cb94 <DbgTraceGetFileName>
 800da08:	4601      	mov	r1, r0
 800da0a:	f240 13ed 	movw	r3, #493	@ 0x1ed
 800da0e:	4a30      	ldr	r2, [pc, #192]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800da10:	4830      	ldr	r0, [pc, #192]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800da12:	f001 ff8f 	bl	800f934 <iprintf>
 800da16:	4837      	ldr	r0, [pc, #220]	@ (800daf4 <SVCCTL_App_Notification+0x274>)
 800da18:	f001 fff4 	bl	800fa04 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800da1c:	4b2a      	ldr	r3, [pc, #168]	@ (800dac8 <SVCCTL_App_Notification+0x248>)
 800da1e:	8adb      	ldrh	r3, [r3, #22]
 800da20:	f107 020e 	add.w	r2, r7, #14
 800da24:	f107 010f 	add.w	r1, r7, #15
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fd fdc2 	bl	800b5b2 <hci_le_read_phy>
 800da2e:	4603      	mov	r3, r0
 800da30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800da34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d00d      	beq.n	800da58 <SVCCTL_App_Notification+0x1d8>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800da3c:	4823      	ldr	r0, [pc, #140]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800da3e:	f7ff f8a9 	bl	800cb94 <DbgTraceGetFileName>
 800da42:	4601      	mov	r1, r0
 800da44:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800da48:	4a21      	ldr	r2, [pc, #132]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800da4a:	4822      	ldr	r0, [pc, #136]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800da4c:	f001 ff72 	bl	800f934 <iprintf>
 800da50:	4829      	ldr	r0, [pc, #164]	@ (800daf8 <SVCCTL_App_Notification+0x278>)
 800da52:	f001 ff6f 	bl	800f934 <iprintf>
          break;
 800da56:	e0d9      	b.n	800dc0c <SVCCTL_App_Notification+0x38c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800da58:	481c      	ldr	r0, [pc, #112]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800da5a:	f7ff f89b 	bl	800cb94 <DbgTraceGetFileName>
 800da5e:	4601      	mov	r1, r0
 800da60:	f240 13f7 	movw	r3, #503	@ 0x1f7
 800da64:	4a1a      	ldr	r2, [pc, #104]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800da66:	481b      	ldr	r0, [pc, #108]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800da68:	f001 ff64 	bl	800f934 <iprintf>
 800da6c:	4823      	ldr	r0, [pc, #140]	@ (800dafc <SVCCTL_App_Notification+0x27c>)
 800da6e:	f001 ffc9 	bl	800fa04 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	2b02      	cmp	r3, #2
 800da76:	d114      	bne.n	800daa2 <SVCCTL_App_Notification+0x222>
 800da78:	7bbb      	ldrb	r3, [r7, #14]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d111      	bne.n	800daa2 <SVCCTL_App_Notification+0x222>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800da7e:	4813      	ldr	r0, [pc, #76]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800da80:	f7ff f888 	bl	800cb94 <DbgTraceGetFileName>
 800da84:	4601      	mov	r1, r0
 800da86:	f240 13fb 	movw	r3, #507	@ 0x1fb
 800da8a:	4a11      	ldr	r2, [pc, #68]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800da8c:	4811      	ldr	r0, [pc, #68]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800da8e:	f001 ff51 	bl	800f934 <iprintf>
 800da92:	7bfb      	ldrb	r3, [r7, #15]
 800da94:	4619      	mov	r1, r3
 800da96:	7bbb      	ldrb	r3, [r7, #14]
 800da98:	461a      	mov	r2, r3
 800da9a:	4819      	ldr	r0, [pc, #100]	@ (800db00 <SVCCTL_App_Notification+0x280>)
 800da9c:	f001 ff4a 	bl	800f934 <iprintf>
          break;
 800daa0:	e0b4      	b.n	800dc0c <SVCCTL_App_Notification+0x38c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800daa2:	480a      	ldr	r0, [pc, #40]	@ (800dacc <SVCCTL_App_Notification+0x24c>)
 800daa4:	f7ff f876 	bl	800cb94 <DbgTraceGetFileName>
 800daa8:	4601      	mov	r1, r0
 800daaa:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800daae:	4a08      	ldr	r2, [pc, #32]	@ (800dad0 <SVCCTL_App_Notification+0x250>)
 800dab0:	4808      	ldr	r0, [pc, #32]	@ (800dad4 <SVCCTL_App_Notification+0x254>)
 800dab2:	f001 ff3f 	bl	800f934 <iprintf>
 800dab6:	7bfb      	ldrb	r3, [r7, #15]
 800dab8:	4619      	mov	r1, r3
 800daba:	7bbb      	ldrb	r3, [r7, #14]
 800dabc:	461a      	mov	r2, r3
 800dabe:	4810      	ldr	r0, [pc, #64]	@ (800db00 <SVCCTL_App_Notification+0x280>)
 800dac0:	f001 ff38 	bl	800f934 <iprintf>
          break;
 800dac4:	e0a2      	b.n	800dc0c <SVCCTL_App_Notification+0x38c>
 800dac6:	bf00      	nop
 800dac8:	200016ec 	.word	0x200016ec
 800dacc:	08012564 	.word	0x08012564
 800dad0:	080133bc 	.word	0x080133bc
 800dad4:	08012580 	.word	0x08012580
 800dad8:	08012630 	.word	0x08012630
 800dadc:	0801265c 	.word	0x0801265c
 800dae0:	08012698 	.word	0x08012698
 800dae4:	3ff40000 	.word	0x3ff40000
 800dae8:	080126cc 	.word	0x080126cc
 800daec:	08012738 	.word	0x08012738
 800daf0:	08012768 	.word	0x08012768
 800daf4:	08012774 	.word	0x08012774
 800daf8:	08012780 	.word	0x08012780
 800dafc:	080127a0 	.word	0x080127a0
 800db00:	080127c0 	.word	0x080127c0
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800db04:	6a3b      	ldr	r3, [r7, #32]
 800db06:	3301      	adds	r3, #1
 800db08:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800db0a:	4b5c      	ldr	r3, [pc, #368]	@ (800dc7c <SVCCTL_App_Notification+0x3fc>)
 800db0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800db10:	4618      	mov	r0, r3
 800db12:	f7f5 fb43 	bl	800319c <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800db16:	485a      	ldr	r0, [pc, #360]	@ (800dc80 <SVCCTL_App_Notification+0x400>)
 800db18:	f7ff f83c 	bl	800cb94 <DbgTraceGetFileName>
 800db1c:	4601      	mov	r1, r0
 800db1e:	f44f 7304 	mov.w	r3, #528	@ 0x210
 800db22:	4a58      	ldr	r2, [pc, #352]	@ (800dc84 <SVCCTL_App_Notification+0x404>)
 800db24:	4858      	ldr	r0, [pc, #352]	@ (800dc88 <SVCCTL_App_Notification+0x408>)
 800db26:	f001 ff05 	bl	800f934 <iprintf>
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800db30:	b29b      	uxth	r3, r3
 800db32:	4619      	mov	r1, r3
 800db34:	4855      	ldr	r0, [pc, #340]	@ (800dc8c <SVCCTL_App_Notification+0x40c>)
 800db36:	f001 fefd 	bl	800f934 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800db3a:	4851      	ldr	r0, [pc, #324]	@ (800dc80 <SVCCTL_App_Notification+0x400>)
 800db3c:	f7ff f82a 	bl	800cb94 <DbgTraceGetFileName>
 800db40:	4601      	mov	r1, r0
 800db42:	f240 2311 	movw	r3, #529	@ 0x211
 800db46:	4a4f      	ldr	r2, [pc, #316]	@ (800dc84 <SVCCTL_App_Notification+0x404>)
 800db48:	484f      	ldr	r0, [pc, #316]	@ (800dc88 <SVCCTL_App_Notification+0x408>)
 800db4a:	f001 fef3 	bl	800f934 <iprintf>
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	7a9b      	ldrb	r3, [r3, #10]
 800db52:	4618      	mov	r0, r3
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	7a5b      	ldrb	r3, [r3, #9]
 800db58:	461c      	mov	r4, r3
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	7a1b      	ldrb	r3, [r3, #8]
 800db5e:	461d      	mov	r5, r3
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	79db      	ldrb	r3, [r3, #7]
 800db64:	461a      	mov	r2, r3
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	799b      	ldrb	r3, [r3, #6]
 800db6a:	4619      	mov	r1, r3
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	795b      	ldrb	r3, [r3, #5]
 800db70:	9302      	str	r3, [sp, #8]
 800db72:	9101      	str	r1, [sp, #4]
 800db74:	9200      	str	r2, [sp, #0]
 800db76:	462b      	mov	r3, r5
 800db78:	4622      	mov	r2, r4
 800db7a:	4601      	mov	r1, r0
 800db7c:	4844      	ldr	r0, [pc, #272]	@ (800dc90 <SVCCTL_App_Notification+0x410>)
 800db7e:	f001 fed9 	bl	800f934 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800db82:	483f      	ldr	r0, [pc, #252]	@ (800dc80 <SVCCTL_App_Notification+0x400>)
 800db84:	f7ff f806 	bl	800cb94 <DbgTraceGetFileName>
 800db88:	4601      	mov	r1, r0
 800db8a:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800db8e:	4a3d      	ldr	r2, [pc, #244]	@ (800dc84 <SVCCTL_App_Notification+0x404>)
 800db90:	483d      	ldr	r0, [pc, #244]	@ (800dc88 <SVCCTL_App_Notification+0x408>)
 800db92:	f001 fecf 	bl	800f934 <iprintf>
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7f2 fc98 	bl	80004d4 <__aeabi_i2d>
 800dba4:	f04f 0200 	mov.w	r2, #0
 800dba8:	4b3a      	ldr	r3, [pc, #232]	@ (800dc94 <SVCCTL_App_Notification+0x414>)
 800dbaa:	f7f2 fcfd 	bl	80005a8 <__aeabi_dmul>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	461c      	mov	r4, r3
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4613      	mov	r3, r2
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	4413      	add	r3, r2
 800dbd0:	005b      	lsls	r3, r3, #1
 800dbd2:	9301      	str	r3, [sp, #4]
 800dbd4:	9400      	str	r4, [sp, #0]
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	482f      	ldr	r0, [pc, #188]	@ (800dc98 <SVCCTL_App_Notification+0x418>)
 800dbdc:	f001 feaa 	bl	800f934 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800dbe0:	4b26      	ldr	r3, [pc, #152]	@ (800dc7c <SVCCTL_App_Notification+0x3fc>)
 800dbe2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800dbe6:	2b04      	cmp	r3, #4
 800dbe8:	d104      	bne.n	800dbf4 <SVCCTL_App_Notification+0x374>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800dbea:	4b24      	ldr	r3, [pc, #144]	@ (800dc7c <SVCCTL_App_Notification+0x3fc>)
 800dbec:	2206      	movs	r2, #6
 800dbee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800dbf2:	e003      	b.n	800dbfc <SVCCTL_App_Notification+0x37c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800dbf4:	4b21      	ldr	r3, [pc, #132]	@ (800dc7c <SVCCTL_App_Notification+0x3fc>)
 800dbf6:	2205      	movs	r2, #5
 800dbf8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	4b1d      	ldr	r3, [pc, #116]	@ (800dc7c <SVCCTL_App_Notification+0x3fc>)
 800dc06:	82da      	strh	r2, [r3, #22]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800dc08:	e000      	b.n	800dc0c <SVCCTL_App_Notification+0x38c>
          break;
 800dc0a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800dc0c:	e031      	b.n	800dc72 <SVCCTL_App_Notification+0x3f2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800dc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc10:	3302      	adds	r3, #2
 800dc12:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800dc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	f240 4207 	movw	r2, #1031	@ 0x407
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d004      	beq.n	800dc2c <SVCCTL_App_Notification+0x3ac>
 800dc22:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d00e      	beq.n	800dc48 <SVCCTL_App_Notification+0x3c8>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800dc2a:	e022      	b.n	800dc72 <SVCCTL_App_Notification+0x3f2>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800dc2c:	4814      	ldr	r0, [pc, #80]	@ (800dc80 <SVCCTL_App_Notification+0x400>)
 800dc2e:	f7fe ffb1 	bl	800cb94 <DbgTraceGetFileName>
 800dc32:	4601      	mov	r1, r0
 800dc34:	f44f 7312 	mov.w	r3, #584	@ 0x248
 800dc38:	4a12      	ldr	r2, [pc, #72]	@ (800dc84 <SVCCTL_App_Notification+0x404>)
 800dc3a:	4813      	ldr	r0, [pc, #76]	@ (800dc88 <SVCCTL_App_Notification+0x408>)
 800dc3c:	f001 fe7a 	bl	800f934 <iprintf>
 800dc40:	4816      	ldr	r0, [pc, #88]	@ (800dc9c <SVCCTL_App_Notification+0x41c>)
 800dc42:	f001 fe77 	bl	800f934 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800dc46:	e012      	b.n	800dc6e <SVCCTL_App_Notification+0x3ee>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800dc48:	480d      	ldr	r0, [pc, #52]	@ (800dc80 <SVCCTL_App_Notification+0x400>)
 800dc4a:	f7fe ffa3 	bl	800cb94 <DbgTraceGetFileName>
 800dc4e:	4601      	mov	r1, r0
 800dc50:	f44f 7314 	mov.w	r3, #592	@ 0x250
 800dc54:	4a0b      	ldr	r2, [pc, #44]	@ (800dc84 <SVCCTL_App_Notification+0x404>)
 800dc56:	480c      	ldr	r0, [pc, #48]	@ (800dc88 <SVCCTL_App_Notification+0x408>)
 800dc58:	f001 fe6c 	bl	800f934 <iprintf>
 800dc5c:	4810      	ldr	r0, [pc, #64]	@ (800dca0 <SVCCTL_App_Notification+0x420>)
 800dc5e:	f001 fe69 	bl	800f934 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800dc62:	4b06      	ldr	r3, [pc, #24]	@ (800dc7c <SVCCTL_App_Notification+0x3fc>)
 800dc64:	8adb      	ldrh	r3, [r3, #22]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd fa91 	bl	800b18e <aci_gatt_confirm_indication>
        break;
 800dc6c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800dc6e:	e000      	b.n	800dc72 <SVCCTL_App_Notification+0x3f2>
      break;
 800dc70:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800dc72:	2301      	movs	r3, #1
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3730      	adds	r7, #48	@ 0x30
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc7c:	200016ec 	.word	0x200016ec
 800dc80:	08012564 	.word	0x08012564
 800dc84:	080133bc 	.word	0x080133bc
 800dc88:	08012580 	.word	0x08012580
 800dc8c:	080127e4 	.word	0x080127e4
 800dc90:	0801282c 	.word	0x0801282c
 800dc94:	3ff40000 	.word	0x3ff40000
 800dc98:	080126cc 	.word	0x080126cc
 800dc9c:	0801287c 	.word	0x0801287c
 800dca0:	080128a4 	.word	0x080128a4

0800dca4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800dcaa:	4b06      	ldr	r3, [pc, #24]	@ (800dcc4 <Ble_Tl_Init+0x20>)
 800dcac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800dcae:	4b06      	ldr	r3, [pc, #24]	@ (800dcc8 <Ble_Tl_Init+0x24>)
 800dcb0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800dcb2:	463b      	mov	r3, r7
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4805      	ldr	r0, [pc, #20]	@ (800dccc <Ble_Tl_Init+0x28>)
 800dcb8:	f7fe fae6 	bl	800c288 <hci_init>

  return;
 800dcbc:	bf00      	nop
}
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	200300d8 	.word	0x200300d8
 800dcc8:	0800e643 	.word	0x0800e643
 800dccc:	0800e60b 	.word	0x0800e60b

0800dcd0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcd2:	b08d      	sub	sp, #52	@ 0x34
 800dcd4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800dcd6:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800dcda:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800dcdc:	2392      	movs	r3, #146	@ 0x92
 800dcde:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800dce0:	48b2      	ldr	r0, [pc, #712]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dce2:	f7fe ff57 	bl	800cb94 <DbgTraceGetFileName>
 800dce6:	4601      	mov	r1, r0
 800dce8:	f240 238d 	movw	r3, #653	@ 0x28d
 800dcec:	4ab0      	ldr	r2, [pc, #704]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dcee:	48b1      	ldr	r0, [pc, #708]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dcf0:	f001 fe20 	bl	800f934 <iprintf>
 800dcf4:	48b0      	ldr	r0, [pc, #704]	@ (800dfb8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800dcf6:	f001 fe85 	bl	800fa04 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800dcfa:	f7fd fc36 	bl	800b56a <hci_reset>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00f      	beq.n	800dd28 <Ble_Hci_Gap_Gatt_Init+0x58>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800dd08:	48a8      	ldr	r0, [pc, #672]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dd0a:	f7fe ff43 	bl	800cb94 <DbgTraceGetFileName>
 800dd0e:	4601      	mov	r1, r0
 800dd10:	f240 2396 	movw	r3, #662	@ 0x296
 800dd14:	4aa6      	ldr	r2, [pc, #664]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dd16:	48a7      	ldr	r0, [pc, #668]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dd18:	f001 fe0c 	bl	800f934 <iprintf>
 800dd1c:	7dfb      	ldrb	r3, [r7, #23]
 800dd1e:	4619      	mov	r1, r3
 800dd20:	48a6      	ldr	r0, [pc, #664]	@ (800dfbc <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800dd22:	f001 fe07 	bl	800f934 <iprintf>
 800dd26:	e00c      	b.n	800dd42 <Ble_Hci_Gap_Gatt_Init+0x72>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800dd28:	48a0      	ldr	r0, [pc, #640]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dd2a:	f7fe ff33 	bl	800cb94 <DbgTraceGetFileName>
 800dd2e:	4601      	mov	r1, r0
 800dd30:	f240 239a 	movw	r3, #666	@ 0x29a
 800dd34:	4a9e      	ldr	r2, [pc, #632]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dd36:	489f      	ldr	r0, [pc, #636]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dd38:	f001 fdfc 	bl	800f934 <iprintf>
 800dd3c:	48a0      	ldr	r0, [pc, #640]	@ (800dfc0 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800dd3e:	f001 fe61 	bl	800fa04 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800dd42:	f000 fbc1 	bl	800e4c8 <BleGetBdAddress>
 800dd46:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	2106      	movs	r1, #6
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	f7fd fb20 	bl	800b392 <aci_hal_write_config_data>
 800dd52:	4603      	mov	r3, r0
 800dd54:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800dd56:	7dfb      	ldrb	r3, [r7, #23]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00f      	beq.n	800dd7c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800dd5c:	4893      	ldr	r0, [pc, #588]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dd5e:	f7fe ff19 	bl	800cb94 <DbgTraceGetFileName>
 800dd62:	4601      	mov	r1, r0
 800dd64:	f44f 7329 	mov.w	r3, #676	@ 0x2a4
 800dd68:	4a91      	ldr	r2, [pc, #580]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dd6a:	4892      	ldr	r0, [pc, #584]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dd6c:	f001 fde2 	bl	800f934 <iprintf>
 800dd70:	7dfb      	ldrb	r3, [r7, #23]
 800dd72:	4619      	mov	r1, r3
 800dd74:	4893      	ldr	r0, [pc, #588]	@ (800dfc4 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800dd76:	f001 fddd 	bl	800f934 <iprintf>
 800dd7a:	e035      	b.n	800dde8 <Ble_Hci_Gap_Gatt_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800dd7c:	488b      	ldr	r0, [pc, #556]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dd7e:	f7fe ff09 	bl	800cb94 <DbgTraceGetFileName>
 800dd82:	4601      	mov	r1, r0
 800dd84:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800dd88:	4a89      	ldr	r2, [pc, #548]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dd8a:	488a      	ldr	r0, [pc, #552]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dd8c:	f001 fdd2 	bl	800f934 <iprintf>
 800dd90:	488d      	ldr	r0, [pc, #564]	@ (800dfc8 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800dd92:	f001 fe37 	bl	800fa04 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800dd96:	4885      	ldr	r0, [pc, #532]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dd98:	f7fe fefc 	bl	800cb94 <DbgTraceGetFileName>
 800dd9c:	4601      	mov	r1, r0
 800dd9e:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800dda2:	4a83      	ldr	r2, [pc, #524]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dda4:	4883      	ldr	r0, [pc, #524]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dda6:	f001 fdc5 	bl	800f934 <iprintf>
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	3305      	adds	r3, #5
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	461c      	mov	r4, r3
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	3303      	adds	r3, #3
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	461d      	mov	r5, r3
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	3302      	adds	r3, #2
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	3301      	adds	r3, #1
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	9302      	str	r3, [sp, #8]
 800ddd8:	9101      	str	r1, [sp, #4]
 800ddda:	9200      	str	r2, [sp, #0]
 800dddc:	462b      	mov	r3, r5
 800ddde:	4622      	mov	r2, r4
 800dde0:	4601      	mov	r1, r0
 800dde2:	487a      	ldr	r0, [pc, #488]	@ (800dfcc <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800dde4:	f001 fda6 	bl	800f934 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	3305      	adds	r3, #5
 800ddec:	781a      	ldrb	r2, [r3, #0]
 800ddee:	4b78      	ldr	r3, [pc, #480]	@ (800dfd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800ddf0:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	781a      	ldrb	r2, [r3, #0]
 800ddf8:	4b75      	ldr	r3, [pc, #468]	@ (800dfd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800ddfa:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	3303      	adds	r3, #3
 800de00:	781a      	ldrb	r2, [r3, #0]
 800de02:	4b73      	ldr	r3, [pc, #460]	@ (800dfd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800de04:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	3302      	adds	r3, #2
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	4b70      	ldr	r3, [pc, #448]	@ (800dfd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800de0e:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	3301      	adds	r3, #1
 800de14:	781a      	ldrb	r2, [r3, #0]
 800de16:	4b6e      	ldr	r3, [pc, #440]	@ (800dfd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800de18:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	781a      	ldrb	r2, [r3, #0]
 800de1e:	4b6c      	ldr	r3, [pc, #432]	@ (800dfd0 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800de20:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800de22:	4a6c      	ldr	r2, [pc, #432]	@ (800dfd4 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800de24:	2110      	movs	r1, #16
 800de26:	2018      	movs	r0, #24
 800de28:	f7fd fab3 	bl	800b392 <aci_hal_write_config_data>
 800de2c:	4603      	mov	r3, r0
 800de2e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800de30:	7dfb      	ldrb	r3, [r7, #23]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00f      	beq.n	800de56 <Ble_Hci_Gap_Gatt_Init+0x186>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800de36:	485d      	ldr	r0, [pc, #372]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800de38:	f7fe feac 	bl	800cb94 <DbgTraceGetFileName>
 800de3c:	4601      	mov	r1, r0
 800de3e:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 800de42:	4a5b      	ldr	r2, [pc, #364]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800de44:	485b      	ldr	r0, [pc, #364]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800de46:	f001 fd75 	bl	800f934 <iprintf>
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	4619      	mov	r1, r3
 800de4e:	4862      	ldr	r0, [pc, #392]	@ (800dfd8 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800de50:	f001 fd70 	bl	800f934 <iprintf>
 800de54:	e00c      	b.n	800de70 <Ble_Hci_Gap_Gatt_Init+0x1a0>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800de56:	4855      	ldr	r0, [pc, #340]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800de58:	f7fe fe9c 	bl	800cb94 <DbgTraceGetFileName>
 800de5c:	4601      	mov	r1, r0
 800de5e:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 800de62:	4a53      	ldr	r2, [pc, #332]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800de64:	4853      	ldr	r0, [pc, #332]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800de66:	f001 fd65 	bl	800f934 <iprintf>
 800de6a:	485c      	ldr	r0, [pc, #368]	@ (800dfdc <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800de6c:	f001 fdca 	bl	800fa04 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800de70:	4a5b      	ldr	r2, [pc, #364]	@ (800dfe0 <Ble_Hci_Gap_Gatt_Init+0x310>)
 800de72:	2110      	movs	r1, #16
 800de74:	2008      	movs	r0, #8
 800de76:	f7fd fa8c 	bl	800b392 <aci_hal_write_config_data>
 800de7a:	4603      	mov	r3, r0
 800de7c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00f      	beq.n	800dea4 <Ble_Hci_Gap_Gatt_Init+0x1d4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800de84:	4849      	ldr	r0, [pc, #292]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800de86:	f7fe fe85 	bl	800cb94 <DbgTraceGetFileName>
 800de8a:	4601      	mov	r1, r0
 800de8c:	f240 23e9 	movw	r3, #745	@ 0x2e9
 800de90:	4a47      	ldr	r2, [pc, #284]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800de92:	4848      	ldr	r0, [pc, #288]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800de94:	f001 fd4e 	bl	800f934 <iprintf>
 800de98:	7dfb      	ldrb	r3, [r7, #23]
 800de9a:	4619      	mov	r1, r3
 800de9c:	4851      	ldr	r0, [pc, #324]	@ (800dfe4 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800de9e:	f001 fd49 	bl	800f934 <iprintf>
 800dea2:	e00c      	b.n	800debe <Ble_Hci_Gap_Gatt_Init+0x1ee>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800dea4:	4841      	ldr	r0, [pc, #260]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800dea6:	f7fe fe75 	bl	800cb94 <DbgTraceGetFileName>
 800deaa:	4601      	mov	r1, r0
 800deac:	f240 23ed 	movw	r3, #749	@ 0x2ed
 800deb0:	4a3f      	ldr	r2, [pc, #252]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800deb2:	4840      	ldr	r0, [pc, #256]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800deb4:	f001 fd3e 	bl	800f934 <iprintf>
 800deb8:	484b      	ldr	r0, [pc, #300]	@ (800dfe8 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800deba:	f001 fda3 	bl	800fa04 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800debe:	2118      	movs	r1, #24
 800dec0:	2001      	movs	r0, #1
 800dec2:	f7fd faeb 	bl	800b49c <aci_hal_set_tx_power_level>
 800dec6:	4603      	mov	r3, r0
 800dec8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800deca:	7dfb      	ldrb	r3, [r7, #23]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00f      	beq.n	800def0 <Ble_Hci_Gap_Gatt_Init+0x220>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800ded0:	4836      	ldr	r0, [pc, #216]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800ded2:	f7fe fe5f 	bl	800cb94 <DbgTraceGetFileName>
 800ded6:	4601      	mov	r1, r0
 800ded8:	f240 23f6 	movw	r3, #758	@ 0x2f6
 800dedc:	4a34      	ldr	r2, [pc, #208]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800dede:	4835      	ldr	r0, [pc, #212]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800dee0:	f001 fd28 	bl	800f934 <iprintf>
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	4619      	mov	r1, r3
 800dee8:	4840      	ldr	r0, [pc, #256]	@ (800dfec <Ble_Hci_Gap_Gatt_Init+0x31c>)
 800deea:	f001 fd23 	bl	800f934 <iprintf>
 800deee:	e00c      	b.n	800df0a <Ble_Hci_Gap_Gatt_Init+0x23a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800def0:	482e      	ldr	r0, [pc, #184]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800def2:	f7fe fe4f 	bl	800cb94 <DbgTraceGetFileName>
 800def6:	4601      	mov	r1, r0
 800def8:	f240 23fa 	movw	r3, #762	@ 0x2fa
 800defc:	4a2c      	ldr	r2, [pc, #176]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800defe:	482d      	ldr	r0, [pc, #180]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800df00:	f001 fd18 	bl	800f934 <iprintf>
 800df04:	483a      	ldr	r0, [pc, #232]	@ (800dff0 <Ble_Hci_Gap_Gatt_Init+0x320>)
 800df06:	f001 fd7d 	bl	800fa04 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800df0a:	f7fc fe94 	bl	800ac36 <aci_gatt_init>
 800df0e:	4603      	mov	r3, r0
 800df10:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800df12:	7dfb      	ldrb	r3, [r7, #23]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00f      	beq.n	800df38 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800df18:	4824      	ldr	r0, [pc, #144]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800df1a:	f7fe fe3b 	bl	800cb94 <DbgTraceGetFileName>
 800df1e:	4601      	mov	r1, r0
 800df20:	f240 3303 	movw	r3, #771	@ 0x303
 800df24:	4a22      	ldr	r2, [pc, #136]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800df26:	4823      	ldr	r0, [pc, #140]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800df28:	f001 fd04 	bl	800f934 <iprintf>
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	4619      	mov	r1, r3
 800df30:	4830      	ldr	r0, [pc, #192]	@ (800dff4 <Ble_Hci_Gap_Gatt_Init+0x324>)
 800df32:	f001 fcff 	bl	800f934 <iprintf>
 800df36:	e00c      	b.n	800df52 <Ble_Hci_Gap_Gatt_Init+0x282>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800df38:	481c      	ldr	r0, [pc, #112]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800df3a:	f7fe fe2b 	bl	800cb94 <DbgTraceGetFileName>
 800df3e:	4601      	mov	r1, r0
 800df40:	f240 3307 	movw	r3, #775	@ 0x307
 800df44:	4a1a      	ldr	r2, [pc, #104]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800df46:	481b      	ldr	r0, [pc, #108]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800df48:	f001 fcf4 	bl	800f934 <iprintf>
 800df4c:	482a      	ldr	r0, [pc, #168]	@ (800dff8 <Ble_Hci_Gap_Gatt_Init+0x328>)
 800df4e:	f001 fd59 	bl	800fa04 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800df52:	2300      	movs	r3, #0
 800df54:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800df56:	7bfb      	ldrb	r3, [r7, #15]
 800df58:	f043 0301 	orr.w	r3, r3, #1
 800df5c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 808b 	beq.w	800e07c <Ble_Hci_Gap_Gatt_Init+0x3ac>
  {
    const char *name = "HEART";
 800df66:	4b25      	ldr	r3, [pc, #148]	@ (800dffc <Ble_Hci_Gap_Gatt_Init+0x32c>)
 800df68:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800df6a:	1dba      	adds	r2, r7, #6
 800df6c:	7bf8      	ldrb	r0, [r7, #15]
 800df6e:	1cbb      	adds	r3, r7, #2
 800df70:	9301      	str	r3, [sp, #4]
 800df72:	1d3b      	adds	r3, r7, #4
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	4613      	mov	r3, r2
 800df78:	2207      	movs	r2, #7
 800df7a:	2100      	movs	r1, #0
 800df7c:	f7fc fd18 	bl	800a9b0 <aci_gap_init>
 800df80:	4603      	mov	r3, r0
 800df82:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800df84:	7dfb      	ldrb	r3, [r7, #23]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d03c      	beq.n	800e004 <Ble_Hci_Gap_Gatt_Init+0x334>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800df8a:	4808      	ldr	r0, [pc, #32]	@ (800dfac <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800df8c:	f7fe fe02 	bl	800cb94 <DbgTraceGetFileName>
 800df90:	4601      	mov	r1, r0
 800df92:	f240 3327 	movw	r3, #807	@ 0x327
 800df96:	4a06      	ldr	r2, [pc, #24]	@ (800dfb0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800df98:	4806      	ldr	r0, [pc, #24]	@ (800dfb4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800df9a:	f001 fccb 	bl	800f934 <iprintf>
 800df9e:	7dfb      	ldrb	r3, [r7, #23]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	4817      	ldr	r0, [pc, #92]	@ (800e000 <Ble_Hci_Gap_Gatt_Init+0x330>)
 800dfa4:	f001 fcc6 	bl	800f934 <iprintf>
 800dfa8:	e039      	b.n	800e01e <Ble_Hci_Gap_Gatt_Init+0x34e>
 800dfaa:	bf00      	nop
 800dfac:	08012564 	.word	0x08012564
 800dfb0:	080133d4 	.word	0x080133d4
 800dfb4:	08012580 	.word	0x08012580
 800dfb8:	080128cc 	.word	0x080128cc
 800dfbc:	080128f8 	.word	0x080128f8
 800dfc0:	08012928 	.word	0x08012928
 800dfc4:	08012948 	.word	0x08012948
 800dfc8:	080129a4 	.word	0x080129a4
 800dfcc:	080129f0 	.word	0x080129f0
 800dfd0:	20000014 	.word	0x20000014
 800dfd4:	08013384 	.word	0x08013384
 800dfd8:	08012a2c 	.word	0x08012a2c
 800dfdc:	08012a84 	.word	0x08012a84
 800dfe0:	08013394 	.word	0x08013394
 800dfe4:	08012acc 	.word	0x08012acc
 800dfe8:	08012b24 	.word	0x08012b24
 800dfec:	08012b6c 	.word	0x08012b6c
 800dff0:	08012bac 	.word	0x08012bac
 800dff4:	08012bdc 	.word	0x08012bdc
 800dff8:	08012c10 	.word	0x08012c10
 800dffc:	08012c34 	.word	0x08012c34
 800e000:	08012c3c 	.word	0x08012c3c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800e004:	489c      	ldr	r0, [pc, #624]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e006:	f7fe fdc5 	bl	800cb94 <DbgTraceGetFileName>
 800e00a:	4601      	mov	r1, r0
 800e00c:	f240 332b 	movw	r3, #811	@ 0x32b
 800e010:	4a9a      	ldr	r2, [pc, #616]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e012:	489b      	ldr	r0, [pc, #620]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e014:	f001 fc8e 	bl	800f934 <iprintf>
 800e018:	489a      	ldr	r0, [pc, #616]	@ (800e284 <Ble_Hci_Gap_Gatt_Init+0x5b4>)
 800e01a:	f001 fcf3 	bl	800fa04 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800e01e:	88fc      	ldrh	r4, [r7, #6]
 800e020:	88bd      	ldrh	r5, [r7, #4]
 800e022:	68b8      	ldr	r0, [r7, #8]
 800e024:	f7f2 f8fc 	bl	8000220 <strlen>
 800e028:	4603      	mov	r3, r0
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	4613      	mov	r3, r2
 800e032:	2200      	movs	r2, #0
 800e034:	4629      	mov	r1, r5
 800e036:	4620      	mov	r0, r4
 800e038:	f7fd f800 	bl	800b03c <aci_gatt_update_char_value>
 800e03c:	4603      	mov	r3, r0
 800e03e:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00d      	beq.n	800e062 <Ble_Hci_Gap_Gatt_Init+0x392>
    {
      BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Device Name\n");
 800e046:	488c      	ldr	r0, [pc, #560]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e048:	f7fe fda4 	bl	800cb94 <DbgTraceGetFileName>
 800e04c:	4601      	mov	r1, r0
 800e04e:	f240 3331 	movw	r3, #817	@ 0x331
 800e052:	4a8a      	ldr	r2, [pc, #552]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e054:	488a      	ldr	r0, [pc, #552]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e056:	f001 fc6d 	bl	800f934 <iprintf>
 800e05a:	488b      	ldr	r0, [pc, #556]	@ (800e288 <Ble_Hci_Gap_Gatt_Init+0x5b8>)
 800e05c:	f001 fcd2 	bl	800fa04 <puts>
 800e060:	e00c      	b.n	800e07c <Ble_Hci_Gap_Gatt_Init+0x3ac>
    }
    else
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
 800e062:	4885      	ldr	r0, [pc, #532]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e064:	f7fe fd96 	bl	800cb94 <DbgTraceGetFileName>
 800e068:	4601      	mov	r1, r0
 800e06a:	f240 3335 	movw	r3, #821	@ 0x335
 800e06e:	4a83      	ldr	r2, [pc, #524]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e070:	4883      	ldr	r0, [pc, #524]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e072:	f001 fc5f 	bl	800f934 <iprintf>
 800e076:	4885      	ldr	r0, [pc, #532]	@ (800e28c <Ble_Hci_Gap_Gatt_Init+0x5bc>)
 800e078:	f001 fcc4 	bl	800fa04 <puts>
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800e07c:	88f8      	ldrh	r0, [r7, #6]
 800e07e:	8879      	ldrh	r1, [r7, #2]
 800e080:	463b      	mov	r3, r7
 800e082:	9300      	str	r3, [sp, #0]
 800e084:	2302      	movs	r3, #2
 800e086:	2200      	movs	r2, #0
 800e088:	f7fc ffd8 	bl	800b03c <aci_gatt_update_char_value>
 800e08c:	4603      	mov	r3, r0
 800e08e:	75fb      	strb	r3, [r7, #23]
                                   gap_appearance_char_handle,
                                   0,
                                   2,
                                   (uint8_t *)&a_appearance);
  if (ret != BLE_STATUS_SUCCESS)
 800e090:	7dfb      	ldrb	r3, [r7, #23]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00d      	beq.n	800e0b2 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  {
    BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Appearance\n");
 800e096:	4878      	ldr	r0, [pc, #480]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e098:	f7fe fd7c 	bl	800cb94 <DbgTraceGetFileName>
 800e09c:	4601      	mov	r1, r0
 800e09e:	f44f 7350 	mov.w	r3, #832	@ 0x340
 800e0a2:	4a76      	ldr	r2, [pc, #472]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e0a4:	4876      	ldr	r0, [pc, #472]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e0a6:	f001 fc45 	bl	800f934 <iprintf>
 800e0aa:	4879      	ldr	r0, [pc, #484]	@ (800e290 <Ble_Hci_Gap_Gatt_Init+0x5c0>)
 800e0ac:	f001 fcaa 	bl	800fa04 <puts>
 800e0b0:	e00c      	b.n	800e0cc <Ble_Hci_Gap_Gatt_Init+0x3fc>
  }
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
 800e0b2:	4871      	ldr	r0, [pc, #452]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e0b4:	f7fe fd6e 	bl	800cb94 <DbgTraceGetFileName>
 800e0b8:	4601      	mov	r1, r0
 800e0ba:	f44f 7351 	mov.w	r3, #836	@ 0x344
 800e0be:	4a6f      	ldr	r2, [pc, #444]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e0c0:	486f      	ldr	r0, [pc, #444]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e0c2:	f001 fc37 	bl	800f934 <iprintf>
 800e0c6:	4873      	ldr	r0, [pc, #460]	@ (800e294 <Ble_Hci_Gap_Gatt_Init+0x5c4>)
 800e0c8:	f001 fc9c 	bl	800fa04 <puts>
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800e0cc:	2202      	movs	r2, #2
 800e0ce:	2102      	movs	r1, #2
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	f7fd faec 	bl	800b6ae <hci_le_set_default_phy>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e0da:	7dfb      	ldrb	r3, [r7, #23]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00f      	beq.n	800e100 <Ble_Hci_Gap_Gatt_Init+0x430>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800e0e0:	4865      	ldr	r0, [pc, #404]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e0e2:	f7fe fd57 	bl	800cb94 <DbgTraceGetFileName>
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	f240 334d 	movw	r3, #845	@ 0x34d
 800e0ec:	4a63      	ldr	r2, [pc, #396]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e0ee:	4864      	ldr	r0, [pc, #400]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e0f0:	f001 fc20 	bl	800f934 <iprintf>
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	4867      	ldr	r0, [pc, #412]	@ (800e298 <Ble_Hci_Gap_Gatt_Init+0x5c8>)
 800e0fa:	f001 fc1b 	bl	800f934 <iprintf>
 800e0fe:	e00c      	b.n	800e11a <Ble_Hci_Gap_Gatt_Init+0x44a>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800e100:	485d      	ldr	r0, [pc, #372]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e102:	f7fe fd47 	bl	800cb94 <DbgTraceGetFileName>
 800e106:	4601      	mov	r1, r0
 800e108:	f240 3351 	movw	r3, #849	@ 0x351
 800e10c:	4a5b      	ldr	r2, [pc, #364]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e10e:	485c      	ldr	r0, [pc, #368]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e110:	f001 fc10 	bl	800f934 <iprintf>
 800e114:	4861      	ldr	r0, [pc, #388]	@ (800e29c <Ble_Hci_Gap_Gatt_Init+0x5cc>)
 800e116:	f001 fc75 	bl	800fa04 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800e11a:	4b61      	ldr	r3, [pc, #388]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e11c:	2201      	movs	r2, #1
 800e11e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800e120:	4b5f      	ldr	r3, [pc, #380]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	4618      	mov	r0, r3
 800e126:	f7fc fb2b 	bl	800a780 <aci_gap_set_io_capability>
 800e12a:	4603      	mov	r3, r0
 800e12c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d00f      	beq.n	800e154 <Ble_Hci_Gap_Gatt_Init+0x484>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800e134:	4850      	ldr	r0, [pc, #320]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e136:	f7fe fd2d 	bl	800cb94 <DbgTraceGetFileName>
 800e13a:	4601      	mov	r1, r0
 800e13c:	f240 335b 	movw	r3, #859	@ 0x35b
 800e140:	4a4e      	ldr	r2, [pc, #312]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e142:	484f      	ldr	r0, [pc, #316]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e144:	f001 fbf6 	bl	800f934 <iprintf>
 800e148:	7dfb      	ldrb	r3, [r7, #23]
 800e14a:	4619      	mov	r1, r3
 800e14c:	4855      	ldr	r0, [pc, #340]	@ (800e2a4 <Ble_Hci_Gap_Gatt_Init+0x5d4>)
 800e14e:	f001 fbf1 	bl	800f934 <iprintf>
 800e152:	e00c      	b.n	800e16e <Ble_Hci_Gap_Gatt_Init+0x49e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800e154:	4848      	ldr	r0, [pc, #288]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e156:	f7fe fd1d 	bl	800cb94 <DbgTraceGetFileName>
 800e15a:	4601      	mov	r1, r0
 800e15c:	f240 335f 	movw	r3, #863	@ 0x35f
 800e160:	4a46      	ldr	r2, [pc, #280]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e162:	4847      	ldr	r0, [pc, #284]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e164:	f001 fbe6 	bl	800f934 <iprintf>
 800e168:	484f      	ldr	r0, [pc, #316]	@ (800e2a8 <Ble_Hci_Gap_Gatt_Init+0x5d8>)
 800e16a:	f001 fc4b 	bl	800fa04 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800e16e:	4b4c      	ldr	r3, [pc, #304]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e170:	2201      	movs	r2, #1
 800e172:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800e174:	4b4a      	ldr	r3, [pc, #296]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e176:	2208      	movs	r2, #8
 800e178:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800e17a:	4b49      	ldr	r3, [pc, #292]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e17c:	2210      	movs	r2, #16
 800e17e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800e180:	4b47      	ldr	r3, [pc, #284]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e182:	2200      	movs	r2, #0
 800e184:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800e186:	4b46      	ldr	r3, [pc, #280]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e188:	4a48      	ldr	r2, [pc, #288]	@ (800e2ac <Ble_Hci_Gap_Gatt_Init+0x5dc>)
 800e18a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800e18c:	4b44      	ldr	r3, [pc, #272]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e18e:	2201      	movs	r2, #1
 800e190:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800e192:	4b43      	ldr	r3, [pc, #268]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e194:	789c      	ldrb	r4, [r3, #2]
 800e196:	4b42      	ldr	r3, [pc, #264]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e198:	785d      	ldrb	r5, [r3, #1]
 800e19a:	4b41      	ldr	r3, [pc, #260]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e19c:	791b      	ldrb	r3, [r3, #4]
 800e19e:	4a40      	ldr	r2, [pc, #256]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e1a0:	7952      	ldrb	r2, [r2, #5]
 800e1a2:	493f      	ldr	r1, [pc, #252]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e1a4:	78c9      	ldrb	r1, [r1, #3]
 800e1a6:	483e      	ldr	r0, [pc, #248]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e1a8:	6880      	ldr	r0, [r0, #8]
 800e1aa:	2600      	movs	r6, #0
 800e1ac:	9604      	str	r6, [sp, #16]
 800e1ae:	9003      	str	r0, [sp, #12]
 800e1b0:	9102      	str	r1, [sp, #8]
 800e1b2:	9201      	str	r2, [sp, #4]
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f7fc fb33 	bl	800a828 <aci_gap_set_authentication_requirement>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800e1c6:	7dfb      	ldrb	r3, [r7, #23]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00f      	beq.n	800e1ec <Ble_Hci_Gap_Gatt_Init+0x51c>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800e1cc:	482a      	ldr	r0, [pc, #168]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e1ce:	f7fe fce1 	bl	800cb94 <DbgTraceGetFileName>
 800e1d2:	4601      	mov	r1, r0
 800e1d4:	f240 337a 	movw	r3, #890	@ 0x37a
 800e1d8:	4a28      	ldr	r2, [pc, #160]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e1da:	4829      	ldr	r0, [pc, #164]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e1dc:	f001 fbaa 	bl	800f934 <iprintf>
 800e1e0:	7dfb      	ldrb	r3, [r7, #23]
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4832      	ldr	r0, [pc, #200]	@ (800e2b0 <Ble_Hci_Gap_Gatt_Init+0x5e0>)
 800e1e6:	f001 fba5 	bl	800f934 <iprintf>
 800e1ea:	e00c      	b.n	800e206 <Ble_Hci_Gap_Gatt_Init+0x536>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800e1ec:	4822      	ldr	r0, [pc, #136]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e1ee:	f7fe fcd1 	bl	800cb94 <DbgTraceGetFileName>
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	f240 337e 	movw	r3, #894	@ 0x37e
 800e1f8:	4a20      	ldr	r2, [pc, #128]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e1fa:	4821      	ldr	r0, [pc, #132]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e1fc:	f001 fb9a 	bl	800f934 <iprintf>
 800e200:	482c      	ldr	r0, [pc, #176]	@ (800e2b4 <Ble_Hci_Gap_Gatt_Init+0x5e4>)
 800e202:	f001 fbff 	bl	800fa04 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800e206:	4b26      	ldr	r3, [pc, #152]	@ (800e2a0 <Ble_Hci_Gap_Gatt_Init+0x5d0>)
 800e208:	789b      	ldrb	r3, [r3, #2]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d023      	beq.n	800e256 <Ble_Hci_Gap_Gatt_Init+0x586>
  {
    ret = aci_gap_configure_whitelist();
 800e20e:	f7fc fcee 	bl	800abee <aci_gap_configure_filter_accept_list>
 800e212:	4603      	mov	r3, r0
 800e214:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800e216:	7dfb      	ldrb	r3, [r7, #23]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00f      	beq.n	800e23c <Ble_Hci_Gap_Gatt_Init+0x56c>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800e21c:	4816      	ldr	r0, [pc, #88]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e21e:	f7fe fcb9 	bl	800cb94 <DbgTraceGetFileName>
 800e222:	4601      	mov	r1, r0
 800e224:	f240 3389 	movw	r3, #905	@ 0x389
 800e228:	4a14      	ldr	r2, [pc, #80]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e22a:	4815      	ldr	r0, [pc, #84]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e22c:	f001 fb82 	bl	800f934 <iprintf>
 800e230:	7dfb      	ldrb	r3, [r7, #23]
 800e232:	4619      	mov	r1, r3
 800e234:	4820      	ldr	r0, [pc, #128]	@ (800e2b8 <Ble_Hci_Gap_Gatt_Init+0x5e8>)
 800e236:	f001 fb7d 	bl	800f934 <iprintf>
 800e23a:	e00c      	b.n	800e256 <Ble_Hci_Gap_Gatt_Init+0x586>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800e23c:	480e      	ldr	r0, [pc, #56]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e23e:	f7fe fca9 	bl	800cb94 <DbgTraceGetFileName>
 800e242:	4601      	mov	r1, r0
 800e244:	f240 338d 	movw	r3, #909	@ 0x38d
 800e248:	4a0c      	ldr	r2, [pc, #48]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e24a:	480d      	ldr	r0, [pc, #52]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e24c:	f001 fb72 	bl	800f934 <iprintf>
 800e250:	481a      	ldr	r0, [pc, #104]	@ (800e2bc <Ble_Hci_Gap_Gatt_Init+0x5ec>)
 800e252:	f001 fbd7 	bl	800fa04 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800e256:	4808      	ldr	r0, [pc, #32]	@ (800e278 <Ble_Hci_Gap_Gatt_Init+0x5a8>)
 800e258:	f7fe fc9c 	bl	800cb94 <DbgTraceGetFileName>
 800e25c:	4601      	mov	r1, r0
 800e25e:	f44f 7364 	mov.w	r3, #912	@ 0x390
 800e262:	4a06      	ldr	r2, [pc, #24]	@ (800e27c <Ble_Hci_Gap_Gatt_Init+0x5ac>)
 800e264:	4806      	ldr	r0, [pc, #24]	@ (800e280 <Ble_Hci_Gap_Gatt_Init+0x5b0>)
 800e266:	f001 fb65 	bl	800f934 <iprintf>
 800e26a:	4815      	ldr	r0, [pc, #84]	@ (800e2c0 <Ble_Hci_Gap_Gatt_Init+0x5f0>)
 800e26c:	f001 fb62 	bl	800f934 <iprintf>
}
 800e270:	bf00      	nop
 800e272:	371c      	adds	r7, #28
 800e274:	46bd      	mov	sp, r7
 800e276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e278:	08012564 	.word	0x08012564
 800e27c:	080133d4 	.word	0x080133d4
 800e280:	08012580 	.word	0x08012580
 800e284:	08012c6c 	.word	0x08012c6c
 800e288:	08012c8c 	.word	0x08012c8c
 800e28c:	08012cc0 	.word	0x08012cc0
 800e290:	08012cf4 	.word	0x08012cf4
 800e294:	08012d28 	.word	0x08012d28
 800e298:	08012d5c 	.word	0x08012d5c
 800e29c:	08012d98 	.word	0x08012d98
 800e2a0:	200016ec 	.word	0x200016ec
 800e2a4:	08012dc4 	.word	0x08012dc4
 800e2a8:	08012e04 	.word	0x08012e04
 800e2ac:	0001b207 	.word	0x0001b207
 800e2b0:	08012e34 	.word	0x08012e34
 800e2b4:	08012e80 	.word	0x08012e80
 800e2b8:	08012ebc 	.word	0x08012ebc
 800e2bc:	08012efc 	.word	0x08012efc
 800e2c0:	08012f2c 	.word	0x08012f2c

0800e2c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b08c      	sub	sp, #48	@ 0x30
 800e2c8:	af08      	add	r7, sp, #32
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800e2ce:	2392      	movs	r3, #146	@ 0x92
 800e2d0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d106      	bne.n	800e2e6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800e2d8:	4b69      	ldr	r3, [pc, #420]	@ (800e480 <Adv_Request+0x1bc>)
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800e2de:	4b69      	ldr	r3, [pc, #420]	@ (800e484 <Adv_Request+0x1c0>)
 800e2e0:	881b      	ldrh	r3, [r3, #0]
 800e2e2:	81bb      	strh	r3, [r7, #12]
 800e2e4:	e005      	b.n	800e2f2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800e2e6:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800e2ea:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800e2ec:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800e2f0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800e2f2:	4b65      	ldr	r3, [pc, #404]	@ (800e488 <Adv_Request+0x1c4>)
 800e2f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7f4 ff4f 	bl	800319c <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800e2fe:	79fb      	ldrb	r3, [r7, #7]
 800e300:	2b02      	cmp	r3, #2
 800e302:	d12d      	bne.n	800e360 <Adv_Request+0x9c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800e304:	4b60      	ldr	r3, [pc, #384]	@ (800e488 <Adv_Request+0x1c4>)
 800e306:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e30a:	2b01      	cmp	r3, #1
 800e30c:	d004      	beq.n	800e318 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800e30e:	4b5e      	ldr	r3, [pc, #376]	@ (800e488 <Adv_Request+0x1c4>)
 800e310:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e314:	2b02      	cmp	r3, #2
 800e316:	d123      	bne.n	800e360 <Adv_Request+0x9c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800e318:	f7fc f914 	bl	800a544 <aci_gap_set_non_discoverable>
 800e31c:	4603      	mov	r3, r0
 800e31e:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800e320:	7afb      	ldrb	r3, [r7, #11]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00f      	beq.n	800e346 <Adv_Request+0x82>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800e326:	4859      	ldr	r0, [pc, #356]	@ (800e48c <Adv_Request+0x1c8>)
 800e328:	f7fe fc34 	bl	800cb94 <DbgTraceGetFileName>
 800e32c:	4601      	mov	r1, r0
 800e32e:	f240 33b1 	movw	r3, #945	@ 0x3b1
 800e332:	4a57      	ldr	r2, [pc, #348]	@ (800e490 <Adv_Request+0x1cc>)
 800e334:	4857      	ldr	r0, [pc, #348]	@ (800e494 <Adv_Request+0x1d0>)
 800e336:	f001 fafd 	bl	800f934 <iprintf>
 800e33a:	7afb      	ldrb	r3, [r7, #11]
 800e33c:	4619      	mov	r1, r3
 800e33e:	4856      	ldr	r0, [pc, #344]	@ (800e498 <Adv_Request+0x1d4>)
 800e340:	f001 faf8 	bl	800f934 <iprintf>
 800e344:	e00c      	b.n	800e360 <Adv_Request+0x9c>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800e346:	4851      	ldr	r0, [pc, #324]	@ (800e48c <Adv_Request+0x1c8>)
 800e348:	f7fe fc24 	bl	800cb94 <DbgTraceGetFileName>
 800e34c:	4601      	mov	r1, r0
 800e34e:	f240 33b5 	movw	r3, #949	@ 0x3b5
 800e352:	4a4f      	ldr	r2, [pc, #316]	@ (800e490 <Adv_Request+0x1cc>)
 800e354:	484f      	ldr	r0, [pc, #316]	@ (800e494 <Adv_Request+0x1d0>)
 800e356:	f001 faed 	bl	800f934 <iprintf>
 800e35a:	4850      	ldr	r0, [pc, #320]	@ (800e49c <Adv_Request+0x1d8>)
 800e35c:	f001 fb52 	bl	800fa04 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800e360:	4a49      	ldr	r2, [pc, #292]	@ (800e488 <Adv_Request+0x1c4>)
 800e362:	79fb      	ldrb	r3, [r7, #7]
 800e364:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800e368:	4b47      	ldr	r3, [pc, #284]	@ (800e488 <Adv_Request+0x1c4>)
 800e36a:	7e1b      	ldrb	r3, [r3, #24]
 800e36c:	89ba      	ldrh	r2, [r7, #12]
 800e36e:	89f9      	ldrh	r1, [r7, #14]
 800e370:	2000      	movs	r0, #0
 800e372:	9006      	str	r0, [sp, #24]
 800e374:	2000      	movs	r0, #0
 800e376:	9005      	str	r0, [sp, #20]
 800e378:	4849      	ldr	r0, [pc, #292]	@ (800e4a0 <Adv_Request+0x1dc>)
 800e37a:	9004      	str	r0, [sp, #16]
 800e37c:	9303      	str	r3, [sp, #12]
 800e37e:	4b49      	ldr	r3, [pc, #292]	@ (800e4a4 <Adv_Request+0x1e0>)
 800e380:	9302      	str	r3, [sp, #8]
 800e382:	2306      	movs	r3, #6
 800e384:	9301      	str	r3, [sp, #4]
 800e386:	2300      	movs	r3, #0
 800e388:	9300      	str	r3, [sp, #0]
 800e38a:	2300      	movs	r3, #0
 800e38c:	2000      	movs	r0, #0
 800e38e:	f7fc f8fd 	bl	800a58c <aci_gap_set_discoverable>
 800e392:	4603      	mov	r3, r0
 800e394:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800e396:	7afb      	ldrb	r3, [r7, #11]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00f      	beq.n	800e3bc <Adv_Request+0xf8>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800e39c:	483b      	ldr	r0, [pc, #236]	@ (800e48c <Adv_Request+0x1c8>)
 800e39e:	f7fe fbf9 	bl	800cb94 <DbgTraceGetFileName>
 800e3a2:	4601      	mov	r1, r0
 800e3a4:	f44f 7372 	mov.w	r3, #968	@ 0x3c8
 800e3a8:	4a39      	ldr	r2, [pc, #228]	@ (800e490 <Adv_Request+0x1cc>)
 800e3aa:	483a      	ldr	r0, [pc, #232]	@ (800e494 <Adv_Request+0x1d0>)
 800e3ac:	f001 fac2 	bl	800f934 <iprintf>
 800e3b0:	7afb      	ldrb	r3, [r7, #11]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	483c      	ldr	r0, [pc, #240]	@ (800e4a8 <Adv_Request+0x1e4>)
 800e3b6:	f001 fabd 	bl	800f934 <iprintf>
 800e3ba:	e00c      	b.n	800e3d6 <Adv_Request+0x112>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800e3bc:	4833      	ldr	r0, [pc, #204]	@ (800e48c <Adv_Request+0x1c8>)
 800e3be:	f7fe fbe9 	bl	800cb94 <DbgTraceGetFileName>
 800e3c2:	4601      	mov	r1, r0
 800e3c4:	f44f 7373 	mov.w	r3, #972	@ 0x3cc
 800e3c8:	4a31      	ldr	r2, [pc, #196]	@ (800e490 <Adv_Request+0x1cc>)
 800e3ca:	4832      	ldr	r0, [pc, #200]	@ (800e494 <Adv_Request+0x1d0>)
 800e3cc:	f001 fab2 	bl	800f934 <iprintf>
 800e3d0:	4836      	ldr	r0, [pc, #216]	@ (800e4ac <Adv_Request+0x1e8>)
 800e3d2:	f001 fb17 	bl	800fa04 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800e3d6:	4936      	ldr	r1, [pc, #216]	@ (800e4b0 <Adv_Request+0x1ec>)
 800e3d8:	200e      	movs	r0, #14
 800e3da:	f7fc fb96 	bl	800ab0a <aci_gap_update_adv_data>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800e3e2:	7afb      	ldrb	r3, [r7, #11]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d022      	beq.n	800e42e <Adv_Request+0x16a>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800e3e8:	79fb      	ldrb	r3, [r7, #7]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d10f      	bne.n	800e40e <Adv_Request+0x14a>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800e3ee:	4827      	ldr	r0, [pc, #156]	@ (800e48c <Adv_Request+0x1c8>)
 800e3f0:	f7fe fbd0 	bl	800cb94 <DbgTraceGetFileName>
 800e3f4:	4601      	mov	r1, r0
 800e3f6:	f240 33d5 	movw	r3, #981	@ 0x3d5
 800e3fa:	4a25      	ldr	r2, [pc, #148]	@ (800e490 <Adv_Request+0x1cc>)
 800e3fc:	4825      	ldr	r0, [pc, #148]	@ (800e494 <Adv_Request+0x1d0>)
 800e3fe:	f001 fa99 	bl	800f934 <iprintf>
 800e402:	7afb      	ldrb	r3, [r7, #11]
 800e404:	4619      	mov	r1, r3
 800e406:	482b      	ldr	r0, [pc, #172]	@ (800e4b4 <Adv_Request+0x1f0>)
 800e408:	f001 fa94 	bl	800f934 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800e40c:	e035      	b.n	800e47a <Adv_Request+0x1b6>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800e40e:	481f      	ldr	r0, [pc, #124]	@ (800e48c <Adv_Request+0x1c8>)
 800e410:	f7fe fbc0 	bl	800cb94 <DbgTraceGetFileName>
 800e414:	4601      	mov	r1, r0
 800e416:	f240 33d9 	movw	r3, #985	@ 0x3d9
 800e41a:	4a1d      	ldr	r2, [pc, #116]	@ (800e490 <Adv_Request+0x1cc>)
 800e41c:	481d      	ldr	r0, [pc, #116]	@ (800e494 <Adv_Request+0x1d0>)
 800e41e:	f001 fa89 	bl	800f934 <iprintf>
 800e422:	7afb      	ldrb	r3, [r7, #11]
 800e424:	4619      	mov	r1, r3
 800e426:	4824      	ldr	r0, [pc, #144]	@ (800e4b8 <Adv_Request+0x1f4>)
 800e428:	f001 fa84 	bl	800f934 <iprintf>
  return;
 800e42c:	e025      	b.n	800e47a <Adv_Request+0x1b6>
    if (NewStatus == APP_BLE_FAST_ADV)
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d114      	bne.n	800e45e <Adv_Request+0x19a>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800e434:	4815      	ldr	r0, [pc, #84]	@ (800e48c <Adv_Request+0x1c8>)
 800e436:	f7fe fbad 	bl	800cb94 <DbgTraceGetFileName>
 800e43a:	4601      	mov	r1, r0
 800e43c:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800e440:	4a13      	ldr	r2, [pc, #76]	@ (800e490 <Adv_Request+0x1cc>)
 800e442:	4814      	ldr	r0, [pc, #80]	@ (800e494 <Adv_Request+0x1d0>)
 800e444:	f001 fa76 	bl	800f934 <iprintf>
 800e448:	481c      	ldr	r0, [pc, #112]	@ (800e4bc <Adv_Request+0x1f8>)
 800e44a:	f001 fa73 	bl	800f934 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800e44e:	4b0e      	ldr	r3, [pc, #56]	@ (800e488 <Adv_Request+0x1c4>)
 800e450:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e454:	491a      	ldr	r1, [pc, #104]	@ (800e4c0 <Adv_Request+0x1fc>)
 800e456:	4618      	mov	r0, r3
 800e458:	f7f4 ff24 	bl	80032a4 <HW_TS_Start>
  return;
 800e45c:	e00d      	b.n	800e47a <Adv_Request+0x1b6>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800e45e:	480b      	ldr	r0, [pc, #44]	@ (800e48c <Adv_Request+0x1c8>)
 800e460:	f7fe fb98 	bl	800cb94 <DbgTraceGetFileName>
 800e464:	4601      	mov	r1, r0
 800e466:	f240 33e6 	movw	r3, #998	@ 0x3e6
 800e46a:	4a09      	ldr	r2, [pc, #36]	@ (800e490 <Adv_Request+0x1cc>)
 800e46c:	4809      	ldr	r0, [pc, #36]	@ (800e494 <Adv_Request+0x1d0>)
 800e46e:	f001 fa61 	bl	800f934 <iprintf>
 800e472:	4814      	ldr	r0, [pc, #80]	@ (800e4c4 <Adv_Request+0x200>)
 800e474:	f001 fa5e 	bl	800f934 <iprintf>
  return;
 800e478:	bf00      	nop
}
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	20001770 	.word	0x20001770
 800e484:	20001772 	.word	0x20001772
 800e488:	200016ec 	.word	0x200016ec
 800e48c:	08012564 	.word	0x08012564
 800e490:	080133ec 	.word	0x080133ec
 800e494:	08012580 	.word	0x08012580
 800e498:	08012f58 	.word	0x08012f58
 800e49c:	08012fa4 	.word	0x08012fa4
 800e4a0:	20001705 	.word	0x20001705
 800e4a4:	080133a4 	.word	0x080133a4
 800e4a8:	08012fec 	.word	0x08012fec
 800e4ac:	08013024 	.word	0x08013024
 800e4b0:	20000014 	.word	0x20000014
 800e4b4:	0801304c 	.word	0x0801304c
 800e4b8:	08013080 	.word	0x08013080
 800e4bc:	080130b8 	.word	0x080130b8
 800e4c0:	0001e046 	.word	0x0001e046
 800e4c4:	080130e0 	.word	0x080130e0

0800e4c8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800e4ce:	f7ff f921 	bl	800d714 <LL_FLASH_GetUDN>
 800e4d2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800e4d4:	693b      	ldr	r3, [r7, #16]
 800e4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4da:	d023      	beq.n	800e524 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800e4dc:	f7ff f932 	bl	800d744 <LL_FLASH_GetSTCompanyID>
 800e4e0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800e4e2:	f7ff f923 	bl	800d72c <LL_FLASH_GetDeviceID>
 800e4e6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	4b16      	ldr	r3, [pc, #88]	@ (800e548 <BleGetBdAddress+0x80>)
 800e4ee:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	0a1b      	lsrs	r3, r3, #8
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	4b14      	ldr	r3, [pc, #80]	@ (800e548 <BleGetBdAddress+0x80>)
 800e4f8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	b2da      	uxtb	r2, r3
 800e4fe:	4b12      	ldr	r3, [pc, #72]	@ (800e548 <BleGetBdAddress+0x80>)
 800e500:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	b2da      	uxtb	r2, r3
 800e506:	4b10      	ldr	r3, [pc, #64]	@ (800e548 <BleGetBdAddress+0x80>)
 800e508:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	0a1b      	lsrs	r3, r3, #8
 800e50e:	b2da      	uxtb	r2, r3
 800e510:	4b0d      	ldr	r3, [pc, #52]	@ (800e548 <BleGetBdAddress+0x80>)
 800e512:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	0c1b      	lsrs	r3, r3, #16
 800e518:	b2da      	uxtb	r2, r3
 800e51a:	4b0b      	ldr	r3, [pc, #44]	@ (800e548 <BleGetBdAddress+0x80>)
 800e51c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800e51e:	4b0a      	ldr	r3, [pc, #40]	@ (800e548 <BleGetBdAddress+0x80>)
 800e520:	617b      	str	r3, [r7, #20]
 800e522:	e00b      	b.n	800e53c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800e524:	2000      	movs	r0, #0
 800e526:	f7fe fc13 	bl	800cd50 <OTP_Read>
 800e52a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	617b      	str	r3, [r7, #20]
 800e536:	e001      	b.n	800e53c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800e538:	4b04      	ldr	r3, [pc, #16]	@ (800e54c <BleGetBdAddress+0x84>)
 800e53a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800e53c:	697b      	ldr	r3, [r7, #20]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	200016e4 	.word	0x200016e4
 800e54c:	0801337c 	.word	0x0801337c

0800e550 <Add_Advertisment_Service_UUID>:
 *
 *SPECIFIC FUNCTIONS
 *
 *************************************************************/
static void Add_Advertisment_Service_UUID(uint16_t servUUID)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	80fb      	strh	r3, [r7, #6]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800e55a:	4b12      	ldr	r3, [pc, #72]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e55c:	7e1b      	ldrb	r3, [r3, #24]
 800e55e:	4619      	mov	r1, r3
      (uint8_t) (servUUID & 0xFF);
 800e560:	88fb      	ldrh	r3, [r7, #6]
 800e562:	b2da      	uxtb	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800e564:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e566:	440b      	add	r3, r1
 800e568:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800e56a:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e56c:	7e1b      	ldrb	r3, [r3, #24]
 800e56e:	3301      	adds	r3, #1
 800e570:	b2da      	uxtb	r2, r3
 800e572:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e574:	761a      	strb	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
      (uint8_t) (servUUID >> 8) & 0xFF;
 800e576:	88fb      	ldrh	r3, [r7, #6]
 800e578:	0a1b      	lsrs	r3, r3, #8
 800e57a:	b29a      	uxth	r2, r3
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800e57c:	4b09      	ldr	r3, [pc, #36]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e57e:	7e1b      	ldrb	r3, [r3, #24]
 800e580:	4619      	mov	r1, r3
      (uint8_t) (servUUID >> 8) & 0xFF;
 800e582:	b2d2      	uxtb	r2, r2
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen] =
 800e584:	4b07      	ldr	r3, [pc, #28]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e586:	440b      	add	r3, r1
 800e588:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen++;
 800e58a:	4b06      	ldr	r3, [pc, #24]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e58c:	7e1b      	ldrb	r3, [r3, #24]
 800e58e:	3301      	adds	r3, #1
 800e590:	b2da      	uxtb	r2, r3
 800e592:	4b04      	ldr	r3, [pc, #16]	@ (800e5a4 <Add_Advertisment_Service_UUID+0x54>)
 800e594:	761a      	strb	r2, [r3, #24]

  return;
 800e596:	bf00      	nop
}
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	200016ec 	.word	0x200016ec

0800e5a8 <Adv_Mgr>:

static void Adv_Mgr(void)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_UPDATE_ID, CFG_SCH_PRIO_0);
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	2001      	movs	r0, #1
 800e5b0:	f000 fbaa 	bl	800ed08 <UTIL_SEQ_SetTask>

  return;
 800e5b4:	bf00      	nop
}
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <Adv_Update>:

static void Adv_Update(void)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800e5bc:	2002      	movs	r0, #2
 800e5be:	f7ff fe81 	bl	800e2c4 <Adv_Request>

  return;
 800e5c2:	bf00      	nop
}
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	2004      	movs	r0, #4
 800e5d2:	f000 fb99 	bl	800ed08 <UTIL_SEQ_SetTask>

  return;
 800e5d6:	bf00      	nop
}
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b082      	sub	sp, #8
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e5e6:	2001      	movs	r0, #1
 800e5e8:	f000 fbfa 	bl	800ede0 <UTIL_SEQ_SetEvt>

  return;
 800e5ec:	bf00      	nop
}
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	f000 fc0f 	bl	800ee20 <UTIL_SEQ_WaitEvt>

  return;
 800e602:	bf00      	nop
}
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	3308      	adds	r3, #8
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fd fced 	bl	800bffc <SVCCTL_UserEvtRx>
 800e622:	4603      	mov	r3, r0
 800e624:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800e626:	7afb      	ldrb	r3, [r7, #11]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d003      	beq.n	800e634 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2201      	movs	r2, #1
 800e630:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800e632:	e003      	b.n	800e63c <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	701a      	strb	r2, [r3, #0]
  return;
 800e63a:	bf00      	nop
}
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b084      	sub	sp, #16
 800e646:	af00      	add	r7, sp, #0
 800e648:	4603      	mov	r3, r0
 800e64a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800e64c:	79fb      	ldrb	r3, [r7, #7]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d002      	beq.n	800e658 <BLE_StatusNot+0x16>
 800e652:	2b01      	cmp	r3, #1
 800e654:	d006      	beq.n	800e664 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800e656:	e00b      	b.n	800e670 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e658:	2307      	movs	r3, #7
 800e65a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800e65c:	68f8      	ldr	r0, [r7, #12]
 800e65e:	f000 fb7f 	bl	800ed60 <UTIL_SEQ_PauseTask>
      break;
 800e662:	e005      	b.n	800e670 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800e664:	2307      	movs	r3, #7
 800e666:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 fb99 	bl	800eda0 <UTIL_SEQ_ResumeTask>
      break;
 800e66e:	bf00      	nop
  }

  return;
 800e670:	bf00      	nop
}
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <DISAPP_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void DISAPP_Init(void)
{
 800e678:	b480      	push	{r7}
 800e67a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DISAPP_Init */

/* USER CODE END DISAPP_Init */
}
 800e67c:	bf00      	nop
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
	...

0800e688 <HRS_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void HRS_Notification(HRS_App_Notification_evt_t *pNotification)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HRS_Notification_1 */

/* USER CODE END HRS_Notification_1 */
  switch(pNotification->HRS_Evt_Opcode)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b02      	cmp	r3, #2
 800e696:	d01a      	beq.n	800e6ce <HRS_Notification+0x46>
 800e698:	2b02      	cmp	r3, #2
 800e69a:	dc1e      	bgt.n	800e6da <HRS_Notification+0x52>
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d002      	beq.n	800e6a6 <HRS_Notification+0x1e>
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	d007      	beq.n	800e6b4 <HRS_Notification+0x2c>

   default:
/* USER CODE BEGIN HRS_Notification_Default */

/* USER CODE END HRS_Notification_Default */
      break;
 800e6a4:	e019      	b.n	800e6da <HRS_Notification+0x52>
	HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 0;
 800e6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e4 <HRS_Notification+0x5c>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	809a      	strh	r2, [r3, #4]
    HRSAPP_Context.ResetEnergyExpended = 1;
 800e6ac:	4b0d      	ldr	r3, [pc, #52]	@ (800e6e4 <HRS_Notification+0x5c>)
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	731a      	strb	r2, [r3, #12]
      break;
 800e6b2:	e013      	b.n	800e6dc <HRS_Notification+0x54>
	HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 800e6b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e4 <HRS_Notification+0x5c>)
 800e6b6:	7b5b      	ldrb	r3, [r3, #13]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f4 fd6f 	bl	800319c <HW_TS_Stop>
	HW_TS_Start(HRSAPP_Context.TimerMeasurement_Id, HRSAPP_MEASUREMENT_INTERVAL);
 800e6be:	4b09      	ldr	r3, [pc, #36]	@ (800e6e4 <HRS_Notification+0x5c>)
 800e6c0:	7b5b      	ldrb	r3, [r3, #13]
 800e6c2:	f640 0101 	movw	r1, #2049	@ 0x801
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7f4 fdec 	bl	80032a4 <HW_TS_Start>
      break;
 800e6cc:	e006      	b.n	800e6dc <HRS_Notification+0x54>
	HW_TS_Stop(HRSAPP_Context.TimerMeasurement_Id);
 800e6ce:	4b05      	ldr	r3, [pc, #20]	@ (800e6e4 <HRS_Notification+0x5c>)
 800e6d0:	7b5b      	ldrb	r3, [r3, #13]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7f4 fd62 	bl	800319c <HW_TS_Stop>
      break;
 800e6d8:	e000      	b.n	800e6dc <HRS_Notification+0x54>
      break;
 800e6da:	bf00      	nop
  }
/* USER CODE BEGIN HRS_Notification_2 */

/* USER CODE END HRS_Notification_2 */
  return;
 800e6dc:	bf00      	nop
}
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	20001774 	.word	0x20001774

0800e6e8 <HRSAPP_Init>:

void HRSAPP_Init(void)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b082      	sub	sp, #8
 800e6ec:	af00      	add	r7, sp, #0
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MEAS_REQ_ID, UTIL_SEQ_RFU, HRSAPP_Measurement );
 800e6ee:	4a1f      	ldr	r2, [pc, #124]	@ (800e76c <HRSAPP_Init+0x84>)
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	2002      	movs	r0, #2
 800e6f4:	f000 fae6 	bl	800ecc4 <UTIL_SEQ_RegTask>
/* USER CODE BEGIN HRSAPP_Init */
	HRSAPP_Context.ResetEnergyExpended = 0;
 800e6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800e770 <HRSAPP_Init+0x88>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	731a      	strb	r2, [r3, #12]
  	HRSAPP_Context.BodySensorLocationChar = HRS_BODY_SENSOR_LOCATION_FINGER;
 800e6fe:	4b1c      	ldr	r3, [pc, #112]	@ (800e770 <HRSAPP_Init+0x88>)
 800e700:	2203      	movs	r2, #3
 800e702:	701a      	strb	r2, [r3, #0]
 	HRS_UpdateChar(SENSOR_LOCATION_UUID, (uint8_t *)&HRSAPP_Context.BodySensorLocationChar);
 800e704:	491a      	ldr	r1, [pc, #104]	@ (800e770 <HRSAPP_Init+0x88>)
 800e706:	f642 2038 	movw	r0, #10808	@ 0x2a38
 800e70a:	f7fd fb91 	bl	800be30 <HRS_UpdateChar>
	
	HRSAPP_Context.MeasurementvalueChar.Flags = ( HRS_HRM_VALUE_FORMAT_UINT16      | 
 800e70e:	4b18      	ldr	r3, [pc, #96]	@ (800e770 <HRSAPP_Init+0x88>)
 800e710:	221f      	movs	r2, #31
 800e712:	72da      	strb	r2, [r3, #11]
                                                  HRS_HRM_SENSOR_CONTACTS_SUPPORTED |
                                                  HRS_HRM_ENERGY_EXPENDED_PRESENT  |
                                                  HRS_HRM_RR_INTERVAL_PRESENT );
                                                  
    #if (BLE_CFG_HRS_ENERGY_EXPENDED_INFO_FLAG != 0)
  	if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_ENERGY_EXPENDED_PRESENT)
 800e714:	4b16      	ldr	r3, [pc, #88]	@ (800e770 <HRSAPP_Init+0x88>)
 800e716:	7adb      	ldrb	r3, [r3, #11]
 800e718:	f003 0308 	and.w	r3, r3, #8
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <HRSAPP_Init+0x3e>
    HRSAPP_Context.MeasurementvalueChar.EnergyExpended = 10;
 800e720:	4b13      	ldr	r3, [pc, #76]	@ (800e770 <HRSAPP_Init+0x88>)
 800e722:	220a      	movs	r2, #10
 800e724:	809a      	strh	r2, [r3, #4]
	#endif
  
	#if (BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG != 0)
  	if(HRSAPP_Context.MeasurementvalueChar.Flags & HRS_HRM_RR_INTERVAL_PRESENT)
 800e726:	4b12      	ldr	r3, [pc, #72]	@ (800e770 <HRSAPP_Init+0x88>)
 800e728:	7adb      	ldrb	r3, [r3, #11]
 800e72a:	f003 0310 	and.w	r3, r3, #16
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d012      	beq.n	800e758 <HRSAPP_Init+0x70>
  	{
    	uint8_t i;
    
    	HRSAPP_Context.MeasurementvalueChar.NbreOfValidRRIntervalValues = BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG;
 800e732:	4b0f      	ldr	r3, [pc, #60]	@ (800e770 <HRSAPP_Init+0x88>)
 800e734:	2201      	movs	r2, #1
 800e736:	729a      	strb	r2, [r3, #10]
    	for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 800e738:	2300      	movs	r3, #0
 800e73a:	71fb      	strb	r3, [r7, #7]
 800e73c:	e009      	b.n	800e752 <HRSAPP_Init+0x6a>
      	HRSAPP_Context.MeasurementvalueChar.aRRIntervalValues[i] = 1024;
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	4a0b      	ldr	r2, [pc, #44]	@ (800e770 <HRSAPP_Init+0x88>)
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	4413      	add	r3, r2
 800e746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e74a:	80da      	strh	r2, [r3, #6]
    	for(i = 0; i < BLE_CFG_HRS_ENERGY_RR_INTERVAL_FLAG; i++)
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	3301      	adds	r3, #1
 800e750:	71fb      	strb	r3, [r7, #7]
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d0f2      	beq.n	800e73e <HRSAPP_Init+0x56>
  	}
	#endif  
	 HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(HRSAPP_Context.TimerMeasurement_Id), hw_ts_Repeated, HrMeas);
 800e758:	4b06      	ldr	r3, [pc, #24]	@ (800e774 <HRSAPP_Init+0x8c>)
 800e75a:	2201      	movs	r2, #1
 800e75c:	4906      	ldr	r1, [pc, #24]	@ (800e778 <HRSAPP_Init+0x90>)
 800e75e:	2000      	movs	r0, #0
 800e760:	f7f4 fca2 	bl	80030a8 <HW_TS_Create>
	                                           
/* USER CODE END HRSAPP_Init */
  return;
 800e764:	bf00      	nop
}
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0800e77d 	.word	0x0800e77d
 800e770:	20001774 	.word	0x20001774
 800e774:	0800e78b 	.word	0x0800e78b
 800e778:	20001781 	.word	0x20001781

0800e77c <HRSAPP_Measurement>:

static void HRSAPP_Measurement(void)
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN HRSAPP_Measurement */

/* USER CODE END HRSAPP_Measurement */
  return;
 800e780:	bf00      	nop
}
 800e782:	46bd      	mov	sp, r7
 800e784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e788:	4770      	bx	lr

0800e78a <HrMeas>:

static void HrMeas( void )
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MEAS_REQ_ID, CFG_SCH_PRIO_0);
 800e78e:	2100      	movs	r1, #0
 800e790:	2002      	movs	r0, #2
 800e792:	f000 fab9 	bl	800ed08 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN HrMeas */

/* USER CODE END HrMeas */

  return;
 800e796:	bf00      	nop
}
 800e798:	bd80      	pop	{r7, pc}
	...

0800e79c <LL_PWR_EnableBootC2>:
{
 800e79c:	b480      	push	{r7}
 800e79e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e7a0:	4b05      	ldr	r3, [pc, #20]	@ (800e7b8 <LL_PWR_EnableBootC2+0x1c>)
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	4a04      	ldr	r2, [pc, #16]	@ (800e7b8 <LL_PWR_EnableBootC2+0x1c>)
 800e7a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7aa:	60d3      	str	r3, [r2, #12]
}
 800e7ac:	bf00      	nop
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop
 800e7b8:	58000400 	.word	0x58000400

0800e7bc <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e7c4:	4b06      	ldr	r3, [pc, #24]	@ (800e7e0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e7c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800e7ca:	4905      	ldr	r1, [pc, #20]	@ (800e7e0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800e7d4:	bf00      	nop
 800e7d6:	370c      	adds	r7, #12
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7de:	4770      	bx	lr
 800e7e0:	58000800 	.word	0x58000800

0800e7e4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e7ec:	4b05      	ldr	r3, [pc, #20]	@ (800e804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e7ee:	6a1a      	ldr	r2, [r3, #32]
 800e7f0:	4904      	ldr	r1, [pc, #16]	@ (800e804 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	620b      	str	r3, [r1, #32]
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr
 800e804:	58000800 	.word	0x58000800

0800e808 <LL_AHB3_GRP1_EnableClock>:
{
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e814:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4013      	ands	r3, r2
 800e82a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e82c:	68fb      	ldr	r3, [r7, #12]
}
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr

0800e83a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e83a:	b480      	push	{r7}
 800e83c:	b085      	sub	sp, #20
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e846:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e84a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	4313      	orrs	r3, r2
 800e852:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e85a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	4013      	ands	r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e864:	68fb      	ldr	r3, [r7, #12]
}
 800e866:	bf00      	nop
 800e868:	3714      	adds	r7, #20
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800e872:	b480      	push	{r7}
 800e874:	b083      	sub	sp, #12
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	601a      	str	r2, [r3, #0]
}
 800e886:	bf00      	nop
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f043 0201 	orr.w	r2, r3, #1
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	601a      	str	r2, [r3, #0]
}
 800e8a6:	bf00      	nop
 800e8a8:	370c      	adds	r7, #12
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr

0800e8b2 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e8b2:	b480      	push	{r7}
 800e8b4:	b083      	sub	sp, #12
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685a      	ldr	r2, [r3, #4]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	041b      	lsls	r3, r3, #16
 800e8c4:	43db      	mvns	r3, r3
 800e8c6:	401a      	ands	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	605a      	str	r2, [r3, #4]
}
 800e8cc:	bf00      	nop
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e8d8:	b480      	push	{r7}
 800e8da:	b083      	sub	sp, #12
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	43db      	mvns	r3, r3
 800e8ea:	401a      	ands	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	605a      	str	r2, [r3, #4]
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	041a      	lsls	r2, r3, #16
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	609a      	str	r2, [r3, #8]
}
 800e90e:	bf00      	nop
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b083      	sub	sp, #12
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	68da      	ldr	r2, [r3, #12]
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	4013      	ands	r3, r2
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d101      	bne.n	800e936 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e932:	2301      	movs	r3, #1
 800e934:	e000      	b.n	800e938 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HW_IPCC_Enable>:
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e948:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e94c:	f7ff ff75 	bl	800e83a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e950:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e954:	f7ff ff46 	bl	800e7e4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e958:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e95c:	f7ff ff2e 	bl	800e7bc <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e960:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e962:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e964:	f7ff ff1a 	bl	800e79c <LL_PWR_EnableBootC2>

  return;
 800e968:	bf00      	nop
}
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e970:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e974:	f7ff ff48 	bl	800e808 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e978:	4806      	ldr	r0, [pc, #24]	@ (800e994 <HW_IPCC_Init+0x28>)
 800e97a:	f7ff ff8a 	bl	800e892 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e97e:	4805      	ldr	r0, [pc, #20]	@ (800e994 <HW_IPCC_Init+0x28>)
 800e980:	f7ff ff77 	bl	800e872 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e984:	202c      	movs	r0, #44	@ 0x2c
 800e986:	f7f6 fc2c 	bl	80051e2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e98a:	202d      	movs	r0, #45	@ 0x2d
 800e98c:	f7f6 fc29 	bl	80051e2 <HAL_NVIC_EnableIRQ>

  return;
 800e990:	bf00      	nop
}
 800e992:	bd80      	pop	{r7, pc}
 800e994:	58000c00 	.word	0x58000c00

0800e998 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e99c:	2101      	movs	r1, #1
 800e99e:	4802      	ldr	r0, [pc, #8]	@ (800e9a8 <HW_IPCC_BLE_Init+0x10>)
 800e9a0:	f7ff ff9a 	bl	800e8d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e9a4:	bf00      	nop
}
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	58000c00 	.word	0x58000c00

0800e9ac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	4802      	ldr	r0, [pc, #8]	@ (800e9bc <HW_IPCC_BLE_SendCmd+0x10>)
 800e9b4:	f7ff ffa2 	bl	800e8fc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e9b8:	bf00      	nop
}
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	58000c00 	.word	0x58000c00

0800e9c0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e9c4:	2102      	movs	r1, #2
 800e9c6:	4802      	ldr	r0, [pc, #8]	@ (800e9d0 <HW_IPCC_SYS_Init+0x10>)
 800e9c8:	f7ff ff86 	bl	800e8d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e9cc:	bf00      	nop
}
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	58000c00 	.word	0x58000c00

0800e9d4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e9d8:	2102      	movs	r1, #2
 800e9da:	4804      	ldr	r0, [pc, #16]	@ (800e9ec <HW_IPCC_SYS_SendCmd+0x18>)
 800e9dc:	f7ff ff8e 	bl	800e8fc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e9e0:	2102      	movs	r1, #2
 800e9e2:	4802      	ldr	r0, [pc, #8]	@ (800e9ec <HW_IPCC_SYS_SendCmd+0x18>)
 800e9e4:	f7ff ff65 	bl	800e8b2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e9e8:	bf00      	nop
}
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	58000c00 	.word	0x58000c00

0800e9f0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e9f8:	2108      	movs	r1, #8
 800e9fa:	480c      	ldr	r0, [pc, #48]	@ (800ea2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e9fc:	f7ff ff8d 	bl	800e91a <LL_C1_IPCC_IsActiveFlag_CHx>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d007      	beq.n	800ea16 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800ea06:	4a0a      	ldr	r2, [pc, #40]	@ (800ea30 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ea0c:	2108      	movs	r1, #8
 800ea0e:	4807      	ldr	r0, [pc, #28]	@ (800ea2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ea10:	f7ff ff4f 	bl	800e8b2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800ea14:	e006      	b.n	800ea24 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800ea1a:	2108      	movs	r1, #8
 800ea1c:	4803      	ldr	r0, [pc, #12]	@ (800ea2c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800ea1e:	f7ff ff6d 	bl	800e8fc <LL_C1_IPCC_SetFlag_CHx>
  return;
 800ea22:	bf00      	nop
}
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	58000c00 	.word	0x58000c00
 800ea30:	20001784 	.word	0x20001784

0800ea34 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800ea38:	2108      	movs	r1, #8
 800ea3a:	4802      	ldr	r0, [pc, #8]	@ (800ea44 <HW_IPCC_TRACES_Init+0x10>)
 800ea3c:	f7ff ff4c 	bl	800e8d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ea40:	bf00      	nop
}
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	58000c00 	.word	0x58000c00

0800ea48 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ea48:	b480      	push	{r7}
 800ea4a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ea4c:	4b05      	ldr	r3, [pc, #20]	@ (800ea64 <UTIL_LPM_Init+0x1c>)
 800ea4e:	2200      	movs	r2, #0
 800ea50:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ea52:	4b05      	ldr	r3, [pc, #20]	@ (800ea68 <UTIL_LPM_Init+0x20>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ea58:	bf00      	nop
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	20001788 	.word	0x20001788
 800ea68:	2000178c 	.word	0x2000178c

0800ea6c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ea6c:	b480      	push	{r7}
 800ea6e:	b087      	sub	sp, #28
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	460b      	mov	r3, r1
 800ea76:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea78:	f3ef 8310 	mrs	r3, PRIMASK
 800ea7c:	613b      	str	r3, [r7, #16]
  return(result);
 800ea7e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ea80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea82:	b672      	cpsid	i
}
 800ea84:	bf00      	nop
  
  switch(state)
 800ea86:	78fb      	ldrb	r3, [r7, #3]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d008      	beq.n	800ea9e <UTIL_LPM_SetOffMode+0x32>
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d10e      	bne.n	800eaae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ea90:	4b0d      	ldr	r3, [pc, #52]	@ (800eac8 <UTIL_LPM_SetOffMode+0x5c>)
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	4a0b      	ldr	r2, [pc, #44]	@ (800eac8 <UTIL_LPM_SetOffMode+0x5c>)
 800ea9a:	6013      	str	r3, [r2, #0]
      break;
 800ea9c:	e008      	b.n	800eab0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	43da      	mvns	r2, r3
 800eaa2:	4b09      	ldr	r3, [pc, #36]	@ (800eac8 <UTIL_LPM_SetOffMode+0x5c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4013      	ands	r3, r2
 800eaa8:	4a07      	ldr	r2, [pc, #28]	@ (800eac8 <UTIL_LPM_SetOffMode+0x5c>)
 800eaaa:	6013      	str	r3, [r2, #0]
      break;
 800eaac:	e000      	b.n	800eab0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800eaae:	bf00      	nop
 800eab0:	697b      	ldr	r3, [r7, #20]
 800eab2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f383 8810 	msr	PRIMASK, r3
}
 800eaba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800eabc:	bf00      	nop
 800eabe:	371c      	adds	r7, #28
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	2000178c 	.word	0x2000178c

0800eacc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b090      	sub	sp, #64	@ 0x40
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ead4:	4b73      	ldr	r3, [pc, #460]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800eada:	4b72      	ldr	r3, [pc, #456]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4013      	ands	r3, r2
 800eae2:	4a70      	ldr	r2, [pc, #448]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800eae4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800eae6:	4b70      	ldr	r3, [pc, #448]	@ (800eca8 <UTIL_SEQ_Run+0x1dc>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800eaec:	4b6f      	ldr	r3, [pc, #444]	@ (800ecac <UTIL_SEQ_Run+0x1e0>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800eaf2:	4b6f      	ldr	r3, [pc, #444]	@ (800ecb0 <UTIL_SEQ_Run+0x1e4>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800eaf8:	4b6e      	ldr	r3, [pc, #440]	@ (800ecb4 <UTIL_SEQ_Run+0x1e8>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800eafe:	e08d      	b.n	800ec1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800eb00:	2300      	movs	r3, #0
 800eb02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800eb04:	e002      	b.n	800eb0c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800eb06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb08:	3301      	adds	r3, #1
 800eb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800eb0c:	4a6a      	ldr	r2, [pc, #424]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb16:	401a      	ands	r2, r3
 800eb18:	4b62      	ldr	r3, [pc, #392]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	4013      	ands	r3, r2
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d0f1      	beq.n	800eb06 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800eb22:	4a65      	ldr	r2, [pc, #404]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2c:	401a      	ands	r2, r3
 800eb2e:	4b5d      	ldr	r3, [pc, #372]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4013      	ands	r3, r2
 800eb34:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800eb36:	4a60      	ldr	r2, [pc, #384]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb3a:	00db      	lsls	r3, r3, #3
 800eb3c:	4413      	add	r3, r2
 800eb3e:	685a      	ldr	r2, [r3, #4]
 800eb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb42:	4013      	ands	r3, r2
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d106      	bne.n	800eb56 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800eb48:	4a5b      	ldr	r2, [pc, #364]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb4c:	00db      	lsls	r3, r3, #3
 800eb4e:	4413      	add	r3, r2
 800eb50:	f04f 32ff 	mov.w	r2, #4294967295
 800eb54:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800eb56:	4a58      	ldr	r2, [pc, #352]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5a:	00db      	lsls	r3, r3, #3
 800eb5c:	4413      	add	r3, r2
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb62:	4013      	ands	r3, r2
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 f9b3 	bl	800eed0 <SEQ_BitPosition>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	4b53      	ldr	r3, [pc, #332]	@ (800ecbc <UTIL_SEQ_Run+0x1f0>)
 800eb70:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800eb72:	4a51      	ldr	r2, [pc, #324]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb76:	00db      	lsls	r3, r3, #3
 800eb78:	4413      	add	r3, r2
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	4b4f      	ldr	r3, [pc, #316]	@ (800ecbc <UTIL_SEQ_Run+0x1f0>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2101      	movs	r1, #1
 800eb82:	fa01 f303 	lsl.w	r3, r1, r3
 800eb86:	43db      	mvns	r3, r3
 800eb88:	401a      	ands	r2, r3
 800eb8a:	494b      	ldr	r1, [pc, #300]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800eb8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb8e:	00db      	lsls	r3, r3, #3
 800eb90:	440b      	add	r3, r1
 800eb92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb94:	f3ef 8310 	mrs	r3, PRIMASK
 800eb98:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb9a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb9e:	b672      	cpsid	i
}
 800eba0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800eba2:	4b46      	ldr	r3, [pc, #280]	@ (800ecbc <UTIL_SEQ_Run+0x1f0>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2201      	movs	r2, #1
 800eba8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebac:	43da      	mvns	r2, r3
 800ebae:	4b3e      	ldr	r3, [pc, #248]	@ (800eca8 <UTIL_SEQ_Run+0x1dc>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	4013      	ands	r3, r2
 800ebb4:	4a3c      	ldr	r2, [pc, #240]	@ (800eca8 <UTIL_SEQ_Run+0x1dc>)
 800ebb6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ebb8:	2301      	movs	r3, #1
 800ebba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebbc:	e013      	b.n	800ebe6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ebbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	4a3d      	ldr	r2, [pc, #244]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800ebc4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ebc8:	4b3c      	ldr	r3, [pc, #240]	@ (800ecbc <UTIL_SEQ_Run+0x1f0>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd2:	43da      	mvns	r2, r3
 800ebd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebd6:	3b01      	subs	r3, #1
 800ebd8:	400a      	ands	r2, r1
 800ebda:	4937      	ldr	r1, [pc, #220]	@ (800ecb8 <UTIL_SEQ_Run+0x1ec>)
 800ebdc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ebe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe2:	3b01      	subs	r3, #1
 800ebe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ebe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1e8      	bne.n	800ebbe <UTIL_SEQ_Run+0xf2>
 800ebec:	6a3b      	ldr	r3, [r7, #32]
 800ebee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	f383 8810 	msr	PRIMASK, r3
}
 800ebf6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ebf8:	4b30      	ldr	r3, [pc, #192]	@ (800ecbc <UTIL_SEQ_Run+0x1f0>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4a30      	ldr	r2, [pc, #192]	@ (800ecc0 <UTIL_SEQ_Run+0x1f4>)
 800ebfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec02:	4798      	blx	r3

    local_taskset = TaskSet;
 800ec04:	4b28      	ldr	r3, [pc, #160]	@ (800eca8 <UTIL_SEQ_Run+0x1dc>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800ec0a:	4b28      	ldr	r3, [pc, #160]	@ (800ecac <UTIL_SEQ_Run+0x1e0>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800ec10:	4b27      	ldr	r3, [pc, #156]	@ (800ecb0 <UTIL_SEQ_Run+0x1e4>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800ec16:	4b27      	ldr	r3, [pc, #156]	@ (800ecb4 <UTIL_SEQ_Run+0x1e8>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ec1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec20:	401a      	ands	r2, r3
 800ec22:	4b20      	ldr	r3, [pc, #128]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4013      	ands	r3, r2
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d005      	beq.n	800ec38 <UTIL_SEQ_Run+0x16c>
 800ec2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec30:	4013      	ands	r3, r2
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f43f af64 	beq.w	800eb00 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ec38:	4b20      	ldr	r3, [pc, #128]	@ (800ecbc <UTIL_SEQ_Run+0x1f0>)
 800ec3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ec40:	f000 f938 	bl	800eeb4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec44:	f3ef 8310 	mrs	r3, PRIMASK
 800ec48:	613b      	str	r3, [r7, #16]
  return(result);
 800ec4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ec4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec4e:	b672      	cpsid	i
}
 800ec50:	bf00      	nop
  local_taskset = TaskSet;
 800ec52:	4b15      	ldr	r3, [pc, #84]	@ (800eca8 <UTIL_SEQ_Run+0x1dc>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ec58:	4b14      	ldr	r3, [pc, #80]	@ (800ecac <UTIL_SEQ_Run+0x1e0>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ec5e:	4b14      	ldr	r3, [pc, #80]	@ (800ecb0 <UTIL_SEQ_Run+0x1e4>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ec64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec68:	401a      	ands	r2, r3
 800ec6a:	4b0e      	ldr	r3, [pc, #56]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4013      	ands	r3, r2
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d107      	bne.n	800ec84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ec74:	4b0f      	ldr	r3, [pc, #60]	@ (800ecb4 <UTIL_SEQ_Run+0x1e8>)
 800ec76:	681a      	ldr	r2, [r3, #0]
 800ec78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d101      	bne.n	800ec84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ec80:	f7f3 fc43 	bl	800250a <UTIL_SEQ_Idle>
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f383 8810 	msr	PRIMASK, r3
}
 800ec8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ec90:	f000 f917 	bl	800eec2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ec94:	4a03      	ldr	r2, [pc, #12]	@ (800eca4 <UTIL_SEQ_Run+0x1d8>)
 800ec96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec98:	6013      	str	r3, [r2, #0]

  return;
 800ec9a:	bf00      	nop
}
 800ec9c:	3740      	adds	r7, #64	@ 0x40
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20000028 	.word	0x20000028
 800eca8:	20001790 	.word	0x20001790
 800ecac:	20001794 	.word	0x20001794
 800ecb0:	20000024 	.word	0x20000024
 800ecb4:	20001798 	.word	0x20001798
 800ecb8:	20001820 	.word	0x20001820
 800ecbc:	2000179c 	.word	0x2000179c
 800ecc0:	200017a0 	.word	0x200017a0

0800ecc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecd0:	f3ef 8310 	mrs	r3, PRIMASK
 800ecd4:	617b      	str	r3, [r7, #20]
  return(result);
 800ecd6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ecd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecda:	b672      	cpsid	i
}
 800ecdc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f000 f8f6 	bl	800eed0 <SEQ_BitPosition>
 800ece4:	4603      	mov	r3, r0
 800ece6:	4619      	mov	r1, r3
 800ece8:	4a06      	ldr	r2, [pc, #24]	@ (800ed04 <UTIL_SEQ_RegTask+0x40>)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	f383 8810 	msr	PRIMASK, r3
}
 800ecfa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ecfc:	bf00      	nop
}
 800ecfe:	3720      	adds	r7, #32
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	200017a0 	.word	0x200017a0

0800ed08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed12:	f3ef 8310 	mrs	r3, PRIMASK
 800ed16:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed1c:	b672      	cpsid	i
}
 800ed1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800ed20:	4b0d      	ldr	r3, [pc, #52]	@ (800ed58 <UTIL_SEQ_SetTask+0x50>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	4a0b      	ldr	r2, [pc, #44]	@ (800ed58 <UTIL_SEQ_SetTask+0x50>)
 800ed2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ed2c:	4a0b      	ldr	r2, [pc, #44]	@ (800ed5c <UTIL_SEQ_SetTask+0x54>)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	431a      	orrs	r2, r3
 800ed38:	4908      	ldr	r1, [pc, #32]	@ (800ed5c <UTIL_SEQ_SetTask+0x54>)
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	f383 8810 	msr	PRIMASK, r3
}
 800ed4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed4c:	bf00      	nop
}
 800ed4e:	371c      	adds	r7, #28
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr
 800ed58:	20001790 	.word	0x20001790
 800ed5c:	20001820 	.word	0x20001820

0800ed60 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed68:	f3ef 8310 	mrs	r3, PRIMASK
 800ed6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed72:	b672      	cpsid	i
}
 800ed74:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	43da      	mvns	r2, r3
 800ed7a:	4b08      	ldr	r3, [pc, #32]	@ (800ed9c <UTIL_SEQ_PauseTask+0x3c>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4013      	ands	r3, r2
 800ed80:	4a06      	ldr	r2, [pc, #24]	@ (800ed9c <UTIL_SEQ_PauseTask+0x3c>)
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	f383 8810 	msr	PRIMASK, r3
}
 800ed8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed90:	bf00      	nop
}
 800ed92:	371c      	adds	r7, #28
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr
 800ed9c:	20000024 	.word	0x20000024

0800eda0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eda8:	f3ef 8310 	mrs	r3, PRIMASK
 800edac:	60fb      	str	r3, [r7, #12]
  return(result);
 800edae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800edb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edb2:	b672      	cpsid	i
}
 800edb4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800edb6:	4b09      	ldr	r3, [pc, #36]	@ (800eddc <UTIL_SEQ_ResumeTask+0x3c>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	4a07      	ldr	r2, [pc, #28]	@ (800eddc <UTIL_SEQ_ResumeTask+0x3c>)
 800edc0:	6013      	str	r3, [r2, #0]
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	f383 8810 	msr	PRIMASK, r3
}
 800edcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800edce:	bf00      	nop
}
 800edd0:	371c      	adds	r7, #28
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	20000024 	.word	0x20000024

0800ede0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ede0:	b480      	push	{r7}
 800ede2:	b087      	sub	sp, #28
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ede8:	f3ef 8310 	mrs	r3, PRIMASK
 800edec:	60fb      	str	r3, [r7, #12]
  return(result);
 800edee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800edf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edf2:	b672      	cpsid	i
}
 800edf4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800edf6:	4b09      	ldr	r3, [pc, #36]	@ (800ee1c <UTIL_SEQ_SetEvt+0x3c>)
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	4a07      	ldr	r2, [pc, #28]	@ (800ee1c <UTIL_SEQ_SetEvt+0x3c>)
 800ee00:	6013      	str	r3, [r2, #0]
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	f383 8810 	msr	PRIMASK, r3
}
 800ee0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ee0e:	bf00      	nop
}
 800ee10:	371c      	adds	r7, #28
 800ee12:	46bd      	mov	sp, r7
 800ee14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee18:	4770      	bx	lr
 800ee1a:	bf00      	nop
 800ee1c:	20001794 	.word	0x20001794

0800ee20 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ee28:	4b1f      	ldr	r3, [pc, #124]	@ (800eea8 <UTIL_SEQ_WaitEvt+0x88>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ee2e:	4b1e      	ldr	r3, [pc, #120]	@ (800eea8 <UTIL_SEQ_WaitEvt+0x88>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee36:	d102      	bne.n	800ee3e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	e005      	b.n	800ee4a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800ee3e:	4b1a      	ldr	r3, [pc, #104]	@ (800eea8 <UTIL_SEQ_WaitEvt+0x88>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2201      	movs	r2, #1
 800ee44:	fa02 f303 	lsl.w	r3, r2, r3
 800ee48:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ee4a:	4b18      	ldr	r3, [pc, #96]	@ (800eeac <UTIL_SEQ_WaitEvt+0x8c>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ee50:	4a16      	ldr	r2, [pc, #88]	@ (800eeac <UTIL_SEQ_WaitEvt+0x8c>)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ee56:	e003      	b.n	800ee60 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ee58:	6879      	ldr	r1, [r7, #4]
 800ee5a:	69f8      	ldr	r0, [r7, #28]
 800ee5c:	f7f3 fb5c 	bl	8002518 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ee60:	4b13      	ldr	r3, [pc, #76]	@ (800eeb0 <UTIL_SEQ_WaitEvt+0x90>)
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	4013      	ands	r3, r2
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d0f5      	beq.n	800ee58 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ee6c:	4a0e      	ldr	r2, [pc, #56]	@ (800eea8 <UTIL_SEQ_WaitEvt+0x88>)
 800ee6e:	69bb      	ldr	r3, [r7, #24]
 800ee70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee72:	f3ef 8310 	mrs	r3, PRIMASK
 800ee76:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee78:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ee7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee7c:	b672      	cpsid	i
}
 800ee7e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	43da      	mvns	r2, r3
 800ee84:	4b0a      	ldr	r3, [pc, #40]	@ (800eeb0 <UTIL_SEQ_WaitEvt+0x90>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	4013      	ands	r3, r2
 800ee8a:	4a09      	ldr	r2, [pc, #36]	@ (800eeb0 <UTIL_SEQ_WaitEvt+0x90>)
 800ee8c:	6013      	str	r3, [r2, #0]
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f383 8810 	msr	PRIMASK, r3
}
 800ee98:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ee9a:	4a04      	ldr	r2, [pc, #16]	@ (800eeac <UTIL_SEQ_WaitEvt+0x8c>)
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	6013      	str	r3, [r2, #0]
  return;
 800eea0:	bf00      	nop
}
 800eea2:	3720      	adds	r7, #32
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	2000179c 	.word	0x2000179c
 800eeac:	20001798 	.word	0x20001798
 800eeb0:	20001794 	.word	0x20001794

0800eeb4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800eeb8:	bf00      	nop
}
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800eec2:	b480      	push	{r7}
 800eec4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800eec6:	bf00      	nop
}
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d101      	bne.n	800eee6 <SEQ_BitPosition+0x16>
    return 32U;
 800eee2:	2320      	movs	r3, #32
 800eee4:	e003      	b.n	800eeee <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	fab3 f383 	clz	r3, r3
 800eeec:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 800eeee:	f1c3 031f 	rsb	r3, r3, #31
 800eef2:	b2db      	uxtb	r3, r3
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <__cvt>:
 800ef00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef04:	ec57 6b10 	vmov	r6, r7, d0
 800ef08:	2f00      	cmp	r7, #0
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	463b      	mov	r3, r7
 800ef10:	bfbb      	ittet	lt
 800ef12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ef16:	461f      	movlt	r7, r3
 800ef18:	2300      	movge	r3, #0
 800ef1a:	232d      	movlt	r3, #45	@ 0x2d
 800ef1c:	700b      	strb	r3, [r1, #0]
 800ef1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ef24:	4691      	mov	r9, r2
 800ef26:	f023 0820 	bic.w	r8, r3, #32
 800ef2a:	bfbc      	itt	lt
 800ef2c:	4632      	movlt	r2, r6
 800ef2e:	4616      	movlt	r6, r2
 800ef30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef34:	d005      	beq.n	800ef42 <__cvt+0x42>
 800ef36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ef3a:	d100      	bne.n	800ef3e <__cvt+0x3e>
 800ef3c:	3401      	adds	r4, #1
 800ef3e:	2102      	movs	r1, #2
 800ef40:	e000      	b.n	800ef44 <__cvt+0x44>
 800ef42:	2103      	movs	r1, #3
 800ef44:	ab03      	add	r3, sp, #12
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	ab02      	add	r3, sp, #8
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	ec47 6b10 	vmov	d0, r6, r7
 800ef50:	4653      	mov	r3, sl
 800ef52:	4622      	mov	r2, r4
 800ef54:	f000 ff98 	bl	800fe88 <_dtoa_r>
 800ef58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ef5c:	4605      	mov	r5, r0
 800ef5e:	d119      	bne.n	800ef94 <__cvt+0x94>
 800ef60:	f019 0f01 	tst.w	r9, #1
 800ef64:	d00e      	beq.n	800ef84 <__cvt+0x84>
 800ef66:	eb00 0904 	add.w	r9, r0, r4
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	4630      	mov	r0, r6
 800ef70:	4639      	mov	r1, r7
 800ef72:	f7f1 fd81 	bl	8000a78 <__aeabi_dcmpeq>
 800ef76:	b108      	cbz	r0, 800ef7c <__cvt+0x7c>
 800ef78:	f8cd 900c 	str.w	r9, [sp, #12]
 800ef7c:	2230      	movs	r2, #48	@ 0x30
 800ef7e:	9b03      	ldr	r3, [sp, #12]
 800ef80:	454b      	cmp	r3, r9
 800ef82:	d31e      	bcc.n	800efc2 <__cvt+0xc2>
 800ef84:	9b03      	ldr	r3, [sp, #12]
 800ef86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef88:	1b5b      	subs	r3, r3, r5
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	6013      	str	r3, [r2, #0]
 800ef8e:	b004      	add	sp, #16
 800ef90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ef98:	eb00 0904 	add.w	r9, r0, r4
 800ef9c:	d1e5      	bne.n	800ef6a <__cvt+0x6a>
 800ef9e:	7803      	ldrb	r3, [r0, #0]
 800efa0:	2b30      	cmp	r3, #48	@ 0x30
 800efa2:	d10a      	bne.n	800efba <__cvt+0xba>
 800efa4:	2200      	movs	r2, #0
 800efa6:	2300      	movs	r3, #0
 800efa8:	4630      	mov	r0, r6
 800efaa:	4639      	mov	r1, r7
 800efac:	f7f1 fd64 	bl	8000a78 <__aeabi_dcmpeq>
 800efb0:	b918      	cbnz	r0, 800efba <__cvt+0xba>
 800efb2:	f1c4 0401 	rsb	r4, r4, #1
 800efb6:	f8ca 4000 	str.w	r4, [sl]
 800efba:	f8da 3000 	ldr.w	r3, [sl]
 800efbe:	4499      	add	r9, r3
 800efc0:	e7d3      	b.n	800ef6a <__cvt+0x6a>
 800efc2:	1c59      	adds	r1, r3, #1
 800efc4:	9103      	str	r1, [sp, #12]
 800efc6:	701a      	strb	r2, [r3, #0]
 800efc8:	e7d9      	b.n	800ef7e <__cvt+0x7e>

0800efca <__exponent>:
 800efca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800efcc:	2900      	cmp	r1, #0
 800efce:	bfba      	itte	lt
 800efd0:	4249      	neglt	r1, r1
 800efd2:	232d      	movlt	r3, #45	@ 0x2d
 800efd4:	232b      	movge	r3, #43	@ 0x2b
 800efd6:	2909      	cmp	r1, #9
 800efd8:	7002      	strb	r2, [r0, #0]
 800efda:	7043      	strb	r3, [r0, #1]
 800efdc:	dd29      	ble.n	800f032 <__exponent+0x68>
 800efde:	f10d 0307 	add.w	r3, sp, #7
 800efe2:	461d      	mov	r5, r3
 800efe4:	270a      	movs	r7, #10
 800efe6:	461a      	mov	r2, r3
 800efe8:	fbb1 f6f7 	udiv	r6, r1, r7
 800efec:	fb07 1416 	mls	r4, r7, r6, r1
 800eff0:	3430      	adds	r4, #48	@ 0x30
 800eff2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eff6:	460c      	mov	r4, r1
 800eff8:	2c63      	cmp	r4, #99	@ 0x63
 800effa:	f103 33ff 	add.w	r3, r3, #4294967295
 800effe:	4631      	mov	r1, r6
 800f000:	dcf1      	bgt.n	800efe6 <__exponent+0x1c>
 800f002:	3130      	adds	r1, #48	@ 0x30
 800f004:	1e94      	subs	r4, r2, #2
 800f006:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f00a:	1c41      	adds	r1, r0, #1
 800f00c:	4623      	mov	r3, r4
 800f00e:	42ab      	cmp	r3, r5
 800f010:	d30a      	bcc.n	800f028 <__exponent+0x5e>
 800f012:	f10d 0309 	add.w	r3, sp, #9
 800f016:	1a9b      	subs	r3, r3, r2
 800f018:	42ac      	cmp	r4, r5
 800f01a:	bf88      	it	hi
 800f01c:	2300      	movhi	r3, #0
 800f01e:	3302      	adds	r3, #2
 800f020:	4403      	add	r3, r0
 800f022:	1a18      	subs	r0, r3, r0
 800f024:	b003      	add	sp, #12
 800f026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f028:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f02c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f030:	e7ed      	b.n	800f00e <__exponent+0x44>
 800f032:	2330      	movs	r3, #48	@ 0x30
 800f034:	3130      	adds	r1, #48	@ 0x30
 800f036:	7083      	strb	r3, [r0, #2]
 800f038:	70c1      	strb	r1, [r0, #3]
 800f03a:	1d03      	adds	r3, r0, #4
 800f03c:	e7f1      	b.n	800f022 <__exponent+0x58>
	...

0800f040 <_printf_float>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	b08d      	sub	sp, #52	@ 0x34
 800f046:	460c      	mov	r4, r1
 800f048:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f04c:	4616      	mov	r6, r2
 800f04e:	461f      	mov	r7, r3
 800f050:	4605      	mov	r5, r0
 800f052:	f000 fe09 	bl	800fc68 <_localeconv_r>
 800f056:	6803      	ldr	r3, [r0, #0]
 800f058:	9304      	str	r3, [sp, #16]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f7f1 f8e0 	bl	8000220 <strlen>
 800f060:	2300      	movs	r3, #0
 800f062:	930a      	str	r3, [sp, #40]	@ 0x28
 800f064:	f8d8 3000 	ldr.w	r3, [r8]
 800f068:	9005      	str	r0, [sp, #20]
 800f06a:	3307      	adds	r3, #7
 800f06c:	f023 0307 	bic.w	r3, r3, #7
 800f070:	f103 0208 	add.w	r2, r3, #8
 800f074:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f078:	f8d4 b000 	ldr.w	fp, [r4]
 800f07c:	f8c8 2000 	str.w	r2, [r8]
 800f080:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f084:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f088:	9307      	str	r3, [sp, #28]
 800f08a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f08e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f092:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f096:	4b9c      	ldr	r3, [pc, #624]	@ (800f308 <_printf_float+0x2c8>)
 800f098:	f04f 32ff 	mov.w	r2, #4294967295
 800f09c:	f7f1 fd1e 	bl	8000adc <__aeabi_dcmpun>
 800f0a0:	bb70      	cbnz	r0, 800f100 <_printf_float+0xc0>
 800f0a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0a6:	4b98      	ldr	r3, [pc, #608]	@ (800f308 <_printf_float+0x2c8>)
 800f0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ac:	f7f1 fcf8 	bl	8000aa0 <__aeabi_dcmple>
 800f0b0:	bb30      	cbnz	r0, 800f100 <_printf_float+0xc0>
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	4640      	mov	r0, r8
 800f0b8:	4649      	mov	r1, r9
 800f0ba:	f7f1 fce7 	bl	8000a8c <__aeabi_dcmplt>
 800f0be:	b110      	cbz	r0, 800f0c6 <_printf_float+0x86>
 800f0c0:	232d      	movs	r3, #45	@ 0x2d
 800f0c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0c6:	4a91      	ldr	r2, [pc, #580]	@ (800f30c <_printf_float+0x2cc>)
 800f0c8:	4b91      	ldr	r3, [pc, #580]	@ (800f310 <_printf_float+0x2d0>)
 800f0ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f0ce:	bf94      	ite	ls
 800f0d0:	4690      	movls	r8, r2
 800f0d2:	4698      	movhi	r8, r3
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	6123      	str	r3, [r4, #16]
 800f0d8:	f02b 0304 	bic.w	r3, fp, #4
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	f04f 0900 	mov.w	r9, #0
 800f0e2:	9700      	str	r7, [sp, #0]
 800f0e4:	4633      	mov	r3, r6
 800f0e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f000 f9d2 	bl	800f494 <_printf_common>
 800f0f0:	3001      	adds	r0, #1
 800f0f2:	f040 808d 	bne.w	800f210 <_printf_float+0x1d0>
 800f0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fa:	b00d      	add	sp, #52	@ 0x34
 800f0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f100:	4642      	mov	r2, r8
 800f102:	464b      	mov	r3, r9
 800f104:	4640      	mov	r0, r8
 800f106:	4649      	mov	r1, r9
 800f108:	f7f1 fce8 	bl	8000adc <__aeabi_dcmpun>
 800f10c:	b140      	cbz	r0, 800f120 <_printf_float+0xe0>
 800f10e:	464b      	mov	r3, r9
 800f110:	2b00      	cmp	r3, #0
 800f112:	bfbc      	itt	lt
 800f114:	232d      	movlt	r3, #45	@ 0x2d
 800f116:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f11a:	4a7e      	ldr	r2, [pc, #504]	@ (800f314 <_printf_float+0x2d4>)
 800f11c:	4b7e      	ldr	r3, [pc, #504]	@ (800f318 <_printf_float+0x2d8>)
 800f11e:	e7d4      	b.n	800f0ca <_printf_float+0x8a>
 800f120:	6863      	ldr	r3, [r4, #4]
 800f122:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f126:	9206      	str	r2, [sp, #24]
 800f128:	1c5a      	adds	r2, r3, #1
 800f12a:	d13b      	bne.n	800f1a4 <_printf_float+0x164>
 800f12c:	2306      	movs	r3, #6
 800f12e:	6063      	str	r3, [r4, #4]
 800f130:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f134:	2300      	movs	r3, #0
 800f136:	6022      	str	r2, [r4, #0]
 800f138:	9303      	str	r3, [sp, #12]
 800f13a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f13c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f140:	ab09      	add	r3, sp, #36	@ 0x24
 800f142:	9300      	str	r3, [sp, #0]
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	ec49 8b10 	vmov	d0, r8, r9
 800f14a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f14e:	4628      	mov	r0, r5
 800f150:	f7ff fed6 	bl	800ef00 <__cvt>
 800f154:	9b06      	ldr	r3, [sp, #24]
 800f156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f158:	2b47      	cmp	r3, #71	@ 0x47
 800f15a:	4680      	mov	r8, r0
 800f15c:	d129      	bne.n	800f1b2 <_printf_float+0x172>
 800f15e:	1cc8      	adds	r0, r1, #3
 800f160:	db02      	blt.n	800f168 <_printf_float+0x128>
 800f162:	6863      	ldr	r3, [r4, #4]
 800f164:	4299      	cmp	r1, r3
 800f166:	dd41      	ble.n	800f1ec <_printf_float+0x1ac>
 800f168:	f1aa 0a02 	sub.w	sl, sl, #2
 800f16c:	fa5f fa8a 	uxtb.w	sl, sl
 800f170:	3901      	subs	r1, #1
 800f172:	4652      	mov	r2, sl
 800f174:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f178:	9109      	str	r1, [sp, #36]	@ 0x24
 800f17a:	f7ff ff26 	bl	800efca <__exponent>
 800f17e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f180:	1813      	adds	r3, r2, r0
 800f182:	2a01      	cmp	r2, #1
 800f184:	4681      	mov	r9, r0
 800f186:	6123      	str	r3, [r4, #16]
 800f188:	dc02      	bgt.n	800f190 <_printf_float+0x150>
 800f18a:	6822      	ldr	r2, [r4, #0]
 800f18c:	07d2      	lsls	r2, r2, #31
 800f18e:	d501      	bpl.n	800f194 <_printf_float+0x154>
 800f190:	3301      	adds	r3, #1
 800f192:	6123      	str	r3, [r4, #16]
 800f194:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d0a2      	beq.n	800f0e2 <_printf_float+0xa2>
 800f19c:	232d      	movs	r3, #45	@ 0x2d
 800f19e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1a2:	e79e      	b.n	800f0e2 <_printf_float+0xa2>
 800f1a4:	9a06      	ldr	r2, [sp, #24]
 800f1a6:	2a47      	cmp	r2, #71	@ 0x47
 800f1a8:	d1c2      	bne.n	800f130 <_printf_float+0xf0>
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1c0      	bne.n	800f130 <_printf_float+0xf0>
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e7bd      	b.n	800f12e <_printf_float+0xee>
 800f1b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f1b6:	d9db      	bls.n	800f170 <_printf_float+0x130>
 800f1b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f1bc:	d118      	bne.n	800f1f0 <_printf_float+0x1b0>
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	6863      	ldr	r3, [r4, #4]
 800f1c2:	dd0b      	ble.n	800f1dc <_printf_float+0x19c>
 800f1c4:	6121      	str	r1, [r4, #16]
 800f1c6:	b913      	cbnz	r3, 800f1ce <_printf_float+0x18e>
 800f1c8:	6822      	ldr	r2, [r4, #0]
 800f1ca:	07d0      	lsls	r0, r2, #31
 800f1cc:	d502      	bpl.n	800f1d4 <_printf_float+0x194>
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	440b      	add	r3, r1
 800f1d2:	6123      	str	r3, [r4, #16]
 800f1d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f1d6:	f04f 0900 	mov.w	r9, #0
 800f1da:	e7db      	b.n	800f194 <_printf_float+0x154>
 800f1dc:	b913      	cbnz	r3, 800f1e4 <_printf_float+0x1a4>
 800f1de:	6822      	ldr	r2, [r4, #0]
 800f1e0:	07d2      	lsls	r2, r2, #31
 800f1e2:	d501      	bpl.n	800f1e8 <_printf_float+0x1a8>
 800f1e4:	3302      	adds	r3, #2
 800f1e6:	e7f4      	b.n	800f1d2 <_printf_float+0x192>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e7f2      	b.n	800f1d2 <_printf_float+0x192>
 800f1ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f1f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1f2:	4299      	cmp	r1, r3
 800f1f4:	db05      	blt.n	800f202 <_printf_float+0x1c2>
 800f1f6:	6823      	ldr	r3, [r4, #0]
 800f1f8:	6121      	str	r1, [r4, #16]
 800f1fa:	07d8      	lsls	r0, r3, #31
 800f1fc:	d5ea      	bpl.n	800f1d4 <_printf_float+0x194>
 800f1fe:	1c4b      	adds	r3, r1, #1
 800f200:	e7e7      	b.n	800f1d2 <_printf_float+0x192>
 800f202:	2900      	cmp	r1, #0
 800f204:	bfd4      	ite	le
 800f206:	f1c1 0202 	rsble	r2, r1, #2
 800f20a:	2201      	movgt	r2, #1
 800f20c:	4413      	add	r3, r2
 800f20e:	e7e0      	b.n	800f1d2 <_printf_float+0x192>
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	055a      	lsls	r2, r3, #21
 800f214:	d407      	bmi.n	800f226 <_printf_float+0x1e6>
 800f216:	6923      	ldr	r3, [r4, #16]
 800f218:	4642      	mov	r2, r8
 800f21a:	4631      	mov	r1, r6
 800f21c:	4628      	mov	r0, r5
 800f21e:	47b8      	blx	r7
 800f220:	3001      	adds	r0, #1
 800f222:	d12b      	bne.n	800f27c <_printf_float+0x23c>
 800f224:	e767      	b.n	800f0f6 <_printf_float+0xb6>
 800f226:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f22a:	f240 80dd 	bls.w	800f3e8 <_printf_float+0x3a8>
 800f22e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f232:	2200      	movs	r2, #0
 800f234:	2300      	movs	r3, #0
 800f236:	f7f1 fc1f 	bl	8000a78 <__aeabi_dcmpeq>
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d033      	beq.n	800f2a6 <_printf_float+0x266>
 800f23e:	4a37      	ldr	r2, [pc, #220]	@ (800f31c <_printf_float+0x2dc>)
 800f240:	2301      	movs	r3, #1
 800f242:	4631      	mov	r1, r6
 800f244:	4628      	mov	r0, r5
 800f246:	47b8      	blx	r7
 800f248:	3001      	adds	r0, #1
 800f24a:	f43f af54 	beq.w	800f0f6 <_printf_float+0xb6>
 800f24e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f252:	4543      	cmp	r3, r8
 800f254:	db02      	blt.n	800f25c <_printf_float+0x21c>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	07d8      	lsls	r0, r3, #31
 800f25a:	d50f      	bpl.n	800f27c <_printf_float+0x23c>
 800f25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f260:	4631      	mov	r1, r6
 800f262:	4628      	mov	r0, r5
 800f264:	47b8      	blx	r7
 800f266:	3001      	adds	r0, #1
 800f268:	f43f af45 	beq.w	800f0f6 <_printf_float+0xb6>
 800f26c:	f04f 0900 	mov.w	r9, #0
 800f270:	f108 38ff 	add.w	r8, r8, #4294967295
 800f274:	f104 0a1a 	add.w	sl, r4, #26
 800f278:	45c8      	cmp	r8, r9
 800f27a:	dc09      	bgt.n	800f290 <_printf_float+0x250>
 800f27c:	6823      	ldr	r3, [r4, #0]
 800f27e:	079b      	lsls	r3, r3, #30
 800f280:	f100 8103 	bmi.w	800f48a <_printf_float+0x44a>
 800f284:	68e0      	ldr	r0, [r4, #12]
 800f286:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f288:	4298      	cmp	r0, r3
 800f28a:	bfb8      	it	lt
 800f28c:	4618      	movlt	r0, r3
 800f28e:	e734      	b.n	800f0fa <_printf_float+0xba>
 800f290:	2301      	movs	r3, #1
 800f292:	4652      	mov	r2, sl
 800f294:	4631      	mov	r1, r6
 800f296:	4628      	mov	r0, r5
 800f298:	47b8      	blx	r7
 800f29a:	3001      	adds	r0, #1
 800f29c:	f43f af2b 	beq.w	800f0f6 <_printf_float+0xb6>
 800f2a0:	f109 0901 	add.w	r9, r9, #1
 800f2a4:	e7e8      	b.n	800f278 <_printf_float+0x238>
 800f2a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	dc39      	bgt.n	800f320 <_printf_float+0x2e0>
 800f2ac:	4a1b      	ldr	r2, [pc, #108]	@ (800f31c <_printf_float+0x2dc>)
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	4631      	mov	r1, r6
 800f2b2:	4628      	mov	r0, r5
 800f2b4:	47b8      	blx	r7
 800f2b6:	3001      	adds	r0, #1
 800f2b8:	f43f af1d 	beq.w	800f0f6 <_printf_float+0xb6>
 800f2bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f2c0:	ea59 0303 	orrs.w	r3, r9, r3
 800f2c4:	d102      	bne.n	800f2cc <_printf_float+0x28c>
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	07d9      	lsls	r1, r3, #31
 800f2ca:	d5d7      	bpl.n	800f27c <_printf_float+0x23c>
 800f2cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2d0:	4631      	mov	r1, r6
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	47b8      	blx	r7
 800f2d6:	3001      	adds	r0, #1
 800f2d8:	f43f af0d 	beq.w	800f0f6 <_printf_float+0xb6>
 800f2dc:	f04f 0a00 	mov.w	sl, #0
 800f2e0:	f104 0b1a 	add.w	fp, r4, #26
 800f2e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2e6:	425b      	negs	r3, r3
 800f2e8:	4553      	cmp	r3, sl
 800f2ea:	dc01      	bgt.n	800f2f0 <_printf_float+0x2b0>
 800f2ec:	464b      	mov	r3, r9
 800f2ee:	e793      	b.n	800f218 <_printf_float+0x1d8>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	465a      	mov	r2, fp
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	47b8      	blx	r7
 800f2fa:	3001      	adds	r0, #1
 800f2fc:	f43f aefb 	beq.w	800f0f6 <_printf_float+0xb6>
 800f300:	f10a 0a01 	add.w	sl, sl, #1
 800f304:	e7ee      	b.n	800f2e4 <_printf_float+0x2a4>
 800f306:	bf00      	nop
 800f308:	7fefffff 	.word	0x7fefffff
 800f30c:	080133f8 	.word	0x080133f8
 800f310:	080133fc 	.word	0x080133fc
 800f314:	08013400 	.word	0x08013400
 800f318:	08013404 	.word	0x08013404
 800f31c:	08013408 	.word	0x08013408
 800f320:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f322:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f326:	4553      	cmp	r3, sl
 800f328:	bfa8      	it	ge
 800f32a:	4653      	movge	r3, sl
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	4699      	mov	r9, r3
 800f330:	dc36      	bgt.n	800f3a0 <_printf_float+0x360>
 800f332:	f04f 0b00 	mov.w	fp, #0
 800f336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f33a:	f104 021a 	add.w	r2, r4, #26
 800f33e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f340:	9306      	str	r3, [sp, #24]
 800f342:	eba3 0309 	sub.w	r3, r3, r9
 800f346:	455b      	cmp	r3, fp
 800f348:	dc31      	bgt.n	800f3ae <_printf_float+0x36e>
 800f34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f34c:	459a      	cmp	sl, r3
 800f34e:	dc3a      	bgt.n	800f3c6 <_printf_float+0x386>
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	07da      	lsls	r2, r3, #31
 800f354:	d437      	bmi.n	800f3c6 <_printf_float+0x386>
 800f356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f358:	ebaa 0903 	sub.w	r9, sl, r3
 800f35c:	9b06      	ldr	r3, [sp, #24]
 800f35e:	ebaa 0303 	sub.w	r3, sl, r3
 800f362:	4599      	cmp	r9, r3
 800f364:	bfa8      	it	ge
 800f366:	4699      	movge	r9, r3
 800f368:	f1b9 0f00 	cmp.w	r9, #0
 800f36c:	dc33      	bgt.n	800f3d6 <_printf_float+0x396>
 800f36e:	f04f 0800 	mov.w	r8, #0
 800f372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f376:	f104 0b1a 	add.w	fp, r4, #26
 800f37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f37c:	ebaa 0303 	sub.w	r3, sl, r3
 800f380:	eba3 0309 	sub.w	r3, r3, r9
 800f384:	4543      	cmp	r3, r8
 800f386:	f77f af79 	ble.w	800f27c <_printf_float+0x23c>
 800f38a:	2301      	movs	r3, #1
 800f38c:	465a      	mov	r2, fp
 800f38e:	4631      	mov	r1, r6
 800f390:	4628      	mov	r0, r5
 800f392:	47b8      	blx	r7
 800f394:	3001      	adds	r0, #1
 800f396:	f43f aeae 	beq.w	800f0f6 <_printf_float+0xb6>
 800f39a:	f108 0801 	add.w	r8, r8, #1
 800f39e:	e7ec      	b.n	800f37a <_printf_float+0x33a>
 800f3a0:	4642      	mov	r2, r8
 800f3a2:	4631      	mov	r1, r6
 800f3a4:	4628      	mov	r0, r5
 800f3a6:	47b8      	blx	r7
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d1c2      	bne.n	800f332 <_printf_float+0x2f2>
 800f3ac:	e6a3      	b.n	800f0f6 <_printf_float+0xb6>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	9206      	str	r2, [sp, #24]
 800f3b6:	47b8      	blx	r7
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	f43f ae9c 	beq.w	800f0f6 <_printf_float+0xb6>
 800f3be:	9a06      	ldr	r2, [sp, #24]
 800f3c0:	f10b 0b01 	add.w	fp, fp, #1
 800f3c4:	e7bb      	b.n	800f33e <_printf_float+0x2fe>
 800f3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4628      	mov	r0, r5
 800f3ce:	47b8      	blx	r7
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d1c0      	bne.n	800f356 <_printf_float+0x316>
 800f3d4:	e68f      	b.n	800f0f6 <_printf_float+0xb6>
 800f3d6:	9a06      	ldr	r2, [sp, #24]
 800f3d8:	464b      	mov	r3, r9
 800f3da:	4442      	add	r2, r8
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4628      	mov	r0, r5
 800f3e0:	47b8      	blx	r7
 800f3e2:	3001      	adds	r0, #1
 800f3e4:	d1c3      	bne.n	800f36e <_printf_float+0x32e>
 800f3e6:	e686      	b.n	800f0f6 <_printf_float+0xb6>
 800f3e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3ec:	f1ba 0f01 	cmp.w	sl, #1
 800f3f0:	dc01      	bgt.n	800f3f6 <_printf_float+0x3b6>
 800f3f2:	07db      	lsls	r3, r3, #31
 800f3f4:	d536      	bpl.n	800f464 <_printf_float+0x424>
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	4642      	mov	r2, r8
 800f3fa:	4631      	mov	r1, r6
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	47b8      	blx	r7
 800f400:	3001      	adds	r0, #1
 800f402:	f43f ae78 	beq.w	800f0f6 <_printf_float+0xb6>
 800f406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f40a:	4631      	mov	r1, r6
 800f40c:	4628      	mov	r0, r5
 800f40e:	47b8      	blx	r7
 800f410:	3001      	adds	r0, #1
 800f412:	f43f ae70 	beq.w	800f0f6 <_printf_float+0xb6>
 800f416:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f41a:	2200      	movs	r2, #0
 800f41c:	2300      	movs	r3, #0
 800f41e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f422:	f7f1 fb29 	bl	8000a78 <__aeabi_dcmpeq>
 800f426:	b9c0      	cbnz	r0, 800f45a <_printf_float+0x41a>
 800f428:	4653      	mov	r3, sl
 800f42a:	f108 0201 	add.w	r2, r8, #1
 800f42e:	4631      	mov	r1, r6
 800f430:	4628      	mov	r0, r5
 800f432:	47b8      	blx	r7
 800f434:	3001      	adds	r0, #1
 800f436:	d10c      	bne.n	800f452 <_printf_float+0x412>
 800f438:	e65d      	b.n	800f0f6 <_printf_float+0xb6>
 800f43a:	2301      	movs	r3, #1
 800f43c:	465a      	mov	r2, fp
 800f43e:	4631      	mov	r1, r6
 800f440:	4628      	mov	r0, r5
 800f442:	47b8      	blx	r7
 800f444:	3001      	adds	r0, #1
 800f446:	f43f ae56 	beq.w	800f0f6 <_printf_float+0xb6>
 800f44a:	f108 0801 	add.w	r8, r8, #1
 800f44e:	45d0      	cmp	r8, sl
 800f450:	dbf3      	blt.n	800f43a <_printf_float+0x3fa>
 800f452:	464b      	mov	r3, r9
 800f454:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f458:	e6df      	b.n	800f21a <_printf_float+0x1da>
 800f45a:	f04f 0800 	mov.w	r8, #0
 800f45e:	f104 0b1a 	add.w	fp, r4, #26
 800f462:	e7f4      	b.n	800f44e <_printf_float+0x40e>
 800f464:	2301      	movs	r3, #1
 800f466:	4642      	mov	r2, r8
 800f468:	e7e1      	b.n	800f42e <_printf_float+0x3ee>
 800f46a:	2301      	movs	r3, #1
 800f46c:	464a      	mov	r2, r9
 800f46e:	4631      	mov	r1, r6
 800f470:	4628      	mov	r0, r5
 800f472:	47b8      	blx	r7
 800f474:	3001      	adds	r0, #1
 800f476:	f43f ae3e 	beq.w	800f0f6 <_printf_float+0xb6>
 800f47a:	f108 0801 	add.w	r8, r8, #1
 800f47e:	68e3      	ldr	r3, [r4, #12]
 800f480:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f482:	1a5b      	subs	r3, r3, r1
 800f484:	4543      	cmp	r3, r8
 800f486:	dcf0      	bgt.n	800f46a <_printf_float+0x42a>
 800f488:	e6fc      	b.n	800f284 <_printf_float+0x244>
 800f48a:	f04f 0800 	mov.w	r8, #0
 800f48e:	f104 0919 	add.w	r9, r4, #25
 800f492:	e7f4      	b.n	800f47e <_printf_float+0x43e>

0800f494 <_printf_common>:
 800f494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f498:	4616      	mov	r6, r2
 800f49a:	4698      	mov	r8, r3
 800f49c:	688a      	ldr	r2, [r1, #8]
 800f49e:	690b      	ldr	r3, [r1, #16]
 800f4a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	bfb8      	it	lt
 800f4a8:	4613      	movlt	r3, r2
 800f4aa:	6033      	str	r3, [r6, #0]
 800f4ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	b10a      	cbz	r2, 800f4ba <_printf_common+0x26>
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	6033      	str	r3, [r6, #0]
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	0699      	lsls	r1, r3, #26
 800f4be:	bf42      	ittt	mi
 800f4c0:	6833      	ldrmi	r3, [r6, #0]
 800f4c2:	3302      	addmi	r3, #2
 800f4c4:	6033      	strmi	r3, [r6, #0]
 800f4c6:	6825      	ldr	r5, [r4, #0]
 800f4c8:	f015 0506 	ands.w	r5, r5, #6
 800f4cc:	d106      	bne.n	800f4dc <_printf_common+0x48>
 800f4ce:	f104 0a19 	add.w	sl, r4, #25
 800f4d2:	68e3      	ldr	r3, [r4, #12]
 800f4d4:	6832      	ldr	r2, [r6, #0]
 800f4d6:	1a9b      	subs	r3, r3, r2
 800f4d8:	42ab      	cmp	r3, r5
 800f4da:	dc26      	bgt.n	800f52a <_printf_common+0x96>
 800f4dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f4e0:	6822      	ldr	r2, [r4, #0]
 800f4e2:	3b00      	subs	r3, #0
 800f4e4:	bf18      	it	ne
 800f4e6:	2301      	movne	r3, #1
 800f4e8:	0692      	lsls	r2, r2, #26
 800f4ea:	d42b      	bmi.n	800f544 <_printf_common+0xb0>
 800f4ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f4f0:	4641      	mov	r1, r8
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	47c8      	blx	r9
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d01e      	beq.n	800f538 <_printf_common+0xa4>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	6922      	ldr	r2, [r4, #16]
 800f4fe:	f003 0306 	and.w	r3, r3, #6
 800f502:	2b04      	cmp	r3, #4
 800f504:	bf02      	ittt	eq
 800f506:	68e5      	ldreq	r5, [r4, #12]
 800f508:	6833      	ldreq	r3, [r6, #0]
 800f50a:	1aed      	subeq	r5, r5, r3
 800f50c:	68a3      	ldr	r3, [r4, #8]
 800f50e:	bf0c      	ite	eq
 800f510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f514:	2500      	movne	r5, #0
 800f516:	4293      	cmp	r3, r2
 800f518:	bfc4      	itt	gt
 800f51a:	1a9b      	subgt	r3, r3, r2
 800f51c:	18ed      	addgt	r5, r5, r3
 800f51e:	2600      	movs	r6, #0
 800f520:	341a      	adds	r4, #26
 800f522:	42b5      	cmp	r5, r6
 800f524:	d11a      	bne.n	800f55c <_printf_common+0xc8>
 800f526:	2000      	movs	r0, #0
 800f528:	e008      	b.n	800f53c <_printf_common+0xa8>
 800f52a:	2301      	movs	r3, #1
 800f52c:	4652      	mov	r2, sl
 800f52e:	4641      	mov	r1, r8
 800f530:	4638      	mov	r0, r7
 800f532:	47c8      	blx	r9
 800f534:	3001      	adds	r0, #1
 800f536:	d103      	bne.n	800f540 <_printf_common+0xac>
 800f538:	f04f 30ff 	mov.w	r0, #4294967295
 800f53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f540:	3501      	adds	r5, #1
 800f542:	e7c6      	b.n	800f4d2 <_printf_common+0x3e>
 800f544:	18e1      	adds	r1, r4, r3
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	2030      	movs	r0, #48	@ 0x30
 800f54a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f54e:	4422      	add	r2, r4
 800f550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f554:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f558:	3302      	adds	r3, #2
 800f55a:	e7c7      	b.n	800f4ec <_printf_common+0x58>
 800f55c:	2301      	movs	r3, #1
 800f55e:	4622      	mov	r2, r4
 800f560:	4641      	mov	r1, r8
 800f562:	4638      	mov	r0, r7
 800f564:	47c8      	blx	r9
 800f566:	3001      	adds	r0, #1
 800f568:	d0e6      	beq.n	800f538 <_printf_common+0xa4>
 800f56a:	3601      	adds	r6, #1
 800f56c:	e7d9      	b.n	800f522 <_printf_common+0x8e>
	...

0800f570 <_printf_i>:
 800f570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	7e0f      	ldrb	r7, [r1, #24]
 800f576:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f578:	2f78      	cmp	r7, #120	@ 0x78
 800f57a:	4691      	mov	r9, r2
 800f57c:	4680      	mov	r8, r0
 800f57e:	460c      	mov	r4, r1
 800f580:	469a      	mov	sl, r3
 800f582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f586:	d807      	bhi.n	800f598 <_printf_i+0x28>
 800f588:	2f62      	cmp	r7, #98	@ 0x62
 800f58a:	d80a      	bhi.n	800f5a2 <_printf_i+0x32>
 800f58c:	2f00      	cmp	r7, #0
 800f58e:	f000 80d2 	beq.w	800f736 <_printf_i+0x1c6>
 800f592:	2f58      	cmp	r7, #88	@ 0x58
 800f594:	f000 80b9 	beq.w	800f70a <_printf_i+0x19a>
 800f598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f59c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5a0:	e03a      	b.n	800f618 <_printf_i+0xa8>
 800f5a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5a6:	2b15      	cmp	r3, #21
 800f5a8:	d8f6      	bhi.n	800f598 <_printf_i+0x28>
 800f5aa:	a101      	add	r1, pc, #4	@ (adr r1, 800f5b0 <_printf_i+0x40>)
 800f5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5b0:	0800f609 	.word	0x0800f609
 800f5b4:	0800f61d 	.word	0x0800f61d
 800f5b8:	0800f599 	.word	0x0800f599
 800f5bc:	0800f599 	.word	0x0800f599
 800f5c0:	0800f599 	.word	0x0800f599
 800f5c4:	0800f599 	.word	0x0800f599
 800f5c8:	0800f61d 	.word	0x0800f61d
 800f5cc:	0800f599 	.word	0x0800f599
 800f5d0:	0800f599 	.word	0x0800f599
 800f5d4:	0800f599 	.word	0x0800f599
 800f5d8:	0800f599 	.word	0x0800f599
 800f5dc:	0800f71d 	.word	0x0800f71d
 800f5e0:	0800f647 	.word	0x0800f647
 800f5e4:	0800f6d7 	.word	0x0800f6d7
 800f5e8:	0800f599 	.word	0x0800f599
 800f5ec:	0800f599 	.word	0x0800f599
 800f5f0:	0800f73f 	.word	0x0800f73f
 800f5f4:	0800f599 	.word	0x0800f599
 800f5f8:	0800f647 	.word	0x0800f647
 800f5fc:	0800f599 	.word	0x0800f599
 800f600:	0800f599 	.word	0x0800f599
 800f604:	0800f6df 	.word	0x0800f6df
 800f608:	6833      	ldr	r3, [r6, #0]
 800f60a:	1d1a      	adds	r2, r3, #4
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	6032      	str	r2, [r6, #0]
 800f610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f618:	2301      	movs	r3, #1
 800f61a:	e09d      	b.n	800f758 <_printf_i+0x1e8>
 800f61c:	6833      	ldr	r3, [r6, #0]
 800f61e:	6820      	ldr	r0, [r4, #0]
 800f620:	1d19      	adds	r1, r3, #4
 800f622:	6031      	str	r1, [r6, #0]
 800f624:	0606      	lsls	r6, r0, #24
 800f626:	d501      	bpl.n	800f62c <_printf_i+0xbc>
 800f628:	681d      	ldr	r5, [r3, #0]
 800f62a:	e003      	b.n	800f634 <_printf_i+0xc4>
 800f62c:	0645      	lsls	r5, r0, #25
 800f62e:	d5fb      	bpl.n	800f628 <_printf_i+0xb8>
 800f630:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f634:	2d00      	cmp	r5, #0
 800f636:	da03      	bge.n	800f640 <_printf_i+0xd0>
 800f638:	232d      	movs	r3, #45	@ 0x2d
 800f63a:	426d      	negs	r5, r5
 800f63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f640:	4859      	ldr	r0, [pc, #356]	@ (800f7a8 <_printf_i+0x238>)
 800f642:	230a      	movs	r3, #10
 800f644:	e011      	b.n	800f66a <_printf_i+0xfa>
 800f646:	6821      	ldr	r1, [r4, #0]
 800f648:	6833      	ldr	r3, [r6, #0]
 800f64a:	0608      	lsls	r0, r1, #24
 800f64c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f650:	d402      	bmi.n	800f658 <_printf_i+0xe8>
 800f652:	0649      	lsls	r1, r1, #25
 800f654:	bf48      	it	mi
 800f656:	b2ad      	uxthmi	r5, r5
 800f658:	2f6f      	cmp	r7, #111	@ 0x6f
 800f65a:	4853      	ldr	r0, [pc, #332]	@ (800f7a8 <_printf_i+0x238>)
 800f65c:	6033      	str	r3, [r6, #0]
 800f65e:	bf14      	ite	ne
 800f660:	230a      	movne	r3, #10
 800f662:	2308      	moveq	r3, #8
 800f664:	2100      	movs	r1, #0
 800f666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f66a:	6866      	ldr	r6, [r4, #4]
 800f66c:	60a6      	str	r6, [r4, #8]
 800f66e:	2e00      	cmp	r6, #0
 800f670:	bfa2      	ittt	ge
 800f672:	6821      	ldrge	r1, [r4, #0]
 800f674:	f021 0104 	bicge.w	r1, r1, #4
 800f678:	6021      	strge	r1, [r4, #0]
 800f67a:	b90d      	cbnz	r5, 800f680 <_printf_i+0x110>
 800f67c:	2e00      	cmp	r6, #0
 800f67e:	d04b      	beq.n	800f718 <_printf_i+0x1a8>
 800f680:	4616      	mov	r6, r2
 800f682:	fbb5 f1f3 	udiv	r1, r5, r3
 800f686:	fb03 5711 	mls	r7, r3, r1, r5
 800f68a:	5dc7      	ldrb	r7, [r0, r7]
 800f68c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f690:	462f      	mov	r7, r5
 800f692:	42bb      	cmp	r3, r7
 800f694:	460d      	mov	r5, r1
 800f696:	d9f4      	bls.n	800f682 <_printf_i+0x112>
 800f698:	2b08      	cmp	r3, #8
 800f69a:	d10b      	bne.n	800f6b4 <_printf_i+0x144>
 800f69c:	6823      	ldr	r3, [r4, #0]
 800f69e:	07df      	lsls	r7, r3, #31
 800f6a0:	d508      	bpl.n	800f6b4 <_printf_i+0x144>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	6861      	ldr	r1, [r4, #4]
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	bfde      	ittt	le
 800f6aa:	2330      	movle	r3, #48	@ 0x30
 800f6ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f6b4:	1b92      	subs	r2, r2, r6
 800f6b6:	6122      	str	r2, [r4, #16]
 800f6b8:	f8cd a000 	str.w	sl, [sp]
 800f6bc:	464b      	mov	r3, r9
 800f6be:	aa03      	add	r2, sp, #12
 800f6c0:	4621      	mov	r1, r4
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	f7ff fee6 	bl	800f494 <_printf_common>
 800f6c8:	3001      	adds	r0, #1
 800f6ca:	d14a      	bne.n	800f762 <_printf_i+0x1f2>
 800f6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f6d0:	b004      	add	sp, #16
 800f6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	f043 0320 	orr.w	r3, r3, #32
 800f6dc:	6023      	str	r3, [r4, #0]
 800f6de:	4833      	ldr	r0, [pc, #204]	@ (800f7ac <_printf_i+0x23c>)
 800f6e0:	2778      	movs	r7, #120	@ 0x78
 800f6e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f6e6:	6823      	ldr	r3, [r4, #0]
 800f6e8:	6831      	ldr	r1, [r6, #0]
 800f6ea:	061f      	lsls	r7, r3, #24
 800f6ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800f6f0:	d402      	bmi.n	800f6f8 <_printf_i+0x188>
 800f6f2:	065f      	lsls	r7, r3, #25
 800f6f4:	bf48      	it	mi
 800f6f6:	b2ad      	uxthmi	r5, r5
 800f6f8:	6031      	str	r1, [r6, #0]
 800f6fa:	07d9      	lsls	r1, r3, #31
 800f6fc:	bf44      	itt	mi
 800f6fe:	f043 0320 	orrmi.w	r3, r3, #32
 800f702:	6023      	strmi	r3, [r4, #0]
 800f704:	b11d      	cbz	r5, 800f70e <_printf_i+0x19e>
 800f706:	2310      	movs	r3, #16
 800f708:	e7ac      	b.n	800f664 <_printf_i+0xf4>
 800f70a:	4827      	ldr	r0, [pc, #156]	@ (800f7a8 <_printf_i+0x238>)
 800f70c:	e7e9      	b.n	800f6e2 <_printf_i+0x172>
 800f70e:	6823      	ldr	r3, [r4, #0]
 800f710:	f023 0320 	bic.w	r3, r3, #32
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	e7f6      	b.n	800f706 <_printf_i+0x196>
 800f718:	4616      	mov	r6, r2
 800f71a:	e7bd      	b.n	800f698 <_printf_i+0x128>
 800f71c:	6833      	ldr	r3, [r6, #0]
 800f71e:	6825      	ldr	r5, [r4, #0]
 800f720:	6961      	ldr	r1, [r4, #20]
 800f722:	1d18      	adds	r0, r3, #4
 800f724:	6030      	str	r0, [r6, #0]
 800f726:	062e      	lsls	r6, r5, #24
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	d501      	bpl.n	800f730 <_printf_i+0x1c0>
 800f72c:	6019      	str	r1, [r3, #0]
 800f72e:	e002      	b.n	800f736 <_printf_i+0x1c6>
 800f730:	0668      	lsls	r0, r5, #25
 800f732:	d5fb      	bpl.n	800f72c <_printf_i+0x1bc>
 800f734:	8019      	strh	r1, [r3, #0]
 800f736:	2300      	movs	r3, #0
 800f738:	6123      	str	r3, [r4, #16]
 800f73a:	4616      	mov	r6, r2
 800f73c:	e7bc      	b.n	800f6b8 <_printf_i+0x148>
 800f73e:	6833      	ldr	r3, [r6, #0]
 800f740:	1d1a      	adds	r2, r3, #4
 800f742:	6032      	str	r2, [r6, #0]
 800f744:	681e      	ldr	r6, [r3, #0]
 800f746:	6862      	ldr	r2, [r4, #4]
 800f748:	2100      	movs	r1, #0
 800f74a:	4630      	mov	r0, r6
 800f74c:	f7f0 fd18 	bl	8000180 <memchr>
 800f750:	b108      	cbz	r0, 800f756 <_printf_i+0x1e6>
 800f752:	1b80      	subs	r0, r0, r6
 800f754:	6060      	str	r0, [r4, #4]
 800f756:	6863      	ldr	r3, [r4, #4]
 800f758:	6123      	str	r3, [r4, #16]
 800f75a:	2300      	movs	r3, #0
 800f75c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f760:	e7aa      	b.n	800f6b8 <_printf_i+0x148>
 800f762:	6923      	ldr	r3, [r4, #16]
 800f764:	4632      	mov	r2, r6
 800f766:	4649      	mov	r1, r9
 800f768:	4640      	mov	r0, r8
 800f76a:	47d0      	blx	sl
 800f76c:	3001      	adds	r0, #1
 800f76e:	d0ad      	beq.n	800f6cc <_printf_i+0x15c>
 800f770:	6823      	ldr	r3, [r4, #0]
 800f772:	079b      	lsls	r3, r3, #30
 800f774:	d413      	bmi.n	800f79e <_printf_i+0x22e>
 800f776:	68e0      	ldr	r0, [r4, #12]
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	4298      	cmp	r0, r3
 800f77c:	bfb8      	it	lt
 800f77e:	4618      	movlt	r0, r3
 800f780:	e7a6      	b.n	800f6d0 <_printf_i+0x160>
 800f782:	2301      	movs	r3, #1
 800f784:	4632      	mov	r2, r6
 800f786:	4649      	mov	r1, r9
 800f788:	4640      	mov	r0, r8
 800f78a:	47d0      	blx	sl
 800f78c:	3001      	adds	r0, #1
 800f78e:	d09d      	beq.n	800f6cc <_printf_i+0x15c>
 800f790:	3501      	adds	r5, #1
 800f792:	68e3      	ldr	r3, [r4, #12]
 800f794:	9903      	ldr	r1, [sp, #12]
 800f796:	1a5b      	subs	r3, r3, r1
 800f798:	42ab      	cmp	r3, r5
 800f79a:	dcf2      	bgt.n	800f782 <_printf_i+0x212>
 800f79c:	e7eb      	b.n	800f776 <_printf_i+0x206>
 800f79e:	2500      	movs	r5, #0
 800f7a0:	f104 0619 	add.w	r6, r4, #25
 800f7a4:	e7f5      	b.n	800f792 <_printf_i+0x222>
 800f7a6:	bf00      	nop
 800f7a8:	0801340a 	.word	0x0801340a
 800f7ac:	0801341b 	.word	0x0801341b

0800f7b0 <std>:
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	b510      	push	{r4, lr}
 800f7b4:	4604      	mov	r4, r0
 800f7b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7be:	6083      	str	r3, [r0, #8]
 800f7c0:	8181      	strh	r1, [r0, #12]
 800f7c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f7c4:	81c2      	strh	r2, [r0, #14]
 800f7c6:	6183      	str	r3, [r0, #24]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	2208      	movs	r2, #8
 800f7cc:	305c      	adds	r0, #92	@ 0x5c
 800f7ce:	f000 fa2d 	bl	800fc2c <memset>
 800f7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f808 <std+0x58>)
 800f7d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f80c <std+0x5c>)
 800f7d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f7da:	4b0d      	ldr	r3, [pc, #52]	@ (800f810 <std+0x60>)
 800f7dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f7de:	4b0d      	ldr	r3, [pc, #52]	@ (800f814 <std+0x64>)
 800f7e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f818 <std+0x68>)
 800f7e4:	6224      	str	r4, [r4, #32]
 800f7e6:	429c      	cmp	r4, r3
 800f7e8:	d006      	beq.n	800f7f8 <std+0x48>
 800f7ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f7ee:	4294      	cmp	r4, r2
 800f7f0:	d002      	beq.n	800f7f8 <std+0x48>
 800f7f2:	33d0      	adds	r3, #208	@ 0xd0
 800f7f4:	429c      	cmp	r4, r3
 800f7f6:	d105      	bne.n	800f804 <std+0x54>
 800f7f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f800:	f000 baa6 	b.w	800fd50 <__retarget_lock_init_recursive>
 800f804:	bd10      	pop	{r4, pc}
 800f806:	bf00      	nop
 800f808:	0800fa7d 	.word	0x0800fa7d
 800f80c:	0800fa9f 	.word	0x0800fa9f
 800f810:	0800fad7 	.word	0x0800fad7
 800f814:	0800fafb 	.word	0x0800fafb
 800f818:	20001828 	.word	0x20001828

0800f81c <stdio_exit_handler>:
 800f81c:	4a02      	ldr	r2, [pc, #8]	@ (800f828 <stdio_exit_handler+0xc>)
 800f81e:	4903      	ldr	r1, [pc, #12]	@ (800f82c <stdio_exit_handler+0x10>)
 800f820:	4803      	ldr	r0, [pc, #12]	@ (800f830 <stdio_exit_handler+0x14>)
 800f822:	f000 b869 	b.w	800f8f8 <_fwalk_sglue>
 800f826:	bf00      	nop
 800f828:	2000002c 	.word	0x2000002c
 800f82c:	08011951 	.word	0x08011951
 800f830:	2000003c 	.word	0x2000003c

0800f834 <cleanup_stdio>:
 800f834:	6841      	ldr	r1, [r0, #4]
 800f836:	4b0c      	ldr	r3, [pc, #48]	@ (800f868 <cleanup_stdio+0x34>)
 800f838:	4299      	cmp	r1, r3
 800f83a:	b510      	push	{r4, lr}
 800f83c:	4604      	mov	r4, r0
 800f83e:	d001      	beq.n	800f844 <cleanup_stdio+0x10>
 800f840:	f002 f886 	bl	8011950 <_fflush_r>
 800f844:	68a1      	ldr	r1, [r4, #8]
 800f846:	4b09      	ldr	r3, [pc, #36]	@ (800f86c <cleanup_stdio+0x38>)
 800f848:	4299      	cmp	r1, r3
 800f84a:	d002      	beq.n	800f852 <cleanup_stdio+0x1e>
 800f84c:	4620      	mov	r0, r4
 800f84e:	f002 f87f 	bl	8011950 <_fflush_r>
 800f852:	68e1      	ldr	r1, [r4, #12]
 800f854:	4b06      	ldr	r3, [pc, #24]	@ (800f870 <cleanup_stdio+0x3c>)
 800f856:	4299      	cmp	r1, r3
 800f858:	d004      	beq.n	800f864 <cleanup_stdio+0x30>
 800f85a:	4620      	mov	r0, r4
 800f85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f860:	f002 b876 	b.w	8011950 <_fflush_r>
 800f864:	bd10      	pop	{r4, pc}
 800f866:	bf00      	nop
 800f868:	20001828 	.word	0x20001828
 800f86c:	20001890 	.word	0x20001890
 800f870:	200018f8 	.word	0x200018f8

0800f874 <global_stdio_init.part.0>:
 800f874:	b510      	push	{r4, lr}
 800f876:	4b0b      	ldr	r3, [pc, #44]	@ (800f8a4 <global_stdio_init.part.0+0x30>)
 800f878:	4c0b      	ldr	r4, [pc, #44]	@ (800f8a8 <global_stdio_init.part.0+0x34>)
 800f87a:	4a0c      	ldr	r2, [pc, #48]	@ (800f8ac <global_stdio_init.part.0+0x38>)
 800f87c:	601a      	str	r2, [r3, #0]
 800f87e:	4620      	mov	r0, r4
 800f880:	2200      	movs	r2, #0
 800f882:	2104      	movs	r1, #4
 800f884:	f7ff ff94 	bl	800f7b0 <std>
 800f888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f88c:	2201      	movs	r2, #1
 800f88e:	2109      	movs	r1, #9
 800f890:	f7ff ff8e 	bl	800f7b0 <std>
 800f894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f898:	2202      	movs	r2, #2
 800f89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f89e:	2112      	movs	r1, #18
 800f8a0:	f7ff bf86 	b.w	800f7b0 <std>
 800f8a4:	20001960 	.word	0x20001960
 800f8a8:	20001828 	.word	0x20001828
 800f8ac:	0800f81d 	.word	0x0800f81d

0800f8b0 <__sfp_lock_acquire>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	@ (800f8b8 <__sfp_lock_acquire+0x8>)
 800f8b2:	f000 ba4e 	b.w	800fd52 <__retarget_lock_acquire_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	20001969 	.word	0x20001969

0800f8bc <__sfp_lock_release>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	@ (800f8c4 <__sfp_lock_release+0x8>)
 800f8be:	f000 ba49 	b.w	800fd54 <__retarget_lock_release_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	20001969 	.word	0x20001969

0800f8c8 <__sinit>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	f7ff fff0 	bl	800f8b0 <__sfp_lock_acquire>
 800f8d0:	6a23      	ldr	r3, [r4, #32]
 800f8d2:	b11b      	cbz	r3, 800f8dc <__sinit+0x14>
 800f8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8d8:	f7ff bff0 	b.w	800f8bc <__sfp_lock_release>
 800f8dc:	4b04      	ldr	r3, [pc, #16]	@ (800f8f0 <__sinit+0x28>)
 800f8de:	6223      	str	r3, [r4, #32]
 800f8e0:	4b04      	ldr	r3, [pc, #16]	@ (800f8f4 <__sinit+0x2c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d1f5      	bne.n	800f8d4 <__sinit+0xc>
 800f8e8:	f7ff ffc4 	bl	800f874 <global_stdio_init.part.0>
 800f8ec:	e7f2      	b.n	800f8d4 <__sinit+0xc>
 800f8ee:	bf00      	nop
 800f8f0:	0800f835 	.word	0x0800f835
 800f8f4:	20001960 	.word	0x20001960

0800f8f8 <_fwalk_sglue>:
 800f8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8fc:	4607      	mov	r7, r0
 800f8fe:	4688      	mov	r8, r1
 800f900:	4614      	mov	r4, r2
 800f902:	2600      	movs	r6, #0
 800f904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f908:	f1b9 0901 	subs.w	r9, r9, #1
 800f90c:	d505      	bpl.n	800f91a <_fwalk_sglue+0x22>
 800f90e:	6824      	ldr	r4, [r4, #0]
 800f910:	2c00      	cmp	r4, #0
 800f912:	d1f7      	bne.n	800f904 <_fwalk_sglue+0xc>
 800f914:	4630      	mov	r0, r6
 800f916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f91a:	89ab      	ldrh	r3, [r5, #12]
 800f91c:	2b01      	cmp	r3, #1
 800f91e:	d907      	bls.n	800f930 <_fwalk_sglue+0x38>
 800f920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f924:	3301      	adds	r3, #1
 800f926:	d003      	beq.n	800f930 <_fwalk_sglue+0x38>
 800f928:	4629      	mov	r1, r5
 800f92a:	4638      	mov	r0, r7
 800f92c:	47c0      	blx	r8
 800f92e:	4306      	orrs	r6, r0
 800f930:	3568      	adds	r5, #104	@ 0x68
 800f932:	e7e9      	b.n	800f908 <_fwalk_sglue+0x10>

0800f934 <iprintf>:
 800f934:	b40f      	push	{r0, r1, r2, r3}
 800f936:	b507      	push	{r0, r1, r2, lr}
 800f938:	4906      	ldr	r1, [pc, #24]	@ (800f954 <iprintf+0x20>)
 800f93a:	ab04      	add	r3, sp, #16
 800f93c:	6808      	ldr	r0, [r1, #0]
 800f93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f942:	6881      	ldr	r1, [r0, #8]
 800f944:	9301      	str	r3, [sp, #4]
 800f946:	f001 fe67 	bl	8011618 <_vfiprintf_r>
 800f94a:	b003      	add	sp, #12
 800f94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f950:	b004      	add	sp, #16
 800f952:	4770      	bx	lr
 800f954:	20000038 	.word	0x20000038

0800f958 <_puts_r>:
 800f958:	6a03      	ldr	r3, [r0, #32]
 800f95a:	b570      	push	{r4, r5, r6, lr}
 800f95c:	6884      	ldr	r4, [r0, #8]
 800f95e:	4605      	mov	r5, r0
 800f960:	460e      	mov	r6, r1
 800f962:	b90b      	cbnz	r3, 800f968 <_puts_r+0x10>
 800f964:	f7ff ffb0 	bl	800f8c8 <__sinit>
 800f968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f96a:	07db      	lsls	r3, r3, #31
 800f96c:	d405      	bmi.n	800f97a <_puts_r+0x22>
 800f96e:	89a3      	ldrh	r3, [r4, #12]
 800f970:	0598      	lsls	r0, r3, #22
 800f972:	d402      	bmi.n	800f97a <_puts_r+0x22>
 800f974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f976:	f000 f9ec 	bl	800fd52 <__retarget_lock_acquire_recursive>
 800f97a:	89a3      	ldrh	r3, [r4, #12]
 800f97c:	0719      	lsls	r1, r3, #28
 800f97e:	d502      	bpl.n	800f986 <_puts_r+0x2e>
 800f980:	6923      	ldr	r3, [r4, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d135      	bne.n	800f9f2 <_puts_r+0x9a>
 800f986:	4621      	mov	r1, r4
 800f988:	4628      	mov	r0, r5
 800f98a:	f000 f8f9 	bl	800fb80 <__swsetup_r>
 800f98e:	b380      	cbz	r0, 800f9f2 <_puts_r+0x9a>
 800f990:	f04f 35ff 	mov.w	r5, #4294967295
 800f994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f996:	07da      	lsls	r2, r3, #31
 800f998:	d405      	bmi.n	800f9a6 <_puts_r+0x4e>
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	059b      	lsls	r3, r3, #22
 800f99e:	d402      	bmi.n	800f9a6 <_puts_r+0x4e>
 800f9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f9a2:	f000 f9d7 	bl	800fd54 <__retarget_lock_release_recursive>
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	bd70      	pop	{r4, r5, r6, pc}
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	da04      	bge.n	800f9b8 <_puts_r+0x60>
 800f9ae:	69a2      	ldr	r2, [r4, #24]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	dc17      	bgt.n	800f9e4 <_puts_r+0x8c>
 800f9b4:	290a      	cmp	r1, #10
 800f9b6:	d015      	beq.n	800f9e4 <_puts_r+0x8c>
 800f9b8:	6823      	ldr	r3, [r4, #0]
 800f9ba:	1c5a      	adds	r2, r3, #1
 800f9bc:	6022      	str	r2, [r4, #0]
 800f9be:	7019      	strb	r1, [r3, #0]
 800f9c0:	68a3      	ldr	r3, [r4, #8]
 800f9c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	60a3      	str	r3, [r4, #8]
 800f9ca:	2900      	cmp	r1, #0
 800f9cc:	d1ed      	bne.n	800f9aa <_puts_r+0x52>
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	da11      	bge.n	800f9f6 <_puts_r+0x9e>
 800f9d2:	4622      	mov	r2, r4
 800f9d4:	210a      	movs	r1, #10
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f000 f893 	bl	800fb02 <__swbuf_r>
 800f9dc:	3001      	adds	r0, #1
 800f9de:	d0d7      	beq.n	800f990 <_puts_r+0x38>
 800f9e0:	250a      	movs	r5, #10
 800f9e2:	e7d7      	b.n	800f994 <_puts_r+0x3c>
 800f9e4:	4622      	mov	r2, r4
 800f9e6:	4628      	mov	r0, r5
 800f9e8:	f000 f88b 	bl	800fb02 <__swbuf_r>
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	d1e7      	bne.n	800f9c0 <_puts_r+0x68>
 800f9f0:	e7ce      	b.n	800f990 <_puts_r+0x38>
 800f9f2:	3e01      	subs	r6, #1
 800f9f4:	e7e4      	b.n	800f9c0 <_puts_r+0x68>
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	1c5a      	adds	r2, r3, #1
 800f9fa:	6022      	str	r2, [r4, #0]
 800f9fc:	220a      	movs	r2, #10
 800f9fe:	701a      	strb	r2, [r3, #0]
 800fa00:	e7ee      	b.n	800f9e0 <_puts_r+0x88>
	...

0800fa04 <puts>:
 800fa04:	4b02      	ldr	r3, [pc, #8]	@ (800fa10 <puts+0xc>)
 800fa06:	4601      	mov	r1, r0
 800fa08:	6818      	ldr	r0, [r3, #0]
 800fa0a:	f7ff bfa5 	b.w	800f958 <_puts_r>
 800fa0e:	bf00      	nop
 800fa10:	20000038 	.word	0x20000038

0800fa14 <sniprintf>:
 800fa14:	b40c      	push	{r2, r3}
 800fa16:	b530      	push	{r4, r5, lr}
 800fa18:	4b17      	ldr	r3, [pc, #92]	@ (800fa78 <sniprintf+0x64>)
 800fa1a:	1e0c      	subs	r4, r1, #0
 800fa1c:	681d      	ldr	r5, [r3, #0]
 800fa1e:	b09d      	sub	sp, #116	@ 0x74
 800fa20:	da08      	bge.n	800fa34 <sniprintf+0x20>
 800fa22:	238b      	movs	r3, #139	@ 0x8b
 800fa24:	602b      	str	r3, [r5, #0]
 800fa26:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2a:	b01d      	add	sp, #116	@ 0x74
 800fa2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa30:	b002      	add	sp, #8
 800fa32:	4770      	bx	lr
 800fa34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fa38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa3c:	bf14      	ite	ne
 800fa3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fa42:	4623      	moveq	r3, r4
 800fa44:	9304      	str	r3, [sp, #16]
 800fa46:	9307      	str	r3, [sp, #28]
 800fa48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa4c:	9002      	str	r0, [sp, #8]
 800fa4e:	9006      	str	r0, [sp, #24]
 800fa50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fa56:	ab21      	add	r3, sp, #132	@ 0x84
 800fa58:	a902      	add	r1, sp, #8
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	f001 fcb5 	bl	80113cc <_svfiprintf_r>
 800fa62:	1c43      	adds	r3, r0, #1
 800fa64:	bfbc      	itt	lt
 800fa66:	238b      	movlt	r3, #139	@ 0x8b
 800fa68:	602b      	strlt	r3, [r5, #0]
 800fa6a:	2c00      	cmp	r4, #0
 800fa6c:	d0dd      	beq.n	800fa2a <sniprintf+0x16>
 800fa6e:	9b02      	ldr	r3, [sp, #8]
 800fa70:	2200      	movs	r2, #0
 800fa72:	701a      	strb	r2, [r3, #0]
 800fa74:	e7d9      	b.n	800fa2a <sniprintf+0x16>
 800fa76:	bf00      	nop
 800fa78:	20000038 	.word	0x20000038

0800fa7c <__sread>:
 800fa7c:	b510      	push	{r4, lr}
 800fa7e:	460c      	mov	r4, r1
 800fa80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa84:	f000 f916 	bl	800fcb4 <_read_r>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	bfab      	itete	ge
 800fa8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fa8e:	89a3      	ldrhlt	r3, [r4, #12]
 800fa90:	181b      	addge	r3, r3, r0
 800fa92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa96:	bfac      	ite	ge
 800fa98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa9a:	81a3      	strhlt	r3, [r4, #12]
 800fa9c:	bd10      	pop	{r4, pc}

0800fa9e <__swrite>:
 800fa9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faa2:	461f      	mov	r7, r3
 800faa4:	898b      	ldrh	r3, [r1, #12]
 800faa6:	05db      	lsls	r3, r3, #23
 800faa8:	4605      	mov	r5, r0
 800faaa:	460c      	mov	r4, r1
 800faac:	4616      	mov	r6, r2
 800faae:	d505      	bpl.n	800fabc <__swrite+0x1e>
 800fab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fab4:	2302      	movs	r3, #2
 800fab6:	2200      	movs	r2, #0
 800fab8:	f000 f8ea 	bl	800fc90 <_lseek_r>
 800fabc:	89a3      	ldrh	r3, [r4, #12]
 800fabe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fac6:	81a3      	strh	r3, [r4, #12]
 800fac8:	4632      	mov	r2, r6
 800faca:	463b      	mov	r3, r7
 800facc:	4628      	mov	r0, r5
 800face:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fad2:	f000 b901 	b.w	800fcd8 <_write_r>

0800fad6 <__sseek>:
 800fad6:	b510      	push	{r4, lr}
 800fad8:	460c      	mov	r4, r1
 800fada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fade:	f000 f8d7 	bl	800fc90 <_lseek_r>
 800fae2:	1c43      	adds	r3, r0, #1
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	bf15      	itete	ne
 800fae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800faea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800faee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800faf2:	81a3      	strheq	r3, [r4, #12]
 800faf4:	bf18      	it	ne
 800faf6:	81a3      	strhne	r3, [r4, #12]
 800faf8:	bd10      	pop	{r4, pc}

0800fafa <__sclose>:
 800fafa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fafe:	f000 b8b7 	b.w	800fc70 <_close_r>

0800fb02 <__swbuf_r>:
 800fb02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb04:	460e      	mov	r6, r1
 800fb06:	4614      	mov	r4, r2
 800fb08:	4605      	mov	r5, r0
 800fb0a:	b118      	cbz	r0, 800fb14 <__swbuf_r+0x12>
 800fb0c:	6a03      	ldr	r3, [r0, #32]
 800fb0e:	b90b      	cbnz	r3, 800fb14 <__swbuf_r+0x12>
 800fb10:	f7ff feda 	bl	800f8c8 <__sinit>
 800fb14:	69a3      	ldr	r3, [r4, #24]
 800fb16:	60a3      	str	r3, [r4, #8]
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	071a      	lsls	r2, r3, #28
 800fb1c:	d501      	bpl.n	800fb22 <__swbuf_r+0x20>
 800fb1e:	6923      	ldr	r3, [r4, #16]
 800fb20:	b943      	cbnz	r3, 800fb34 <__swbuf_r+0x32>
 800fb22:	4621      	mov	r1, r4
 800fb24:	4628      	mov	r0, r5
 800fb26:	f000 f82b 	bl	800fb80 <__swsetup_r>
 800fb2a:	b118      	cbz	r0, 800fb34 <__swbuf_r+0x32>
 800fb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800fb30:	4638      	mov	r0, r7
 800fb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	6922      	ldr	r2, [r4, #16]
 800fb38:	1a98      	subs	r0, r3, r2
 800fb3a:	6963      	ldr	r3, [r4, #20]
 800fb3c:	b2f6      	uxtb	r6, r6
 800fb3e:	4283      	cmp	r3, r0
 800fb40:	4637      	mov	r7, r6
 800fb42:	dc05      	bgt.n	800fb50 <__swbuf_r+0x4e>
 800fb44:	4621      	mov	r1, r4
 800fb46:	4628      	mov	r0, r5
 800fb48:	f001 ff02 	bl	8011950 <_fflush_r>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	d1ed      	bne.n	800fb2c <__swbuf_r+0x2a>
 800fb50:	68a3      	ldr	r3, [r4, #8]
 800fb52:	3b01      	subs	r3, #1
 800fb54:	60a3      	str	r3, [r4, #8]
 800fb56:	6823      	ldr	r3, [r4, #0]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	6022      	str	r2, [r4, #0]
 800fb5c:	701e      	strb	r6, [r3, #0]
 800fb5e:	6962      	ldr	r2, [r4, #20]
 800fb60:	1c43      	adds	r3, r0, #1
 800fb62:	429a      	cmp	r2, r3
 800fb64:	d004      	beq.n	800fb70 <__swbuf_r+0x6e>
 800fb66:	89a3      	ldrh	r3, [r4, #12]
 800fb68:	07db      	lsls	r3, r3, #31
 800fb6a:	d5e1      	bpl.n	800fb30 <__swbuf_r+0x2e>
 800fb6c:	2e0a      	cmp	r6, #10
 800fb6e:	d1df      	bne.n	800fb30 <__swbuf_r+0x2e>
 800fb70:	4621      	mov	r1, r4
 800fb72:	4628      	mov	r0, r5
 800fb74:	f001 feec 	bl	8011950 <_fflush_r>
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d0d9      	beq.n	800fb30 <__swbuf_r+0x2e>
 800fb7c:	e7d6      	b.n	800fb2c <__swbuf_r+0x2a>
	...

0800fb80 <__swsetup_r>:
 800fb80:	b538      	push	{r3, r4, r5, lr}
 800fb82:	4b29      	ldr	r3, [pc, #164]	@ (800fc28 <__swsetup_r+0xa8>)
 800fb84:	4605      	mov	r5, r0
 800fb86:	6818      	ldr	r0, [r3, #0]
 800fb88:	460c      	mov	r4, r1
 800fb8a:	b118      	cbz	r0, 800fb94 <__swsetup_r+0x14>
 800fb8c:	6a03      	ldr	r3, [r0, #32]
 800fb8e:	b90b      	cbnz	r3, 800fb94 <__swsetup_r+0x14>
 800fb90:	f7ff fe9a 	bl	800f8c8 <__sinit>
 800fb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb98:	0719      	lsls	r1, r3, #28
 800fb9a:	d422      	bmi.n	800fbe2 <__swsetup_r+0x62>
 800fb9c:	06da      	lsls	r2, r3, #27
 800fb9e:	d407      	bmi.n	800fbb0 <__swsetup_r+0x30>
 800fba0:	2209      	movs	r2, #9
 800fba2:	602a      	str	r2, [r5, #0]
 800fba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fba8:	81a3      	strh	r3, [r4, #12]
 800fbaa:	f04f 30ff 	mov.w	r0, #4294967295
 800fbae:	e033      	b.n	800fc18 <__swsetup_r+0x98>
 800fbb0:	0758      	lsls	r0, r3, #29
 800fbb2:	d512      	bpl.n	800fbda <__swsetup_r+0x5a>
 800fbb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbb6:	b141      	cbz	r1, 800fbca <__swsetup_r+0x4a>
 800fbb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbbc:	4299      	cmp	r1, r3
 800fbbe:	d002      	beq.n	800fbc6 <__swsetup_r+0x46>
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	f000 ff25 	bl	8010a10 <_free_r>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbca:	89a3      	ldrh	r3, [r4, #12]
 800fbcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fbd0:	81a3      	strh	r3, [r4, #12]
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	6063      	str	r3, [r4, #4]
 800fbd6:	6923      	ldr	r3, [r4, #16]
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	f043 0308 	orr.w	r3, r3, #8
 800fbe0:	81a3      	strh	r3, [r4, #12]
 800fbe2:	6923      	ldr	r3, [r4, #16]
 800fbe4:	b94b      	cbnz	r3, 800fbfa <__swsetup_r+0x7a>
 800fbe6:	89a3      	ldrh	r3, [r4, #12]
 800fbe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fbec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fbf0:	d003      	beq.n	800fbfa <__swsetup_r+0x7a>
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	f001 fef9 	bl	80119ec <__smakebuf_r>
 800fbfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfe:	f013 0201 	ands.w	r2, r3, #1
 800fc02:	d00a      	beq.n	800fc1a <__swsetup_r+0x9a>
 800fc04:	2200      	movs	r2, #0
 800fc06:	60a2      	str	r2, [r4, #8]
 800fc08:	6962      	ldr	r2, [r4, #20]
 800fc0a:	4252      	negs	r2, r2
 800fc0c:	61a2      	str	r2, [r4, #24]
 800fc0e:	6922      	ldr	r2, [r4, #16]
 800fc10:	b942      	cbnz	r2, 800fc24 <__swsetup_r+0xa4>
 800fc12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc16:	d1c5      	bne.n	800fba4 <__swsetup_r+0x24>
 800fc18:	bd38      	pop	{r3, r4, r5, pc}
 800fc1a:	0799      	lsls	r1, r3, #30
 800fc1c:	bf58      	it	pl
 800fc1e:	6962      	ldrpl	r2, [r4, #20]
 800fc20:	60a2      	str	r2, [r4, #8]
 800fc22:	e7f4      	b.n	800fc0e <__swsetup_r+0x8e>
 800fc24:	2000      	movs	r0, #0
 800fc26:	e7f7      	b.n	800fc18 <__swsetup_r+0x98>
 800fc28:	20000038 	.word	0x20000038

0800fc2c <memset>:
 800fc2c:	4402      	add	r2, r0
 800fc2e:	4603      	mov	r3, r0
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d100      	bne.n	800fc36 <memset+0xa>
 800fc34:	4770      	bx	lr
 800fc36:	f803 1b01 	strb.w	r1, [r3], #1
 800fc3a:	e7f9      	b.n	800fc30 <memset+0x4>

0800fc3c <strrchr>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800fc42:	4603      	mov	r3, r0
 800fc44:	d10e      	bne.n	800fc64 <strrchr+0x28>
 800fc46:	4621      	mov	r1, r4
 800fc48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc4c:	f001 bf24 	b.w	8011a98 <strchr>
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	4605      	mov	r5, r0
 800fc54:	4621      	mov	r1, r4
 800fc56:	4618      	mov	r0, r3
 800fc58:	f001 ff1e 	bl	8011a98 <strchr>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d1f7      	bne.n	800fc50 <strrchr+0x14>
 800fc60:	4628      	mov	r0, r5
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	2500      	movs	r5, #0
 800fc66:	e7f5      	b.n	800fc54 <strrchr+0x18>

0800fc68 <_localeconv_r>:
 800fc68:	4800      	ldr	r0, [pc, #0]	@ (800fc6c <_localeconv_r+0x4>)
 800fc6a:	4770      	bx	lr
 800fc6c:	20000178 	.word	0x20000178

0800fc70 <_close_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d06      	ldr	r5, [pc, #24]	@ (800fc8c <_close_r+0x1c>)
 800fc74:	2300      	movs	r3, #0
 800fc76:	4604      	mov	r4, r0
 800fc78:	4608      	mov	r0, r1
 800fc7a:	602b      	str	r3, [r5, #0]
 800fc7c:	f7f3 ffcc 	bl	8003c18 <_close>
 800fc80:	1c43      	adds	r3, r0, #1
 800fc82:	d102      	bne.n	800fc8a <_close_r+0x1a>
 800fc84:	682b      	ldr	r3, [r5, #0]
 800fc86:	b103      	cbz	r3, 800fc8a <_close_r+0x1a>
 800fc88:	6023      	str	r3, [r4, #0]
 800fc8a:	bd38      	pop	{r3, r4, r5, pc}
 800fc8c:	20001964 	.word	0x20001964

0800fc90 <_lseek_r>:
 800fc90:	b538      	push	{r3, r4, r5, lr}
 800fc92:	4d07      	ldr	r5, [pc, #28]	@ (800fcb0 <_lseek_r+0x20>)
 800fc94:	4604      	mov	r4, r0
 800fc96:	4608      	mov	r0, r1
 800fc98:	4611      	mov	r1, r2
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	602a      	str	r2, [r5, #0]
 800fc9e:	461a      	mov	r2, r3
 800fca0:	f7f3 ffe1 	bl	8003c66 <_lseek>
 800fca4:	1c43      	adds	r3, r0, #1
 800fca6:	d102      	bne.n	800fcae <_lseek_r+0x1e>
 800fca8:	682b      	ldr	r3, [r5, #0]
 800fcaa:	b103      	cbz	r3, 800fcae <_lseek_r+0x1e>
 800fcac:	6023      	str	r3, [r4, #0]
 800fcae:	bd38      	pop	{r3, r4, r5, pc}
 800fcb0:	20001964 	.word	0x20001964

0800fcb4 <_read_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d07      	ldr	r5, [pc, #28]	@ (800fcd4 <_read_r+0x20>)
 800fcb8:	4604      	mov	r4, r0
 800fcba:	4608      	mov	r0, r1
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f7f3 ff8b 	bl	8003bde <_read>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_read_r+0x1e>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_read_r+0x1e>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	20001964 	.word	0x20001964

0800fcd8 <_write_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d07      	ldr	r5, [pc, #28]	@ (800fcf8 <_write_r+0x20>)
 800fcdc:	4604      	mov	r4, r0
 800fcde:	4608      	mov	r0, r1
 800fce0:	4611      	mov	r1, r2
 800fce2:	2200      	movs	r2, #0
 800fce4:	602a      	str	r2, [r5, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	f7fc ffca 	bl	800cc80 <_write>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_write_r+0x1e>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_write_r+0x1e>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	20001964 	.word	0x20001964

0800fcfc <__errno>:
 800fcfc:	4b01      	ldr	r3, [pc, #4]	@ (800fd04 <__errno+0x8>)
 800fcfe:	6818      	ldr	r0, [r3, #0]
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	20000038 	.word	0x20000038

0800fd08 <__libc_init_array>:
 800fd08:	b570      	push	{r4, r5, r6, lr}
 800fd0a:	4d0d      	ldr	r5, [pc, #52]	@ (800fd40 <__libc_init_array+0x38>)
 800fd0c:	4c0d      	ldr	r4, [pc, #52]	@ (800fd44 <__libc_init_array+0x3c>)
 800fd0e:	1b64      	subs	r4, r4, r5
 800fd10:	10a4      	asrs	r4, r4, #2
 800fd12:	2600      	movs	r6, #0
 800fd14:	42a6      	cmp	r6, r4
 800fd16:	d109      	bne.n	800fd2c <__libc_init_array+0x24>
 800fd18:	4d0b      	ldr	r5, [pc, #44]	@ (800fd48 <__libc_init_array+0x40>)
 800fd1a:	4c0c      	ldr	r4, [pc, #48]	@ (800fd4c <__libc_init_array+0x44>)
 800fd1c:	f001 ffe2 	bl	8011ce4 <_init>
 800fd20:	1b64      	subs	r4, r4, r5
 800fd22:	10a4      	asrs	r4, r4, #2
 800fd24:	2600      	movs	r6, #0
 800fd26:	42a6      	cmp	r6, r4
 800fd28:	d105      	bne.n	800fd36 <__libc_init_array+0x2e>
 800fd2a:	bd70      	pop	{r4, r5, r6, pc}
 800fd2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd30:	4798      	blx	r3
 800fd32:	3601      	adds	r6, #1
 800fd34:	e7ee      	b.n	800fd14 <__libc_init_array+0xc>
 800fd36:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd3a:	4798      	blx	r3
 800fd3c:	3601      	adds	r6, #1
 800fd3e:	e7f2      	b.n	800fd26 <__libc_init_array+0x1e>
 800fd40:	08013770 	.word	0x08013770
 800fd44:	08013770 	.word	0x08013770
 800fd48:	08013770 	.word	0x08013770
 800fd4c:	08013774 	.word	0x08013774

0800fd50 <__retarget_lock_init_recursive>:
 800fd50:	4770      	bx	lr

0800fd52 <__retarget_lock_acquire_recursive>:
 800fd52:	4770      	bx	lr

0800fd54 <__retarget_lock_release_recursive>:
 800fd54:	4770      	bx	lr

0800fd56 <memcpy>:
 800fd56:	440a      	add	r2, r1
 800fd58:	4291      	cmp	r1, r2
 800fd5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd5e:	d100      	bne.n	800fd62 <memcpy+0xc>
 800fd60:	4770      	bx	lr
 800fd62:	b510      	push	{r4, lr}
 800fd64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd6c:	4291      	cmp	r1, r2
 800fd6e:	d1f9      	bne.n	800fd64 <memcpy+0xe>
 800fd70:	bd10      	pop	{r4, pc}

0800fd72 <quorem>:
 800fd72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd76:	6903      	ldr	r3, [r0, #16]
 800fd78:	690c      	ldr	r4, [r1, #16]
 800fd7a:	42a3      	cmp	r3, r4
 800fd7c:	4607      	mov	r7, r0
 800fd7e:	db7e      	blt.n	800fe7e <quorem+0x10c>
 800fd80:	3c01      	subs	r4, #1
 800fd82:	f101 0814 	add.w	r8, r1, #20
 800fd86:	00a3      	lsls	r3, r4, #2
 800fd88:	f100 0514 	add.w	r5, r0, #20
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd92:	9301      	str	r3, [sp, #4]
 800fd94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fda4:	fbb2 f6f3 	udiv	r6, r2, r3
 800fda8:	d32e      	bcc.n	800fe08 <quorem+0x96>
 800fdaa:	f04f 0a00 	mov.w	sl, #0
 800fdae:	46c4      	mov	ip, r8
 800fdb0:	46ae      	mov	lr, r5
 800fdb2:	46d3      	mov	fp, sl
 800fdb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fdb8:	b298      	uxth	r0, r3
 800fdba:	fb06 a000 	mla	r0, r6, r0, sl
 800fdbe:	0c02      	lsrs	r2, r0, #16
 800fdc0:	0c1b      	lsrs	r3, r3, #16
 800fdc2:	fb06 2303 	mla	r3, r6, r3, r2
 800fdc6:	f8de 2000 	ldr.w	r2, [lr]
 800fdca:	b280      	uxth	r0, r0
 800fdcc:	b292      	uxth	r2, r2
 800fdce:	1a12      	subs	r2, r2, r0
 800fdd0:	445a      	add	r2, fp
 800fdd2:	f8de 0000 	ldr.w	r0, [lr]
 800fdd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdda:	b29b      	uxth	r3, r3
 800fddc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fde0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fde4:	b292      	uxth	r2, r2
 800fde6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdea:	45e1      	cmp	r9, ip
 800fdec:	f84e 2b04 	str.w	r2, [lr], #4
 800fdf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdf4:	d2de      	bcs.n	800fdb4 <quorem+0x42>
 800fdf6:	9b00      	ldr	r3, [sp, #0]
 800fdf8:	58eb      	ldr	r3, [r5, r3]
 800fdfa:	b92b      	cbnz	r3, 800fe08 <quorem+0x96>
 800fdfc:	9b01      	ldr	r3, [sp, #4]
 800fdfe:	3b04      	subs	r3, #4
 800fe00:	429d      	cmp	r5, r3
 800fe02:	461a      	mov	r2, r3
 800fe04:	d32f      	bcc.n	800fe66 <quorem+0xf4>
 800fe06:	613c      	str	r4, [r7, #16]
 800fe08:	4638      	mov	r0, r7
 800fe0a:	f001 f97b 	bl	8011104 <__mcmp>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	db25      	blt.n	800fe5e <quorem+0xec>
 800fe12:	4629      	mov	r1, r5
 800fe14:	2000      	movs	r0, #0
 800fe16:	f858 2b04 	ldr.w	r2, [r8], #4
 800fe1a:	f8d1 c000 	ldr.w	ip, [r1]
 800fe1e:	fa1f fe82 	uxth.w	lr, r2
 800fe22:	fa1f f38c 	uxth.w	r3, ip
 800fe26:	eba3 030e 	sub.w	r3, r3, lr
 800fe2a:	4403      	add	r3, r0
 800fe2c:	0c12      	lsrs	r2, r2, #16
 800fe2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe3c:	45c1      	cmp	r9, r8
 800fe3e:	f841 3b04 	str.w	r3, [r1], #4
 800fe42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe46:	d2e6      	bcs.n	800fe16 <quorem+0xa4>
 800fe48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe50:	b922      	cbnz	r2, 800fe5c <quorem+0xea>
 800fe52:	3b04      	subs	r3, #4
 800fe54:	429d      	cmp	r5, r3
 800fe56:	461a      	mov	r2, r3
 800fe58:	d30b      	bcc.n	800fe72 <quorem+0x100>
 800fe5a:	613c      	str	r4, [r7, #16]
 800fe5c:	3601      	adds	r6, #1
 800fe5e:	4630      	mov	r0, r6
 800fe60:	b003      	add	sp, #12
 800fe62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe66:	6812      	ldr	r2, [r2, #0]
 800fe68:	3b04      	subs	r3, #4
 800fe6a:	2a00      	cmp	r2, #0
 800fe6c:	d1cb      	bne.n	800fe06 <quorem+0x94>
 800fe6e:	3c01      	subs	r4, #1
 800fe70:	e7c6      	b.n	800fe00 <quorem+0x8e>
 800fe72:	6812      	ldr	r2, [r2, #0]
 800fe74:	3b04      	subs	r3, #4
 800fe76:	2a00      	cmp	r2, #0
 800fe78:	d1ef      	bne.n	800fe5a <quorem+0xe8>
 800fe7a:	3c01      	subs	r4, #1
 800fe7c:	e7ea      	b.n	800fe54 <quorem+0xe2>
 800fe7e:	2000      	movs	r0, #0
 800fe80:	e7ee      	b.n	800fe60 <quorem+0xee>
 800fe82:	0000      	movs	r0, r0
 800fe84:	0000      	movs	r0, r0
	...

0800fe88 <_dtoa_r>:
 800fe88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8c:	69c7      	ldr	r7, [r0, #28]
 800fe8e:	b099      	sub	sp, #100	@ 0x64
 800fe90:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fe94:	ec55 4b10 	vmov	r4, r5, d0
 800fe98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fe9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe9c:	4683      	mov	fp, r0
 800fe9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fea2:	b97f      	cbnz	r7, 800fec4 <_dtoa_r+0x3c>
 800fea4:	2010      	movs	r0, #16
 800fea6:	f000 fdfd 	bl	8010aa4 <malloc>
 800feaa:	4602      	mov	r2, r0
 800feac:	f8cb 001c 	str.w	r0, [fp, #28]
 800feb0:	b920      	cbnz	r0, 800febc <_dtoa_r+0x34>
 800feb2:	4ba7      	ldr	r3, [pc, #668]	@ (8010150 <_dtoa_r+0x2c8>)
 800feb4:	21ef      	movs	r1, #239	@ 0xef
 800feb6:	48a7      	ldr	r0, [pc, #668]	@ (8010154 <_dtoa_r+0x2cc>)
 800feb8:	f001 fe2e 	bl	8011b18 <__assert_func>
 800febc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fec0:	6007      	str	r7, [r0, #0]
 800fec2:	60c7      	str	r7, [r0, #12]
 800fec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fec8:	6819      	ldr	r1, [r3, #0]
 800feca:	b159      	cbz	r1, 800fee4 <_dtoa_r+0x5c>
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	604a      	str	r2, [r1, #4]
 800fed0:	2301      	movs	r3, #1
 800fed2:	4093      	lsls	r3, r2
 800fed4:	608b      	str	r3, [r1, #8]
 800fed6:	4658      	mov	r0, fp
 800fed8:	f000 feda 	bl	8010c90 <_Bfree>
 800fedc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fee0:	2200      	movs	r2, #0
 800fee2:	601a      	str	r2, [r3, #0]
 800fee4:	1e2b      	subs	r3, r5, #0
 800fee6:	bfb9      	ittee	lt
 800fee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800feec:	9303      	strlt	r3, [sp, #12]
 800feee:	2300      	movge	r3, #0
 800fef0:	6033      	strge	r3, [r6, #0]
 800fef2:	9f03      	ldr	r7, [sp, #12]
 800fef4:	4b98      	ldr	r3, [pc, #608]	@ (8010158 <_dtoa_r+0x2d0>)
 800fef6:	bfbc      	itt	lt
 800fef8:	2201      	movlt	r2, #1
 800fefa:	6032      	strlt	r2, [r6, #0]
 800fefc:	43bb      	bics	r3, r7
 800fefe:	d112      	bne.n	800ff26 <_dtoa_r+0x9e>
 800ff00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ff02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ff06:	6013      	str	r3, [r2, #0]
 800ff08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff0c:	4323      	orrs	r3, r4
 800ff0e:	f000 854d 	beq.w	80109ac <_dtoa_r+0xb24>
 800ff12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801016c <_dtoa_r+0x2e4>
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 854f 	beq.w	80109bc <_dtoa_r+0xb34>
 800ff1e:	f10a 0303 	add.w	r3, sl, #3
 800ff22:	f000 bd49 	b.w	80109b8 <_dtoa_r+0xb30>
 800ff26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	ec51 0b17 	vmov	r0, r1, d7
 800ff30:	2300      	movs	r3, #0
 800ff32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ff36:	f7f0 fd9f 	bl	8000a78 <__aeabi_dcmpeq>
 800ff3a:	4680      	mov	r8, r0
 800ff3c:	b158      	cbz	r0, 800ff56 <_dtoa_r+0xce>
 800ff3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ff40:	2301      	movs	r3, #1
 800ff42:	6013      	str	r3, [r2, #0]
 800ff44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff46:	b113      	cbz	r3, 800ff4e <_dtoa_r+0xc6>
 800ff48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ff4a:	4b84      	ldr	r3, [pc, #528]	@ (801015c <_dtoa_r+0x2d4>)
 800ff4c:	6013      	str	r3, [r2, #0]
 800ff4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010170 <_dtoa_r+0x2e8>
 800ff52:	f000 bd33 	b.w	80109bc <_dtoa_r+0xb34>
 800ff56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ff5a:	aa16      	add	r2, sp, #88	@ 0x58
 800ff5c:	a917      	add	r1, sp, #92	@ 0x5c
 800ff5e:	4658      	mov	r0, fp
 800ff60:	f001 f980 	bl	8011264 <__d2b>
 800ff64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ff68:	4681      	mov	r9, r0
 800ff6a:	2e00      	cmp	r6, #0
 800ff6c:	d077      	beq.n	801005e <_dtoa_r+0x1d6>
 800ff6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ff74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ff7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff88:	4619      	mov	r1, r3
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	4b74      	ldr	r3, [pc, #464]	@ (8010160 <_dtoa_r+0x2d8>)
 800ff8e:	f7f0 f953 	bl	8000238 <__aeabi_dsub>
 800ff92:	a369      	add	r3, pc, #420	@ (adr r3, 8010138 <_dtoa_r+0x2b0>)
 800ff94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff98:	f7f0 fb06 	bl	80005a8 <__aeabi_dmul>
 800ff9c:	a368      	add	r3, pc, #416	@ (adr r3, 8010140 <_dtoa_r+0x2b8>)
 800ff9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa2:	f7f0 f94b 	bl	800023c <__adddf3>
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	460d      	mov	r5, r1
 800ffac:	f7f0 fa92 	bl	80004d4 <__aeabi_i2d>
 800ffb0:	a365      	add	r3, pc, #404	@ (adr r3, 8010148 <_dtoa_r+0x2c0>)
 800ffb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb6:	f7f0 faf7 	bl	80005a8 <__aeabi_dmul>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	4620      	mov	r0, r4
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	f7f0 f93b 	bl	800023c <__adddf3>
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	460d      	mov	r5, r1
 800ffca:	f7f0 fd9d 	bl	8000b08 <__aeabi_d2iz>
 800ffce:	2200      	movs	r2, #0
 800ffd0:	4607      	mov	r7, r0
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	4629      	mov	r1, r5
 800ffd8:	f7f0 fd58 	bl	8000a8c <__aeabi_dcmplt>
 800ffdc:	b140      	cbz	r0, 800fff0 <_dtoa_r+0x168>
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f7f0 fa78 	bl	80004d4 <__aeabi_i2d>
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	462b      	mov	r3, r5
 800ffe8:	f7f0 fd46 	bl	8000a78 <__aeabi_dcmpeq>
 800ffec:	b900      	cbnz	r0, 800fff0 <_dtoa_r+0x168>
 800ffee:	3f01      	subs	r7, #1
 800fff0:	2f16      	cmp	r7, #22
 800fff2:	d851      	bhi.n	8010098 <_dtoa_r+0x210>
 800fff4:	4b5b      	ldr	r3, [pc, #364]	@ (8010164 <_dtoa_r+0x2dc>)
 800fff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010002:	f7f0 fd43 	bl	8000a8c <__aeabi_dcmplt>
 8010006:	2800      	cmp	r0, #0
 8010008:	d048      	beq.n	801009c <_dtoa_r+0x214>
 801000a:	3f01      	subs	r7, #1
 801000c:	2300      	movs	r3, #0
 801000e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010010:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010012:	1b9b      	subs	r3, r3, r6
 8010014:	1e5a      	subs	r2, r3, #1
 8010016:	bf44      	itt	mi
 8010018:	f1c3 0801 	rsbmi	r8, r3, #1
 801001c:	2300      	movmi	r3, #0
 801001e:	9208      	str	r2, [sp, #32]
 8010020:	bf54      	ite	pl
 8010022:	f04f 0800 	movpl.w	r8, #0
 8010026:	9308      	strmi	r3, [sp, #32]
 8010028:	2f00      	cmp	r7, #0
 801002a:	db39      	blt.n	80100a0 <_dtoa_r+0x218>
 801002c:	9b08      	ldr	r3, [sp, #32]
 801002e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010030:	443b      	add	r3, r7
 8010032:	9308      	str	r3, [sp, #32]
 8010034:	2300      	movs	r3, #0
 8010036:	930a      	str	r3, [sp, #40]	@ 0x28
 8010038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801003a:	2b09      	cmp	r3, #9
 801003c:	d864      	bhi.n	8010108 <_dtoa_r+0x280>
 801003e:	2b05      	cmp	r3, #5
 8010040:	bfc4      	itt	gt
 8010042:	3b04      	subgt	r3, #4
 8010044:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010048:	f1a3 0302 	sub.w	r3, r3, #2
 801004c:	bfcc      	ite	gt
 801004e:	2400      	movgt	r4, #0
 8010050:	2401      	movle	r4, #1
 8010052:	2b03      	cmp	r3, #3
 8010054:	d863      	bhi.n	801011e <_dtoa_r+0x296>
 8010056:	e8df f003 	tbb	[pc, r3]
 801005a:	372a      	.short	0x372a
 801005c:	5535      	.short	0x5535
 801005e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010062:	441e      	add	r6, r3
 8010064:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010068:	2b20      	cmp	r3, #32
 801006a:	bfc1      	itttt	gt
 801006c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010070:	409f      	lslgt	r7, r3
 8010072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010076:	fa24 f303 	lsrgt.w	r3, r4, r3
 801007a:	bfd6      	itet	le
 801007c:	f1c3 0320 	rsble	r3, r3, #32
 8010080:	ea47 0003 	orrgt.w	r0, r7, r3
 8010084:	fa04 f003 	lslle.w	r0, r4, r3
 8010088:	f7f0 fa14 	bl	80004b4 <__aeabi_ui2d>
 801008c:	2201      	movs	r2, #1
 801008e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010092:	3e01      	subs	r6, #1
 8010094:	9214      	str	r2, [sp, #80]	@ 0x50
 8010096:	e777      	b.n	800ff88 <_dtoa_r+0x100>
 8010098:	2301      	movs	r3, #1
 801009a:	e7b8      	b.n	801000e <_dtoa_r+0x186>
 801009c:	9012      	str	r0, [sp, #72]	@ 0x48
 801009e:	e7b7      	b.n	8010010 <_dtoa_r+0x188>
 80100a0:	427b      	negs	r3, r7
 80100a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80100a4:	2300      	movs	r3, #0
 80100a6:	eba8 0807 	sub.w	r8, r8, r7
 80100aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100ac:	e7c4      	b.n	8010038 <_dtoa_r+0x1b0>
 80100ae:	2300      	movs	r3, #0
 80100b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	dc35      	bgt.n	8010124 <_dtoa_r+0x29c>
 80100b8:	2301      	movs	r3, #1
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	9307      	str	r3, [sp, #28]
 80100be:	461a      	mov	r2, r3
 80100c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80100c2:	e00b      	b.n	80100dc <_dtoa_r+0x254>
 80100c4:	2301      	movs	r3, #1
 80100c6:	e7f3      	b.n	80100b0 <_dtoa_r+0x228>
 80100c8:	2300      	movs	r3, #0
 80100ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80100cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100ce:	18fb      	adds	r3, r7, r3
 80100d0:	9300      	str	r3, [sp, #0]
 80100d2:	3301      	adds	r3, #1
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	9307      	str	r3, [sp, #28]
 80100d8:	bfb8      	it	lt
 80100da:	2301      	movlt	r3, #1
 80100dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80100e0:	2100      	movs	r1, #0
 80100e2:	2204      	movs	r2, #4
 80100e4:	f102 0514 	add.w	r5, r2, #20
 80100e8:	429d      	cmp	r5, r3
 80100ea:	d91f      	bls.n	801012c <_dtoa_r+0x2a4>
 80100ec:	6041      	str	r1, [r0, #4]
 80100ee:	4658      	mov	r0, fp
 80100f0:	f000 fd8e 	bl	8010c10 <_Balloc>
 80100f4:	4682      	mov	sl, r0
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d13c      	bne.n	8010174 <_dtoa_r+0x2ec>
 80100fa:	4b1b      	ldr	r3, [pc, #108]	@ (8010168 <_dtoa_r+0x2e0>)
 80100fc:	4602      	mov	r2, r0
 80100fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8010102:	e6d8      	b.n	800feb6 <_dtoa_r+0x2e>
 8010104:	2301      	movs	r3, #1
 8010106:	e7e0      	b.n	80100ca <_dtoa_r+0x242>
 8010108:	2401      	movs	r4, #1
 801010a:	2300      	movs	r3, #0
 801010c:	9309      	str	r3, [sp, #36]	@ 0x24
 801010e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010110:	f04f 33ff 	mov.w	r3, #4294967295
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	9307      	str	r3, [sp, #28]
 8010118:	2200      	movs	r2, #0
 801011a:	2312      	movs	r3, #18
 801011c:	e7d0      	b.n	80100c0 <_dtoa_r+0x238>
 801011e:	2301      	movs	r3, #1
 8010120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010122:	e7f5      	b.n	8010110 <_dtoa_r+0x288>
 8010124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	9307      	str	r3, [sp, #28]
 801012a:	e7d7      	b.n	80100dc <_dtoa_r+0x254>
 801012c:	3101      	adds	r1, #1
 801012e:	0052      	lsls	r2, r2, #1
 8010130:	e7d8      	b.n	80100e4 <_dtoa_r+0x25c>
 8010132:	bf00      	nop
 8010134:	f3af 8000 	nop.w
 8010138:	636f4361 	.word	0x636f4361
 801013c:	3fd287a7 	.word	0x3fd287a7
 8010140:	8b60c8b3 	.word	0x8b60c8b3
 8010144:	3fc68a28 	.word	0x3fc68a28
 8010148:	509f79fb 	.word	0x509f79fb
 801014c:	3fd34413 	.word	0x3fd34413
 8010150:	08013439 	.word	0x08013439
 8010154:	08013450 	.word	0x08013450
 8010158:	7ff00000 	.word	0x7ff00000
 801015c:	08013409 	.word	0x08013409
 8010160:	3ff80000 	.word	0x3ff80000
 8010164:	08013548 	.word	0x08013548
 8010168:	080134a8 	.word	0x080134a8
 801016c:	08013435 	.word	0x08013435
 8010170:	08013408 	.word	0x08013408
 8010174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010178:	6018      	str	r0, [r3, #0]
 801017a:	9b07      	ldr	r3, [sp, #28]
 801017c:	2b0e      	cmp	r3, #14
 801017e:	f200 80a4 	bhi.w	80102ca <_dtoa_r+0x442>
 8010182:	2c00      	cmp	r4, #0
 8010184:	f000 80a1 	beq.w	80102ca <_dtoa_r+0x442>
 8010188:	2f00      	cmp	r7, #0
 801018a:	dd33      	ble.n	80101f4 <_dtoa_r+0x36c>
 801018c:	4bad      	ldr	r3, [pc, #692]	@ (8010444 <_dtoa_r+0x5bc>)
 801018e:	f007 020f 	and.w	r2, r7, #15
 8010192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010196:	ed93 7b00 	vldr	d7, [r3]
 801019a:	05f8      	lsls	r0, r7, #23
 801019c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80101a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80101a4:	d516      	bpl.n	80101d4 <_dtoa_r+0x34c>
 80101a6:	4ba8      	ldr	r3, [pc, #672]	@ (8010448 <_dtoa_r+0x5c0>)
 80101a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80101ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80101b0:	f7f0 fb24 	bl	80007fc <__aeabi_ddiv>
 80101b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101b8:	f004 040f 	and.w	r4, r4, #15
 80101bc:	2603      	movs	r6, #3
 80101be:	4da2      	ldr	r5, [pc, #648]	@ (8010448 <_dtoa_r+0x5c0>)
 80101c0:	b954      	cbnz	r4, 80101d8 <_dtoa_r+0x350>
 80101c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80101ca:	f7f0 fb17 	bl	80007fc <__aeabi_ddiv>
 80101ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101d2:	e028      	b.n	8010226 <_dtoa_r+0x39e>
 80101d4:	2602      	movs	r6, #2
 80101d6:	e7f2      	b.n	80101be <_dtoa_r+0x336>
 80101d8:	07e1      	lsls	r1, r4, #31
 80101da:	d508      	bpl.n	80101ee <_dtoa_r+0x366>
 80101dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101e4:	f7f0 f9e0 	bl	80005a8 <__aeabi_dmul>
 80101e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101ec:	3601      	adds	r6, #1
 80101ee:	1064      	asrs	r4, r4, #1
 80101f0:	3508      	adds	r5, #8
 80101f2:	e7e5      	b.n	80101c0 <_dtoa_r+0x338>
 80101f4:	f000 80d2 	beq.w	801039c <_dtoa_r+0x514>
 80101f8:	427c      	negs	r4, r7
 80101fa:	4b92      	ldr	r3, [pc, #584]	@ (8010444 <_dtoa_r+0x5bc>)
 80101fc:	4d92      	ldr	r5, [pc, #584]	@ (8010448 <_dtoa_r+0x5c0>)
 80101fe:	f004 020f 	and.w	r2, r4, #15
 8010202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801020e:	f7f0 f9cb 	bl	80005a8 <__aeabi_dmul>
 8010212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010216:	1124      	asrs	r4, r4, #4
 8010218:	2300      	movs	r3, #0
 801021a:	2602      	movs	r6, #2
 801021c:	2c00      	cmp	r4, #0
 801021e:	f040 80b2 	bne.w	8010386 <_dtoa_r+0x4fe>
 8010222:	2b00      	cmp	r3, #0
 8010224:	d1d3      	bne.n	80101ce <_dtoa_r+0x346>
 8010226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 80b7 	beq.w	80103a0 <_dtoa_r+0x518>
 8010232:	4b86      	ldr	r3, [pc, #536]	@ (801044c <_dtoa_r+0x5c4>)
 8010234:	2200      	movs	r2, #0
 8010236:	4620      	mov	r0, r4
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 fc27 	bl	8000a8c <__aeabi_dcmplt>
 801023e:	2800      	cmp	r0, #0
 8010240:	f000 80ae 	beq.w	80103a0 <_dtoa_r+0x518>
 8010244:	9b07      	ldr	r3, [sp, #28]
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80aa 	beq.w	80103a0 <_dtoa_r+0x518>
 801024c:	9b00      	ldr	r3, [sp, #0]
 801024e:	2b00      	cmp	r3, #0
 8010250:	dd37      	ble.n	80102c2 <_dtoa_r+0x43a>
 8010252:	1e7b      	subs	r3, r7, #1
 8010254:	9304      	str	r3, [sp, #16]
 8010256:	4620      	mov	r0, r4
 8010258:	4b7d      	ldr	r3, [pc, #500]	@ (8010450 <_dtoa_r+0x5c8>)
 801025a:	2200      	movs	r2, #0
 801025c:	4629      	mov	r1, r5
 801025e:	f7f0 f9a3 	bl	80005a8 <__aeabi_dmul>
 8010262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010266:	9c00      	ldr	r4, [sp, #0]
 8010268:	3601      	adds	r6, #1
 801026a:	4630      	mov	r0, r6
 801026c:	f7f0 f932 	bl	80004d4 <__aeabi_i2d>
 8010270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010274:	f7f0 f998 	bl	80005a8 <__aeabi_dmul>
 8010278:	4b76      	ldr	r3, [pc, #472]	@ (8010454 <_dtoa_r+0x5cc>)
 801027a:	2200      	movs	r2, #0
 801027c:	f7ef ffde 	bl	800023c <__adddf3>
 8010280:	4605      	mov	r5, r0
 8010282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010286:	2c00      	cmp	r4, #0
 8010288:	f040 808d 	bne.w	80103a6 <_dtoa_r+0x51e>
 801028c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010290:	4b71      	ldr	r3, [pc, #452]	@ (8010458 <_dtoa_r+0x5d0>)
 8010292:	2200      	movs	r2, #0
 8010294:	f7ef ffd0 	bl	8000238 <__aeabi_dsub>
 8010298:	4602      	mov	r2, r0
 801029a:	460b      	mov	r3, r1
 801029c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80102a0:	462a      	mov	r2, r5
 80102a2:	4633      	mov	r3, r6
 80102a4:	f7f0 fc10 	bl	8000ac8 <__aeabi_dcmpgt>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	f040 828b 	bne.w	80107c4 <_dtoa_r+0x93c>
 80102ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102b2:	462a      	mov	r2, r5
 80102b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80102b8:	f7f0 fbe8 	bl	8000a8c <__aeabi_dcmplt>
 80102bc:	2800      	cmp	r0, #0
 80102be:	f040 8128 	bne.w	8010512 <_dtoa_r+0x68a>
 80102c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80102c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80102ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f2c0 815a 	blt.w	8010586 <_dtoa_r+0x6fe>
 80102d2:	2f0e      	cmp	r7, #14
 80102d4:	f300 8157 	bgt.w	8010586 <_dtoa_r+0x6fe>
 80102d8:	4b5a      	ldr	r3, [pc, #360]	@ (8010444 <_dtoa_r+0x5bc>)
 80102da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102de:	ed93 7b00 	vldr	d7, [r3]
 80102e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	ed8d 7b00 	vstr	d7, [sp]
 80102ea:	da03      	bge.n	80102f4 <_dtoa_r+0x46c>
 80102ec:	9b07      	ldr	r3, [sp, #28]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f340 8101 	ble.w	80104f6 <_dtoa_r+0x66e>
 80102f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80102f8:	4656      	mov	r6, sl
 80102fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102fe:	4620      	mov	r0, r4
 8010300:	4629      	mov	r1, r5
 8010302:	f7f0 fa7b 	bl	80007fc <__aeabi_ddiv>
 8010306:	f7f0 fbff 	bl	8000b08 <__aeabi_d2iz>
 801030a:	4680      	mov	r8, r0
 801030c:	f7f0 f8e2 	bl	80004d4 <__aeabi_i2d>
 8010310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010314:	f7f0 f948 	bl	80005a8 <__aeabi_dmul>
 8010318:	4602      	mov	r2, r0
 801031a:	460b      	mov	r3, r1
 801031c:	4620      	mov	r0, r4
 801031e:	4629      	mov	r1, r5
 8010320:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010324:	f7ef ff88 	bl	8000238 <__aeabi_dsub>
 8010328:	f806 4b01 	strb.w	r4, [r6], #1
 801032c:	9d07      	ldr	r5, [sp, #28]
 801032e:	eba6 040a 	sub.w	r4, r6, sl
 8010332:	42a5      	cmp	r5, r4
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	f040 8117 	bne.w	801056a <_dtoa_r+0x6e2>
 801033c:	f7ef ff7e 	bl	800023c <__adddf3>
 8010340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010344:	4604      	mov	r4, r0
 8010346:	460d      	mov	r5, r1
 8010348:	f7f0 fbbe 	bl	8000ac8 <__aeabi_dcmpgt>
 801034c:	2800      	cmp	r0, #0
 801034e:	f040 80f9 	bne.w	8010544 <_dtoa_r+0x6bc>
 8010352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010356:	4620      	mov	r0, r4
 8010358:	4629      	mov	r1, r5
 801035a:	f7f0 fb8d 	bl	8000a78 <__aeabi_dcmpeq>
 801035e:	b118      	cbz	r0, 8010368 <_dtoa_r+0x4e0>
 8010360:	f018 0f01 	tst.w	r8, #1
 8010364:	f040 80ee 	bne.w	8010544 <_dtoa_r+0x6bc>
 8010368:	4649      	mov	r1, r9
 801036a:	4658      	mov	r0, fp
 801036c:	f000 fc90 	bl	8010c90 <_Bfree>
 8010370:	2300      	movs	r3, #0
 8010372:	7033      	strb	r3, [r6, #0]
 8010374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010376:	3701      	adds	r7, #1
 8010378:	601f      	str	r7, [r3, #0]
 801037a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801037c:	2b00      	cmp	r3, #0
 801037e:	f000 831d 	beq.w	80109bc <_dtoa_r+0xb34>
 8010382:	601e      	str	r6, [r3, #0]
 8010384:	e31a      	b.n	80109bc <_dtoa_r+0xb34>
 8010386:	07e2      	lsls	r2, r4, #31
 8010388:	d505      	bpl.n	8010396 <_dtoa_r+0x50e>
 801038a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801038e:	f7f0 f90b 	bl	80005a8 <__aeabi_dmul>
 8010392:	3601      	adds	r6, #1
 8010394:	2301      	movs	r3, #1
 8010396:	1064      	asrs	r4, r4, #1
 8010398:	3508      	adds	r5, #8
 801039a:	e73f      	b.n	801021c <_dtoa_r+0x394>
 801039c:	2602      	movs	r6, #2
 801039e:	e742      	b.n	8010226 <_dtoa_r+0x39e>
 80103a0:	9c07      	ldr	r4, [sp, #28]
 80103a2:	9704      	str	r7, [sp, #16]
 80103a4:	e761      	b.n	801026a <_dtoa_r+0x3e2>
 80103a6:	4b27      	ldr	r3, [pc, #156]	@ (8010444 <_dtoa_r+0x5bc>)
 80103a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80103ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80103b2:	4454      	add	r4, sl
 80103b4:	2900      	cmp	r1, #0
 80103b6:	d053      	beq.n	8010460 <_dtoa_r+0x5d8>
 80103b8:	4928      	ldr	r1, [pc, #160]	@ (801045c <_dtoa_r+0x5d4>)
 80103ba:	2000      	movs	r0, #0
 80103bc:	f7f0 fa1e 	bl	80007fc <__aeabi_ddiv>
 80103c0:	4633      	mov	r3, r6
 80103c2:	462a      	mov	r2, r5
 80103c4:	f7ef ff38 	bl	8000238 <__aeabi_dsub>
 80103c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80103cc:	4656      	mov	r6, sl
 80103ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103d2:	f7f0 fb99 	bl	8000b08 <__aeabi_d2iz>
 80103d6:	4605      	mov	r5, r0
 80103d8:	f7f0 f87c 	bl	80004d4 <__aeabi_i2d>
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103e4:	f7ef ff28 	bl	8000238 <__aeabi_dsub>
 80103e8:	3530      	adds	r5, #48	@ 0x30
 80103ea:	4602      	mov	r2, r0
 80103ec:	460b      	mov	r3, r1
 80103ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80103f2:	f806 5b01 	strb.w	r5, [r6], #1
 80103f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80103fa:	f7f0 fb47 	bl	8000a8c <__aeabi_dcmplt>
 80103fe:	2800      	cmp	r0, #0
 8010400:	d171      	bne.n	80104e6 <_dtoa_r+0x65e>
 8010402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010406:	4911      	ldr	r1, [pc, #68]	@ (801044c <_dtoa_r+0x5c4>)
 8010408:	2000      	movs	r0, #0
 801040a:	f7ef ff15 	bl	8000238 <__aeabi_dsub>
 801040e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010412:	f7f0 fb3b 	bl	8000a8c <__aeabi_dcmplt>
 8010416:	2800      	cmp	r0, #0
 8010418:	f040 8095 	bne.w	8010546 <_dtoa_r+0x6be>
 801041c:	42a6      	cmp	r6, r4
 801041e:	f43f af50 	beq.w	80102c2 <_dtoa_r+0x43a>
 8010422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010426:	4b0a      	ldr	r3, [pc, #40]	@ (8010450 <_dtoa_r+0x5c8>)
 8010428:	2200      	movs	r2, #0
 801042a:	f7f0 f8bd 	bl	80005a8 <__aeabi_dmul>
 801042e:	4b08      	ldr	r3, [pc, #32]	@ (8010450 <_dtoa_r+0x5c8>)
 8010430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010434:	2200      	movs	r2, #0
 8010436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801043a:	f7f0 f8b5 	bl	80005a8 <__aeabi_dmul>
 801043e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010442:	e7c4      	b.n	80103ce <_dtoa_r+0x546>
 8010444:	08013548 	.word	0x08013548
 8010448:	08013520 	.word	0x08013520
 801044c:	3ff00000 	.word	0x3ff00000
 8010450:	40240000 	.word	0x40240000
 8010454:	401c0000 	.word	0x401c0000
 8010458:	40140000 	.word	0x40140000
 801045c:	3fe00000 	.word	0x3fe00000
 8010460:	4631      	mov	r1, r6
 8010462:	4628      	mov	r0, r5
 8010464:	f7f0 f8a0 	bl	80005a8 <__aeabi_dmul>
 8010468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801046c:	9415      	str	r4, [sp, #84]	@ 0x54
 801046e:	4656      	mov	r6, sl
 8010470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010474:	f7f0 fb48 	bl	8000b08 <__aeabi_d2iz>
 8010478:	4605      	mov	r5, r0
 801047a:	f7f0 f82b 	bl	80004d4 <__aeabi_i2d>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010486:	f7ef fed7 	bl	8000238 <__aeabi_dsub>
 801048a:	3530      	adds	r5, #48	@ 0x30
 801048c:	f806 5b01 	strb.w	r5, [r6], #1
 8010490:	4602      	mov	r2, r0
 8010492:	460b      	mov	r3, r1
 8010494:	42a6      	cmp	r6, r4
 8010496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801049a:	f04f 0200 	mov.w	r2, #0
 801049e:	d124      	bne.n	80104ea <_dtoa_r+0x662>
 80104a0:	4bac      	ldr	r3, [pc, #688]	@ (8010754 <_dtoa_r+0x8cc>)
 80104a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80104a6:	f7ef fec9 	bl	800023c <__adddf3>
 80104aa:	4602      	mov	r2, r0
 80104ac:	460b      	mov	r3, r1
 80104ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104b2:	f7f0 fb09 	bl	8000ac8 <__aeabi_dcmpgt>
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d145      	bne.n	8010546 <_dtoa_r+0x6be>
 80104ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80104be:	49a5      	ldr	r1, [pc, #660]	@ (8010754 <_dtoa_r+0x8cc>)
 80104c0:	2000      	movs	r0, #0
 80104c2:	f7ef feb9 	bl	8000238 <__aeabi_dsub>
 80104c6:	4602      	mov	r2, r0
 80104c8:	460b      	mov	r3, r1
 80104ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104ce:	f7f0 fadd 	bl	8000a8c <__aeabi_dcmplt>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	f43f aef5 	beq.w	80102c2 <_dtoa_r+0x43a>
 80104d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80104da:	1e73      	subs	r3, r6, #1
 80104dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80104de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80104e2:	2b30      	cmp	r3, #48	@ 0x30
 80104e4:	d0f8      	beq.n	80104d8 <_dtoa_r+0x650>
 80104e6:	9f04      	ldr	r7, [sp, #16]
 80104e8:	e73e      	b.n	8010368 <_dtoa_r+0x4e0>
 80104ea:	4b9b      	ldr	r3, [pc, #620]	@ (8010758 <_dtoa_r+0x8d0>)
 80104ec:	f7f0 f85c 	bl	80005a8 <__aeabi_dmul>
 80104f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104f4:	e7bc      	b.n	8010470 <_dtoa_r+0x5e8>
 80104f6:	d10c      	bne.n	8010512 <_dtoa_r+0x68a>
 80104f8:	4b98      	ldr	r3, [pc, #608]	@ (801075c <_dtoa_r+0x8d4>)
 80104fa:	2200      	movs	r2, #0
 80104fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010500:	f7f0 f852 	bl	80005a8 <__aeabi_dmul>
 8010504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010508:	f7f0 fad4 	bl	8000ab4 <__aeabi_dcmpge>
 801050c:	2800      	cmp	r0, #0
 801050e:	f000 8157 	beq.w	80107c0 <_dtoa_r+0x938>
 8010512:	2400      	movs	r4, #0
 8010514:	4625      	mov	r5, r4
 8010516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010518:	43db      	mvns	r3, r3
 801051a:	9304      	str	r3, [sp, #16]
 801051c:	4656      	mov	r6, sl
 801051e:	2700      	movs	r7, #0
 8010520:	4621      	mov	r1, r4
 8010522:	4658      	mov	r0, fp
 8010524:	f000 fbb4 	bl	8010c90 <_Bfree>
 8010528:	2d00      	cmp	r5, #0
 801052a:	d0dc      	beq.n	80104e6 <_dtoa_r+0x65e>
 801052c:	b12f      	cbz	r7, 801053a <_dtoa_r+0x6b2>
 801052e:	42af      	cmp	r7, r5
 8010530:	d003      	beq.n	801053a <_dtoa_r+0x6b2>
 8010532:	4639      	mov	r1, r7
 8010534:	4658      	mov	r0, fp
 8010536:	f000 fbab 	bl	8010c90 <_Bfree>
 801053a:	4629      	mov	r1, r5
 801053c:	4658      	mov	r0, fp
 801053e:	f000 fba7 	bl	8010c90 <_Bfree>
 8010542:	e7d0      	b.n	80104e6 <_dtoa_r+0x65e>
 8010544:	9704      	str	r7, [sp, #16]
 8010546:	4633      	mov	r3, r6
 8010548:	461e      	mov	r6, r3
 801054a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801054e:	2a39      	cmp	r2, #57	@ 0x39
 8010550:	d107      	bne.n	8010562 <_dtoa_r+0x6da>
 8010552:	459a      	cmp	sl, r3
 8010554:	d1f8      	bne.n	8010548 <_dtoa_r+0x6c0>
 8010556:	9a04      	ldr	r2, [sp, #16]
 8010558:	3201      	adds	r2, #1
 801055a:	9204      	str	r2, [sp, #16]
 801055c:	2230      	movs	r2, #48	@ 0x30
 801055e:	f88a 2000 	strb.w	r2, [sl]
 8010562:	781a      	ldrb	r2, [r3, #0]
 8010564:	3201      	adds	r2, #1
 8010566:	701a      	strb	r2, [r3, #0]
 8010568:	e7bd      	b.n	80104e6 <_dtoa_r+0x65e>
 801056a:	4b7b      	ldr	r3, [pc, #492]	@ (8010758 <_dtoa_r+0x8d0>)
 801056c:	2200      	movs	r2, #0
 801056e:	f7f0 f81b 	bl	80005a8 <__aeabi_dmul>
 8010572:	2200      	movs	r2, #0
 8010574:	2300      	movs	r3, #0
 8010576:	4604      	mov	r4, r0
 8010578:	460d      	mov	r5, r1
 801057a:	f7f0 fa7d 	bl	8000a78 <__aeabi_dcmpeq>
 801057e:	2800      	cmp	r0, #0
 8010580:	f43f aebb 	beq.w	80102fa <_dtoa_r+0x472>
 8010584:	e6f0      	b.n	8010368 <_dtoa_r+0x4e0>
 8010586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010588:	2a00      	cmp	r2, #0
 801058a:	f000 80db 	beq.w	8010744 <_dtoa_r+0x8bc>
 801058e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010590:	2a01      	cmp	r2, #1
 8010592:	f300 80bf 	bgt.w	8010714 <_dtoa_r+0x88c>
 8010596:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010598:	2a00      	cmp	r2, #0
 801059a:	f000 80b7 	beq.w	801070c <_dtoa_r+0x884>
 801059e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80105a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105a4:	4646      	mov	r6, r8
 80105a6:	9a08      	ldr	r2, [sp, #32]
 80105a8:	2101      	movs	r1, #1
 80105aa:	441a      	add	r2, r3
 80105ac:	4658      	mov	r0, fp
 80105ae:	4498      	add	r8, r3
 80105b0:	9208      	str	r2, [sp, #32]
 80105b2:	f000 fc21 	bl	8010df8 <__i2b>
 80105b6:	4605      	mov	r5, r0
 80105b8:	b15e      	cbz	r6, 80105d2 <_dtoa_r+0x74a>
 80105ba:	9b08      	ldr	r3, [sp, #32]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	dd08      	ble.n	80105d2 <_dtoa_r+0x74a>
 80105c0:	42b3      	cmp	r3, r6
 80105c2:	9a08      	ldr	r2, [sp, #32]
 80105c4:	bfa8      	it	ge
 80105c6:	4633      	movge	r3, r6
 80105c8:	eba8 0803 	sub.w	r8, r8, r3
 80105cc:	1af6      	subs	r6, r6, r3
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	9308      	str	r3, [sp, #32]
 80105d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105d4:	b1f3      	cbz	r3, 8010614 <_dtoa_r+0x78c>
 80105d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f000 80b7 	beq.w	801074c <_dtoa_r+0x8c4>
 80105de:	b18c      	cbz	r4, 8010604 <_dtoa_r+0x77c>
 80105e0:	4629      	mov	r1, r5
 80105e2:	4622      	mov	r2, r4
 80105e4:	4658      	mov	r0, fp
 80105e6:	f000 fcc7 	bl	8010f78 <__pow5mult>
 80105ea:	464a      	mov	r2, r9
 80105ec:	4601      	mov	r1, r0
 80105ee:	4605      	mov	r5, r0
 80105f0:	4658      	mov	r0, fp
 80105f2:	f000 fc17 	bl	8010e24 <__multiply>
 80105f6:	4649      	mov	r1, r9
 80105f8:	9004      	str	r0, [sp, #16]
 80105fa:	4658      	mov	r0, fp
 80105fc:	f000 fb48 	bl	8010c90 <_Bfree>
 8010600:	9b04      	ldr	r3, [sp, #16]
 8010602:	4699      	mov	r9, r3
 8010604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010606:	1b1a      	subs	r2, r3, r4
 8010608:	d004      	beq.n	8010614 <_dtoa_r+0x78c>
 801060a:	4649      	mov	r1, r9
 801060c:	4658      	mov	r0, fp
 801060e:	f000 fcb3 	bl	8010f78 <__pow5mult>
 8010612:	4681      	mov	r9, r0
 8010614:	2101      	movs	r1, #1
 8010616:	4658      	mov	r0, fp
 8010618:	f000 fbee 	bl	8010df8 <__i2b>
 801061c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801061e:	4604      	mov	r4, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	f000 81cf 	beq.w	80109c4 <_dtoa_r+0xb3c>
 8010626:	461a      	mov	r2, r3
 8010628:	4601      	mov	r1, r0
 801062a:	4658      	mov	r0, fp
 801062c:	f000 fca4 	bl	8010f78 <__pow5mult>
 8010630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010632:	2b01      	cmp	r3, #1
 8010634:	4604      	mov	r4, r0
 8010636:	f300 8095 	bgt.w	8010764 <_dtoa_r+0x8dc>
 801063a:	9b02      	ldr	r3, [sp, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 8087 	bne.w	8010750 <_dtoa_r+0x8c8>
 8010642:	9b03      	ldr	r3, [sp, #12]
 8010644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010648:	2b00      	cmp	r3, #0
 801064a:	f040 8089 	bne.w	8010760 <_dtoa_r+0x8d8>
 801064e:	9b03      	ldr	r3, [sp, #12]
 8010650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010654:	0d1b      	lsrs	r3, r3, #20
 8010656:	051b      	lsls	r3, r3, #20
 8010658:	b12b      	cbz	r3, 8010666 <_dtoa_r+0x7de>
 801065a:	9b08      	ldr	r3, [sp, #32]
 801065c:	3301      	adds	r3, #1
 801065e:	9308      	str	r3, [sp, #32]
 8010660:	f108 0801 	add.w	r8, r8, #1
 8010664:	2301      	movs	r3, #1
 8010666:	930a      	str	r3, [sp, #40]	@ 0x28
 8010668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801066a:	2b00      	cmp	r3, #0
 801066c:	f000 81b0 	beq.w	80109d0 <_dtoa_r+0xb48>
 8010670:	6923      	ldr	r3, [r4, #16]
 8010672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010676:	6918      	ldr	r0, [r3, #16]
 8010678:	f000 fb72 	bl	8010d60 <__hi0bits>
 801067c:	f1c0 0020 	rsb	r0, r0, #32
 8010680:	9b08      	ldr	r3, [sp, #32]
 8010682:	4418      	add	r0, r3
 8010684:	f010 001f 	ands.w	r0, r0, #31
 8010688:	d077      	beq.n	801077a <_dtoa_r+0x8f2>
 801068a:	f1c0 0320 	rsb	r3, r0, #32
 801068e:	2b04      	cmp	r3, #4
 8010690:	dd6b      	ble.n	801076a <_dtoa_r+0x8e2>
 8010692:	9b08      	ldr	r3, [sp, #32]
 8010694:	f1c0 001c 	rsb	r0, r0, #28
 8010698:	4403      	add	r3, r0
 801069a:	4480      	add	r8, r0
 801069c:	4406      	add	r6, r0
 801069e:	9308      	str	r3, [sp, #32]
 80106a0:	f1b8 0f00 	cmp.w	r8, #0
 80106a4:	dd05      	ble.n	80106b2 <_dtoa_r+0x82a>
 80106a6:	4649      	mov	r1, r9
 80106a8:	4642      	mov	r2, r8
 80106aa:	4658      	mov	r0, fp
 80106ac:	f000 fcbe 	bl	801102c <__lshift>
 80106b0:	4681      	mov	r9, r0
 80106b2:	9b08      	ldr	r3, [sp, #32]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	dd05      	ble.n	80106c4 <_dtoa_r+0x83c>
 80106b8:	4621      	mov	r1, r4
 80106ba:	461a      	mov	r2, r3
 80106bc:	4658      	mov	r0, fp
 80106be:	f000 fcb5 	bl	801102c <__lshift>
 80106c2:	4604      	mov	r4, r0
 80106c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d059      	beq.n	801077e <_dtoa_r+0x8f6>
 80106ca:	4621      	mov	r1, r4
 80106cc:	4648      	mov	r0, r9
 80106ce:	f000 fd19 	bl	8011104 <__mcmp>
 80106d2:	2800      	cmp	r0, #0
 80106d4:	da53      	bge.n	801077e <_dtoa_r+0x8f6>
 80106d6:	1e7b      	subs	r3, r7, #1
 80106d8:	9304      	str	r3, [sp, #16]
 80106da:	4649      	mov	r1, r9
 80106dc:	2300      	movs	r3, #0
 80106de:	220a      	movs	r2, #10
 80106e0:	4658      	mov	r0, fp
 80106e2:	f000 faf7 	bl	8010cd4 <__multadd>
 80106e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80106e8:	4681      	mov	r9, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f000 8172 	beq.w	80109d4 <_dtoa_r+0xb4c>
 80106f0:	2300      	movs	r3, #0
 80106f2:	4629      	mov	r1, r5
 80106f4:	220a      	movs	r2, #10
 80106f6:	4658      	mov	r0, fp
 80106f8:	f000 faec 	bl	8010cd4 <__multadd>
 80106fc:	9b00      	ldr	r3, [sp, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	4605      	mov	r5, r0
 8010702:	dc67      	bgt.n	80107d4 <_dtoa_r+0x94c>
 8010704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010706:	2b02      	cmp	r3, #2
 8010708:	dc41      	bgt.n	801078e <_dtoa_r+0x906>
 801070a:	e063      	b.n	80107d4 <_dtoa_r+0x94c>
 801070c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801070e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010712:	e746      	b.n	80105a2 <_dtoa_r+0x71a>
 8010714:	9b07      	ldr	r3, [sp, #28]
 8010716:	1e5c      	subs	r4, r3, #1
 8010718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801071a:	42a3      	cmp	r3, r4
 801071c:	bfbf      	itttt	lt
 801071e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010720:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010722:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010724:	1ae3      	sublt	r3, r4, r3
 8010726:	bfb4      	ite	lt
 8010728:	18d2      	addlt	r2, r2, r3
 801072a:	1b1c      	subge	r4, r3, r4
 801072c:	9b07      	ldr	r3, [sp, #28]
 801072e:	bfbc      	itt	lt
 8010730:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010732:	2400      	movlt	r4, #0
 8010734:	2b00      	cmp	r3, #0
 8010736:	bfb5      	itete	lt
 8010738:	eba8 0603 	sublt.w	r6, r8, r3
 801073c:	9b07      	ldrge	r3, [sp, #28]
 801073e:	2300      	movlt	r3, #0
 8010740:	4646      	movge	r6, r8
 8010742:	e730      	b.n	80105a6 <_dtoa_r+0x71e>
 8010744:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010748:	4646      	mov	r6, r8
 801074a:	e735      	b.n	80105b8 <_dtoa_r+0x730>
 801074c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801074e:	e75c      	b.n	801060a <_dtoa_r+0x782>
 8010750:	2300      	movs	r3, #0
 8010752:	e788      	b.n	8010666 <_dtoa_r+0x7de>
 8010754:	3fe00000 	.word	0x3fe00000
 8010758:	40240000 	.word	0x40240000
 801075c:	40140000 	.word	0x40140000
 8010760:	9b02      	ldr	r3, [sp, #8]
 8010762:	e780      	b.n	8010666 <_dtoa_r+0x7de>
 8010764:	2300      	movs	r3, #0
 8010766:	930a      	str	r3, [sp, #40]	@ 0x28
 8010768:	e782      	b.n	8010670 <_dtoa_r+0x7e8>
 801076a:	d099      	beq.n	80106a0 <_dtoa_r+0x818>
 801076c:	9a08      	ldr	r2, [sp, #32]
 801076e:	331c      	adds	r3, #28
 8010770:	441a      	add	r2, r3
 8010772:	4498      	add	r8, r3
 8010774:	441e      	add	r6, r3
 8010776:	9208      	str	r2, [sp, #32]
 8010778:	e792      	b.n	80106a0 <_dtoa_r+0x818>
 801077a:	4603      	mov	r3, r0
 801077c:	e7f6      	b.n	801076c <_dtoa_r+0x8e4>
 801077e:	9b07      	ldr	r3, [sp, #28]
 8010780:	9704      	str	r7, [sp, #16]
 8010782:	2b00      	cmp	r3, #0
 8010784:	dc20      	bgt.n	80107c8 <_dtoa_r+0x940>
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801078a:	2b02      	cmp	r3, #2
 801078c:	dd1e      	ble.n	80107cc <_dtoa_r+0x944>
 801078e:	9b00      	ldr	r3, [sp, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	f47f aec0 	bne.w	8010516 <_dtoa_r+0x68e>
 8010796:	4621      	mov	r1, r4
 8010798:	2205      	movs	r2, #5
 801079a:	4658      	mov	r0, fp
 801079c:	f000 fa9a 	bl	8010cd4 <__multadd>
 80107a0:	4601      	mov	r1, r0
 80107a2:	4604      	mov	r4, r0
 80107a4:	4648      	mov	r0, r9
 80107a6:	f000 fcad 	bl	8011104 <__mcmp>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	f77f aeb3 	ble.w	8010516 <_dtoa_r+0x68e>
 80107b0:	4656      	mov	r6, sl
 80107b2:	2331      	movs	r3, #49	@ 0x31
 80107b4:	f806 3b01 	strb.w	r3, [r6], #1
 80107b8:	9b04      	ldr	r3, [sp, #16]
 80107ba:	3301      	adds	r3, #1
 80107bc:	9304      	str	r3, [sp, #16]
 80107be:	e6ae      	b.n	801051e <_dtoa_r+0x696>
 80107c0:	9c07      	ldr	r4, [sp, #28]
 80107c2:	9704      	str	r7, [sp, #16]
 80107c4:	4625      	mov	r5, r4
 80107c6:	e7f3      	b.n	80107b0 <_dtoa_r+0x928>
 80107c8:	9b07      	ldr	r3, [sp, #28]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f000 8104 	beq.w	80109dc <_dtoa_r+0xb54>
 80107d4:	2e00      	cmp	r6, #0
 80107d6:	dd05      	ble.n	80107e4 <_dtoa_r+0x95c>
 80107d8:	4629      	mov	r1, r5
 80107da:	4632      	mov	r2, r6
 80107dc:	4658      	mov	r0, fp
 80107de:	f000 fc25 	bl	801102c <__lshift>
 80107e2:	4605      	mov	r5, r0
 80107e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d05a      	beq.n	80108a0 <_dtoa_r+0xa18>
 80107ea:	6869      	ldr	r1, [r5, #4]
 80107ec:	4658      	mov	r0, fp
 80107ee:	f000 fa0f 	bl	8010c10 <_Balloc>
 80107f2:	4606      	mov	r6, r0
 80107f4:	b928      	cbnz	r0, 8010802 <_dtoa_r+0x97a>
 80107f6:	4b84      	ldr	r3, [pc, #528]	@ (8010a08 <_dtoa_r+0xb80>)
 80107f8:	4602      	mov	r2, r0
 80107fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80107fe:	f7ff bb5a 	b.w	800feb6 <_dtoa_r+0x2e>
 8010802:	692a      	ldr	r2, [r5, #16]
 8010804:	3202      	adds	r2, #2
 8010806:	0092      	lsls	r2, r2, #2
 8010808:	f105 010c 	add.w	r1, r5, #12
 801080c:	300c      	adds	r0, #12
 801080e:	f7ff faa2 	bl	800fd56 <memcpy>
 8010812:	2201      	movs	r2, #1
 8010814:	4631      	mov	r1, r6
 8010816:	4658      	mov	r0, fp
 8010818:	f000 fc08 	bl	801102c <__lshift>
 801081c:	f10a 0301 	add.w	r3, sl, #1
 8010820:	9307      	str	r3, [sp, #28]
 8010822:	9b00      	ldr	r3, [sp, #0]
 8010824:	4453      	add	r3, sl
 8010826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010828:	9b02      	ldr	r3, [sp, #8]
 801082a:	f003 0301 	and.w	r3, r3, #1
 801082e:	462f      	mov	r7, r5
 8010830:	930a      	str	r3, [sp, #40]	@ 0x28
 8010832:	4605      	mov	r5, r0
 8010834:	9b07      	ldr	r3, [sp, #28]
 8010836:	4621      	mov	r1, r4
 8010838:	3b01      	subs	r3, #1
 801083a:	4648      	mov	r0, r9
 801083c:	9300      	str	r3, [sp, #0]
 801083e:	f7ff fa98 	bl	800fd72 <quorem>
 8010842:	4639      	mov	r1, r7
 8010844:	9002      	str	r0, [sp, #8]
 8010846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801084a:	4648      	mov	r0, r9
 801084c:	f000 fc5a 	bl	8011104 <__mcmp>
 8010850:	462a      	mov	r2, r5
 8010852:	9008      	str	r0, [sp, #32]
 8010854:	4621      	mov	r1, r4
 8010856:	4658      	mov	r0, fp
 8010858:	f000 fc70 	bl	801113c <__mdiff>
 801085c:	68c2      	ldr	r2, [r0, #12]
 801085e:	4606      	mov	r6, r0
 8010860:	bb02      	cbnz	r2, 80108a4 <_dtoa_r+0xa1c>
 8010862:	4601      	mov	r1, r0
 8010864:	4648      	mov	r0, r9
 8010866:	f000 fc4d 	bl	8011104 <__mcmp>
 801086a:	4602      	mov	r2, r0
 801086c:	4631      	mov	r1, r6
 801086e:	4658      	mov	r0, fp
 8010870:	920e      	str	r2, [sp, #56]	@ 0x38
 8010872:	f000 fa0d 	bl	8010c90 <_Bfree>
 8010876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801087a:	9e07      	ldr	r6, [sp, #28]
 801087c:	ea43 0102 	orr.w	r1, r3, r2
 8010880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010882:	4319      	orrs	r1, r3
 8010884:	d110      	bne.n	80108a8 <_dtoa_r+0xa20>
 8010886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801088a:	d029      	beq.n	80108e0 <_dtoa_r+0xa58>
 801088c:	9b08      	ldr	r3, [sp, #32]
 801088e:	2b00      	cmp	r3, #0
 8010890:	dd02      	ble.n	8010898 <_dtoa_r+0xa10>
 8010892:	9b02      	ldr	r3, [sp, #8]
 8010894:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010898:	9b00      	ldr	r3, [sp, #0]
 801089a:	f883 8000 	strb.w	r8, [r3]
 801089e:	e63f      	b.n	8010520 <_dtoa_r+0x698>
 80108a0:	4628      	mov	r0, r5
 80108a2:	e7bb      	b.n	801081c <_dtoa_r+0x994>
 80108a4:	2201      	movs	r2, #1
 80108a6:	e7e1      	b.n	801086c <_dtoa_r+0x9e4>
 80108a8:	9b08      	ldr	r3, [sp, #32]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	db04      	blt.n	80108b8 <_dtoa_r+0xa30>
 80108ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80108b0:	430b      	orrs	r3, r1
 80108b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80108b4:	430b      	orrs	r3, r1
 80108b6:	d120      	bne.n	80108fa <_dtoa_r+0xa72>
 80108b8:	2a00      	cmp	r2, #0
 80108ba:	dded      	ble.n	8010898 <_dtoa_r+0xa10>
 80108bc:	4649      	mov	r1, r9
 80108be:	2201      	movs	r2, #1
 80108c0:	4658      	mov	r0, fp
 80108c2:	f000 fbb3 	bl	801102c <__lshift>
 80108c6:	4621      	mov	r1, r4
 80108c8:	4681      	mov	r9, r0
 80108ca:	f000 fc1b 	bl	8011104 <__mcmp>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	dc03      	bgt.n	80108da <_dtoa_r+0xa52>
 80108d2:	d1e1      	bne.n	8010898 <_dtoa_r+0xa10>
 80108d4:	f018 0f01 	tst.w	r8, #1
 80108d8:	d0de      	beq.n	8010898 <_dtoa_r+0xa10>
 80108da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80108de:	d1d8      	bne.n	8010892 <_dtoa_r+0xa0a>
 80108e0:	9a00      	ldr	r2, [sp, #0]
 80108e2:	2339      	movs	r3, #57	@ 0x39
 80108e4:	7013      	strb	r3, [r2, #0]
 80108e6:	4633      	mov	r3, r6
 80108e8:	461e      	mov	r6, r3
 80108ea:	3b01      	subs	r3, #1
 80108ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80108f0:	2a39      	cmp	r2, #57	@ 0x39
 80108f2:	d052      	beq.n	801099a <_dtoa_r+0xb12>
 80108f4:	3201      	adds	r2, #1
 80108f6:	701a      	strb	r2, [r3, #0]
 80108f8:	e612      	b.n	8010520 <_dtoa_r+0x698>
 80108fa:	2a00      	cmp	r2, #0
 80108fc:	dd07      	ble.n	801090e <_dtoa_r+0xa86>
 80108fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010902:	d0ed      	beq.n	80108e0 <_dtoa_r+0xa58>
 8010904:	9a00      	ldr	r2, [sp, #0]
 8010906:	f108 0301 	add.w	r3, r8, #1
 801090a:	7013      	strb	r3, [r2, #0]
 801090c:	e608      	b.n	8010520 <_dtoa_r+0x698>
 801090e:	9b07      	ldr	r3, [sp, #28]
 8010910:	9a07      	ldr	r2, [sp, #28]
 8010912:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010918:	4293      	cmp	r3, r2
 801091a:	d028      	beq.n	801096e <_dtoa_r+0xae6>
 801091c:	4649      	mov	r1, r9
 801091e:	2300      	movs	r3, #0
 8010920:	220a      	movs	r2, #10
 8010922:	4658      	mov	r0, fp
 8010924:	f000 f9d6 	bl	8010cd4 <__multadd>
 8010928:	42af      	cmp	r7, r5
 801092a:	4681      	mov	r9, r0
 801092c:	f04f 0300 	mov.w	r3, #0
 8010930:	f04f 020a 	mov.w	r2, #10
 8010934:	4639      	mov	r1, r7
 8010936:	4658      	mov	r0, fp
 8010938:	d107      	bne.n	801094a <_dtoa_r+0xac2>
 801093a:	f000 f9cb 	bl	8010cd4 <__multadd>
 801093e:	4607      	mov	r7, r0
 8010940:	4605      	mov	r5, r0
 8010942:	9b07      	ldr	r3, [sp, #28]
 8010944:	3301      	adds	r3, #1
 8010946:	9307      	str	r3, [sp, #28]
 8010948:	e774      	b.n	8010834 <_dtoa_r+0x9ac>
 801094a:	f000 f9c3 	bl	8010cd4 <__multadd>
 801094e:	4629      	mov	r1, r5
 8010950:	4607      	mov	r7, r0
 8010952:	2300      	movs	r3, #0
 8010954:	220a      	movs	r2, #10
 8010956:	4658      	mov	r0, fp
 8010958:	f000 f9bc 	bl	8010cd4 <__multadd>
 801095c:	4605      	mov	r5, r0
 801095e:	e7f0      	b.n	8010942 <_dtoa_r+0xaba>
 8010960:	9b00      	ldr	r3, [sp, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	bfcc      	ite	gt
 8010966:	461e      	movgt	r6, r3
 8010968:	2601      	movle	r6, #1
 801096a:	4456      	add	r6, sl
 801096c:	2700      	movs	r7, #0
 801096e:	4649      	mov	r1, r9
 8010970:	2201      	movs	r2, #1
 8010972:	4658      	mov	r0, fp
 8010974:	f000 fb5a 	bl	801102c <__lshift>
 8010978:	4621      	mov	r1, r4
 801097a:	4681      	mov	r9, r0
 801097c:	f000 fbc2 	bl	8011104 <__mcmp>
 8010980:	2800      	cmp	r0, #0
 8010982:	dcb0      	bgt.n	80108e6 <_dtoa_r+0xa5e>
 8010984:	d102      	bne.n	801098c <_dtoa_r+0xb04>
 8010986:	f018 0f01 	tst.w	r8, #1
 801098a:	d1ac      	bne.n	80108e6 <_dtoa_r+0xa5e>
 801098c:	4633      	mov	r3, r6
 801098e:	461e      	mov	r6, r3
 8010990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010994:	2a30      	cmp	r2, #48	@ 0x30
 8010996:	d0fa      	beq.n	801098e <_dtoa_r+0xb06>
 8010998:	e5c2      	b.n	8010520 <_dtoa_r+0x698>
 801099a:	459a      	cmp	sl, r3
 801099c:	d1a4      	bne.n	80108e8 <_dtoa_r+0xa60>
 801099e:	9b04      	ldr	r3, [sp, #16]
 80109a0:	3301      	adds	r3, #1
 80109a2:	9304      	str	r3, [sp, #16]
 80109a4:	2331      	movs	r3, #49	@ 0x31
 80109a6:	f88a 3000 	strb.w	r3, [sl]
 80109aa:	e5b9      	b.n	8010520 <_dtoa_r+0x698>
 80109ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80109ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010a0c <_dtoa_r+0xb84>
 80109b2:	b11b      	cbz	r3, 80109bc <_dtoa_r+0xb34>
 80109b4:	f10a 0308 	add.w	r3, sl, #8
 80109b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80109ba:	6013      	str	r3, [r2, #0]
 80109bc:	4650      	mov	r0, sl
 80109be:	b019      	add	sp, #100	@ 0x64
 80109c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	f77f ae37 	ble.w	801063a <_dtoa_r+0x7b2>
 80109cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80109d0:	2001      	movs	r0, #1
 80109d2:	e655      	b.n	8010680 <_dtoa_r+0x7f8>
 80109d4:	9b00      	ldr	r3, [sp, #0]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	f77f aed6 	ble.w	8010788 <_dtoa_r+0x900>
 80109dc:	4656      	mov	r6, sl
 80109de:	4621      	mov	r1, r4
 80109e0:	4648      	mov	r0, r9
 80109e2:	f7ff f9c6 	bl	800fd72 <quorem>
 80109e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80109ea:	f806 8b01 	strb.w	r8, [r6], #1
 80109ee:	9b00      	ldr	r3, [sp, #0]
 80109f0:	eba6 020a 	sub.w	r2, r6, sl
 80109f4:	4293      	cmp	r3, r2
 80109f6:	ddb3      	ble.n	8010960 <_dtoa_r+0xad8>
 80109f8:	4649      	mov	r1, r9
 80109fa:	2300      	movs	r3, #0
 80109fc:	220a      	movs	r2, #10
 80109fe:	4658      	mov	r0, fp
 8010a00:	f000 f968 	bl	8010cd4 <__multadd>
 8010a04:	4681      	mov	r9, r0
 8010a06:	e7ea      	b.n	80109de <_dtoa_r+0xb56>
 8010a08:	080134a8 	.word	0x080134a8
 8010a0c:	0801342c 	.word	0x0801342c

08010a10 <_free_r>:
 8010a10:	b538      	push	{r3, r4, r5, lr}
 8010a12:	4605      	mov	r5, r0
 8010a14:	2900      	cmp	r1, #0
 8010a16:	d041      	beq.n	8010a9c <_free_r+0x8c>
 8010a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a1c:	1f0c      	subs	r4, r1, #4
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	bfb8      	it	lt
 8010a22:	18e4      	addlt	r4, r4, r3
 8010a24:	f000 f8e8 	bl	8010bf8 <__malloc_lock>
 8010a28:	4a1d      	ldr	r2, [pc, #116]	@ (8010aa0 <_free_r+0x90>)
 8010a2a:	6813      	ldr	r3, [r2, #0]
 8010a2c:	b933      	cbnz	r3, 8010a3c <_free_r+0x2c>
 8010a2e:	6063      	str	r3, [r4, #4]
 8010a30:	6014      	str	r4, [r2, #0]
 8010a32:	4628      	mov	r0, r5
 8010a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a38:	f000 b8e4 	b.w	8010c04 <__malloc_unlock>
 8010a3c:	42a3      	cmp	r3, r4
 8010a3e:	d908      	bls.n	8010a52 <_free_r+0x42>
 8010a40:	6820      	ldr	r0, [r4, #0]
 8010a42:	1821      	adds	r1, r4, r0
 8010a44:	428b      	cmp	r3, r1
 8010a46:	bf01      	itttt	eq
 8010a48:	6819      	ldreq	r1, [r3, #0]
 8010a4a:	685b      	ldreq	r3, [r3, #4]
 8010a4c:	1809      	addeq	r1, r1, r0
 8010a4e:	6021      	streq	r1, [r4, #0]
 8010a50:	e7ed      	b.n	8010a2e <_free_r+0x1e>
 8010a52:	461a      	mov	r2, r3
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	b10b      	cbz	r3, 8010a5c <_free_r+0x4c>
 8010a58:	42a3      	cmp	r3, r4
 8010a5a:	d9fa      	bls.n	8010a52 <_free_r+0x42>
 8010a5c:	6811      	ldr	r1, [r2, #0]
 8010a5e:	1850      	adds	r0, r2, r1
 8010a60:	42a0      	cmp	r0, r4
 8010a62:	d10b      	bne.n	8010a7c <_free_r+0x6c>
 8010a64:	6820      	ldr	r0, [r4, #0]
 8010a66:	4401      	add	r1, r0
 8010a68:	1850      	adds	r0, r2, r1
 8010a6a:	4283      	cmp	r3, r0
 8010a6c:	6011      	str	r1, [r2, #0]
 8010a6e:	d1e0      	bne.n	8010a32 <_free_r+0x22>
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	6053      	str	r3, [r2, #4]
 8010a76:	4408      	add	r0, r1
 8010a78:	6010      	str	r0, [r2, #0]
 8010a7a:	e7da      	b.n	8010a32 <_free_r+0x22>
 8010a7c:	d902      	bls.n	8010a84 <_free_r+0x74>
 8010a7e:	230c      	movs	r3, #12
 8010a80:	602b      	str	r3, [r5, #0]
 8010a82:	e7d6      	b.n	8010a32 <_free_r+0x22>
 8010a84:	6820      	ldr	r0, [r4, #0]
 8010a86:	1821      	adds	r1, r4, r0
 8010a88:	428b      	cmp	r3, r1
 8010a8a:	bf04      	itt	eq
 8010a8c:	6819      	ldreq	r1, [r3, #0]
 8010a8e:	685b      	ldreq	r3, [r3, #4]
 8010a90:	6063      	str	r3, [r4, #4]
 8010a92:	bf04      	itt	eq
 8010a94:	1809      	addeq	r1, r1, r0
 8010a96:	6021      	streq	r1, [r4, #0]
 8010a98:	6054      	str	r4, [r2, #4]
 8010a9a:	e7ca      	b.n	8010a32 <_free_r+0x22>
 8010a9c:	bd38      	pop	{r3, r4, r5, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20001970 	.word	0x20001970

08010aa4 <malloc>:
 8010aa4:	4b02      	ldr	r3, [pc, #8]	@ (8010ab0 <malloc+0xc>)
 8010aa6:	4601      	mov	r1, r0
 8010aa8:	6818      	ldr	r0, [r3, #0]
 8010aaa:	f000 b825 	b.w	8010af8 <_malloc_r>
 8010aae:	bf00      	nop
 8010ab0:	20000038 	.word	0x20000038

08010ab4 <sbrk_aligned>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	4e0f      	ldr	r6, [pc, #60]	@ (8010af4 <sbrk_aligned+0x40>)
 8010ab8:	460c      	mov	r4, r1
 8010aba:	6831      	ldr	r1, [r6, #0]
 8010abc:	4605      	mov	r5, r0
 8010abe:	b911      	cbnz	r1, 8010ac6 <sbrk_aligned+0x12>
 8010ac0:	f001 f81a 	bl	8011af8 <_sbrk_r>
 8010ac4:	6030      	str	r0, [r6, #0]
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f001 f815 	bl	8011af8 <_sbrk_r>
 8010ace:	1c43      	adds	r3, r0, #1
 8010ad0:	d103      	bne.n	8010ada <sbrk_aligned+0x26>
 8010ad2:	f04f 34ff 	mov.w	r4, #4294967295
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	bd70      	pop	{r4, r5, r6, pc}
 8010ada:	1cc4      	adds	r4, r0, #3
 8010adc:	f024 0403 	bic.w	r4, r4, #3
 8010ae0:	42a0      	cmp	r0, r4
 8010ae2:	d0f8      	beq.n	8010ad6 <sbrk_aligned+0x22>
 8010ae4:	1a21      	subs	r1, r4, r0
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f001 f806 	bl	8011af8 <_sbrk_r>
 8010aec:	3001      	adds	r0, #1
 8010aee:	d1f2      	bne.n	8010ad6 <sbrk_aligned+0x22>
 8010af0:	e7ef      	b.n	8010ad2 <sbrk_aligned+0x1e>
 8010af2:	bf00      	nop
 8010af4:	2000196c 	.word	0x2000196c

08010af8 <_malloc_r>:
 8010af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010afc:	1ccd      	adds	r5, r1, #3
 8010afe:	f025 0503 	bic.w	r5, r5, #3
 8010b02:	3508      	adds	r5, #8
 8010b04:	2d0c      	cmp	r5, #12
 8010b06:	bf38      	it	cc
 8010b08:	250c      	movcc	r5, #12
 8010b0a:	2d00      	cmp	r5, #0
 8010b0c:	4606      	mov	r6, r0
 8010b0e:	db01      	blt.n	8010b14 <_malloc_r+0x1c>
 8010b10:	42a9      	cmp	r1, r5
 8010b12:	d904      	bls.n	8010b1e <_malloc_r+0x26>
 8010b14:	230c      	movs	r3, #12
 8010b16:	6033      	str	r3, [r6, #0]
 8010b18:	2000      	movs	r0, #0
 8010b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010bf4 <_malloc_r+0xfc>
 8010b22:	f000 f869 	bl	8010bf8 <__malloc_lock>
 8010b26:	f8d8 3000 	ldr.w	r3, [r8]
 8010b2a:	461c      	mov	r4, r3
 8010b2c:	bb44      	cbnz	r4, 8010b80 <_malloc_r+0x88>
 8010b2e:	4629      	mov	r1, r5
 8010b30:	4630      	mov	r0, r6
 8010b32:	f7ff ffbf 	bl	8010ab4 <sbrk_aligned>
 8010b36:	1c43      	adds	r3, r0, #1
 8010b38:	4604      	mov	r4, r0
 8010b3a:	d158      	bne.n	8010bee <_malloc_r+0xf6>
 8010b3c:	f8d8 4000 	ldr.w	r4, [r8]
 8010b40:	4627      	mov	r7, r4
 8010b42:	2f00      	cmp	r7, #0
 8010b44:	d143      	bne.n	8010bce <_malloc_r+0xd6>
 8010b46:	2c00      	cmp	r4, #0
 8010b48:	d04b      	beq.n	8010be2 <_malloc_r+0xea>
 8010b4a:	6823      	ldr	r3, [r4, #0]
 8010b4c:	4639      	mov	r1, r7
 8010b4e:	4630      	mov	r0, r6
 8010b50:	eb04 0903 	add.w	r9, r4, r3
 8010b54:	f000 ffd0 	bl	8011af8 <_sbrk_r>
 8010b58:	4581      	cmp	r9, r0
 8010b5a:	d142      	bne.n	8010be2 <_malloc_r+0xea>
 8010b5c:	6821      	ldr	r1, [r4, #0]
 8010b5e:	1a6d      	subs	r5, r5, r1
 8010b60:	4629      	mov	r1, r5
 8010b62:	4630      	mov	r0, r6
 8010b64:	f7ff ffa6 	bl	8010ab4 <sbrk_aligned>
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d03a      	beq.n	8010be2 <_malloc_r+0xea>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	442b      	add	r3, r5
 8010b70:	6023      	str	r3, [r4, #0]
 8010b72:	f8d8 3000 	ldr.w	r3, [r8]
 8010b76:	685a      	ldr	r2, [r3, #4]
 8010b78:	bb62      	cbnz	r2, 8010bd4 <_malloc_r+0xdc>
 8010b7a:	f8c8 7000 	str.w	r7, [r8]
 8010b7e:	e00f      	b.n	8010ba0 <_malloc_r+0xa8>
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	1b52      	subs	r2, r2, r5
 8010b84:	d420      	bmi.n	8010bc8 <_malloc_r+0xd0>
 8010b86:	2a0b      	cmp	r2, #11
 8010b88:	d917      	bls.n	8010bba <_malloc_r+0xc2>
 8010b8a:	1961      	adds	r1, r4, r5
 8010b8c:	42a3      	cmp	r3, r4
 8010b8e:	6025      	str	r5, [r4, #0]
 8010b90:	bf18      	it	ne
 8010b92:	6059      	strne	r1, [r3, #4]
 8010b94:	6863      	ldr	r3, [r4, #4]
 8010b96:	bf08      	it	eq
 8010b98:	f8c8 1000 	streq.w	r1, [r8]
 8010b9c:	5162      	str	r2, [r4, r5]
 8010b9e:	604b      	str	r3, [r1, #4]
 8010ba0:	4630      	mov	r0, r6
 8010ba2:	f000 f82f 	bl	8010c04 <__malloc_unlock>
 8010ba6:	f104 000b 	add.w	r0, r4, #11
 8010baa:	1d23      	adds	r3, r4, #4
 8010bac:	f020 0007 	bic.w	r0, r0, #7
 8010bb0:	1ac2      	subs	r2, r0, r3
 8010bb2:	bf1c      	itt	ne
 8010bb4:	1a1b      	subne	r3, r3, r0
 8010bb6:	50a3      	strne	r3, [r4, r2]
 8010bb8:	e7af      	b.n	8010b1a <_malloc_r+0x22>
 8010bba:	6862      	ldr	r2, [r4, #4]
 8010bbc:	42a3      	cmp	r3, r4
 8010bbe:	bf0c      	ite	eq
 8010bc0:	f8c8 2000 	streq.w	r2, [r8]
 8010bc4:	605a      	strne	r2, [r3, #4]
 8010bc6:	e7eb      	b.n	8010ba0 <_malloc_r+0xa8>
 8010bc8:	4623      	mov	r3, r4
 8010bca:	6864      	ldr	r4, [r4, #4]
 8010bcc:	e7ae      	b.n	8010b2c <_malloc_r+0x34>
 8010bce:	463c      	mov	r4, r7
 8010bd0:	687f      	ldr	r7, [r7, #4]
 8010bd2:	e7b6      	b.n	8010b42 <_malloc_r+0x4a>
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	42a3      	cmp	r3, r4
 8010bda:	d1fb      	bne.n	8010bd4 <_malloc_r+0xdc>
 8010bdc:	2300      	movs	r3, #0
 8010bde:	6053      	str	r3, [r2, #4]
 8010be0:	e7de      	b.n	8010ba0 <_malloc_r+0xa8>
 8010be2:	230c      	movs	r3, #12
 8010be4:	6033      	str	r3, [r6, #0]
 8010be6:	4630      	mov	r0, r6
 8010be8:	f000 f80c 	bl	8010c04 <__malloc_unlock>
 8010bec:	e794      	b.n	8010b18 <_malloc_r+0x20>
 8010bee:	6005      	str	r5, [r0, #0]
 8010bf0:	e7d6      	b.n	8010ba0 <_malloc_r+0xa8>
 8010bf2:	bf00      	nop
 8010bf4:	20001970 	.word	0x20001970

08010bf8 <__malloc_lock>:
 8010bf8:	4801      	ldr	r0, [pc, #4]	@ (8010c00 <__malloc_lock+0x8>)
 8010bfa:	f7ff b8aa 	b.w	800fd52 <__retarget_lock_acquire_recursive>
 8010bfe:	bf00      	nop
 8010c00:	20001968 	.word	0x20001968

08010c04 <__malloc_unlock>:
 8010c04:	4801      	ldr	r0, [pc, #4]	@ (8010c0c <__malloc_unlock+0x8>)
 8010c06:	f7ff b8a5 	b.w	800fd54 <__retarget_lock_release_recursive>
 8010c0a:	bf00      	nop
 8010c0c:	20001968 	.word	0x20001968

08010c10 <_Balloc>:
 8010c10:	b570      	push	{r4, r5, r6, lr}
 8010c12:	69c6      	ldr	r6, [r0, #28]
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	b976      	cbnz	r6, 8010c38 <_Balloc+0x28>
 8010c1a:	2010      	movs	r0, #16
 8010c1c:	f7ff ff42 	bl	8010aa4 <malloc>
 8010c20:	4602      	mov	r2, r0
 8010c22:	61e0      	str	r0, [r4, #28]
 8010c24:	b920      	cbnz	r0, 8010c30 <_Balloc+0x20>
 8010c26:	4b18      	ldr	r3, [pc, #96]	@ (8010c88 <_Balloc+0x78>)
 8010c28:	4818      	ldr	r0, [pc, #96]	@ (8010c8c <_Balloc+0x7c>)
 8010c2a:	216b      	movs	r1, #107	@ 0x6b
 8010c2c:	f000 ff74 	bl	8011b18 <__assert_func>
 8010c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c34:	6006      	str	r6, [r0, #0]
 8010c36:	60c6      	str	r6, [r0, #12]
 8010c38:	69e6      	ldr	r6, [r4, #28]
 8010c3a:	68f3      	ldr	r3, [r6, #12]
 8010c3c:	b183      	cbz	r3, 8010c60 <_Balloc+0x50>
 8010c3e:	69e3      	ldr	r3, [r4, #28]
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c46:	b9b8      	cbnz	r0, 8010c78 <_Balloc+0x68>
 8010c48:	2101      	movs	r1, #1
 8010c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8010c4e:	1d72      	adds	r2, r6, #5
 8010c50:	0092      	lsls	r2, r2, #2
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 ff7e 	bl	8011b54 <_calloc_r>
 8010c58:	b160      	cbz	r0, 8010c74 <_Balloc+0x64>
 8010c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c5e:	e00e      	b.n	8010c7e <_Balloc+0x6e>
 8010c60:	2221      	movs	r2, #33	@ 0x21
 8010c62:	2104      	movs	r1, #4
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 ff75 	bl	8011b54 <_calloc_r>
 8010c6a:	69e3      	ldr	r3, [r4, #28]
 8010c6c:	60f0      	str	r0, [r6, #12]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1e4      	bne.n	8010c3e <_Balloc+0x2e>
 8010c74:	2000      	movs	r0, #0
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
 8010c78:	6802      	ldr	r2, [r0, #0]
 8010c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c7e:	2300      	movs	r3, #0
 8010c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c84:	e7f7      	b.n	8010c76 <_Balloc+0x66>
 8010c86:	bf00      	nop
 8010c88:	08013439 	.word	0x08013439
 8010c8c:	080134b9 	.word	0x080134b9

08010c90 <_Bfree>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	69c6      	ldr	r6, [r0, #28]
 8010c94:	4605      	mov	r5, r0
 8010c96:	460c      	mov	r4, r1
 8010c98:	b976      	cbnz	r6, 8010cb8 <_Bfree+0x28>
 8010c9a:	2010      	movs	r0, #16
 8010c9c:	f7ff ff02 	bl	8010aa4 <malloc>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	61e8      	str	r0, [r5, #28]
 8010ca4:	b920      	cbnz	r0, 8010cb0 <_Bfree+0x20>
 8010ca6:	4b09      	ldr	r3, [pc, #36]	@ (8010ccc <_Bfree+0x3c>)
 8010ca8:	4809      	ldr	r0, [pc, #36]	@ (8010cd0 <_Bfree+0x40>)
 8010caa:	218f      	movs	r1, #143	@ 0x8f
 8010cac:	f000 ff34 	bl	8011b18 <__assert_func>
 8010cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cb4:	6006      	str	r6, [r0, #0]
 8010cb6:	60c6      	str	r6, [r0, #12]
 8010cb8:	b13c      	cbz	r4, 8010cca <_Bfree+0x3a>
 8010cba:	69eb      	ldr	r3, [r5, #28]
 8010cbc:	6862      	ldr	r2, [r4, #4]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cc4:	6021      	str	r1, [r4, #0]
 8010cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010cca:	bd70      	pop	{r4, r5, r6, pc}
 8010ccc:	08013439 	.word	0x08013439
 8010cd0:	080134b9 	.word	0x080134b9

08010cd4 <__multadd>:
 8010cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd8:	690d      	ldr	r5, [r1, #16]
 8010cda:	4607      	mov	r7, r0
 8010cdc:	460c      	mov	r4, r1
 8010cde:	461e      	mov	r6, r3
 8010ce0:	f101 0c14 	add.w	ip, r1, #20
 8010ce4:	2000      	movs	r0, #0
 8010ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8010cea:	b299      	uxth	r1, r3
 8010cec:	fb02 6101 	mla	r1, r2, r1, r6
 8010cf0:	0c1e      	lsrs	r6, r3, #16
 8010cf2:	0c0b      	lsrs	r3, r1, #16
 8010cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8010cf8:	b289      	uxth	r1, r1
 8010cfa:	3001      	adds	r0, #1
 8010cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d00:	4285      	cmp	r5, r0
 8010d02:	f84c 1b04 	str.w	r1, [ip], #4
 8010d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d0a:	dcec      	bgt.n	8010ce6 <__multadd+0x12>
 8010d0c:	b30e      	cbz	r6, 8010d52 <__multadd+0x7e>
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	42ab      	cmp	r3, r5
 8010d12:	dc19      	bgt.n	8010d48 <__multadd+0x74>
 8010d14:	6861      	ldr	r1, [r4, #4]
 8010d16:	4638      	mov	r0, r7
 8010d18:	3101      	adds	r1, #1
 8010d1a:	f7ff ff79 	bl	8010c10 <_Balloc>
 8010d1e:	4680      	mov	r8, r0
 8010d20:	b928      	cbnz	r0, 8010d2e <__multadd+0x5a>
 8010d22:	4602      	mov	r2, r0
 8010d24:	4b0c      	ldr	r3, [pc, #48]	@ (8010d58 <__multadd+0x84>)
 8010d26:	480d      	ldr	r0, [pc, #52]	@ (8010d5c <__multadd+0x88>)
 8010d28:	21ba      	movs	r1, #186	@ 0xba
 8010d2a:	f000 fef5 	bl	8011b18 <__assert_func>
 8010d2e:	6922      	ldr	r2, [r4, #16]
 8010d30:	3202      	adds	r2, #2
 8010d32:	f104 010c 	add.w	r1, r4, #12
 8010d36:	0092      	lsls	r2, r2, #2
 8010d38:	300c      	adds	r0, #12
 8010d3a:	f7ff f80c 	bl	800fd56 <memcpy>
 8010d3e:	4621      	mov	r1, r4
 8010d40:	4638      	mov	r0, r7
 8010d42:	f7ff ffa5 	bl	8010c90 <_Bfree>
 8010d46:	4644      	mov	r4, r8
 8010d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d4c:	3501      	adds	r5, #1
 8010d4e:	615e      	str	r6, [r3, #20]
 8010d50:	6125      	str	r5, [r4, #16]
 8010d52:	4620      	mov	r0, r4
 8010d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d58:	080134a8 	.word	0x080134a8
 8010d5c:	080134b9 	.word	0x080134b9

08010d60 <__hi0bits>:
 8010d60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010d64:	4603      	mov	r3, r0
 8010d66:	bf36      	itet	cc
 8010d68:	0403      	lslcc	r3, r0, #16
 8010d6a:	2000      	movcs	r0, #0
 8010d6c:	2010      	movcc	r0, #16
 8010d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d72:	bf3c      	itt	cc
 8010d74:	021b      	lslcc	r3, r3, #8
 8010d76:	3008      	addcc	r0, #8
 8010d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d7c:	bf3c      	itt	cc
 8010d7e:	011b      	lslcc	r3, r3, #4
 8010d80:	3004      	addcc	r0, #4
 8010d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d86:	bf3c      	itt	cc
 8010d88:	009b      	lslcc	r3, r3, #2
 8010d8a:	3002      	addcc	r0, #2
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	db05      	blt.n	8010d9c <__hi0bits+0x3c>
 8010d90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010d94:	f100 0001 	add.w	r0, r0, #1
 8010d98:	bf08      	it	eq
 8010d9a:	2020      	moveq	r0, #32
 8010d9c:	4770      	bx	lr

08010d9e <__lo0bits>:
 8010d9e:	6803      	ldr	r3, [r0, #0]
 8010da0:	4602      	mov	r2, r0
 8010da2:	f013 0007 	ands.w	r0, r3, #7
 8010da6:	d00b      	beq.n	8010dc0 <__lo0bits+0x22>
 8010da8:	07d9      	lsls	r1, r3, #31
 8010daa:	d421      	bmi.n	8010df0 <__lo0bits+0x52>
 8010dac:	0798      	lsls	r0, r3, #30
 8010dae:	bf49      	itett	mi
 8010db0:	085b      	lsrmi	r3, r3, #1
 8010db2:	089b      	lsrpl	r3, r3, #2
 8010db4:	2001      	movmi	r0, #1
 8010db6:	6013      	strmi	r3, [r2, #0]
 8010db8:	bf5c      	itt	pl
 8010dba:	6013      	strpl	r3, [r2, #0]
 8010dbc:	2002      	movpl	r0, #2
 8010dbe:	4770      	bx	lr
 8010dc0:	b299      	uxth	r1, r3
 8010dc2:	b909      	cbnz	r1, 8010dc8 <__lo0bits+0x2a>
 8010dc4:	0c1b      	lsrs	r3, r3, #16
 8010dc6:	2010      	movs	r0, #16
 8010dc8:	b2d9      	uxtb	r1, r3
 8010dca:	b909      	cbnz	r1, 8010dd0 <__lo0bits+0x32>
 8010dcc:	3008      	adds	r0, #8
 8010dce:	0a1b      	lsrs	r3, r3, #8
 8010dd0:	0719      	lsls	r1, r3, #28
 8010dd2:	bf04      	itt	eq
 8010dd4:	091b      	lsreq	r3, r3, #4
 8010dd6:	3004      	addeq	r0, #4
 8010dd8:	0799      	lsls	r1, r3, #30
 8010dda:	bf04      	itt	eq
 8010ddc:	089b      	lsreq	r3, r3, #2
 8010dde:	3002      	addeq	r0, #2
 8010de0:	07d9      	lsls	r1, r3, #31
 8010de2:	d403      	bmi.n	8010dec <__lo0bits+0x4e>
 8010de4:	085b      	lsrs	r3, r3, #1
 8010de6:	f100 0001 	add.w	r0, r0, #1
 8010dea:	d003      	beq.n	8010df4 <__lo0bits+0x56>
 8010dec:	6013      	str	r3, [r2, #0]
 8010dee:	4770      	bx	lr
 8010df0:	2000      	movs	r0, #0
 8010df2:	4770      	bx	lr
 8010df4:	2020      	movs	r0, #32
 8010df6:	4770      	bx	lr

08010df8 <__i2b>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	f7ff ff07 	bl	8010c10 <_Balloc>
 8010e02:	4602      	mov	r2, r0
 8010e04:	b928      	cbnz	r0, 8010e12 <__i2b+0x1a>
 8010e06:	4b05      	ldr	r3, [pc, #20]	@ (8010e1c <__i2b+0x24>)
 8010e08:	4805      	ldr	r0, [pc, #20]	@ (8010e20 <__i2b+0x28>)
 8010e0a:	f240 1145 	movw	r1, #325	@ 0x145
 8010e0e:	f000 fe83 	bl	8011b18 <__assert_func>
 8010e12:	2301      	movs	r3, #1
 8010e14:	6144      	str	r4, [r0, #20]
 8010e16:	6103      	str	r3, [r0, #16]
 8010e18:	bd10      	pop	{r4, pc}
 8010e1a:	bf00      	nop
 8010e1c:	080134a8 	.word	0x080134a8
 8010e20:	080134b9 	.word	0x080134b9

08010e24 <__multiply>:
 8010e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e28:	4614      	mov	r4, r2
 8010e2a:	690a      	ldr	r2, [r1, #16]
 8010e2c:	6923      	ldr	r3, [r4, #16]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	bfa8      	it	ge
 8010e32:	4623      	movge	r3, r4
 8010e34:	460f      	mov	r7, r1
 8010e36:	bfa4      	itt	ge
 8010e38:	460c      	movge	r4, r1
 8010e3a:	461f      	movge	r7, r3
 8010e3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010e40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010e44:	68a3      	ldr	r3, [r4, #8]
 8010e46:	6861      	ldr	r1, [r4, #4]
 8010e48:	eb0a 0609 	add.w	r6, sl, r9
 8010e4c:	42b3      	cmp	r3, r6
 8010e4e:	b085      	sub	sp, #20
 8010e50:	bfb8      	it	lt
 8010e52:	3101      	addlt	r1, #1
 8010e54:	f7ff fedc 	bl	8010c10 <_Balloc>
 8010e58:	b930      	cbnz	r0, 8010e68 <__multiply+0x44>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	4b44      	ldr	r3, [pc, #272]	@ (8010f70 <__multiply+0x14c>)
 8010e5e:	4845      	ldr	r0, [pc, #276]	@ (8010f74 <__multiply+0x150>)
 8010e60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010e64:	f000 fe58 	bl	8011b18 <__assert_func>
 8010e68:	f100 0514 	add.w	r5, r0, #20
 8010e6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010e70:	462b      	mov	r3, r5
 8010e72:	2200      	movs	r2, #0
 8010e74:	4543      	cmp	r3, r8
 8010e76:	d321      	bcc.n	8010ebc <__multiply+0x98>
 8010e78:	f107 0114 	add.w	r1, r7, #20
 8010e7c:	f104 0214 	add.w	r2, r4, #20
 8010e80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010e84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010e88:	9302      	str	r3, [sp, #8]
 8010e8a:	1b13      	subs	r3, r2, r4
 8010e8c:	3b15      	subs	r3, #21
 8010e8e:	f023 0303 	bic.w	r3, r3, #3
 8010e92:	3304      	adds	r3, #4
 8010e94:	f104 0715 	add.w	r7, r4, #21
 8010e98:	42ba      	cmp	r2, r7
 8010e9a:	bf38      	it	cc
 8010e9c:	2304      	movcc	r3, #4
 8010e9e:	9301      	str	r3, [sp, #4]
 8010ea0:	9b02      	ldr	r3, [sp, #8]
 8010ea2:	9103      	str	r1, [sp, #12]
 8010ea4:	428b      	cmp	r3, r1
 8010ea6:	d80c      	bhi.n	8010ec2 <__multiply+0x9e>
 8010ea8:	2e00      	cmp	r6, #0
 8010eaa:	dd03      	ble.n	8010eb4 <__multiply+0x90>
 8010eac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d05b      	beq.n	8010f6c <__multiply+0x148>
 8010eb4:	6106      	str	r6, [r0, #16]
 8010eb6:	b005      	add	sp, #20
 8010eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ebc:	f843 2b04 	str.w	r2, [r3], #4
 8010ec0:	e7d8      	b.n	8010e74 <__multiply+0x50>
 8010ec2:	f8b1 a000 	ldrh.w	sl, [r1]
 8010ec6:	f1ba 0f00 	cmp.w	sl, #0
 8010eca:	d024      	beq.n	8010f16 <__multiply+0xf2>
 8010ecc:	f104 0e14 	add.w	lr, r4, #20
 8010ed0:	46a9      	mov	r9, r5
 8010ed2:	f04f 0c00 	mov.w	ip, #0
 8010ed6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010eda:	f8d9 3000 	ldr.w	r3, [r9]
 8010ede:	fa1f fb87 	uxth.w	fp, r7
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	fb0a 330b 	mla	r3, sl, fp, r3
 8010ee8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010eec:	f8d9 7000 	ldr.w	r7, [r9]
 8010ef0:	4463      	add	r3, ip
 8010ef2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010ef6:	fb0a c70b 	mla	r7, sl, fp, ip
 8010efa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010f04:	4572      	cmp	r2, lr
 8010f06:	f849 3b04 	str.w	r3, [r9], #4
 8010f0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010f0e:	d8e2      	bhi.n	8010ed6 <__multiply+0xb2>
 8010f10:	9b01      	ldr	r3, [sp, #4]
 8010f12:	f845 c003 	str.w	ip, [r5, r3]
 8010f16:	9b03      	ldr	r3, [sp, #12]
 8010f18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f1c:	3104      	adds	r1, #4
 8010f1e:	f1b9 0f00 	cmp.w	r9, #0
 8010f22:	d021      	beq.n	8010f68 <__multiply+0x144>
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	f104 0c14 	add.w	ip, r4, #20
 8010f2a:	46ae      	mov	lr, r5
 8010f2c:	f04f 0a00 	mov.w	sl, #0
 8010f30:	f8bc b000 	ldrh.w	fp, [ip]
 8010f34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010f38:	fb09 770b 	mla	r7, r9, fp, r7
 8010f3c:	4457      	add	r7, sl
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010f44:	f84e 3b04 	str.w	r3, [lr], #4
 8010f48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010f4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f50:	f8be 3000 	ldrh.w	r3, [lr]
 8010f54:	fb09 330a 	mla	r3, r9, sl, r3
 8010f58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010f5c:	4562      	cmp	r2, ip
 8010f5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f62:	d8e5      	bhi.n	8010f30 <__multiply+0x10c>
 8010f64:	9f01      	ldr	r7, [sp, #4]
 8010f66:	51eb      	str	r3, [r5, r7]
 8010f68:	3504      	adds	r5, #4
 8010f6a:	e799      	b.n	8010ea0 <__multiply+0x7c>
 8010f6c:	3e01      	subs	r6, #1
 8010f6e:	e79b      	b.n	8010ea8 <__multiply+0x84>
 8010f70:	080134a8 	.word	0x080134a8
 8010f74:	080134b9 	.word	0x080134b9

08010f78 <__pow5mult>:
 8010f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f7c:	4615      	mov	r5, r2
 8010f7e:	f012 0203 	ands.w	r2, r2, #3
 8010f82:	4607      	mov	r7, r0
 8010f84:	460e      	mov	r6, r1
 8010f86:	d007      	beq.n	8010f98 <__pow5mult+0x20>
 8010f88:	4c25      	ldr	r4, [pc, #148]	@ (8011020 <__pow5mult+0xa8>)
 8010f8a:	3a01      	subs	r2, #1
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f92:	f7ff fe9f 	bl	8010cd4 <__multadd>
 8010f96:	4606      	mov	r6, r0
 8010f98:	10ad      	asrs	r5, r5, #2
 8010f9a:	d03d      	beq.n	8011018 <__pow5mult+0xa0>
 8010f9c:	69fc      	ldr	r4, [r7, #28]
 8010f9e:	b97c      	cbnz	r4, 8010fc0 <__pow5mult+0x48>
 8010fa0:	2010      	movs	r0, #16
 8010fa2:	f7ff fd7f 	bl	8010aa4 <malloc>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	61f8      	str	r0, [r7, #28]
 8010faa:	b928      	cbnz	r0, 8010fb8 <__pow5mult+0x40>
 8010fac:	4b1d      	ldr	r3, [pc, #116]	@ (8011024 <__pow5mult+0xac>)
 8010fae:	481e      	ldr	r0, [pc, #120]	@ (8011028 <__pow5mult+0xb0>)
 8010fb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010fb4:	f000 fdb0 	bl	8011b18 <__assert_func>
 8010fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fbc:	6004      	str	r4, [r0, #0]
 8010fbe:	60c4      	str	r4, [r0, #12]
 8010fc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fc8:	b94c      	cbnz	r4, 8010fde <__pow5mult+0x66>
 8010fca:	f240 2171 	movw	r1, #625	@ 0x271
 8010fce:	4638      	mov	r0, r7
 8010fd0:	f7ff ff12 	bl	8010df8 <__i2b>
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fda:	4604      	mov	r4, r0
 8010fdc:	6003      	str	r3, [r0, #0]
 8010fde:	f04f 0900 	mov.w	r9, #0
 8010fe2:	07eb      	lsls	r3, r5, #31
 8010fe4:	d50a      	bpl.n	8010ffc <__pow5mult+0x84>
 8010fe6:	4631      	mov	r1, r6
 8010fe8:	4622      	mov	r2, r4
 8010fea:	4638      	mov	r0, r7
 8010fec:	f7ff ff1a 	bl	8010e24 <__multiply>
 8010ff0:	4631      	mov	r1, r6
 8010ff2:	4680      	mov	r8, r0
 8010ff4:	4638      	mov	r0, r7
 8010ff6:	f7ff fe4b 	bl	8010c90 <_Bfree>
 8010ffa:	4646      	mov	r6, r8
 8010ffc:	106d      	asrs	r5, r5, #1
 8010ffe:	d00b      	beq.n	8011018 <__pow5mult+0xa0>
 8011000:	6820      	ldr	r0, [r4, #0]
 8011002:	b938      	cbnz	r0, 8011014 <__pow5mult+0x9c>
 8011004:	4622      	mov	r2, r4
 8011006:	4621      	mov	r1, r4
 8011008:	4638      	mov	r0, r7
 801100a:	f7ff ff0b 	bl	8010e24 <__multiply>
 801100e:	6020      	str	r0, [r4, #0]
 8011010:	f8c0 9000 	str.w	r9, [r0]
 8011014:	4604      	mov	r4, r0
 8011016:	e7e4      	b.n	8010fe2 <__pow5mult+0x6a>
 8011018:	4630      	mov	r0, r6
 801101a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801101e:	bf00      	nop
 8011020:	08013514 	.word	0x08013514
 8011024:	08013439 	.word	0x08013439
 8011028:	080134b9 	.word	0x080134b9

0801102c <__lshift>:
 801102c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011030:	460c      	mov	r4, r1
 8011032:	6849      	ldr	r1, [r1, #4]
 8011034:	6923      	ldr	r3, [r4, #16]
 8011036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801103a:	68a3      	ldr	r3, [r4, #8]
 801103c:	4607      	mov	r7, r0
 801103e:	4691      	mov	r9, r2
 8011040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011044:	f108 0601 	add.w	r6, r8, #1
 8011048:	42b3      	cmp	r3, r6
 801104a:	db0b      	blt.n	8011064 <__lshift+0x38>
 801104c:	4638      	mov	r0, r7
 801104e:	f7ff fddf 	bl	8010c10 <_Balloc>
 8011052:	4605      	mov	r5, r0
 8011054:	b948      	cbnz	r0, 801106a <__lshift+0x3e>
 8011056:	4602      	mov	r2, r0
 8011058:	4b28      	ldr	r3, [pc, #160]	@ (80110fc <__lshift+0xd0>)
 801105a:	4829      	ldr	r0, [pc, #164]	@ (8011100 <__lshift+0xd4>)
 801105c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011060:	f000 fd5a 	bl	8011b18 <__assert_func>
 8011064:	3101      	adds	r1, #1
 8011066:	005b      	lsls	r3, r3, #1
 8011068:	e7ee      	b.n	8011048 <__lshift+0x1c>
 801106a:	2300      	movs	r3, #0
 801106c:	f100 0114 	add.w	r1, r0, #20
 8011070:	f100 0210 	add.w	r2, r0, #16
 8011074:	4618      	mov	r0, r3
 8011076:	4553      	cmp	r3, sl
 8011078:	db33      	blt.n	80110e2 <__lshift+0xb6>
 801107a:	6920      	ldr	r0, [r4, #16]
 801107c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011080:	f104 0314 	add.w	r3, r4, #20
 8011084:	f019 091f 	ands.w	r9, r9, #31
 8011088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801108c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011090:	d02b      	beq.n	80110ea <__lshift+0xbe>
 8011092:	f1c9 0e20 	rsb	lr, r9, #32
 8011096:	468a      	mov	sl, r1
 8011098:	2200      	movs	r2, #0
 801109a:	6818      	ldr	r0, [r3, #0]
 801109c:	fa00 f009 	lsl.w	r0, r0, r9
 80110a0:	4310      	orrs	r0, r2
 80110a2:	f84a 0b04 	str.w	r0, [sl], #4
 80110a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80110aa:	459c      	cmp	ip, r3
 80110ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80110b0:	d8f3      	bhi.n	801109a <__lshift+0x6e>
 80110b2:	ebac 0304 	sub.w	r3, ip, r4
 80110b6:	3b15      	subs	r3, #21
 80110b8:	f023 0303 	bic.w	r3, r3, #3
 80110bc:	3304      	adds	r3, #4
 80110be:	f104 0015 	add.w	r0, r4, #21
 80110c2:	4584      	cmp	ip, r0
 80110c4:	bf38      	it	cc
 80110c6:	2304      	movcc	r3, #4
 80110c8:	50ca      	str	r2, [r1, r3]
 80110ca:	b10a      	cbz	r2, 80110d0 <__lshift+0xa4>
 80110cc:	f108 0602 	add.w	r6, r8, #2
 80110d0:	3e01      	subs	r6, #1
 80110d2:	4638      	mov	r0, r7
 80110d4:	612e      	str	r6, [r5, #16]
 80110d6:	4621      	mov	r1, r4
 80110d8:	f7ff fdda 	bl	8010c90 <_Bfree>
 80110dc:	4628      	mov	r0, r5
 80110de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80110e6:	3301      	adds	r3, #1
 80110e8:	e7c5      	b.n	8011076 <__lshift+0x4a>
 80110ea:	3904      	subs	r1, #4
 80110ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80110f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80110f4:	459c      	cmp	ip, r3
 80110f6:	d8f9      	bhi.n	80110ec <__lshift+0xc0>
 80110f8:	e7ea      	b.n	80110d0 <__lshift+0xa4>
 80110fa:	bf00      	nop
 80110fc:	080134a8 	.word	0x080134a8
 8011100:	080134b9 	.word	0x080134b9

08011104 <__mcmp>:
 8011104:	690a      	ldr	r2, [r1, #16]
 8011106:	4603      	mov	r3, r0
 8011108:	6900      	ldr	r0, [r0, #16]
 801110a:	1a80      	subs	r0, r0, r2
 801110c:	b530      	push	{r4, r5, lr}
 801110e:	d10e      	bne.n	801112e <__mcmp+0x2a>
 8011110:	3314      	adds	r3, #20
 8011112:	3114      	adds	r1, #20
 8011114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801111c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011124:	4295      	cmp	r5, r2
 8011126:	d003      	beq.n	8011130 <__mcmp+0x2c>
 8011128:	d205      	bcs.n	8011136 <__mcmp+0x32>
 801112a:	f04f 30ff 	mov.w	r0, #4294967295
 801112e:	bd30      	pop	{r4, r5, pc}
 8011130:	42a3      	cmp	r3, r4
 8011132:	d3f3      	bcc.n	801111c <__mcmp+0x18>
 8011134:	e7fb      	b.n	801112e <__mcmp+0x2a>
 8011136:	2001      	movs	r0, #1
 8011138:	e7f9      	b.n	801112e <__mcmp+0x2a>
	...

0801113c <__mdiff>:
 801113c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011140:	4689      	mov	r9, r1
 8011142:	4606      	mov	r6, r0
 8011144:	4611      	mov	r1, r2
 8011146:	4648      	mov	r0, r9
 8011148:	4614      	mov	r4, r2
 801114a:	f7ff ffdb 	bl	8011104 <__mcmp>
 801114e:	1e05      	subs	r5, r0, #0
 8011150:	d112      	bne.n	8011178 <__mdiff+0x3c>
 8011152:	4629      	mov	r1, r5
 8011154:	4630      	mov	r0, r6
 8011156:	f7ff fd5b 	bl	8010c10 <_Balloc>
 801115a:	4602      	mov	r2, r0
 801115c:	b928      	cbnz	r0, 801116a <__mdiff+0x2e>
 801115e:	4b3f      	ldr	r3, [pc, #252]	@ (801125c <__mdiff+0x120>)
 8011160:	f240 2137 	movw	r1, #567	@ 0x237
 8011164:	483e      	ldr	r0, [pc, #248]	@ (8011260 <__mdiff+0x124>)
 8011166:	f000 fcd7 	bl	8011b18 <__assert_func>
 801116a:	2301      	movs	r3, #1
 801116c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011170:	4610      	mov	r0, r2
 8011172:	b003      	add	sp, #12
 8011174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011178:	bfbc      	itt	lt
 801117a:	464b      	movlt	r3, r9
 801117c:	46a1      	movlt	r9, r4
 801117e:	4630      	mov	r0, r6
 8011180:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011184:	bfba      	itte	lt
 8011186:	461c      	movlt	r4, r3
 8011188:	2501      	movlt	r5, #1
 801118a:	2500      	movge	r5, #0
 801118c:	f7ff fd40 	bl	8010c10 <_Balloc>
 8011190:	4602      	mov	r2, r0
 8011192:	b918      	cbnz	r0, 801119c <__mdiff+0x60>
 8011194:	4b31      	ldr	r3, [pc, #196]	@ (801125c <__mdiff+0x120>)
 8011196:	f240 2145 	movw	r1, #581	@ 0x245
 801119a:	e7e3      	b.n	8011164 <__mdiff+0x28>
 801119c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80111a0:	6926      	ldr	r6, [r4, #16]
 80111a2:	60c5      	str	r5, [r0, #12]
 80111a4:	f109 0310 	add.w	r3, r9, #16
 80111a8:	f109 0514 	add.w	r5, r9, #20
 80111ac:	f104 0e14 	add.w	lr, r4, #20
 80111b0:	f100 0b14 	add.w	fp, r0, #20
 80111b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80111b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	46d9      	mov	r9, fp
 80111c0:	f04f 0c00 	mov.w	ip, #0
 80111c4:	9b01      	ldr	r3, [sp, #4]
 80111c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80111ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80111ce:	9301      	str	r3, [sp, #4]
 80111d0:	fa1f f38a 	uxth.w	r3, sl
 80111d4:	4619      	mov	r1, r3
 80111d6:	b283      	uxth	r3, r0
 80111d8:	1acb      	subs	r3, r1, r3
 80111da:	0c00      	lsrs	r0, r0, #16
 80111dc:	4463      	add	r3, ip
 80111de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80111e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80111ec:	4576      	cmp	r6, lr
 80111ee:	f849 3b04 	str.w	r3, [r9], #4
 80111f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80111f6:	d8e5      	bhi.n	80111c4 <__mdiff+0x88>
 80111f8:	1b33      	subs	r3, r6, r4
 80111fa:	3b15      	subs	r3, #21
 80111fc:	f023 0303 	bic.w	r3, r3, #3
 8011200:	3415      	adds	r4, #21
 8011202:	3304      	adds	r3, #4
 8011204:	42a6      	cmp	r6, r4
 8011206:	bf38      	it	cc
 8011208:	2304      	movcc	r3, #4
 801120a:	441d      	add	r5, r3
 801120c:	445b      	add	r3, fp
 801120e:	461e      	mov	r6, r3
 8011210:	462c      	mov	r4, r5
 8011212:	4544      	cmp	r4, r8
 8011214:	d30e      	bcc.n	8011234 <__mdiff+0xf8>
 8011216:	f108 0103 	add.w	r1, r8, #3
 801121a:	1b49      	subs	r1, r1, r5
 801121c:	f021 0103 	bic.w	r1, r1, #3
 8011220:	3d03      	subs	r5, #3
 8011222:	45a8      	cmp	r8, r5
 8011224:	bf38      	it	cc
 8011226:	2100      	movcc	r1, #0
 8011228:	440b      	add	r3, r1
 801122a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801122e:	b191      	cbz	r1, 8011256 <__mdiff+0x11a>
 8011230:	6117      	str	r7, [r2, #16]
 8011232:	e79d      	b.n	8011170 <__mdiff+0x34>
 8011234:	f854 1b04 	ldr.w	r1, [r4], #4
 8011238:	46e6      	mov	lr, ip
 801123a:	0c08      	lsrs	r0, r1, #16
 801123c:	fa1c fc81 	uxtah	ip, ip, r1
 8011240:	4471      	add	r1, lr
 8011242:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011246:	b289      	uxth	r1, r1
 8011248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801124c:	f846 1b04 	str.w	r1, [r6], #4
 8011250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011254:	e7dd      	b.n	8011212 <__mdiff+0xd6>
 8011256:	3f01      	subs	r7, #1
 8011258:	e7e7      	b.n	801122a <__mdiff+0xee>
 801125a:	bf00      	nop
 801125c:	080134a8 	.word	0x080134a8
 8011260:	080134b9 	.word	0x080134b9

08011264 <__d2b>:
 8011264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011268:	460f      	mov	r7, r1
 801126a:	2101      	movs	r1, #1
 801126c:	ec59 8b10 	vmov	r8, r9, d0
 8011270:	4616      	mov	r6, r2
 8011272:	f7ff fccd 	bl	8010c10 <_Balloc>
 8011276:	4604      	mov	r4, r0
 8011278:	b930      	cbnz	r0, 8011288 <__d2b+0x24>
 801127a:	4602      	mov	r2, r0
 801127c:	4b23      	ldr	r3, [pc, #140]	@ (801130c <__d2b+0xa8>)
 801127e:	4824      	ldr	r0, [pc, #144]	@ (8011310 <__d2b+0xac>)
 8011280:	f240 310f 	movw	r1, #783	@ 0x30f
 8011284:	f000 fc48 	bl	8011b18 <__assert_func>
 8011288:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801128c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011290:	b10d      	cbz	r5, 8011296 <__d2b+0x32>
 8011292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011296:	9301      	str	r3, [sp, #4]
 8011298:	f1b8 0300 	subs.w	r3, r8, #0
 801129c:	d023      	beq.n	80112e6 <__d2b+0x82>
 801129e:	4668      	mov	r0, sp
 80112a0:	9300      	str	r3, [sp, #0]
 80112a2:	f7ff fd7c 	bl	8010d9e <__lo0bits>
 80112a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80112aa:	b1d0      	cbz	r0, 80112e2 <__d2b+0x7e>
 80112ac:	f1c0 0320 	rsb	r3, r0, #32
 80112b0:	fa02 f303 	lsl.w	r3, r2, r3
 80112b4:	430b      	orrs	r3, r1
 80112b6:	40c2      	lsrs	r2, r0
 80112b8:	6163      	str	r3, [r4, #20]
 80112ba:	9201      	str	r2, [sp, #4]
 80112bc:	9b01      	ldr	r3, [sp, #4]
 80112be:	61a3      	str	r3, [r4, #24]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	bf0c      	ite	eq
 80112c4:	2201      	moveq	r2, #1
 80112c6:	2202      	movne	r2, #2
 80112c8:	6122      	str	r2, [r4, #16]
 80112ca:	b1a5      	cbz	r5, 80112f6 <__d2b+0x92>
 80112cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80112d0:	4405      	add	r5, r0
 80112d2:	603d      	str	r5, [r7, #0]
 80112d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80112d8:	6030      	str	r0, [r6, #0]
 80112da:	4620      	mov	r0, r4
 80112dc:	b003      	add	sp, #12
 80112de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112e2:	6161      	str	r1, [r4, #20]
 80112e4:	e7ea      	b.n	80112bc <__d2b+0x58>
 80112e6:	a801      	add	r0, sp, #4
 80112e8:	f7ff fd59 	bl	8010d9e <__lo0bits>
 80112ec:	9b01      	ldr	r3, [sp, #4]
 80112ee:	6163      	str	r3, [r4, #20]
 80112f0:	3020      	adds	r0, #32
 80112f2:	2201      	movs	r2, #1
 80112f4:	e7e8      	b.n	80112c8 <__d2b+0x64>
 80112f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80112fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80112fe:	6038      	str	r0, [r7, #0]
 8011300:	6918      	ldr	r0, [r3, #16]
 8011302:	f7ff fd2d 	bl	8010d60 <__hi0bits>
 8011306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801130a:	e7e5      	b.n	80112d8 <__d2b+0x74>
 801130c:	080134a8 	.word	0x080134a8
 8011310:	080134b9 	.word	0x080134b9

08011314 <__ssputs_r>:
 8011314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011318:	688e      	ldr	r6, [r1, #8]
 801131a:	461f      	mov	r7, r3
 801131c:	42be      	cmp	r6, r7
 801131e:	680b      	ldr	r3, [r1, #0]
 8011320:	4682      	mov	sl, r0
 8011322:	460c      	mov	r4, r1
 8011324:	4690      	mov	r8, r2
 8011326:	d82d      	bhi.n	8011384 <__ssputs_r+0x70>
 8011328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801132c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011330:	d026      	beq.n	8011380 <__ssputs_r+0x6c>
 8011332:	6965      	ldr	r5, [r4, #20]
 8011334:	6909      	ldr	r1, [r1, #16]
 8011336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801133a:	eba3 0901 	sub.w	r9, r3, r1
 801133e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011342:	1c7b      	adds	r3, r7, #1
 8011344:	444b      	add	r3, r9
 8011346:	106d      	asrs	r5, r5, #1
 8011348:	429d      	cmp	r5, r3
 801134a:	bf38      	it	cc
 801134c:	461d      	movcc	r5, r3
 801134e:	0553      	lsls	r3, r2, #21
 8011350:	d527      	bpl.n	80113a2 <__ssputs_r+0x8e>
 8011352:	4629      	mov	r1, r5
 8011354:	f7ff fbd0 	bl	8010af8 <_malloc_r>
 8011358:	4606      	mov	r6, r0
 801135a:	b360      	cbz	r0, 80113b6 <__ssputs_r+0xa2>
 801135c:	6921      	ldr	r1, [r4, #16]
 801135e:	464a      	mov	r2, r9
 8011360:	f7fe fcf9 	bl	800fd56 <memcpy>
 8011364:	89a3      	ldrh	r3, [r4, #12]
 8011366:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801136a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801136e:	81a3      	strh	r3, [r4, #12]
 8011370:	6126      	str	r6, [r4, #16]
 8011372:	6165      	str	r5, [r4, #20]
 8011374:	444e      	add	r6, r9
 8011376:	eba5 0509 	sub.w	r5, r5, r9
 801137a:	6026      	str	r6, [r4, #0]
 801137c:	60a5      	str	r5, [r4, #8]
 801137e:	463e      	mov	r6, r7
 8011380:	42be      	cmp	r6, r7
 8011382:	d900      	bls.n	8011386 <__ssputs_r+0x72>
 8011384:	463e      	mov	r6, r7
 8011386:	6820      	ldr	r0, [r4, #0]
 8011388:	4632      	mov	r2, r6
 801138a:	4641      	mov	r1, r8
 801138c:	f000 fb6a 	bl	8011a64 <memmove>
 8011390:	68a3      	ldr	r3, [r4, #8]
 8011392:	1b9b      	subs	r3, r3, r6
 8011394:	60a3      	str	r3, [r4, #8]
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	4433      	add	r3, r6
 801139a:	6023      	str	r3, [r4, #0]
 801139c:	2000      	movs	r0, #0
 801139e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a2:	462a      	mov	r2, r5
 80113a4:	f000 fbfc 	bl	8011ba0 <_realloc_r>
 80113a8:	4606      	mov	r6, r0
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d1e0      	bne.n	8011370 <__ssputs_r+0x5c>
 80113ae:	6921      	ldr	r1, [r4, #16]
 80113b0:	4650      	mov	r0, sl
 80113b2:	f7ff fb2d 	bl	8010a10 <_free_r>
 80113b6:	230c      	movs	r3, #12
 80113b8:	f8ca 3000 	str.w	r3, [sl]
 80113bc:	89a3      	ldrh	r3, [r4, #12]
 80113be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113c2:	81a3      	strh	r3, [r4, #12]
 80113c4:	f04f 30ff 	mov.w	r0, #4294967295
 80113c8:	e7e9      	b.n	801139e <__ssputs_r+0x8a>
	...

080113cc <_svfiprintf_r>:
 80113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d0:	4698      	mov	r8, r3
 80113d2:	898b      	ldrh	r3, [r1, #12]
 80113d4:	061b      	lsls	r3, r3, #24
 80113d6:	b09d      	sub	sp, #116	@ 0x74
 80113d8:	4607      	mov	r7, r0
 80113da:	460d      	mov	r5, r1
 80113dc:	4614      	mov	r4, r2
 80113de:	d510      	bpl.n	8011402 <_svfiprintf_r+0x36>
 80113e0:	690b      	ldr	r3, [r1, #16]
 80113e2:	b973      	cbnz	r3, 8011402 <_svfiprintf_r+0x36>
 80113e4:	2140      	movs	r1, #64	@ 0x40
 80113e6:	f7ff fb87 	bl	8010af8 <_malloc_r>
 80113ea:	6028      	str	r0, [r5, #0]
 80113ec:	6128      	str	r0, [r5, #16]
 80113ee:	b930      	cbnz	r0, 80113fe <_svfiprintf_r+0x32>
 80113f0:	230c      	movs	r3, #12
 80113f2:	603b      	str	r3, [r7, #0]
 80113f4:	f04f 30ff 	mov.w	r0, #4294967295
 80113f8:	b01d      	add	sp, #116	@ 0x74
 80113fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113fe:	2340      	movs	r3, #64	@ 0x40
 8011400:	616b      	str	r3, [r5, #20]
 8011402:	2300      	movs	r3, #0
 8011404:	9309      	str	r3, [sp, #36]	@ 0x24
 8011406:	2320      	movs	r3, #32
 8011408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801140c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011410:	2330      	movs	r3, #48	@ 0x30
 8011412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80115b0 <_svfiprintf_r+0x1e4>
 8011416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801141a:	f04f 0901 	mov.w	r9, #1
 801141e:	4623      	mov	r3, r4
 8011420:	469a      	mov	sl, r3
 8011422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011426:	b10a      	cbz	r2, 801142c <_svfiprintf_r+0x60>
 8011428:	2a25      	cmp	r2, #37	@ 0x25
 801142a:	d1f9      	bne.n	8011420 <_svfiprintf_r+0x54>
 801142c:	ebba 0b04 	subs.w	fp, sl, r4
 8011430:	d00b      	beq.n	801144a <_svfiprintf_r+0x7e>
 8011432:	465b      	mov	r3, fp
 8011434:	4622      	mov	r2, r4
 8011436:	4629      	mov	r1, r5
 8011438:	4638      	mov	r0, r7
 801143a:	f7ff ff6b 	bl	8011314 <__ssputs_r>
 801143e:	3001      	adds	r0, #1
 8011440:	f000 80a7 	beq.w	8011592 <_svfiprintf_r+0x1c6>
 8011444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011446:	445a      	add	r2, fp
 8011448:	9209      	str	r2, [sp, #36]	@ 0x24
 801144a:	f89a 3000 	ldrb.w	r3, [sl]
 801144e:	2b00      	cmp	r3, #0
 8011450:	f000 809f 	beq.w	8011592 <_svfiprintf_r+0x1c6>
 8011454:	2300      	movs	r3, #0
 8011456:	f04f 32ff 	mov.w	r2, #4294967295
 801145a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801145e:	f10a 0a01 	add.w	sl, sl, #1
 8011462:	9304      	str	r3, [sp, #16]
 8011464:	9307      	str	r3, [sp, #28]
 8011466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801146a:	931a      	str	r3, [sp, #104]	@ 0x68
 801146c:	4654      	mov	r4, sl
 801146e:	2205      	movs	r2, #5
 8011470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011474:	484e      	ldr	r0, [pc, #312]	@ (80115b0 <_svfiprintf_r+0x1e4>)
 8011476:	f7ee fe83 	bl	8000180 <memchr>
 801147a:	9a04      	ldr	r2, [sp, #16]
 801147c:	b9d8      	cbnz	r0, 80114b6 <_svfiprintf_r+0xea>
 801147e:	06d0      	lsls	r0, r2, #27
 8011480:	bf44      	itt	mi
 8011482:	2320      	movmi	r3, #32
 8011484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011488:	0711      	lsls	r1, r2, #28
 801148a:	bf44      	itt	mi
 801148c:	232b      	movmi	r3, #43	@ 0x2b
 801148e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011492:	f89a 3000 	ldrb.w	r3, [sl]
 8011496:	2b2a      	cmp	r3, #42	@ 0x2a
 8011498:	d015      	beq.n	80114c6 <_svfiprintf_r+0xfa>
 801149a:	9a07      	ldr	r2, [sp, #28]
 801149c:	4654      	mov	r4, sl
 801149e:	2000      	movs	r0, #0
 80114a0:	f04f 0c0a 	mov.w	ip, #10
 80114a4:	4621      	mov	r1, r4
 80114a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114aa:	3b30      	subs	r3, #48	@ 0x30
 80114ac:	2b09      	cmp	r3, #9
 80114ae:	d94b      	bls.n	8011548 <_svfiprintf_r+0x17c>
 80114b0:	b1b0      	cbz	r0, 80114e0 <_svfiprintf_r+0x114>
 80114b2:	9207      	str	r2, [sp, #28]
 80114b4:	e014      	b.n	80114e0 <_svfiprintf_r+0x114>
 80114b6:	eba0 0308 	sub.w	r3, r0, r8
 80114ba:	fa09 f303 	lsl.w	r3, r9, r3
 80114be:	4313      	orrs	r3, r2
 80114c0:	9304      	str	r3, [sp, #16]
 80114c2:	46a2      	mov	sl, r4
 80114c4:	e7d2      	b.n	801146c <_svfiprintf_r+0xa0>
 80114c6:	9b03      	ldr	r3, [sp, #12]
 80114c8:	1d19      	adds	r1, r3, #4
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	9103      	str	r1, [sp, #12]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	bfbb      	ittet	lt
 80114d2:	425b      	neglt	r3, r3
 80114d4:	f042 0202 	orrlt.w	r2, r2, #2
 80114d8:	9307      	strge	r3, [sp, #28]
 80114da:	9307      	strlt	r3, [sp, #28]
 80114dc:	bfb8      	it	lt
 80114de:	9204      	strlt	r2, [sp, #16]
 80114e0:	7823      	ldrb	r3, [r4, #0]
 80114e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80114e4:	d10a      	bne.n	80114fc <_svfiprintf_r+0x130>
 80114e6:	7863      	ldrb	r3, [r4, #1]
 80114e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80114ea:	d132      	bne.n	8011552 <_svfiprintf_r+0x186>
 80114ec:	9b03      	ldr	r3, [sp, #12]
 80114ee:	1d1a      	adds	r2, r3, #4
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	9203      	str	r2, [sp, #12]
 80114f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114f8:	3402      	adds	r4, #2
 80114fa:	9305      	str	r3, [sp, #20]
 80114fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80115c0 <_svfiprintf_r+0x1f4>
 8011500:	7821      	ldrb	r1, [r4, #0]
 8011502:	2203      	movs	r2, #3
 8011504:	4650      	mov	r0, sl
 8011506:	f7ee fe3b 	bl	8000180 <memchr>
 801150a:	b138      	cbz	r0, 801151c <_svfiprintf_r+0x150>
 801150c:	9b04      	ldr	r3, [sp, #16]
 801150e:	eba0 000a 	sub.w	r0, r0, sl
 8011512:	2240      	movs	r2, #64	@ 0x40
 8011514:	4082      	lsls	r2, r0
 8011516:	4313      	orrs	r3, r2
 8011518:	3401      	adds	r4, #1
 801151a:	9304      	str	r3, [sp, #16]
 801151c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011520:	4824      	ldr	r0, [pc, #144]	@ (80115b4 <_svfiprintf_r+0x1e8>)
 8011522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011526:	2206      	movs	r2, #6
 8011528:	f7ee fe2a 	bl	8000180 <memchr>
 801152c:	2800      	cmp	r0, #0
 801152e:	d036      	beq.n	801159e <_svfiprintf_r+0x1d2>
 8011530:	4b21      	ldr	r3, [pc, #132]	@ (80115b8 <_svfiprintf_r+0x1ec>)
 8011532:	bb1b      	cbnz	r3, 801157c <_svfiprintf_r+0x1b0>
 8011534:	9b03      	ldr	r3, [sp, #12]
 8011536:	3307      	adds	r3, #7
 8011538:	f023 0307 	bic.w	r3, r3, #7
 801153c:	3308      	adds	r3, #8
 801153e:	9303      	str	r3, [sp, #12]
 8011540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011542:	4433      	add	r3, r6
 8011544:	9309      	str	r3, [sp, #36]	@ 0x24
 8011546:	e76a      	b.n	801141e <_svfiprintf_r+0x52>
 8011548:	fb0c 3202 	mla	r2, ip, r2, r3
 801154c:	460c      	mov	r4, r1
 801154e:	2001      	movs	r0, #1
 8011550:	e7a8      	b.n	80114a4 <_svfiprintf_r+0xd8>
 8011552:	2300      	movs	r3, #0
 8011554:	3401      	adds	r4, #1
 8011556:	9305      	str	r3, [sp, #20]
 8011558:	4619      	mov	r1, r3
 801155a:	f04f 0c0a 	mov.w	ip, #10
 801155e:	4620      	mov	r0, r4
 8011560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011564:	3a30      	subs	r2, #48	@ 0x30
 8011566:	2a09      	cmp	r2, #9
 8011568:	d903      	bls.n	8011572 <_svfiprintf_r+0x1a6>
 801156a:	2b00      	cmp	r3, #0
 801156c:	d0c6      	beq.n	80114fc <_svfiprintf_r+0x130>
 801156e:	9105      	str	r1, [sp, #20]
 8011570:	e7c4      	b.n	80114fc <_svfiprintf_r+0x130>
 8011572:	fb0c 2101 	mla	r1, ip, r1, r2
 8011576:	4604      	mov	r4, r0
 8011578:	2301      	movs	r3, #1
 801157a:	e7f0      	b.n	801155e <_svfiprintf_r+0x192>
 801157c:	ab03      	add	r3, sp, #12
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	462a      	mov	r2, r5
 8011582:	4b0e      	ldr	r3, [pc, #56]	@ (80115bc <_svfiprintf_r+0x1f0>)
 8011584:	a904      	add	r1, sp, #16
 8011586:	4638      	mov	r0, r7
 8011588:	f7fd fd5a 	bl	800f040 <_printf_float>
 801158c:	1c42      	adds	r2, r0, #1
 801158e:	4606      	mov	r6, r0
 8011590:	d1d6      	bne.n	8011540 <_svfiprintf_r+0x174>
 8011592:	89ab      	ldrh	r3, [r5, #12]
 8011594:	065b      	lsls	r3, r3, #25
 8011596:	f53f af2d 	bmi.w	80113f4 <_svfiprintf_r+0x28>
 801159a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801159c:	e72c      	b.n	80113f8 <_svfiprintf_r+0x2c>
 801159e:	ab03      	add	r3, sp, #12
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	462a      	mov	r2, r5
 80115a4:	4b05      	ldr	r3, [pc, #20]	@ (80115bc <_svfiprintf_r+0x1f0>)
 80115a6:	a904      	add	r1, sp, #16
 80115a8:	4638      	mov	r0, r7
 80115aa:	f7fd ffe1 	bl	800f570 <_printf_i>
 80115ae:	e7ed      	b.n	801158c <_svfiprintf_r+0x1c0>
 80115b0:	08013610 	.word	0x08013610
 80115b4:	0801361a 	.word	0x0801361a
 80115b8:	0800f041 	.word	0x0800f041
 80115bc:	08011315 	.word	0x08011315
 80115c0:	08013616 	.word	0x08013616

080115c4 <__sfputc_r>:
 80115c4:	6893      	ldr	r3, [r2, #8]
 80115c6:	3b01      	subs	r3, #1
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	b410      	push	{r4}
 80115cc:	6093      	str	r3, [r2, #8]
 80115ce:	da08      	bge.n	80115e2 <__sfputc_r+0x1e>
 80115d0:	6994      	ldr	r4, [r2, #24]
 80115d2:	42a3      	cmp	r3, r4
 80115d4:	db01      	blt.n	80115da <__sfputc_r+0x16>
 80115d6:	290a      	cmp	r1, #10
 80115d8:	d103      	bne.n	80115e2 <__sfputc_r+0x1e>
 80115da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115de:	f7fe ba90 	b.w	800fb02 <__swbuf_r>
 80115e2:	6813      	ldr	r3, [r2, #0]
 80115e4:	1c58      	adds	r0, r3, #1
 80115e6:	6010      	str	r0, [r2, #0]
 80115e8:	7019      	strb	r1, [r3, #0]
 80115ea:	4608      	mov	r0, r1
 80115ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <__sfputs_r>:
 80115f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115f4:	4606      	mov	r6, r0
 80115f6:	460f      	mov	r7, r1
 80115f8:	4614      	mov	r4, r2
 80115fa:	18d5      	adds	r5, r2, r3
 80115fc:	42ac      	cmp	r4, r5
 80115fe:	d101      	bne.n	8011604 <__sfputs_r+0x12>
 8011600:	2000      	movs	r0, #0
 8011602:	e007      	b.n	8011614 <__sfputs_r+0x22>
 8011604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011608:	463a      	mov	r2, r7
 801160a:	4630      	mov	r0, r6
 801160c:	f7ff ffda 	bl	80115c4 <__sfputc_r>
 8011610:	1c43      	adds	r3, r0, #1
 8011612:	d1f3      	bne.n	80115fc <__sfputs_r+0xa>
 8011614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011618 <_vfiprintf_r>:
 8011618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801161c:	460d      	mov	r5, r1
 801161e:	b09d      	sub	sp, #116	@ 0x74
 8011620:	4614      	mov	r4, r2
 8011622:	4698      	mov	r8, r3
 8011624:	4606      	mov	r6, r0
 8011626:	b118      	cbz	r0, 8011630 <_vfiprintf_r+0x18>
 8011628:	6a03      	ldr	r3, [r0, #32]
 801162a:	b90b      	cbnz	r3, 8011630 <_vfiprintf_r+0x18>
 801162c:	f7fe f94c 	bl	800f8c8 <__sinit>
 8011630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011632:	07d9      	lsls	r1, r3, #31
 8011634:	d405      	bmi.n	8011642 <_vfiprintf_r+0x2a>
 8011636:	89ab      	ldrh	r3, [r5, #12]
 8011638:	059a      	lsls	r2, r3, #22
 801163a:	d402      	bmi.n	8011642 <_vfiprintf_r+0x2a>
 801163c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801163e:	f7fe fb88 	bl	800fd52 <__retarget_lock_acquire_recursive>
 8011642:	89ab      	ldrh	r3, [r5, #12]
 8011644:	071b      	lsls	r3, r3, #28
 8011646:	d501      	bpl.n	801164c <_vfiprintf_r+0x34>
 8011648:	692b      	ldr	r3, [r5, #16]
 801164a:	b99b      	cbnz	r3, 8011674 <_vfiprintf_r+0x5c>
 801164c:	4629      	mov	r1, r5
 801164e:	4630      	mov	r0, r6
 8011650:	f7fe fa96 	bl	800fb80 <__swsetup_r>
 8011654:	b170      	cbz	r0, 8011674 <_vfiprintf_r+0x5c>
 8011656:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011658:	07dc      	lsls	r4, r3, #31
 801165a:	d504      	bpl.n	8011666 <_vfiprintf_r+0x4e>
 801165c:	f04f 30ff 	mov.w	r0, #4294967295
 8011660:	b01d      	add	sp, #116	@ 0x74
 8011662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011666:	89ab      	ldrh	r3, [r5, #12]
 8011668:	0598      	lsls	r0, r3, #22
 801166a:	d4f7      	bmi.n	801165c <_vfiprintf_r+0x44>
 801166c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801166e:	f7fe fb71 	bl	800fd54 <__retarget_lock_release_recursive>
 8011672:	e7f3      	b.n	801165c <_vfiprintf_r+0x44>
 8011674:	2300      	movs	r3, #0
 8011676:	9309      	str	r3, [sp, #36]	@ 0x24
 8011678:	2320      	movs	r3, #32
 801167a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801167e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011682:	2330      	movs	r3, #48	@ 0x30
 8011684:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011834 <_vfiprintf_r+0x21c>
 8011688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801168c:	f04f 0901 	mov.w	r9, #1
 8011690:	4623      	mov	r3, r4
 8011692:	469a      	mov	sl, r3
 8011694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011698:	b10a      	cbz	r2, 801169e <_vfiprintf_r+0x86>
 801169a:	2a25      	cmp	r2, #37	@ 0x25
 801169c:	d1f9      	bne.n	8011692 <_vfiprintf_r+0x7a>
 801169e:	ebba 0b04 	subs.w	fp, sl, r4
 80116a2:	d00b      	beq.n	80116bc <_vfiprintf_r+0xa4>
 80116a4:	465b      	mov	r3, fp
 80116a6:	4622      	mov	r2, r4
 80116a8:	4629      	mov	r1, r5
 80116aa:	4630      	mov	r0, r6
 80116ac:	f7ff ffa1 	bl	80115f2 <__sfputs_r>
 80116b0:	3001      	adds	r0, #1
 80116b2:	f000 80a7 	beq.w	8011804 <_vfiprintf_r+0x1ec>
 80116b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116b8:	445a      	add	r2, fp
 80116ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80116bc:	f89a 3000 	ldrb.w	r3, [sl]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	f000 809f 	beq.w	8011804 <_vfiprintf_r+0x1ec>
 80116c6:	2300      	movs	r3, #0
 80116c8:	f04f 32ff 	mov.w	r2, #4294967295
 80116cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116d0:	f10a 0a01 	add.w	sl, sl, #1
 80116d4:	9304      	str	r3, [sp, #16]
 80116d6:	9307      	str	r3, [sp, #28]
 80116d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80116de:	4654      	mov	r4, sl
 80116e0:	2205      	movs	r2, #5
 80116e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116e6:	4853      	ldr	r0, [pc, #332]	@ (8011834 <_vfiprintf_r+0x21c>)
 80116e8:	f7ee fd4a 	bl	8000180 <memchr>
 80116ec:	9a04      	ldr	r2, [sp, #16]
 80116ee:	b9d8      	cbnz	r0, 8011728 <_vfiprintf_r+0x110>
 80116f0:	06d1      	lsls	r1, r2, #27
 80116f2:	bf44      	itt	mi
 80116f4:	2320      	movmi	r3, #32
 80116f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116fa:	0713      	lsls	r3, r2, #28
 80116fc:	bf44      	itt	mi
 80116fe:	232b      	movmi	r3, #43	@ 0x2b
 8011700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011704:	f89a 3000 	ldrb.w	r3, [sl]
 8011708:	2b2a      	cmp	r3, #42	@ 0x2a
 801170a:	d015      	beq.n	8011738 <_vfiprintf_r+0x120>
 801170c:	9a07      	ldr	r2, [sp, #28]
 801170e:	4654      	mov	r4, sl
 8011710:	2000      	movs	r0, #0
 8011712:	f04f 0c0a 	mov.w	ip, #10
 8011716:	4621      	mov	r1, r4
 8011718:	f811 3b01 	ldrb.w	r3, [r1], #1
 801171c:	3b30      	subs	r3, #48	@ 0x30
 801171e:	2b09      	cmp	r3, #9
 8011720:	d94b      	bls.n	80117ba <_vfiprintf_r+0x1a2>
 8011722:	b1b0      	cbz	r0, 8011752 <_vfiprintf_r+0x13a>
 8011724:	9207      	str	r2, [sp, #28]
 8011726:	e014      	b.n	8011752 <_vfiprintf_r+0x13a>
 8011728:	eba0 0308 	sub.w	r3, r0, r8
 801172c:	fa09 f303 	lsl.w	r3, r9, r3
 8011730:	4313      	orrs	r3, r2
 8011732:	9304      	str	r3, [sp, #16]
 8011734:	46a2      	mov	sl, r4
 8011736:	e7d2      	b.n	80116de <_vfiprintf_r+0xc6>
 8011738:	9b03      	ldr	r3, [sp, #12]
 801173a:	1d19      	adds	r1, r3, #4
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	9103      	str	r1, [sp, #12]
 8011740:	2b00      	cmp	r3, #0
 8011742:	bfbb      	ittet	lt
 8011744:	425b      	neglt	r3, r3
 8011746:	f042 0202 	orrlt.w	r2, r2, #2
 801174a:	9307      	strge	r3, [sp, #28]
 801174c:	9307      	strlt	r3, [sp, #28]
 801174e:	bfb8      	it	lt
 8011750:	9204      	strlt	r2, [sp, #16]
 8011752:	7823      	ldrb	r3, [r4, #0]
 8011754:	2b2e      	cmp	r3, #46	@ 0x2e
 8011756:	d10a      	bne.n	801176e <_vfiprintf_r+0x156>
 8011758:	7863      	ldrb	r3, [r4, #1]
 801175a:	2b2a      	cmp	r3, #42	@ 0x2a
 801175c:	d132      	bne.n	80117c4 <_vfiprintf_r+0x1ac>
 801175e:	9b03      	ldr	r3, [sp, #12]
 8011760:	1d1a      	adds	r2, r3, #4
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	9203      	str	r2, [sp, #12]
 8011766:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801176a:	3402      	adds	r4, #2
 801176c:	9305      	str	r3, [sp, #20]
 801176e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011844 <_vfiprintf_r+0x22c>
 8011772:	7821      	ldrb	r1, [r4, #0]
 8011774:	2203      	movs	r2, #3
 8011776:	4650      	mov	r0, sl
 8011778:	f7ee fd02 	bl	8000180 <memchr>
 801177c:	b138      	cbz	r0, 801178e <_vfiprintf_r+0x176>
 801177e:	9b04      	ldr	r3, [sp, #16]
 8011780:	eba0 000a 	sub.w	r0, r0, sl
 8011784:	2240      	movs	r2, #64	@ 0x40
 8011786:	4082      	lsls	r2, r0
 8011788:	4313      	orrs	r3, r2
 801178a:	3401      	adds	r4, #1
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011792:	4829      	ldr	r0, [pc, #164]	@ (8011838 <_vfiprintf_r+0x220>)
 8011794:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011798:	2206      	movs	r2, #6
 801179a:	f7ee fcf1 	bl	8000180 <memchr>
 801179e:	2800      	cmp	r0, #0
 80117a0:	d03f      	beq.n	8011822 <_vfiprintf_r+0x20a>
 80117a2:	4b26      	ldr	r3, [pc, #152]	@ (801183c <_vfiprintf_r+0x224>)
 80117a4:	bb1b      	cbnz	r3, 80117ee <_vfiprintf_r+0x1d6>
 80117a6:	9b03      	ldr	r3, [sp, #12]
 80117a8:	3307      	adds	r3, #7
 80117aa:	f023 0307 	bic.w	r3, r3, #7
 80117ae:	3308      	adds	r3, #8
 80117b0:	9303      	str	r3, [sp, #12]
 80117b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117b4:	443b      	add	r3, r7
 80117b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80117b8:	e76a      	b.n	8011690 <_vfiprintf_r+0x78>
 80117ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80117be:	460c      	mov	r4, r1
 80117c0:	2001      	movs	r0, #1
 80117c2:	e7a8      	b.n	8011716 <_vfiprintf_r+0xfe>
 80117c4:	2300      	movs	r3, #0
 80117c6:	3401      	adds	r4, #1
 80117c8:	9305      	str	r3, [sp, #20]
 80117ca:	4619      	mov	r1, r3
 80117cc:	f04f 0c0a 	mov.w	ip, #10
 80117d0:	4620      	mov	r0, r4
 80117d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117d6:	3a30      	subs	r2, #48	@ 0x30
 80117d8:	2a09      	cmp	r2, #9
 80117da:	d903      	bls.n	80117e4 <_vfiprintf_r+0x1cc>
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d0c6      	beq.n	801176e <_vfiprintf_r+0x156>
 80117e0:	9105      	str	r1, [sp, #20]
 80117e2:	e7c4      	b.n	801176e <_vfiprintf_r+0x156>
 80117e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80117e8:	4604      	mov	r4, r0
 80117ea:	2301      	movs	r3, #1
 80117ec:	e7f0      	b.n	80117d0 <_vfiprintf_r+0x1b8>
 80117ee:	ab03      	add	r3, sp, #12
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	462a      	mov	r2, r5
 80117f4:	4b12      	ldr	r3, [pc, #72]	@ (8011840 <_vfiprintf_r+0x228>)
 80117f6:	a904      	add	r1, sp, #16
 80117f8:	4630      	mov	r0, r6
 80117fa:	f7fd fc21 	bl	800f040 <_printf_float>
 80117fe:	4607      	mov	r7, r0
 8011800:	1c78      	adds	r0, r7, #1
 8011802:	d1d6      	bne.n	80117b2 <_vfiprintf_r+0x19a>
 8011804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011806:	07d9      	lsls	r1, r3, #31
 8011808:	d405      	bmi.n	8011816 <_vfiprintf_r+0x1fe>
 801180a:	89ab      	ldrh	r3, [r5, #12]
 801180c:	059a      	lsls	r2, r3, #22
 801180e:	d402      	bmi.n	8011816 <_vfiprintf_r+0x1fe>
 8011810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011812:	f7fe fa9f 	bl	800fd54 <__retarget_lock_release_recursive>
 8011816:	89ab      	ldrh	r3, [r5, #12]
 8011818:	065b      	lsls	r3, r3, #25
 801181a:	f53f af1f 	bmi.w	801165c <_vfiprintf_r+0x44>
 801181e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011820:	e71e      	b.n	8011660 <_vfiprintf_r+0x48>
 8011822:	ab03      	add	r3, sp, #12
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	462a      	mov	r2, r5
 8011828:	4b05      	ldr	r3, [pc, #20]	@ (8011840 <_vfiprintf_r+0x228>)
 801182a:	a904      	add	r1, sp, #16
 801182c:	4630      	mov	r0, r6
 801182e:	f7fd fe9f 	bl	800f570 <_printf_i>
 8011832:	e7e4      	b.n	80117fe <_vfiprintf_r+0x1e6>
 8011834:	08013610 	.word	0x08013610
 8011838:	0801361a 	.word	0x0801361a
 801183c:	0800f041 	.word	0x0800f041
 8011840:	080115f3 	.word	0x080115f3
 8011844:	08013616 	.word	0x08013616

08011848 <__sflush_r>:
 8011848:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011850:	0716      	lsls	r6, r2, #28
 8011852:	4605      	mov	r5, r0
 8011854:	460c      	mov	r4, r1
 8011856:	d454      	bmi.n	8011902 <__sflush_r+0xba>
 8011858:	684b      	ldr	r3, [r1, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	dc02      	bgt.n	8011864 <__sflush_r+0x1c>
 801185e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011860:	2b00      	cmp	r3, #0
 8011862:	dd48      	ble.n	80118f6 <__sflush_r+0xae>
 8011864:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011866:	2e00      	cmp	r6, #0
 8011868:	d045      	beq.n	80118f6 <__sflush_r+0xae>
 801186a:	2300      	movs	r3, #0
 801186c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011870:	682f      	ldr	r7, [r5, #0]
 8011872:	6a21      	ldr	r1, [r4, #32]
 8011874:	602b      	str	r3, [r5, #0]
 8011876:	d030      	beq.n	80118da <__sflush_r+0x92>
 8011878:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801187a:	89a3      	ldrh	r3, [r4, #12]
 801187c:	0759      	lsls	r1, r3, #29
 801187e:	d505      	bpl.n	801188c <__sflush_r+0x44>
 8011880:	6863      	ldr	r3, [r4, #4]
 8011882:	1ad2      	subs	r2, r2, r3
 8011884:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011886:	b10b      	cbz	r3, 801188c <__sflush_r+0x44>
 8011888:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801188a:	1ad2      	subs	r2, r2, r3
 801188c:	2300      	movs	r3, #0
 801188e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011890:	6a21      	ldr	r1, [r4, #32]
 8011892:	4628      	mov	r0, r5
 8011894:	47b0      	blx	r6
 8011896:	1c43      	adds	r3, r0, #1
 8011898:	89a3      	ldrh	r3, [r4, #12]
 801189a:	d106      	bne.n	80118aa <__sflush_r+0x62>
 801189c:	6829      	ldr	r1, [r5, #0]
 801189e:	291d      	cmp	r1, #29
 80118a0:	d82b      	bhi.n	80118fa <__sflush_r+0xb2>
 80118a2:	4a2a      	ldr	r2, [pc, #168]	@ (801194c <__sflush_r+0x104>)
 80118a4:	410a      	asrs	r2, r1
 80118a6:	07d6      	lsls	r6, r2, #31
 80118a8:	d427      	bmi.n	80118fa <__sflush_r+0xb2>
 80118aa:	2200      	movs	r2, #0
 80118ac:	6062      	str	r2, [r4, #4]
 80118ae:	04d9      	lsls	r1, r3, #19
 80118b0:	6922      	ldr	r2, [r4, #16]
 80118b2:	6022      	str	r2, [r4, #0]
 80118b4:	d504      	bpl.n	80118c0 <__sflush_r+0x78>
 80118b6:	1c42      	adds	r2, r0, #1
 80118b8:	d101      	bne.n	80118be <__sflush_r+0x76>
 80118ba:	682b      	ldr	r3, [r5, #0]
 80118bc:	b903      	cbnz	r3, 80118c0 <__sflush_r+0x78>
 80118be:	6560      	str	r0, [r4, #84]	@ 0x54
 80118c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118c2:	602f      	str	r7, [r5, #0]
 80118c4:	b1b9      	cbz	r1, 80118f6 <__sflush_r+0xae>
 80118c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118ca:	4299      	cmp	r1, r3
 80118cc:	d002      	beq.n	80118d4 <__sflush_r+0x8c>
 80118ce:	4628      	mov	r0, r5
 80118d0:	f7ff f89e 	bl	8010a10 <_free_r>
 80118d4:	2300      	movs	r3, #0
 80118d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80118d8:	e00d      	b.n	80118f6 <__sflush_r+0xae>
 80118da:	2301      	movs	r3, #1
 80118dc:	4628      	mov	r0, r5
 80118de:	47b0      	blx	r6
 80118e0:	4602      	mov	r2, r0
 80118e2:	1c50      	adds	r0, r2, #1
 80118e4:	d1c9      	bne.n	801187a <__sflush_r+0x32>
 80118e6:	682b      	ldr	r3, [r5, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d0c6      	beq.n	801187a <__sflush_r+0x32>
 80118ec:	2b1d      	cmp	r3, #29
 80118ee:	d001      	beq.n	80118f4 <__sflush_r+0xac>
 80118f0:	2b16      	cmp	r3, #22
 80118f2:	d11e      	bne.n	8011932 <__sflush_r+0xea>
 80118f4:	602f      	str	r7, [r5, #0]
 80118f6:	2000      	movs	r0, #0
 80118f8:	e022      	b.n	8011940 <__sflush_r+0xf8>
 80118fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118fe:	b21b      	sxth	r3, r3
 8011900:	e01b      	b.n	801193a <__sflush_r+0xf2>
 8011902:	690f      	ldr	r7, [r1, #16]
 8011904:	2f00      	cmp	r7, #0
 8011906:	d0f6      	beq.n	80118f6 <__sflush_r+0xae>
 8011908:	0793      	lsls	r3, r2, #30
 801190a:	680e      	ldr	r6, [r1, #0]
 801190c:	bf08      	it	eq
 801190e:	694b      	ldreq	r3, [r1, #20]
 8011910:	600f      	str	r7, [r1, #0]
 8011912:	bf18      	it	ne
 8011914:	2300      	movne	r3, #0
 8011916:	eba6 0807 	sub.w	r8, r6, r7
 801191a:	608b      	str	r3, [r1, #8]
 801191c:	f1b8 0f00 	cmp.w	r8, #0
 8011920:	dde9      	ble.n	80118f6 <__sflush_r+0xae>
 8011922:	6a21      	ldr	r1, [r4, #32]
 8011924:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011926:	4643      	mov	r3, r8
 8011928:	463a      	mov	r2, r7
 801192a:	4628      	mov	r0, r5
 801192c:	47b0      	blx	r6
 801192e:	2800      	cmp	r0, #0
 8011930:	dc08      	bgt.n	8011944 <__sflush_r+0xfc>
 8011932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801193a:	81a3      	strh	r3, [r4, #12]
 801193c:	f04f 30ff 	mov.w	r0, #4294967295
 8011940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011944:	4407      	add	r7, r0
 8011946:	eba8 0800 	sub.w	r8, r8, r0
 801194a:	e7e7      	b.n	801191c <__sflush_r+0xd4>
 801194c:	dfbffffe 	.word	0xdfbffffe

08011950 <_fflush_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	690b      	ldr	r3, [r1, #16]
 8011954:	4605      	mov	r5, r0
 8011956:	460c      	mov	r4, r1
 8011958:	b913      	cbnz	r3, 8011960 <_fflush_r+0x10>
 801195a:	2500      	movs	r5, #0
 801195c:	4628      	mov	r0, r5
 801195e:	bd38      	pop	{r3, r4, r5, pc}
 8011960:	b118      	cbz	r0, 801196a <_fflush_r+0x1a>
 8011962:	6a03      	ldr	r3, [r0, #32]
 8011964:	b90b      	cbnz	r3, 801196a <_fflush_r+0x1a>
 8011966:	f7fd ffaf 	bl	800f8c8 <__sinit>
 801196a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d0f3      	beq.n	801195a <_fflush_r+0xa>
 8011972:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011974:	07d0      	lsls	r0, r2, #31
 8011976:	d404      	bmi.n	8011982 <_fflush_r+0x32>
 8011978:	0599      	lsls	r1, r3, #22
 801197a:	d402      	bmi.n	8011982 <_fflush_r+0x32>
 801197c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801197e:	f7fe f9e8 	bl	800fd52 <__retarget_lock_acquire_recursive>
 8011982:	4628      	mov	r0, r5
 8011984:	4621      	mov	r1, r4
 8011986:	f7ff ff5f 	bl	8011848 <__sflush_r>
 801198a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801198c:	07da      	lsls	r2, r3, #31
 801198e:	4605      	mov	r5, r0
 8011990:	d4e4      	bmi.n	801195c <_fflush_r+0xc>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	059b      	lsls	r3, r3, #22
 8011996:	d4e1      	bmi.n	801195c <_fflush_r+0xc>
 8011998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801199a:	f7fe f9db 	bl	800fd54 <__retarget_lock_release_recursive>
 801199e:	e7dd      	b.n	801195c <_fflush_r+0xc>

080119a0 <__swhatbuf_r>:
 80119a0:	b570      	push	{r4, r5, r6, lr}
 80119a2:	460c      	mov	r4, r1
 80119a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119a8:	2900      	cmp	r1, #0
 80119aa:	b096      	sub	sp, #88	@ 0x58
 80119ac:	4615      	mov	r5, r2
 80119ae:	461e      	mov	r6, r3
 80119b0:	da0d      	bge.n	80119ce <__swhatbuf_r+0x2e>
 80119b2:	89a3      	ldrh	r3, [r4, #12]
 80119b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80119b8:	f04f 0100 	mov.w	r1, #0
 80119bc:	bf14      	ite	ne
 80119be:	2340      	movne	r3, #64	@ 0x40
 80119c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80119c4:	2000      	movs	r0, #0
 80119c6:	6031      	str	r1, [r6, #0]
 80119c8:	602b      	str	r3, [r5, #0]
 80119ca:	b016      	add	sp, #88	@ 0x58
 80119cc:	bd70      	pop	{r4, r5, r6, pc}
 80119ce:	466a      	mov	r2, sp
 80119d0:	f000 f870 	bl	8011ab4 <_fstat_r>
 80119d4:	2800      	cmp	r0, #0
 80119d6:	dbec      	blt.n	80119b2 <__swhatbuf_r+0x12>
 80119d8:	9901      	ldr	r1, [sp, #4]
 80119da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80119de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80119e2:	4259      	negs	r1, r3
 80119e4:	4159      	adcs	r1, r3
 80119e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119ea:	e7eb      	b.n	80119c4 <__swhatbuf_r+0x24>

080119ec <__smakebuf_r>:
 80119ec:	898b      	ldrh	r3, [r1, #12]
 80119ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119f0:	079d      	lsls	r5, r3, #30
 80119f2:	4606      	mov	r6, r0
 80119f4:	460c      	mov	r4, r1
 80119f6:	d507      	bpl.n	8011a08 <__smakebuf_r+0x1c>
 80119f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	6123      	str	r3, [r4, #16]
 8011a00:	2301      	movs	r3, #1
 8011a02:	6163      	str	r3, [r4, #20]
 8011a04:	b003      	add	sp, #12
 8011a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a08:	ab01      	add	r3, sp, #4
 8011a0a:	466a      	mov	r2, sp
 8011a0c:	f7ff ffc8 	bl	80119a0 <__swhatbuf_r>
 8011a10:	9f00      	ldr	r7, [sp, #0]
 8011a12:	4605      	mov	r5, r0
 8011a14:	4639      	mov	r1, r7
 8011a16:	4630      	mov	r0, r6
 8011a18:	f7ff f86e 	bl	8010af8 <_malloc_r>
 8011a1c:	b948      	cbnz	r0, 8011a32 <__smakebuf_r+0x46>
 8011a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a22:	059a      	lsls	r2, r3, #22
 8011a24:	d4ee      	bmi.n	8011a04 <__smakebuf_r+0x18>
 8011a26:	f023 0303 	bic.w	r3, r3, #3
 8011a2a:	f043 0302 	orr.w	r3, r3, #2
 8011a2e:	81a3      	strh	r3, [r4, #12]
 8011a30:	e7e2      	b.n	80119f8 <__smakebuf_r+0xc>
 8011a32:	89a3      	ldrh	r3, [r4, #12]
 8011a34:	6020      	str	r0, [r4, #0]
 8011a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a3a:	81a3      	strh	r3, [r4, #12]
 8011a3c:	9b01      	ldr	r3, [sp, #4]
 8011a3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011a42:	b15b      	cbz	r3, 8011a5c <__smakebuf_r+0x70>
 8011a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a48:	4630      	mov	r0, r6
 8011a4a:	f000 f845 	bl	8011ad8 <_isatty_r>
 8011a4e:	b128      	cbz	r0, 8011a5c <__smakebuf_r+0x70>
 8011a50:	89a3      	ldrh	r3, [r4, #12]
 8011a52:	f023 0303 	bic.w	r3, r3, #3
 8011a56:	f043 0301 	orr.w	r3, r3, #1
 8011a5a:	81a3      	strh	r3, [r4, #12]
 8011a5c:	89a3      	ldrh	r3, [r4, #12]
 8011a5e:	431d      	orrs	r5, r3
 8011a60:	81a5      	strh	r5, [r4, #12]
 8011a62:	e7cf      	b.n	8011a04 <__smakebuf_r+0x18>

08011a64 <memmove>:
 8011a64:	4288      	cmp	r0, r1
 8011a66:	b510      	push	{r4, lr}
 8011a68:	eb01 0402 	add.w	r4, r1, r2
 8011a6c:	d902      	bls.n	8011a74 <memmove+0x10>
 8011a6e:	4284      	cmp	r4, r0
 8011a70:	4623      	mov	r3, r4
 8011a72:	d807      	bhi.n	8011a84 <memmove+0x20>
 8011a74:	1e43      	subs	r3, r0, #1
 8011a76:	42a1      	cmp	r1, r4
 8011a78:	d008      	beq.n	8011a8c <memmove+0x28>
 8011a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a82:	e7f8      	b.n	8011a76 <memmove+0x12>
 8011a84:	4402      	add	r2, r0
 8011a86:	4601      	mov	r1, r0
 8011a88:	428a      	cmp	r2, r1
 8011a8a:	d100      	bne.n	8011a8e <memmove+0x2a>
 8011a8c:	bd10      	pop	{r4, pc}
 8011a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a96:	e7f7      	b.n	8011a88 <memmove+0x24>

08011a98 <strchr>:
 8011a98:	b2c9      	uxtb	r1, r1
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011aa2:	b112      	cbz	r2, 8011aaa <strchr+0x12>
 8011aa4:	428a      	cmp	r2, r1
 8011aa6:	d1f9      	bne.n	8011a9c <strchr+0x4>
 8011aa8:	4770      	bx	lr
 8011aaa:	2900      	cmp	r1, #0
 8011aac:	bf18      	it	ne
 8011aae:	2000      	movne	r0, #0
 8011ab0:	4770      	bx	lr
	...

08011ab4 <_fstat_r>:
 8011ab4:	b538      	push	{r3, r4, r5, lr}
 8011ab6:	4d07      	ldr	r5, [pc, #28]	@ (8011ad4 <_fstat_r+0x20>)
 8011ab8:	2300      	movs	r3, #0
 8011aba:	4604      	mov	r4, r0
 8011abc:	4608      	mov	r0, r1
 8011abe:	4611      	mov	r1, r2
 8011ac0:	602b      	str	r3, [r5, #0]
 8011ac2:	f7f2 f8b5 	bl	8003c30 <_fstat>
 8011ac6:	1c43      	adds	r3, r0, #1
 8011ac8:	d102      	bne.n	8011ad0 <_fstat_r+0x1c>
 8011aca:	682b      	ldr	r3, [r5, #0]
 8011acc:	b103      	cbz	r3, 8011ad0 <_fstat_r+0x1c>
 8011ace:	6023      	str	r3, [r4, #0]
 8011ad0:	bd38      	pop	{r3, r4, r5, pc}
 8011ad2:	bf00      	nop
 8011ad4:	20001964 	.word	0x20001964

08011ad8 <_isatty_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d06      	ldr	r5, [pc, #24]	@ (8011af4 <_isatty_r+0x1c>)
 8011adc:	2300      	movs	r3, #0
 8011ade:	4604      	mov	r4, r0
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	602b      	str	r3, [r5, #0]
 8011ae4:	f7f2 f8b4 	bl	8003c50 <_isatty>
 8011ae8:	1c43      	adds	r3, r0, #1
 8011aea:	d102      	bne.n	8011af2 <_isatty_r+0x1a>
 8011aec:	682b      	ldr	r3, [r5, #0]
 8011aee:	b103      	cbz	r3, 8011af2 <_isatty_r+0x1a>
 8011af0:	6023      	str	r3, [r4, #0]
 8011af2:	bd38      	pop	{r3, r4, r5, pc}
 8011af4:	20001964 	.word	0x20001964

08011af8 <_sbrk_r>:
 8011af8:	b538      	push	{r3, r4, r5, lr}
 8011afa:	4d06      	ldr	r5, [pc, #24]	@ (8011b14 <_sbrk_r+0x1c>)
 8011afc:	2300      	movs	r3, #0
 8011afe:	4604      	mov	r4, r0
 8011b00:	4608      	mov	r0, r1
 8011b02:	602b      	str	r3, [r5, #0]
 8011b04:	f7f2 f8bc 	bl	8003c80 <_sbrk>
 8011b08:	1c43      	adds	r3, r0, #1
 8011b0a:	d102      	bne.n	8011b12 <_sbrk_r+0x1a>
 8011b0c:	682b      	ldr	r3, [r5, #0]
 8011b0e:	b103      	cbz	r3, 8011b12 <_sbrk_r+0x1a>
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	bd38      	pop	{r3, r4, r5, pc}
 8011b14:	20001964 	.word	0x20001964

08011b18 <__assert_func>:
 8011b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b1a:	4614      	mov	r4, r2
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	4b09      	ldr	r3, [pc, #36]	@ (8011b44 <__assert_func+0x2c>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	4605      	mov	r5, r0
 8011b24:	68d8      	ldr	r0, [r3, #12]
 8011b26:	b954      	cbnz	r4, 8011b3e <__assert_func+0x26>
 8011b28:	4b07      	ldr	r3, [pc, #28]	@ (8011b48 <__assert_func+0x30>)
 8011b2a:	461c      	mov	r4, r3
 8011b2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b30:	9100      	str	r1, [sp, #0]
 8011b32:	462b      	mov	r3, r5
 8011b34:	4905      	ldr	r1, [pc, #20]	@ (8011b4c <__assert_func+0x34>)
 8011b36:	f000 f86f 	bl	8011c18 <fiprintf>
 8011b3a:	f000 f87f 	bl	8011c3c <abort>
 8011b3e:	4b04      	ldr	r3, [pc, #16]	@ (8011b50 <__assert_func+0x38>)
 8011b40:	e7f4      	b.n	8011b2c <__assert_func+0x14>
 8011b42:	bf00      	nop
 8011b44:	20000038 	.word	0x20000038
 8011b48:	08013666 	.word	0x08013666
 8011b4c:	08013638 	.word	0x08013638
 8011b50:	0801362b 	.word	0x0801362b

08011b54 <_calloc_r>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	fba1 5402 	umull	r5, r4, r1, r2
 8011b5a:	b93c      	cbnz	r4, 8011b6c <_calloc_r+0x18>
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	f7fe ffcb 	bl	8010af8 <_malloc_r>
 8011b62:	4606      	mov	r6, r0
 8011b64:	b928      	cbnz	r0, 8011b72 <_calloc_r+0x1e>
 8011b66:	2600      	movs	r6, #0
 8011b68:	4630      	mov	r0, r6
 8011b6a:	bd70      	pop	{r4, r5, r6, pc}
 8011b6c:	220c      	movs	r2, #12
 8011b6e:	6002      	str	r2, [r0, #0]
 8011b70:	e7f9      	b.n	8011b66 <_calloc_r+0x12>
 8011b72:	462a      	mov	r2, r5
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7fe f859 	bl	800fc2c <memset>
 8011b7a:	e7f5      	b.n	8011b68 <_calloc_r+0x14>

08011b7c <__ascii_mbtowc>:
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	b901      	cbnz	r1, 8011b82 <__ascii_mbtowc+0x6>
 8011b80:	a901      	add	r1, sp, #4
 8011b82:	b142      	cbz	r2, 8011b96 <__ascii_mbtowc+0x1a>
 8011b84:	b14b      	cbz	r3, 8011b9a <__ascii_mbtowc+0x1e>
 8011b86:	7813      	ldrb	r3, [r2, #0]
 8011b88:	600b      	str	r3, [r1, #0]
 8011b8a:	7812      	ldrb	r2, [r2, #0]
 8011b8c:	1e10      	subs	r0, r2, #0
 8011b8e:	bf18      	it	ne
 8011b90:	2001      	movne	r0, #1
 8011b92:	b002      	add	sp, #8
 8011b94:	4770      	bx	lr
 8011b96:	4610      	mov	r0, r2
 8011b98:	e7fb      	b.n	8011b92 <__ascii_mbtowc+0x16>
 8011b9a:	f06f 0001 	mvn.w	r0, #1
 8011b9e:	e7f8      	b.n	8011b92 <__ascii_mbtowc+0x16>

08011ba0 <_realloc_r>:
 8011ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba4:	4680      	mov	r8, r0
 8011ba6:	4615      	mov	r5, r2
 8011ba8:	460c      	mov	r4, r1
 8011baa:	b921      	cbnz	r1, 8011bb6 <_realloc_r+0x16>
 8011bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	f7fe bfa1 	b.w	8010af8 <_malloc_r>
 8011bb6:	b92a      	cbnz	r2, 8011bc4 <_realloc_r+0x24>
 8011bb8:	f7fe ff2a 	bl	8010a10 <_free_r>
 8011bbc:	2400      	movs	r4, #0
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bc4:	f000 f841 	bl	8011c4a <_malloc_usable_size_r>
 8011bc8:	4285      	cmp	r5, r0
 8011bca:	4606      	mov	r6, r0
 8011bcc:	d802      	bhi.n	8011bd4 <_realloc_r+0x34>
 8011bce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011bd2:	d8f4      	bhi.n	8011bbe <_realloc_r+0x1e>
 8011bd4:	4629      	mov	r1, r5
 8011bd6:	4640      	mov	r0, r8
 8011bd8:	f7fe ff8e 	bl	8010af8 <_malloc_r>
 8011bdc:	4607      	mov	r7, r0
 8011bde:	2800      	cmp	r0, #0
 8011be0:	d0ec      	beq.n	8011bbc <_realloc_r+0x1c>
 8011be2:	42b5      	cmp	r5, r6
 8011be4:	462a      	mov	r2, r5
 8011be6:	4621      	mov	r1, r4
 8011be8:	bf28      	it	cs
 8011bea:	4632      	movcs	r2, r6
 8011bec:	f7fe f8b3 	bl	800fd56 <memcpy>
 8011bf0:	4621      	mov	r1, r4
 8011bf2:	4640      	mov	r0, r8
 8011bf4:	f7fe ff0c 	bl	8010a10 <_free_r>
 8011bf8:	463c      	mov	r4, r7
 8011bfa:	e7e0      	b.n	8011bbe <_realloc_r+0x1e>

08011bfc <__ascii_wctomb>:
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	4608      	mov	r0, r1
 8011c00:	b141      	cbz	r1, 8011c14 <__ascii_wctomb+0x18>
 8011c02:	2aff      	cmp	r2, #255	@ 0xff
 8011c04:	d904      	bls.n	8011c10 <__ascii_wctomb+0x14>
 8011c06:	228a      	movs	r2, #138	@ 0x8a
 8011c08:	601a      	str	r2, [r3, #0]
 8011c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c0e:	4770      	bx	lr
 8011c10:	700a      	strb	r2, [r1, #0]
 8011c12:	2001      	movs	r0, #1
 8011c14:	4770      	bx	lr
	...

08011c18 <fiprintf>:
 8011c18:	b40e      	push	{r1, r2, r3}
 8011c1a:	b503      	push	{r0, r1, lr}
 8011c1c:	4601      	mov	r1, r0
 8011c1e:	ab03      	add	r3, sp, #12
 8011c20:	4805      	ldr	r0, [pc, #20]	@ (8011c38 <fiprintf+0x20>)
 8011c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c26:	6800      	ldr	r0, [r0, #0]
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	f7ff fcf5 	bl	8011618 <_vfiprintf_r>
 8011c2e:	b002      	add	sp, #8
 8011c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c34:	b003      	add	sp, #12
 8011c36:	4770      	bx	lr
 8011c38:	20000038 	.word	0x20000038

08011c3c <abort>:
 8011c3c:	b508      	push	{r3, lr}
 8011c3e:	2006      	movs	r0, #6
 8011c40:	f000 f834 	bl	8011cac <raise>
 8011c44:	2001      	movs	r0, #1
 8011c46:	f7f1 ffbf 	bl	8003bc8 <_exit>

08011c4a <_malloc_usable_size_r>:
 8011c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c4e:	1f18      	subs	r0, r3, #4
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	bfbc      	itt	lt
 8011c54:	580b      	ldrlt	r3, [r1, r0]
 8011c56:	18c0      	addlt	r0, r0, r3
 8011c58:	4770      	bx	lr

08011c5a <_raise_r>:
 8011c5a:	291f      	cmp	r1, #31
 8011c5c:	b538      	push	{r3, r4, r5, lr}
 8011c5e:	4605      	mov	r5, r0
 8011c60:	460c      	mov	r4, r1
 8011c62:	d904      	bls.n	8011c6e <_raise_r+0x14>
 8011c64:	2316      	movs	r3, #22
 8011c66:	6003      	str	r3, [r0, #0]
 8011c68:	f04f 30ff 	mov.w	r0, #4294967295
 8011c6c:	bd38      	pop	{r3, r4, r5, pc}
 8011c6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011c70:	b112      	cbz	r2, 8011c78 <_raise_r+0x1e>
 8011c72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c76:	b94b      	cbnz	r3, 8011c8c <_raise_r+0x32>
 8011c78:	4628      	mov	r0, r5
 8011c7a:	f000 f831 	bl	8011ce0 <_getpid_r>
 8011c7e:	4622      	mov	r2, r4
 8011c80:	4601      	mov	r1, r0
 8011c82:	4628      	mov	r0, r5
 8011c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c88:	f000 b818 	b.w	8011cbc <_kill_r>
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d00a      	beq.n	8011ca6 <_raise_r+0x4c>
 8011c90:	1c59      	adds	r1, r3, #1
 8011c92:	d103      	bne.n	8011c9c <_raise_r+0x42>
 8011c94:	2316      	movs	r3, #22
 8011c96:	6003      	str	r3, [r0, #0]
 8011c98:	2001      	movs	r0, #1
 8011c9a:	e7e7      	b.n	8011c6c <_raise_r+0x12>
 8011c9c:	2100      	movs	r1, #0
 8011c9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011ca2:	4620      	mov	r0, r4
 8011ca4:	4798      	blx	r3
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	e7e0      	b.n	8011c6c <_raise_r+0x12>
	...

08011cac <raise>:
 8011cac:	4b02      	ldr	r3, [pc, #8]	@ (8011cb8 <raise+0xc>)
 8011cae:	4601      	mov	r1, r0
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f7ff bfd2 	b.w	8011c5a <_raise_r>
 8011cb6:	bf00      	nop
 8011cb8:	20000038 	.word	0x20000038

08011cbc <_kill_r>:
 8011cbc:	b538      	push	{r3, r4, r5, lr}
 8011cbe:	4d07      	ldr	r5, [pc, #28]	@ (8011cdc <_kill_r+0x20>)
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	4604      	mov	r4, r0
 8011cc4:	4608      	mov	r0, r1
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	602b      	str	r3, [r5, #0]
 8011cca:	f7f1 ff6d 	bl	8003ba8 <_kill>
 8011cce:	1c43      	adds	r3, r0, #1
 8011cd0:	d102      	bne.n	8011cd8 <_kill_r+0x1c>
 8011cd2:	682b      	ldr	r3, [r5, #0]
 8011cd4:	b103      	cbz	r3, 8011cd8 <_kill_r+0x1c>
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	bd38      	pop	{r3, r4, r5, pc}
 8011cda:	bf00      	nop
 8011cdc:	20001964 	.word	0x20001964

08011ce0 <_getpid_r>:
 8011ce0:	f7f1 bf5a 	b.w	8003b98 <_getpid>

08011ce4 <_init>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	bf00      	nop
 8011ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cea:	bc08      	pop	{r3}
 8011cec:	469e      	mov	lr, r3
 8011cee:	4770      	bx	lr

08011cf0 <_fini>:
 8011cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf2:	bf00      	nop
 8011cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cf6:	bc08      	pop	{r3}
 8011cf8:	469e      	mov	lr, r3
 8011cfa:	4770      	bx	lr
